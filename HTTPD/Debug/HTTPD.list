
HTTPD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019914  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006d74  08019ae8  08019ae8  0001aae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802085c  0802085c  00022344  2**0
                  CONTENTS
  4 .ARM          00000008  0802085c  0802085c  0002185c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020864  08020864  00022344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020864  08020864  00021864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020868  08020868  00021868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0802086c  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000204  08020a70  00022204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a4  08020b10  000222a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008f3c  20000348  08020bb0  00022348  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20009284  08020bb0  00023284  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00022344  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027e51  00000000  00000000  00022374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006746  00000000  00000000  0004a1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d60  00000000  00000000  00050910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001753  00000000  00000000  00052670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034e93  00000000  00000000  00053dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032347  00000000  00000000  00088c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001067c4  00000000  00000000  000baf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c1761  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008a80  00000000  00000000  001c17a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  001ca224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000348 	.word	0x20000348
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019acc 	.word	0x08019acc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000034c 	.word	0x2000034c
 800020c:	08019acc 	.word	0x08019acc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <LEDGREEN>:
float outtemp, outpres, outhum;
unsigned short dig_T1, dig_P1, dig_H1, dig_H3;
signed short dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9,
dig_H2, dig_H4, dig_H5, dig_H6;
const char *LEDGREEN(int index, int numParams, char *pcParam[], char *pcValue)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
	if(green == 0)
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <LEDGREEN+0x48>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <LEDGREEN+0x24>
	{
		green++;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <LEDGREEN+0x48>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <LEDGREEN+0x48>)
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e009      	b.n	8000fd0 <LEDGREEN+0x38>
	}
	else if(green == 1)
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <LEDGREEN+0x48>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d105      	bne.n	8000fd0 <LEDGREEN+0x38>
	{
		green--;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <LEDGREEN+0x48>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <LEDGREEN+0x48>)
 8000fce:	701a      	strb	r2, [r3, #0]
	}
	return "/LED.html";
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <LEDGREEN+0x4c>)
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000a18 	.word	0x20000a18
 8000fe4:	08019ae8 	.word	0x08019ae8

08000fe8 <LEDRED>:
const char *LEDRED(int LED, int numParam, char *pcParam[], char *pcValue)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
	if(red == 0)
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <LEDRED+0x48>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <LEDRED+0x24>
	{
		red++;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <LEDRED+0x48>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <LEDRED+0x48>)
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e009      	b.n	8001020 <LEDRED+0x38>
	}
	else if(red == 1)
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <LEDRED+0x48>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d105      	bne.n	8001020 <LEDRED+0x38>
	{
		red--;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <LEDRED+0x48>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <LEDRED+0x48>)
 800101e:	701a      	strb	r2, [r3, #0]
	}
	return "/LED.html";
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <LEDRED+0x4c>)
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000a1a 	.word	0x20000a1a
 8001034:	08019ae8 	.word	0x08019ae8

08001038 <LEDBLUE>:
const char *LEDBLUE(int LED, int numParams, char *pcParam[], char *pcValue)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	if(blue == 0)
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <LEDBLUE+0x48>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <LEDBLUE+0x24>
	{
		blue++;
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <LEDBLUE+0x48>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <LEDBLUE+0x48>)
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e009      	b.n	8001070 <LEDBLUE+0x38>
	}
	else if(blue == 1)
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <LEDBLUE+0x48>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <LEDBLUE+0x38>
	{
		blue--;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <LEDBLUE+0x48>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <LEDBLUE+0x48>)
 800106e:	701a      	strb	r2, [r3, #0]
	}
	return "/LED.html";
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <LEDBLUE+0x4c>)
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000a19 	.word	0x20000a19
 8001084:	08019ae8 	.word	0x08019ae8

08001088 <ssi_handler>:

static u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    switch (iIndex) {
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d019      	beq.n	80010ce <ssi_handler+0x46>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b02      	cmp	r3, #2
 800109e:	dc1e      	bgt.n	80010de <ssi_handler+0x56>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <ssi_handler+0x26>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d008      	beq.n	80010be <ssi_handler+0x36>
 80010ac:	e017      	b.n	80010de <ssi_handler+0x56>
        case 0: sprintf(pcInsert, "%s", finaltemp);
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <ssi_handler+0x60>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	490d      	ldr	r1, [pc, #52]	@ (80010ec <ssi_handler+0x64>)
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f016 fbb4 	bl	8017824 <siprintf>
        break;
 80010bc:	e00f      	b.n	80010de <ssi_handler+0x56>
        case 1: sprintf(pcInsert, "%s", finalpres);
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <ssi_handler+0x68>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	4909      	ldr	r1, [pc, #36]	@ (80010ec <ssi_handler+0x64>)
 80010c6:	68b8      	ldr	r0, [r7, #8]
 80010c8:	f016 fbac 	bl	8017824 <siprintf>
        break;
 80010cc:	e007      	b.n	80010de <ssi_handler+0x56>
        case 2: sprintf(pcInsert, "%s", finalhumid);
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <ssi_handler+0x6c>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	4905      	ldr	r1, [pc, #20]	@ (80010ec <ssi_handler+0x64>)
 80010d6:	68b8      	ldr	r0, [r7, #8]
 80010d8:	f016 fba4 	bl	8017824 <siprintf>
        break;
 80010dc:	bf00      	nop
    }
return  0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000a94 	.word	0x20000a94
 80010ec:	08019af4 	.word	0x08019af4
 80010f0:	20000a98 	.word	0x20000a98
 80010f4:	20000aa0 	.word	0x20000aa0

080010f8 <Get_ID>:
    "z",
};


void Get_ID()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	addr[0] = 0xD0;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <Get_ID+0x38>)
 80010fe:	22d0      	movs	r2, #208	@ 0xd0
 8001100:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2110      	movs	r1, #16
 8001106:	480b      	ldr	r0, [pc, #44]	@ (8001134 <Get_ID+0x3c>)
 8001108:	f003 fe36 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, addr, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <Get_ID+0x38>)
 8001110:	4809      	ldr	r0, [pc, #36]	@ (8001138 <Get_ID+0x40>)
 8001112:	f005 f909 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(&hspi1, buf, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	4908      	ldr	r1, [pc, #32]	@ (800113c <Get_ID+0x44>)
 800111a:	4807      	ldr	r0, [pc, #28]	@ (8001138 <Get_ID+0x40>)
 800111c:	f005 f9f8 	bl	8006510 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4803      	ldr	r0, [pc, #12]	@ (8001134 <Get_ID+0x3c>)
 8001126:	f003 fe27 	bl	8004d78 <HAL_GPIO_WritePin>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000a28 	.word	0x20000a28
 8001134:	40020000 	.word	0x40020000
 8001138:	20000364 	.word	0x20000364
 800113c:	20000a4c 	.word	0x20000a4c

08001140 <Wake_Up>:

void Wake_Up()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	config[0] = 0x74;
 8001144:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <Wake_Up+0x88>)
 8001146:	2274      	movs	r2, #116	@ 0x74
 8001148:	701a      	strb	r2, [r3, #0]
	config[1] = 0x25;
 800114a:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <Wake_Up+0x88>)
 800114c:	2225      	movs	r2, #37	@ 0x25
 800114e:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2110      	movs	r1, #16
 8001154:	481d      	ldr	r0, [pc, #116]	@ (80011cc <Wake_Up+0x8c>)
 8001156:	f003 fe0f 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, config, 2);
 800115a:	2202      	movs	r2, #2
 800115c:	491a      	ldr	r1, [pc, #104]	@ (80011c8 <Wake_Up+0x88>)
 800115e:	481c      	ldr	r0, [pc, #112]	@ (80011d0 <Wake_Up+0x90>)
 8001160:	f005 f8e2 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	2110      	movs	r1, #16
 8001168:	4818      	ldr	r0, [pc, #96]	@ (80011cc <Wake_Up+0x8c>)
 800116a:	f003 fe05 	bl	8004d78 <HAL_GPIO_WritePin>

	config[0] = 0x75;
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <Wake_Up+0x88>)
 8001170:	2275      	movs	r2, #117	@ 0x75
 8001172:	701a      	strb	r2, [r3, #0]
	config[1] = 0xA0;
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <Wake_Up+0x88>)
 8001176:	22a0      	movs	r2, #160	@ 0xa0
 8001178:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2110      	movs	r1, #16
 800117e:	4813      	ldr	r0, [pc, #76]	@ (80011cc <Wake_Up+0x8c>)
 8001180:	f003 fdfa 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, config, 2);
 8001184:	2202      	movs	r2, #2
 8001186:	4910      	ldr	r1, [pc, #64]	@ (80011c8 <Wake_Up+0x88>)
 8001188:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <Wake_Up+0x90>)
 800118a:	f005 f8cd 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	480e      	ldr	r0, [pc, #56]	@ (80011cc <Wake_Up+0x8c>)
 8001194:	f003 fdf0 	bl	8004d78 <HAL_GPIO_WritePin>

	config[0] = 0x72;
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <Wake_Up+0x88>)
 800119a:	2272      	movs	r2, #114	@ 0x72
 800119c:	701a      	strb	r2, [r3, #0]
	config[1] = 0x01;
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <Wake_Up+0x88>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	4808      	ldr	r0, [pc, #32]	@ (80011cc <Wake_Up+0x8c>)
 80011aa:	f003 fde5 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, config, 2);
 80011ae:	2202      	movs	r2, #2
 80011b0:	4905      	ldr	r1, [pc, #20]	@ (80011c8 <Wake_Up+0x88>)
 80011b2:	4807      	ldr	r0, [pc, #28]	@ (80011d0 <Wake_Up+0x90>)
 80011b4:	f005 f8b8 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2110      	movs	r1, #16
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <Wake_Up+0x8c>)
 80011be:	f003 fddb 	bl	8004d78 <HAL_GPIO_WritePin>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000a24 	.word	0x20000a24
 80011cc:	40020000 	.word	0x40020000
 80011d0:	20000364 	.word	0x20000364

080011d4 <Get_Trimming_Data>:

void Get_Trimming_Data()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	addr[0] = 0x88;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <Get_Trimming_Data+0x7c>)
 80011da:	2288      	movs	r2, #136	@ 0x88
 80011dc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2110      	movs	r1, #16
 80011e2:	481c      	ldr	r0, [pc, #112]	@ (8001254 <Get_Trimming_Data+0x80>)
 80011e4:	f003 fdc8 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, addr, 1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	4919      	ldr	r1, [pc, #100]	@ (8001250 <Get_Trimming_Data+0x7c>)
 80011ec:	481a      	ldr	r0, [pc, #104]	@ (8001258 <Get_Trimming_Data+0x84>)
 80011ee:	f005 f89b 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(&hspi1, comp, 6);
 80011f2:	2206      	movs	r2, #6
 80011f4:	4919      	ldr	r1, [pc, #100]	@ (800125c <Get_Trimming_Data+0x88>)
 80011f6:	4818      	ldr	r0, [pc, #96]	@ (8001258 <Get_Trimming_Data+0x84>)
 80011f8:	f005 f98a 	bl	8006510 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2110      	movs	r1, #16
 8001200:	4814      	ldr	r0, [pc, #80]	@ (8001254 <Get_Trimming_Data+0x80>)
 8001202:	f003 fdb9 	bl	8004d78 <HAL_GPIO_WritePin>

	dig_T1 = (comp[0])+(comp[1]<<8);
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <Get_Trimming_Data+0x88>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <Get_Trimming_Data+0x88>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <Get_Trimming_Data+0x8c>)
 800121a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (comp[2])+(comp[3]<<8);
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <Get_Trimming_Data+0x88>)
 800121e:	789b      	ldrb	r3, [r3, #2]
 8001220:	461a      	mov	r2, r3
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <Get_Trimming_Data+0x88>)
 8001224:	78db      	ldrb	r3, [r3, #3]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b29b      	uxth	r3, r3
 800122a:	4413      	add	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <Get_Trimming_Data+0x90>)
 8001232:	801a      	strh	r2, [r3, #0]
	dig_T3 = (comp[4])+(comp[5]<<8);
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <Get_Trimming_Data+0x88>)
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	461a      	mov	r2, r3
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <Get_Trimming_Data+0x88>)
 800123c:	795b      	ldrb	r3, [r3, #5]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	4413      	add	r3, r2
 8001244:	b29b      	uxth	r3, r3
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <Get_Trimming_Data+0x94>)
 800124a:	801a      	strh	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000a28 	.word	0x20000a28
 8001254:	40020000 	.word	0x40020000
 8001258:	20000364 	.word	0x20000364
 800125c:	20000a2c 	.word	0x20000a2c
 8001260:	20000ab8 	.word	0x20000ab8
 8001264:	20000ac0 	.word	0x20000ac0
 8001268:	20000ac2 	.word	0x20000ac2

0800126c <Get_Trim_Press>:

void Get_Trim_Press()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	addr[0] = 0x8E;
 8001270:	4b44      	ldr	r3, [pc, #272]	@ (8001384 <Get_Trim_Press+0x118>)
 8001272:	228e      	movs	r2, #142	@ 0x8e
 8001274:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2110      	movs	r1, #16
 800127a:	4843      	ldr	r0, [pc, #268]	@ (8001388 <Get_Trim_Press+0x11c>)
 800127c:	f003 fd7c 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, addr, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	4940      	ldr	r1, [pc, #256]	@ (8001384 <Get_Trim_Press+0x118>)
 8001284:	4841      	ldr	r0, [pc, #260]	@ (800138c <Get_Trim_Press+0x120>)
 8001286:	f005 f84f 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(&hspi1, comp, 20);
 800128a:	2214      	movs	r2, #20
 800128c:	4940      	ldr	r1, [pc, #256]	@ (8001390 <Get_Trim_Press+0x124>)
 800128e:	483f      	ldr	r0, [pc, #252]	@ (800138c <Get_Trim_Press+0x120>)
 8001290:	f005 f93e 	bl	8006510 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2110      	movs	r1, #16
 8001298:	483b      	ldr	r0, [pc, #236]	@ (8001388 <Get_Trim_Press+0x11c>)
 800129a:	f003 fd6d 	bl	8004d78 <HAL_GPIO_WritePin>
	dig_P1 = (comp[0])+(comp[1]<<8);
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <Get_Trim_Press+0x124>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <Get_Trim_Press+0x124>)
 80012a6:	785b      	ldrb	r3, [r3, #1]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b38      	ldr	r3, [pc, #224]	@ (8001394 <Get_Trim_Press+0x128>)
 80012b2:	801a      	strh	r2, [r3, #0]
	dig_P2 = (comp[2])+(comp[3]<<8);
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <Get_Trim_Press+0x124>)
 80012b6:	789b      	ldrb	r3, [r3, #2]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <Get_Trim_Press+0x124>)
 80012bc:	78db      	ldrb	r3, [r3, #3]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <Get_Trim_Press+0x12c>)
 80012ca:	801a      	strh	r2, [r3, #0]
	dig_P3 = (comp[4])+(comp[5]<<8);
 80012cc:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <Get_Trim_Press+0x124>)
 80012ce:	791b      	ldrb	r3, [r3, #4]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <Get_Trim_Press+0x124>)
 80012d4:	795b      	ldrb	r3, [r3, #5]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b21a      	sxth	r2, r3
 80012e0:	4b2e      	ldr	r3, [pc, #184]	@ (800139c <Get_Trim_Press+0x130>)
 80012e2:	801a      	strh	r2, [r3, #0]
	dig_P4 = (comp[6])+(comp[7]<<8);
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <Get_Trim_Press+0x124>)
 80012e6:	799b      	ldrb	r3, [r3, #6]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <Get_Trim_Press+0x124>)
 80012ec:	79db      	ldrb	r3, [r3, #7]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <Get_Trim_Press+0x134>)
 80012fa:	801a      	strh	r2, [r3, #0]
	dig_P5 = (comp[8])+(comp[9]<<8);
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <Get_Trim_Press+0x124>)
 80012fe:	7a1b      	ldrb	r3, [r3, #8]
 8001300:	461a      	mov	r2, r3
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <Get_Trim_Press+0x124>)
 8001304:	7a5b      	ldrb	r3, [r3, #9]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <Get_Trim_Press+0x138>)
 8001312:	801a      	strh	r2, [r3, #0]
	dig_P6 = (comp[10])+(comp[11]<<8);
 8001314:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <Get_Trim_Press+0x124>)
 8001316:	7a9b      	ldrb	r3, [r3, #10]
 8001318:	461a      	mov	r2, r3
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <Get_Trim_Press+0x124>)
 800131c:	7adb      	ldrb	r3, [r3, #11]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	4413      	add	r3, r2
 8001324:	b29b      	uxth	r3, r3
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <Get_Trim_Press+0x13c>)
 800132a:	801a      	strh	r2, [r3, #0]
	dig_P7 = (comp[12])+(comp[13]<<8);
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <Get_Trim_Press+0x124>)
 800132e:	7b1b      	ldrb	r3, [r3, #12]
 8001330:	461a      	mov	r2, r3
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <Get_Trim_Press+0x124>)
 8001334:	7b5b      	ldrb	r3, [r3, #13]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b29b      	uxth	r3, r3
 800133a:	4413      	add	r3, r2
 800133c:	b29b      	uxth	r3, r3
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <Get_Trim_Press+0x140>)
 8001342:	801a      	strh	r2, [r3, #0]
	dig_P8 = (comp[14])+(comp[15]<<8);
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <Get_Trim_Press+0x124>)
 8001346:	7b9b      	ldrb	r3, [r3, #14]
 8001348:	461a      	mov	r2, r3
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <Get_Trim_Press+0x124>)
 800134c:	7bdb      	ldrb	r3, [r3, #15]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <Get_Trim_Press+0x144>)
 800135a:	801a      	strh	r2, [r3, #0]
	dig_P9 = (comp[16])+(comp[17]<<8);
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <Get_Trim_Press+0x124>)
 800135e:	7c1b      	ldrb	r3, [r3, #16]
 8001360:	461a      	mov	r2, r3
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <Get_Trim_Press+0x124>)
 8001364:	7c5b      	ldrb	r3, [r3, #17]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <Get_Trim_Press+0x148>)
 8001372:	801a      	strh	r2, [r3, #0]
	dig_H1 = (comp[19]);
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <Get_Trim_Press+0x124>)
 8001376:	7cdb      	ldrb	r3, [r3, #19]
 8001378:	461a      	mov	r2, r3
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <Get_Trim_Press+0x14c>)
 800137c:	801a      	strh	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000a28 	.word	0x20000a28
 8001388:	40020000 	.word	0x40020000
 800138c:	20000364 	.word	0x20000364
 8001390:	20000a2c 	.word	0x20000a2c
 8001394:	20000aba 	.word	0x20000aba
 8001398:	20000ac4 	.word	0x20000ac4
 800139c:	20000ac6 	.word	0x20000ac6
 80013a0:	20000ac8 	.word	0x20000ac8
 80013a4:	20000aca 	.word	0x20000aca
 80013a8:	20000acc 	.word	0x20000acc
 80013ac:	20000ace 	.word	0x20000ace
 80013b0:	20000ad0 	.word	0x20000ad0
 80013b4:	20000ad2 	.word	0x20000ad2
 80013b8:	20000abc 	.word	0x20000abc

080013bc <Get_Trim_Hum>:
void Get_Trim_Hum()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	addr[0] = 0xE1;
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <Get_Trim_Hum+0x98>)
 80013c2:	22e1      	movs	r2, #225	@ 0xe1
 80013c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2110      	movs	r1, #16
 80013ca:	4823      	ldr	r0, [pc, #140]	@ (8001458 <Get_Trim_Hum+0x9c>)
 80013cc:	f003 fcd4 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, addr, 1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	4920      	ldr	r1, [pc, #128]	@ (8001454 <Get_Trim_Hum+0x98>)
 80013d4:	4821      	ldr	r0, [pc, #132]	@ (800145c <Get_Trim_Hum+0xa0>)
 80013d6:	f004 ffa7 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(&hspi1, comp, 8);
 80013da:	2208      	movs	r2, #8
 80013dc:	4920      	ldr	r1, [pc, #128]	@ (8001460 <Get_Trim_Hum+0xa4>)
 80013de:	481f      	ldr	r0, [pc, #124]	@ (800145c <Get_Trim_Hum+0xa0>)
 80013e0:	f005 f896 	bl	8006510 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2110      	movs	r1, #16
 80013e8:	481b      	ldr	r0, [pc, #108]	@ (8001458 <Get_Trim_Hum+0x9c>)
 80013ea:	f003 fcc5 	bl	8004d78 <HAL_GPIO_WritePin>
	dig_H2 = (comp[0])+(comp[1]<<8);
 80013ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <Get_Trim_Hum+0xa4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <Get_Trim_Hum+0xa4>)
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <Get_Trim_Hum+0xa8>)
 8001404:	801a      	strh	r2, [r3, #0]
	dig_H3 = (comp[2]);
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <Get_Trim_Hum+0xa4>)
 8001408:	789b      	ldrb	r3, [r3, #2]
 800140a:	461a      	mov	r2, r3
 800140c:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <Get_Trim_Hum+0xac>)
 800140e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (comp[3]<<4)+(comp[4]>>4);
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <Get_Trim_Hum+0xa4>)
 8001412:	78db      	ldrb	r3, [r3, #3]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	b29b      	uxth	r3, r3
 8001418:	4a11      	ldr	r2, [pc, #68]	@ (8001460 <Get_Trim_Hum+0xa4>)
 800141a:	7912      	ldrb	r2, [r2, #4]
 800141c:	0912      	lsrs	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	4413      	add	r3, r2
 8001422:	b29b      	uxth	r3, r3
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <Get_Trim_Hum+0xb0>)
 8001428:	801a      	strh	r2, [r3, #0]
	dig_H5 = (comp[4]>>4)+(comp[5]<<4);
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <Get_Trim_Hum+0xa4>)
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <Get_Trim_Hum+0xa4>)
 8001436:	795b      	ldrb	r3, [r3, #5]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	b29b      	uxth	r3, r3
 800143c:	4413      	add	r3, r2
 800143e:	b29b      	uxth	r3, r3
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <Get_Trim_Hum+0xb4>)
 8001444:	801a      	strh	r2, [r3, #0]
	dig_H6 = (comp[6]);
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <Get_Trim_Hum+0xa4>)
 8001448:	799b      	ldrb	r3, [r3, #6]
 800144a:	b21a      	sxth	r2, r3
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <Get_Trim_Hum+0xb8>)
 800144e:	801a      	strh	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000a28 	.word	0x20000a28
 8001458:	40020000 	.word	0x40020000
 800145c:	20000364 	.word	0x20000364
 8001460:	20000a2c 	.word	0x20000a2c
 8001464:	20000ad4 	.word	0x20000ad4
 8001468:	20000abe 	.word	0x20000abe
 800146c:	20000ad6 	.word	0x20000ad6
 8001470:	20000ad8 	.word	0x20000ad8
 8001474:	20000ada 	.word	0x20000ada

08001478 <Get_Raw_T>:
void Get_Raw_T()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	Wake_Up();
 800147c:	f7ff fe60 	bl	8001140 <Wake_Up>
	addr[0] = 0xF7;
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <Get_Raw_T+0x58>)
 8001482:	22f7      	movs	r2, #247	@ 0xf7
 8001484:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2110      	movs	r1, #16
 800148a:	4812      	ldr	r0, [pc, #72]	@ (80014d4 <Get_Raw_T+0x5c>)
 800148c:	f003 fc74 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, addr, 1);
 8001490:	2201      	movs	r2, #1
 8001492:	490f      	ldr	r1, [pc, #60]	@ (80014d0 <Get_Raw_T+0x58>)
 8001494:	4810      	ldr	r0, [pc, #64]	@ (80014d8 <Get_Raw_T+0x60>)
 8001496:	f004 ff47 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(&hspi1, tempread, 8);
 800149a:	2208      	movs	r2, #8
 800149c:	490f      	ldr	r1, [pc, #60]	@ (80014dc <Get_Raw_T+0x64>)
 800149e:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <Get_Raw_T+0x60>)
 80014a0:	f005 f836 	bl	8006510 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2110      	movs	r1, #16
 80014a8:	480a      	ldr	r0, [pc, #40]	@ (80014d4 <Get_Raw_T+0x5c>)
 80014aa:	f003 fc65 	bl	8004d78 <HAL_GPIO_WritePin>
	temperature_raw = (tempread[3]<<12)+(tempread[4]<<4)+(tempread[5]>>4);
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <Get_Raw_T+0x64>)
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	031a      	lsls	r2, r3, #12
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <Get_Raw_T+0x64>)
 80014b6:	791b      	ldrb	r3, [r3, #4]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <Get_Raw_T+0x64>)
 80014be:	7952      	ldrb	r2, [r2, #5]
 80014c0:	0912      	lsrs	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4413      	add	r3, r2
 80014c6:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <Get_Raw_T+0x68>)
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000a28 	.word	0x20000a28
 80014d4:	40020000 	.word	0x40020000
 80014d8:	20000364 	.word	0x20000364
 80014dc:	20000a1c 	.word	0x20000a1c
 80014e0:	20000a88 	.word	0x20000a88

080014e4 <Get_Raw_P>:
void Get_Raw_P()
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	Wake_Up();
 80014e8:	f7ff fe2a 	bl	8001140 <Wake_Up>
	addr[0] = 0xF7;
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <Get_Raw_P+0x58>)
 80014ee:	22f7      	movs	r2, #247	@ 0xf7
 80014f0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2110      	movs	r1, #16
 80014f6:	4812      	ldr	r0, [pc, #72]	@ (8001540 <Get_Raw_P+0x5c>)
 80014f8:	f003 fc3e 	bl	8004d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, addr, 1);
 80014fc:	2201      	movs	r2, #1
 80014fe:	490f      	ldr	r1, [pc, #60]	@ (800153c <Get_Raw_P+0x58>)
 8001500:	4810      	ldr	r0, [pc, #64]	@ (8001544 <Get_Raw_P+0x60>)
 8001502:	f004 ff11 	bl	8006328 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(&hspi1, tempread, 8);
 8001506:	2208      	movs	r2, #8
 8001508:	490f      	ldr	r1, [pc, #60]	@ (8001548 <Get_Raw_P+0x64>)
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <Get_Raw_P+0x60>)
 800150c:	f005 f800 	bl	8006510 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2110      	movs	r1, #16
 8001514:	480a      	ldr	r0, [pc, #40]	@ (8001540 <Get_Raw_P+0x5c>)
 8001516:	f003 fc2f 	bl	8004d78 <HAL_GPIO_WritePin>
	pressure_raw = (tempread[0]<<12)+(tempread[1]<<4)+(tempread[2]>>4);
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <Get_Raw_P+0x64>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	031a      	lsls	r2, r3, #12
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <Get_Raw_P+0x64>)
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <Get_Raw_P+0x64>)
 800152a:	7892      	ldrb	r2, [r2, #2]
 800152c:	0912      	lsrs	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	4413      	add	r3, r2
 8001532:	4a06      	ldr	r2, [pc, #24]	@ (800154c <Get_Raw_P+0x68>)
 8001534:	6013      	str	r3, [r2, #0]
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000a28 	.word	0x20000a28
 8001540:	40020000 	.word	0x40020000
 8001544:	20000364 	.word	0x20000364
 8001548:	20000a1c 	.word	0x20000a1c
 800154c:	20000a8c 	.word	0x20000a8c

08001550 <Get_Raw_H>:
void Get_Raw_H()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	Wake_Up();
 8001554:	f7ff fdf4 	bl	8001140 <Wake_Up>
		addr[0] = 0xF7;
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <Get_Raw_H+0x4c>)
 800155a:	22f7      	movs	r2, #247	@ 0xf7
 800155c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2110      	movs	r1, #16
 8001562:	480f      	ldr	r0, [pc, #60]	@ (80015a0 <Get_Raw_H+0x50>)
 8001564:	f003 fc08 	bl	8004d78 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, addr, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	490c      	ldr	r1, [pc, #48]	@ (800159c <Get_Raw_H+0x4c>)
 800156c:	480d      	ldr	r0, [pc, #52]	@ (80015a4 <Get_Raw_H+0x54>)
 800156e:	f004 fedb 	bl	8006328 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, tempread, 8);
 8001572:	2208      	movs	r2, #8
 8001574:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <Get_Raw_H+0x58>)
 8001576:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <Get_Raw_H+0x54>)
 8001578:	f004 ffca 	bl	8006510 <HAL_SPI_Receive_DMA>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2110      	movs	r1, #16
 8001580:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <Get_Raw_H+0x50>)
 8001582:	f003 fbf9 	bl	8004d78 <HAL_GPIO_WritePin>
		humidity_raw = (tempread[6]<<8)+(tempread[7]);
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <Get_Raw_H+0x58>)
 8001588:	799b      	ldrb	r3, [r3, #6]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <Get_Raw_H+0x58>)
 800158e:	79d2      	ldrb	r2, [r2, #7]
 8001590:	4413      	add	r3, r2
 8001592:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <Get_Raw_H+0x5c>)
 8001594:	6013      	str	r3, [r2, #0]
	}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000a28 	.word	0x20000a28
 80015a0:	40020000 	.word	0x40020000
 80015a4:	20000364 	.word	0x20000364
 80015a8:	20000a1c 	.word	0x20000a1c
 80015ac:	20000a90 	.word	0x20000a90

080015b0 <Compensate_T>:

void Compensate_T()
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
	int var1, var2;
	var1 = ((((temperature_raw >> 3)-((int)dig_T1 << 1)))*((int)dig_T2)) >> 11;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <Compensate_T+0x78>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	10da      	asrs	r2, r3, #3
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <Compensate_T+0x7c>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001630 <Compensate_T+0x80>)
 80015c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	12db      	asrs	r3, r3, #11
 80015d0:	607b      	str	r3, [r7, #4]
	var2 = (((((temperature_raw >> 4)- ((int)dig_T1))*((temperature_raw >> 4)-((int)dig_T1)))>> 12)*((int)dig_T3)) >> 14;
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <Compensate_T+0x78>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	111b      	asrs	r3, r3, #4
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <Compensate_T+0x7c>)
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <Compensate_T+0x78>)
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	1112      	asrs	r2, r2, #4
 80015e4:	4911      	ldr	r1, [pc, #68]	@ (800162c <Compensate_T+0x7c>)
 80015e6:	8809      	ldrh	r1, [r1, #0]
 80015e8:	1a52      	subs	r2, r2, r1
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	131b      	asrs	r3, r3, #12
 80015f0:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <Compensate_T+0x84>)
 80015f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	139b      	asrs	r3, r3, #14
 80015fc:	603b      	str	r3, [r7, #0]
	t_fine =(var1 + var2);
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <Compensate_T+0x88>)
 8001606:	6013      	str	r3, [r2, #0]
	finaltemp = (t_fine * 5 +128) >> 8;
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <Compensate_T+0x88>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3380      	adds	r3, #128	@ 0x80
 8001614:	121b      	asrs	r3, r3, #8
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <Compensate_T+0x8c>)
 8001618:	6013      	str	r3, [r2, #0]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000a88 	.word	0x20000a88
 800162c:	20000ab8 	.word	0x20000ab8
 8001630:	20000ac0 	.word	0x20000ac0
 8001634:	20000ac2 	.word	0x20000ac2
 8001638:	20000aa8 	.word	0x20000aa8
 800163c:	20000a94 	.word	0x20000a94

08001640 <Compensate_P>:
void Compensate_P()
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
	double var1, var2;
	var1 = ((double)t_fine/2.0)- 64000.0;
 8001646:	4bc2      	ldr	r3, [pc, #776]	@ (8001950 <Compensate_P+0x310>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff9a 	bl	8000584 <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001658:	f7ff f928 	bl	80008ac <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4bba      	ldr	r3, [pc, #744]	@ (8001954 <Compensate_P+0x314>)
 800166a:	f7fe fe3d 	bl	80002e8 <__aeabi_dsub>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = var1 * var1 * ((double)dig_P6 / 32768.0);
 8001676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800167a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167e:	f7fe ffeb 	bl	8000658 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	461d      	mov	r5, r3
 800168a:	4bb3      	ldr	r3, [pc, #716]	@ (8001958 <Compensate_P+0x318>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff77 	bl	8000584 <__aeabi_i2d>
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	4bb0      	ldr	r3, [pc, #704]	@ (800195c <Compensate_P+0x31c>)
 800169c:	f7ff f906 	bl	80008ac <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7fe ffd6 	bl	8000658 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9c7 2300 	strd	r2, r3, [r7]
	var2 = var2 + var1 * ((double)dig_P5) * 2.0;
 80016b4:	4baa      	ldr	r3, [pc, #680]	@ (8001960 <Compensate_P+0x320>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff62 	bl	8000584 <__aeabi_i2d>
 80016c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016c4:	f7fe ffc8 	bl	8000658 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	f7fe fe0a 	bl	80002ec <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e0:	f7fe fe04 	bl	80002ec <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	e9c7 2300 	strd	r2, r3, [r7]
	var2 = (var2/4.0) + (((double)dig_P4) * 65536.0);
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b9c      	ldr	r3, [pc, #624]	@ (8001964 <Compensate_P+0x324>)
 80016f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016f6:	f7ff f8d9 	bl	80008ac <__aeabi_ddiv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4614      	mov	r4, r2
 8001700:	461d      	mov	r5, r3
 8001702:	4b99      	ldr	r3, [pc, #612]	@ (8001968 <Compensate_P+0x328>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff3b 	bl	8000584 <__aeabi_i2d>
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b96      	ldr	r3, [pc, #600]	@ (800196c <Compensate_P+0x32c>)
 8001714:	f7fe ffa0 	bl	8000658 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7fe fde4 	bl	80002ec <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 2300 	strd	r2, r3, [r7]
	var1 = (((double)dig_P3) * var1 * var1 /524288.0 + ((double)dig_P2) * var1) / 524288.0;
 800172c:	4b90      	ldr	r3, [pc, #576]	@ (8001970 <Compensate_P+0x330>)
 800172e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff26 	bl	8000584 <__aeabi_i2d>
 8001738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800173c:	f7fe ff8c 	bl	8000658 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800174c:	f7fe ff84 	bl	8000658 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b85      	ldr	r3, [pc, #532]	@ (8001974 <Compensate_P+0x334>)
 800175e:	f7ff f8a5 	bl	80008ac <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4614      	mov	r4, r2
 8001768:	461d      	mov	r5, r3
 800176a:	4b83      	ldr	r3, [pc, #524]	@ (8001978 <Compensate_P+0x338>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ff07 	bl	8000584 <__aeabi_i2d>
 8001776:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800177a:	f7fe ff6d 	bl	8000658 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fdb1 	bl	80002ec <__adddf3>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b77      	ldr	r3, [pc, #476]	@ (8001974 <Compensate_P+0x334>)
 8001798:	f7ff f888 	bl	80008ac <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (1.0+var1 / 32768.0)*((double)dig_P1);
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b6c      	ldr	r3, [pc, #432]	@ (800195c <Compensate_P+0x31c>)
 80017aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ae:	f7ff f87d 	bl	80008ac <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b6f      	ldr	r3, [pc, #444]	@ (800197c <Compensate_P+0x33c>)
 80017c0:	f7fe fd94 	bl	80002ec <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001980 <Compensate_P+0x340>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fec7 	bl	8000564 <__aeabi_ui2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4620      	mov	r0, r4
 80017dc:	4629      	mov	r1, r5
 80017de:	f7fe ff3b 	bl	8000658 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (var1 == 0.0)
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017f6:	f7ff f997 	bl	8000b28 <__aeabi_dcmpeq>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 809e 	bne.w	800193e <Compensate_P+0x2fe>
	{
		return 0;
	}
	finalpres = 1048576.0 - (double)pressure_raw;
 8001802:	4b60      	ldr	r3, [pc, #384]	@ (8001984 <Compensate_P+0x344>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe febc 	bl	8000584 <__aeabi_i2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	f04f 0000 	mov.w	r0, #0
 8001814:	495c      	ldr	r1, [pc, #368]	@ (8001988 <Compensate_P+0x348>)
 8001816:	f7fe fd67 	bl	80002e8 <__aeabi_dsub>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	495b      	ldr	r1, [pc, #364]	@ (800198c <Compensate_P+0x34c>)
 8001820:	e9c1 2300 	strd	r2, r3, [r1]
	finalpres = (finalpres-(var2/4096.0))* 6250.0 / var1;
 8001824:	4b59      	ldr	r3, [pc, #356]	@ (800198c <Compensate_P+0x34c>)
 8001826:	e9d3 4500 	ldrd	r4, r5, [r3]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <Compensate_P+0x350>)
 8001830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001834:	f7ff f83a 	bl	80008ac <__aeabi_ddiv>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4620      	mov	r0, r4
 800183e:	4629      	mov	r1, r5
 8001840:	f7fe fd52 	bl	80002e8 <__aeabi_dsub>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	a33e      	add	r3, pc, #248	@ (adr r3, 8001948 <Compensate_P+0x308>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe ff01 	bl	8000658 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001862:	f7ff f823 	bl	80008ac <__aeabi_ddiv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4948      	ldr	r1, [pc, #288]	@ (800198c <Compensate_P+0x34c>)
 800186c:	e9c1 2300 	strd	r2, r3, [r1]
	var1 = ((double)dig_P9)*finalpres*finalpres / 2147483648.0;
 8001870:	4b48      	ldr	r3, [pc, #288]	@ (8001994 <Compensate_P+0x354>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe84 	bl	8000584 <__aeabi_i2d>
 800187c:	4b43      	ldr	r3, [pc, #268]	@ (800198c <Compensate_P+0x34c>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe fee9 	bl	8000658 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <Compensate_P+0x34c>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fee0 	bl	8000658 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001998 <Compensate_P+0x358>)
 80018a6:	f7ff f801 	bl	80008ac <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = finalpres *((double)dig_P8) / 32768.0;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	@ (800199c <Compensate_P+0x35c>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe63 	bl	8000584 <__aeabi_i2d>
 80018be:	4b33      	ldr	r3, [pc, #204]	@ (800198c <Compensate_P+0x34c>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fec8 	bl	8000658 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b21      	ldr	r3, [pc, #132]	@ (800195c <Compensate_P+0x31c>)
 80018d6:	f7fe ffe9 	bl	80008ac <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 2300 	strd	r2, r3, [r7]
	finalpres = finalpres + (var1 + var2 + ((double)dig_P7)) / 16.0;
 80018e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ea:	f7fe fcff 	bl	80002ec <__adddf3>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	461d      	mov	r5, r3
 80018f6:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <Compensate_P+0x360>)
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe41 	bl	8000584 <__aeabi_i2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4620      	mov	r0, r4
 8001908:	4629      	mov	r1, r5
 800190a:	f7fe fcef 	bl	80002ec <__adddf3>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <Compensate_P+0x364>)
 800191c:	f7fe ffc6 	bl	80008ac <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	4b18      	ldr	r3, [pc, #96]	@ (800198c <Compensate_P+0x34c>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fcdd 	bl	80002ec <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4915      	ldr	r1, [pc, #84]	@ (800198c <Compensate_P+0x34c>)
 8001938:	e9c1 2300 	strd	r2, r3, [r1]
 800193c:	e000      	b.n	8001940 <Compensate_P+0x300>
		return 0;
 800193e:	bf00      	nop
}
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bdb0      	pop	{r4, r5, r7, pc}
 8001946:	bf00      	nop
 8001948:	00000000 	.word	0x00000000
 800194c:	40b86a00 	.word	0x40b86a00
 8001950:	20000aa8 	.word	0x20000aa8
 8001954:	40ef4000 	.word	0x40ef4000
 8001958:	20000acc 	.word	0x20000acc
 800195c:	40e00000 	.word	0x40e00000
 8001960:	20000aca 	.word	0x20000aca
 8001964:	40100000 	.word	0x40100000
 8001968:	20000ac8 	.word	0x20000ac8
 800196c:	40f00000 	.word	0x40f00000
 8001970:	20000ac6 	.word	0x20000ac6
 8001974:	41200000 	.word	0x41200000
 8001978:	20000ac4 	.word	0x20000ac4
 800197c:	3ff00000 	.word	0x3ff00000
 8001980:	20000aba 	.word	0x20000aba
 8001984:	20000a8c 	.word	0x20000a8c
 8001988:	41300000 	.word	0x41300000
 800198c:	20000a98 	.word	0x20000a98
 8001990:	40b00000 	.word	0x40b00000
 8001994:	20000ad2 	.word	0x20000ad2
 8001998:	41e00000 	.word	0x41e00000
 800199c:	20000ad0 	.word	0x20000ad0
 80019a0:	20000ace 	.word	0x20000ace
 80019a4:	40300000 	.word	0x40300000

080019a8 <Componsate_H>:

void Componsate_H()
{
 80019a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ac:	af00      	add	r7, sp, #0
	finalhumid = (((double)t_fine)- 76800.0);
 80019ae:	4b80      	ldr	r3, [pc, #512]	@ (8001bb0 <Componsate_H+0x208>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fde6 	bl	8000584 <__aeabi_i2d>
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b7d      	ldr	r3, [pc, #500]	@ (8001bb4 <Componsate_H+0x20c>)
 80019be:	f7fe fc93 	bl	80002e8 <__aeabi_dsub>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	497c      	ldr	r1, [pc, #496]	@ (8001bb8 <Componsate_H+0x210>)
 80019c8:	e9c1 2300 	strd	r2, r3, [r1]
	finalhumid = (humidity_raw - (((double)dig_H4)*64.0 + ((double)dig_H5)/ 16384.0 *
 80019cc:	4b7b      	ldr	r3, [pc, #492]	@ (8001bbc <Componsate_H+0x214>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fdd7 	bl	8000584 <__aeabi_i2d>
 80019d6:	4604      	mov	r4, r0
 80019d8:	460d      	mov	r5, r1
 80019da:	4b79      	ldr	r3, [pc, #484]	@ (8001bc0 <Componsate_H+0x218>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdcf 	bl	8000584 <__aeabi_i2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b76      	ldr	r3, [pc, #472]	@ (8001bc4 <Componsate_H+0x21c>)
 80019ec:	f7fe fe34 	bl	8000658 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4690      	mov	r8, r2
 80019f6:	4699      	mov	r9, r3
 80019f8:	4b73      	ldr	r3, [pc, #460]	@ (8001bc8 <Componsate_H+0x220>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdc0 	bl	8000584 <__aeabi_i2d>
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <Componsate_H+0x224>)
 8001a0a:	f7fe ff4f 	bl	80008ac <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	4b68      	ldr	r3, [pc, #416]	@ (8001bb8 <Componsate_H+0x210>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fe1c 	bl	8000658 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4640      	mov	r0, r8
 8001a26:	4649      	mov	r1, r9
 8001a28:	f7fe fc60 	bl	80002ec <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe fc58 	bl	80002e8 <__aeabi_dsub>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	461d      	mov	r5, r3
			finalhumid)) * (((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) /
 8001a40:	4b63      	ldr	r3, [pc, #396]	@ (8001bd0 <Componsate_H+0x228>)
 8001a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd9c 	bl	8000584 <__aeabi_i2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b60      	ldr	r3, [pc, #384]	@ (8001bd4 <Componsate_H+0x22c>)
 8001a52:	f7fe ff2b 	bl	80008ac <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4690      	mov	r8, r2
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd8 <Componsate_H+0x230>)
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd8d 	bl	8000584 <__aeabi_i2d>
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <Componsate_H+0x234>)
 8001a70:	f7fe ff1c 	bl	80008ac <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
					67108864.0 * finalhumid * (1.0 + ((double)dig_H3)/ 67108864.0 * finalhumid)));
 8001a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb8 <Componsate_H+0x210>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fde9 	bl	8000658 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4692      	mov	sl, r2
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	4b54      	ldr	r3, [pc, #336]	@ (8001be0 <Componsate_H+0x238>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd66 	bl	8000564 <__aeabi_ui2d>
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bdc <Componsate_H+0x234>)
 8001a9e:	f7fe ff05 	bl	80008ac <__aeabi_ddiv>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <Componsate_H+0x210>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fdd2 	bl	8000658 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b48      	ldr	r3, [pc, #288]	@ (8001be4 <Componsate_H+0x23c>)
 8001ac2:	f7fe fc13 	bl	80002ec <__adddf3>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4650      	mov	r0, sl
 8001acc:	4659      	mov	r1, fp
 8001ace:	f7fe fdc3 	bl	8000658 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
			finalhumid)) * (((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) /
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <Componsate_H+0x23c>)
 8001ae0:	f7fe fc04 	bl	80002ec <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4640      	mov	r0, r8
 8001aea:	4649      	mov	r1, r9
 8001aec:	f7fe fdb4 	bl	8000658 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4620      	mov	r0, r4
 8001af6:	4629      	mov	r1, r5
 8001af8:	f7fe fdae 	bl	8000658 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
	finalhumid = (humidity_raw - (((double)dig_H4)*64.0 + ((double)dig_H5)/ 16384.0 *
 8001b00:	492d      	ldr	r1, [pc, #180]	@ (8001bb8 <Componsate_H+0x210>)
 8001b02:	e9c1 2300 	strd	r2, r3, [r1]
	finalhumid = finalhumid * (1.0 - ((double)dig_H1) * finalhumid / 54288.0);
 8001b06:	4b38      	ldr	r3, [pc, #224]	@ (8001be8 <Componsate_H+0x240>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd2a 	bl	8000564 <__aeabi_ui2d>
 8001b10:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <Componsate_H+0x210>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd9f 	bl	8000658 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	a321      	add	r3, pc, #132	@ (adr r3, 8001ba8 <Componsate_H+0x200>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fec0 	bl	80008ac <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	f04f 0000 	mov.w	r0, #0
 8001b34:	492b      	ldr	r1, [pc, #172]	@ (8001be4 <Componsate_H+0x23c>)
 8001b36:	f7fe fbd7 	bl	80002e8 <__aeabi_dsub>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <Componsate_H+0x210>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fd86 	bl	8000658 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4919      	ldr	r1, [pc, #100]	@ (8001bb8 <Componsate_H+0x210>)
 8001b52:	e9c1 2300 	strd	r2, r3, [r1]
	if(finalhumid > 100)
 8001b56:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <Componsate_H+0x210>)
 8001b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <Componsate_H+0x244>)
 8001b62:	f7ff f809 	bl	8000b78 <__aeabi_dcmpgt>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <Componsate_H+0x1d2>
		finalhumid = 100.0;
 8001b6c:	4912      	ldr	r1, [pc, #72]	@ (8001bb8 <Componsate_H+0x210>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <Componsate_H+0x244>)
 8001b74:	e9c1 2300 	strd	r2, r3, [r1]
	else if (finalhumid < 0.0)
		finalhumid = 0.0;

}
 8001b78:	e013      	b.n	8001ba2 <Componsate_H+0x1fa>
	else if (finalhumid < 0.0)
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <Componsate_H+0x210>)
 8001b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f7fe ffd8 	bl	8000b3c <__aeabi_dcmplt>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d100      	bne.n	8001b94 <Componsate_H+0x1ec>
}
 8001b92:	e006      	b.n	8001ba2 <Componsate_H+0x1fa>
		finalhumid = 0.0;
 8001b94:	4908      	ldr	r1, [pc, #32]	@ (8001bb8 <Componsate_H+0x210>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ba2:	bf00      	nop
 8001ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	40ea8200 	.word	0x40ea8200
 8001bb0:	20000aa8 	.word	0x20000aa8
 8001bb4:	40f2c000 	.word	0x40f2c000
 8001bb8:	20000aa0 	.word	0x20000aa0
 8001bbc:	20000a90 	.word	0x20000a90
 8001bc0:	20000ad6 	.word	0x20000ad6
 8001bc4:	40500000 	.word	0x40500000
 8001bc8:	20000ad8 	.word	0x20000ad8
 8001bcc:	40d00000 	.word	0x40d00000
 8001bd0:	20000ad4 	.word	0x20000ad4
 8001bd4:	40f00000 	.word	0x40f00000
 8001bd8:	20000ada 	.word	0x20000ada
 8001bdc:	41900000 	.word	0x41900000
 8001be0:	20000abe 	.word	0x20000abe
 8001be4:	3ff00000 	.word	0x3ff00000
 8001be8:	20000abc 	.word	0x20000abc
 8001bec:	40590000 	.word	0x40590000

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const tCGI LED[] = {
 8001bf6:	4bab      	ldr	r3, [pc, #684]	@ (8001ea4 <main+0x2b4>)
 8001bf8:	463c      	mov	r4, r7
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c04:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c08:	f001 f90c 	bl	8002e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0c:	f000 fab6 	bl	800217c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c10:	f000 fbde 	bl	80023d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c14:	f000 fbb6 	bl	8002384 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c18:	f000 fb86 	bl	8002328 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8001c1c:	f006 fa78 	bl	8008110 <MX_LWIP_Init>
  MX_SPI1_Init();
 8001c20:	f000 fb14 	bl	800224c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001c24:	f000 fb50 	bl	80022c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 8001c28:	f008 f9bc 	bl	8009fa4 <httpd_init>
  http_set_cgi_handlers(LED, LWIP_ARRAYSIZE(LED));
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	2103      	movs	r1, #3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 fa19 	bl	800a068 <http_set_cgi_handlers>
  http_set_ssi_handler(ssi_handler,ssi_tags, LWIP_ARRAYSIZE(ssi_tags));
 8001c36:	2203      	movs	r2, #3
 8001c38:	499b      	ldr	r1, [pc, #620]	@ (8001ea8 <main+0x2b8>)
 8001c3a:	489c      	ldr	r0, [pc, #624]	@ (8001eac <main+0x2bc>)
 8001c3c:	f008 f9d2 	bl	8009fe4 <http_set_ssi_handler>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2110      	movs	r1, #16
 8001c44:	489a      	ldr	r0, [pc, #616]	@ (8001eb0 <main+0x2c0>)
 8001c46:	f003 f897 	bl	8004d78 <HAL_GPIO_WritePin>


  Get_ID();
 8001c4a:	f7ff fa55 	bl	80010f8 <Get_ID>
  Wake_Up();
 8001c4e:	f7ff fa77 	bl	8001140 <Wake_Up>

  Get_Trimming_Data();
 8001c52:	f7ff fabf 	bl	80011d4 <Get_Trimming_Data>
  Get_Trim_Press();
 8001c56:	f7ff fb09 	bl	800126c <Get_Trim_Press>
  Get_Trim_Hum();
 8001c5a:	f7ff fbaf 	bl	80013bc <Get_Trim_Hum>

  uart_len = sprintf(uart_buf, "ID_0x%02x\r\n", buf[0]);
 8001c5e:	4b95      	ldr	r3, [pc, #596]	@ (8001eb4 <main+0x2c4>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4994      	ldr	r1, [pc, #592]	@ (8001eb8 <main+0x2c8>)
 8001c66:	4895      	ldr	r0, [pc, #596]	@ (8001ebc <main+0x2cc>)
 8001c68:	f015 fddc 	bl	8017824 <siprintf>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a94      	ldr	r2, [pc, #592]	@ (8001ec0 <main+0x2d0>)
 8001c70:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001c72:	4b93      	ldr	r3, [pc, #588]	@ (8001ec0 <main+0x2d0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2364      	movs	r3, #100	@ 0x64
 8001c7a:	4990      	ldr	r1, [pc, #576]	@ (8001ebc <main+0x2cc>)
 8001c7c:	4891      	ldr	r0, [pc, #580]	@ (8001ec4 <main+0x2d4>)
 8001c7e:	f005 facb 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "T1_%d\r\n", dig_T1);
 8001c82:	4b91      	ldr	r3, [pc, #580]	@ (8001ec8 <main+0x2d8>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4990      	ldr	r1, [pc, #576]	@ (8001ecc <main+0x2dc>)
 8001c8a:	488c      	ldr	r0, [pc, #560]	@ (8001ebc <main+0x2cc>)
 8001c8c:	f015 fdca 	bl	8017824 <siprintf>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a8b      	ldr	r2, [pc, #556]	@ (8001ec0 <main+0x2d0>)
 8001c94:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001c96:	4b8a      	ldr	r3, [pc, #552]	@ (8001ec0 <main+0x2d0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	2364      	movs	r3, #100	@ 0x64
 8001c9e:	4987      	ldr	r1, [pc, #540]	@ (8001ebc <main+0x2cc>)
 8001ca0:	4888      	ldr	r0, [pc, #544]	@ (8001ec4 <main+0x2d4>)
 8001ca2:	f005 fab9 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "T2_%d\r\n", dig_T2);
 8001ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8001ed0 <main+0x2e0>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4989      	ldr	r1, [pc, #548]	@ (8001ed4 <main+0x2e4>)
 8001cb0:	4882      	ldr	r0, [pc, #520]	@ (8001ebc <main+0x2cc>)
 8001cb2:	f015 fdb7 	bl	8017824 <siprintf>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a81      	ldr	r2, [pc, #516]	@ (8001ec0 <main+0x2d0>)
 8001cba:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001cbc:	4b80      	ldr	r3, [pc, #512]	@ (8001ec0 <main+0x2d0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	2364      	movs	r3, #100	@ 0x64
 8001cc4:	497d      	ldr	r1, [pc, #500]	@ (8001ebc <main+0x2cc>)
 8001cc6:	487f      	ldr	r0, [pc, #508]	@ (8001ec4 <main+0x2d4>)
 8001cc8:	f005 faa6 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "T3_%d\r\n", dig_T3);
 8001ccc:	4b82      	ldr	r3, [pc, #520]	@ (8001ed8 <main+0x2e8>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4981      	ldr	r1, [pc, #516]	@ (8001edc <main+0x2ec>)
 8001cd6:	4879      	ldr	r0, [pc, #484]	@ (8001ebc <main+0x2cc>)
 8001cd8:	f015 fda4 	bl	8017824 <siprintf>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a78      	ldr	r2, [pc, #480]	@ (8001ec0 <main+0x2d0>)
 8001ce0:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001ce2:	4b77      	ldr	r3, [pc, #476]	@ (8001ec0 <main+0x2d0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	2364      	movs	r3, #100	@ 0x64
 8001cea:	4974      	ldr	r1, [pc, #464]	@ (8001ebc <main+0x2cc>)
 8001cec:	4875      	ldr	r0, [pc, #468]	@ (8001ec4 <main+0x2d4>)
 8001cee:	f005 fa93 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P1_%d\r\n", dig_P1);
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ee0 <main+0x2f0>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	497a      	ldr	r1, [pc, #488]	@ (8001ee4 <main+0x2f4>)
 8001cfa:	4870      	ldr	r0, [pc, #448]	@ (8001ebc <main+0x2cc>)
 8001cfc:	f015 fd92 	bl	8017824 <siprintf>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a6f      	ldr	r2, [pc, #444]	@ (8001ec0 <main+0x2d0>)
 8001d04:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001d06:	4b6e      	ldr	r3, [pc, #440]	@ (8001ec0 <main+0x2d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	2364      	movs	r3, #100	@ 0x64
 8001d0e:	496b      	ldr	r1, [pc, #428]	@ (8001ebc <main+0x2cc>)
 8001d10:	486c      	ldr	r0, [pc, #432]	@ (8001ec4 <main+0x2d4>)
 8001d12:	f005 fa81 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P2_%d\r\n", dig_P2);
 8001d16:	4b74      	ldr	r3, [pc, #464]	@ (8001ee8 <main+0x2f8>)
 8001d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4973      	ldr	r1, [pc, #460]	@ (8001eec <main+0x2fc>)
 8001d20:	4866      	ldr	r0, [pc, #408]	@ (8001ebc <main+0x2cc>)
 8001d22:	f015 fd7f 	bl	8017824 <siprintf>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a65      	ldr	r2, [pc, #404]	@ (8001ec0 <main+0x2d0>)
 8001d2a:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001d2c:	4b64      	ldr	r3, [pc, #400]	@ (8001ec0 <main+0x2d0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	2364      	movs	r3, #100	@ 0x64
 8001d34:	4961      	ldr	r1, [pc, #388]	@ (8001ebc <main+0x2cc>)
 8001d36:	4863      	ldr	r0, [pc, #396]	@ (8001ec4 <main+0x2d4>)
 8001d38:	f005 fa6e 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P3_%d\r\n", dig_P3);
 8001d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef0 <main+0x300>)
 8001d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d42:	461a      	mov	r2, r3
 8001d44:	496b      	ldr	r1, [pc, #428]	@ (8001ef4 <main+0x304>)
 8001d46:	485d      	ldr	r0, [pc, #372]	@ (8001ebc <main+0x2cc>)
 8001d48:	f015 fd6c 	bl	8017824 <siprintf>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec0 <main+0x2d0>)
 8001d50:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001d52:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec0 <main+0x2d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2364      	movs	r3, #100	@ 0x64
 8001d5a:	4958      	ldr	r1, [pc, #352]	@ (8001ebc <main+0x2cc>)
 8001d5c:	4859      	ldr	r0, [pc, #356]	@ (8001ec4 <main+0x2d4>)
 8001d5e:	f005 fa5b 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P4_%d\r\n", dig_P4);
 8001d62:	4b65      	ldr	r3, [pc, #404]	@ (8001ef8 <main+0x308>)
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4964      	ldr	r1, [pc, #400]	@ (8001efc <main+0x30c>)
 8001d6c:	4853      	ldr	r0, [pc, #332]	@ (8001ebc <main+0x2cc>)
 8001d6e:	f015 fd59 	bl	8017824 <siprintf>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a52      	ldr	r2, [pc, #328]	@ (8001ec0 <main+0x2d0>)
 8001d76:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001d78:	4b51      	ldr	r3, [pc, #324]	@ (8001ec0 <main+0x2d0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	2364      	movs	r3, #100	@ 0x64
 8001d80:	494e      	ldr	r1, [pc, #312]	@ (8001ebc <main+0x2cc>)
 8001d82:	4850      	ldr	r0, [pc, #320]	@ (8001ec4 <main+0x2d4>)
 8001d84:	f005 fa48 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P5_%d\r\n", dig_P5);
 8001d88:	4b5d      	ldr	r3, [pc, #372]	@ (8001f00 <main+0x310>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	495c      	ldr	r1, [pc, #368]	@ (8001f04 <main+0x314>)
 8001d92:	484a      	ldr	r0, [pc, #296]	@ (8001ebc <main+0x2cc>)
 8001d94:	f015 fd46 	bl	8017824 <siprintf>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4a49      	ldr	r2, [pc, #292]	@ (8001ec0 <main+0x2d0>)
 8001d9c:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001d9e:	4b48      	ldr	r3, [pc, #288]	@ (8001ec0 <main+0x2d0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	2364      	movs	r3, #100	@ 0x64
 8001da6:	4945      	ldr	r1, [pc, #276]	@ (8001ebc <main+0x2cc>)
 8001da8:	4846      	ldr	r0, [pc, #280]	@ (8001ec4 <main+0x2d4>)
 8001daa:	f005 fa35 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P6_%d\r\n", dig_P6);
 8001dae:	4b56      	ldr	r3, [pc, #344]	@ (8001f08 <main+0x318>)
 8001db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4955      	ldr	r1, [pc, #340]	@ (8001f0c <main+0x31c>)
 8001db8:	4840      	ldr	r0, [pc, #256]	@ (8001ebc <main+0x2cc>)
 8001dba:	f015 fd33 	bl	8017824 <siprintf>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8001ec0 <main+0x2d0>)
 8001dc2:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec0 <main+0x2d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	2364      	movs	r3, #100	@ 0x64
 8001dcc:	493b      	ldr	r1, [pc, #236]	@ (8001ebc <main+0x2cc>)
 8001dce:	483d      	ldr	r0, [pc, #244]	@ (8001ec4 <main+0x2d4>)
 8001dd0:	f005 fa22 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P7_%d\r\n", dig_P7);
 8001dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8001f10 <main+0x320>)
 8001dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	494d      	ldr	r1, [pc, #308]	@ (8001f14 <main+0x324>)
 8001dde:	4837      	ldr	r0, [pc, #220]	@ (8001ebc <main+0x2cc>)
 8001de0:	f015 fd20 	bl	8017824 <siprintf>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a36      	ldr	r2, [pc, #216]	@ (8001ec0 <main+0x2d0>)
 8001de8:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001dea:	4b35      	ldr	r3, [pc, #212]	@ (8001ec0 <main+0x2d0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	2364      	movs	r3, #100	@ 0x64
 8001df2:	4932      	ldr	r1, [pc, #200]	@ (8001ebc <main+0x2cc>)
 8001df4:	4833      	ldr	r0, [pc, #204]	@ (8001ec4 <main+0x2d4>)
 8001df6:	f005 fa0f 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P8_%d\r\n", dig_P8);
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <main+0x328>)
 8001dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4946      	ldr	r1, [pc, #280]	@ (8001f1c <main+0x32c>)
 8001e04:	482d      	ldr	r0, [pc, #180]	@ (8001ebc <main+0x2cc>)
 8001e06:	f015 fd0d 	bl	8017824 <siprintf>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ec0 <main+0x2d0>)
 8001e0e:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001e10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <main+0x2d0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	2364      	movs	r3, #100	@ 0x64
 8001e18:	4928      	ldr	r1, [pc, #160]	@ (8001ebc <main+0x2cc>)
 8001e1a:	482a      	ldr	r0, [pc, #168]	@ (8001ec4 <main+0x2d4>)
 8001e1c:	f005 f9fc 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "P9_%d\r\n", dig_P9);
 8001e20:	4b3f      	ldr	r3, [pc, #252]	@ (8001f20 <main+0x330>)
 8001e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e26:	461a      	mov	r2, r3
 8001e28:	493e      	ldr	r1, [pc, #248]	@ (8001f24 <main+0x334>)
 8001e2a:	4824      	ldr	r0, [pc, #144]	@ (8001ebc <main+0x2cc>)
 8001e2c:	f015 fcfa 	bl	8017824 <siprintf>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a23      	ldr	r2, [pc, #140]	@ (8001ec0 <main+0x2d0>)
 8001e34:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001e36:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <main+0x2d0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2364      	movs	r3, #100	@ 0x64
 8001e3e:	491f      	ldr	r1, [pc, #124]	@ (8001ebc <main+0x2cc>)
 8001e40:	4820      	ldr	r0, [pc, #128]	@ (8001ec4 <main+0x2d4>)
 8001e42:	f005 f9e9 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "H1_%d\r\n", dig_H1);
 8001e46:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <main+0x338>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4937      	ldr	r1, [pc, #220]	@ (8001f2c <main+0x33c>)
 8001e4e:	481b      	ldr	r0, [pc, #108]	@ (8001ebc <main+0x2cc>)
 8001e50:	f015 fce8 	bl	8017824 <siprintf>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec0 <main+0x2d0>)
 8001e58:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <main+0x2d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2364      	movs	r3, #100	@ 0x64
 8001e62:	4916      	ldr	r1, [pc, #88]	@ (8001ebc <main+0x2cc>)
 8001e64:	4817      	ldr	r0, [pc, #92]	@ (8001ec4 <main+0x2d4>)
 8001e66:	f005 f9d7 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "H2_%d\r\n", dig_H2);
 8001e6a:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <main+0x340>)
 8001e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4930      	ldr	r1, [pc, #192]	@ (8001f34 <main+0x344>)
 8001e74:	4811      	ldr	r0, [pc, #68]	@ (8001ebc <main+0x2cc>)
 8001e76:	f015 fcd5 	bl	8017824 <siprintf>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a10      	ldr	r2, [pc, #64]	@ (8001ec0 <main+0x2d0>)
 8001e7e:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001e80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <main+0x2d0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	2364      	movs	r3, #100	@ 0x64
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <main+0x2cc>)
 8001e8a:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <main+0x2d4>)
 8001e8c:	f005 f9c4 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "H3_%d\r\n", dig_H3);
 8001e90:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <main+0x348>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4929      	ldr	r1, [pc, #164]	@ (8001f3c <main+0x34c>)
 8001e98:	4808      	ldr	r0, [pc, #32]	@ (8001ebc <main+0x2cc>)
 8001e9a:	f015 fcc3 	bl	8017824 <siprintf>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	e04e      	b.n	8001f40 <main+0x350>
 8001ea2:	bf00      	nop
 8001ea4:	08019bfc 	.word	0x08019bfc
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	08001089 	.word	0x08001089
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	20000a4c 	.word	0x20000a4c
 8001eb8:	08019b04 	.word	0x08019b04
 8001ebc:	20000a50 	.word	0x20000a50
 8001ec0:	20000a84 	.word	0x20000a84
 8001ec4:	20000488 	.word	0x20000488
 8001ec8:	20000ab8 	.word	0x20000ab8
 8001ecc:	08019b10 	.word	0x08019b10
 8001ed0:	20000ac0 	.word	0x20000ac0
 8001ed4:	08019b18 	.word	0x08019b18
 8001ed8:	20000ac2 	.word	0x20000ac2
 8001edc:	08019b20 	.word	0x08019b20
 8001ee0:	20000aba 	.word	0x20000aba
 8001ee4:	08019b28 	.word	0x08019b28
 8001ee8:	20000ac4 	.word	0x20000ac4
 8001eec:	08019b30 	.word	0x08019b30
 8001ef0:	20000ac6 	.word	0x20000ac6
 8001ef4:	08019b38 	.word	0x08019b38
 8001ef8:	20000ac8 	.word	0x20000ac8
 8001efc:	08019b40 	.word	0x08019b40
 8001f00:	20000aca 	.word	0x20000aca
 8001f04:	08019b48 	.word	0x08019b48
 8001f08:	20000acc 	.word	0x20000acc
 8001f0c:	08019b50 	.word	0x08019b50
 8001f10:	20000ace 	.word	0x20000ace
 8001f14:	08019b58 	.word	0x08019b58
 8001f18:	20000ad0 	.word	0x20000ad0
 8001f1c:	08019b60 	.word	0x08019b60
 8001f20:	20000ad2 	.word	0x20000ad2
 8001f24:	08019b68 	.word	0x08019b68
 8001f28:	20000abc 	.word	0x20000abc
 8001f2c:	08019b70 	.word	0x08019b70
 8001f30:	20000ad4 	.word	0x20000ad4
 8001f34:	08019b78 	.word	0x08019b78
 8001f38:	20000abe 	.word	0x20000abe
 8001f3c:	08019b80 	.word	0x08019b80
 8001f40:	4a77      	ldr	r2, [pc, #476]	@ (8002120 <main+0x530>)
 8001f42:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001f44:	4b76      	ldr	r3, [pc, #472]	@ (8002120 <main+0x530>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	2364      	movs	r3, #100	@ 0x64
 8001f4c:	4975      	ldr	r1, [pc, #468]	@ (8002124 <main+0x534>)
 8001f4e:	4876      	ldr	r0, [pc, #472]	@ (8002128 <main+0x538>)
 8001f50:	f005 f962 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "H4_%d\r\n", dig_H4);
 8001f54:	4b75      	ldr	r3, [pc, #468]	@ (800212c <main+0x53c>)
 8001f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4974      	ldr	r1, [pc, #464]	@ (8002130 <main+0x540>)
 8001f5e:	4871      	ldr	r0, [pc, #452]	@ (8002124 <main+0x534>)
 8001f60:	f015 fc60 	bl	8017824 <siprintf>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4a6e      	ldr	r2, [pc, #440]	@ (8002120 <main+0x530>)
 8001f68:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002120 <main+0x530>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	2364      	movs	r3, #100	@ 0x64
 8001f72:	496c      	ldr	r1, [pc, #432]	@ (8002124 <main+0x534>)
 8001f74:	486c      	ldr	r0, [pc, #432]	@ (8002128 <main+0x538>)
 8001f76:	f005 f94f 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "H5_%d\r\n", dig_H5);
 8001f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002134 <main+0x544>)
 8001f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f80:	461a      	mov	r2, r3
 8001f82:	496d      	ldr	r1, [pc, #436]	@ (8002138 <main+0x548>)
 8001f84:	4867      	ldr	r0, [pc, #412]	@ (8002124 <main+0x534>)
 8001f86:	f015 fc4d 	bl	8017824 <siprintf>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a64      	ldr	r2, [pc, #400]	@ (8002120 <main+0x530>)
 8001f8e:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001f90:	4b63      	ldr	r3, [pc, #396]	@ (8002120 <main+0x530>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	2364      	movs	r3, #100	@ 0x64
 8001f98:	4962      	ldr	r1, [pc, #392]	@ (8002124 <main+0x534>)
 8001f9a:	4863      	ldr	r0, [pc, #396]	@ (8002128 <main+0x538>)
 8001f9c:	f005 f93c 	bl	8007218 <HAL_UART_Transmit>
  uart_len = sprintf(uart_buf, "H6_%d\r\n", humidity_raw);
 8001fa0:	4b66      	ldr	r3, [pc, #408]	@ (800213c <main+0x54c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4966      	ldr	r1, [pc, #408]	@ (8002140 <main+0x550>)
 8001fa8:	485e      	ldr	r0, [pc, #376]	@ (8002124 <main+0x534>)
 8001faa:	f015 fc3b 	bl	8017824 <siprintf>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a5b      	ldr	r2, [pc, #364]	@ (8002120 <main+0x530>)
 8001fb2:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8001fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002120 <main+0x530>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	2364      	movs	r3, #100	@ 0x64
 8001fbc:	4959      	ldr	r1, [pc, #356]	@ (8002124 <main+0x534>)
 8001fbe:	485a      	ldr	r0, [pc, #360]	@ (8002128 <main+0x538>)
 8001fc0:	f005 f92a 	bl	8007218 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8001fc4:	f006 f8f6 	bl	80081b4 <MX_LWIP_Process>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Get_Raw_T();
 8001fc8:	f7ff fa56 	bl	8001478 <Get_Raw_T>
	  Get_Raw_P();
 8001fcc:	f7ff fa8a 	bl	80014e4 <Get_Raw_P>
	  Get_Raw_H();
 8001fd0:	f7ff fabe 	bl	8001550 <Get_Raw_H>
	  Compensate_T();
 8001fd4:	f7ff faec 	bl	80015b0 <Compensate_T>
	  Compensate_P();
 8001fd8:	f7ff fb32 	bl	8001640 <Compensate_P>
	  Componsate_H();
 8001fdc:	f7ff fce4 	bl	80019a8 <Componsate_H>
	  outtemp = (float)finaltemp / 100;
 8001fe0:	4b58      	ldr	r3, [pc, #352]	@ (8002144 <main+0x554>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fec:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8002148 <main+0x558>
 8001ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff4:	4b55      	ldr	r3, [pc, #340]	@ (800214c <main+0x55c>)
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
	  uart_len = sprintf(uart_buf, "TEMP_%0.2f\r\n", outtemp);
 8001ffa:	4b54      	ldr	r3, [pc, #336]	@ (800214c <main+0x55c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fad2 	bl	80005a8 <__aeabi_f2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4951      	ldr	r1, [pc, #324]	@ (8002150 <main+0x560>)
 800200a:	4846      	ldr	r0, [pc, #280]	@ (8002124 <main+0x534>)
 800200c:	f015 fc0a 	bl	8017824 <siprintf>
 8002010:	4603      	mov	r3, r0
 8002012:	4a43      	ldr	r2, [pc, #268]	@ (8002120 <main+0x530>)
 8002014:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8002016:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <main+0x530>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29a      	uxth	r2, r3
 800201c:	2364      	movs	r3, #100	@ 0x64
 800201e:	4941      	ldr	r1, [pc, #260]	@ (8002124 <main+0x534>)
 8002020:	4841      	ldr	r0, [pc, #260]	@ (8002128 <main+0x538>)
 8002022:	f005 f8f9 	bl	8007218 <HAL_UART_Transmit>

	  outpres = (float)finalpres;
 8002026:	4b4b      	ldr	r3, [pc, #300]	@ (8002154 <main+0x564>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fdea 	bl	8000c08 <__aeabi_d2f>
 8002034:	4603      	mov	r3, r0
 8002036:	4a48      	ldr	r2, [pc, #288]	@ (8002158 <main+0x568>)
 8002038:	6013      	str	r3, [r2, #0]
	  uart_len = sprintf(uart_buf, "PRESS_%0.1f\r\n", outpres);
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <main+0x568>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fab2 	bl	80005a8 <__aeabi_f2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4944      	ldr	r1, [pc, #272]	@ (800215c <main+0x56c>)
 800204a:	4836      	ldr	r0, [pc, #216]	@ (8002124 <main+0x534>)
 800204c:	f015 fbea 	bl	8017824 <siprintf>
 8002050:	4603      	mov	r3, r0
 8002052:	4a33      	ldr	r2, [pc, #204]	@ (8002120 <main+0x530>)
 8002054:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8002056:	4b32      	ldr	r3, [pc, #200]	@ (8002120 <main+0x530>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2364      	movs	r3, #100	@ 0x64
 800205e:	4931      	ldr	r1, [pc, #196]	@ (8002124 <main+0x534>)
 8002060:	4831      	ldr	r0, [pc, #196]	@ (8002128 <main+0x538>)
 8002062:	f005 f8d9 	bl	8007218 <HAL_UART_Transmit>

	  outhum = (float)finalhumid;
 8002066:	4b3e      	ldr	r3, [pc, #248]	@ (8002160 <main+0x570>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f7fe fdca 	bl	8000c08 <__aeabi_d2f>
 8002074:	4603      	mov	r3, r0
 8002076:	4a3b      	ldr	r2, [pc, #236]	@ (8002164 <main+0x574>)
 8002078:	6013      	str	r3, [r2, #0]
	  uart_len = sprintf(uart_buf, "HUM_%0.1f\r\n", outhum);
 800207a:	4b3a      	ldr	r3, [pc, #232]	@ (8002164 <main+0x574>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fa92 	bl	80005a8 <__aeabi_f2d>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4937      	ldr	r1, [pc, #220]	@ (8002168 <main+0x578>)
 800208a:	4826      	ldr	r0, [pc, #152]	@ (8002124 <main+0x534>)
 800208c:	f015 fbca 	bl	8017824 <siprintf>
 8002090:	4603      	mov	r3, r0
 8002092:	4a23      	ldr	r2, [pc, #140]	@ (8002120 <main+0x530>)
 8002094:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_len, 100);
 8002096:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <main+0x530>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b29a      	uxth	r2, r3
 800209c:	2364      	movs	r3, #100	@ 0x64
 800209e:	4921      	ldr	r1, [pc, #132]	@ (8002124 <main+0x534>)
 80020a0:	4821      	ldr	r0, [pc, #132]	@ (8002128 <main+0x538>)
 80020a2:	f005 f8b9 	bl	8007218 <HAL_UART_Transmit>

	  if(green == 1)
 80020a6:	4b31      	ldr	r3, [pc, #196]	@ (800216c <main+0x57c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <main+0x4ca>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	2101      	movs	r1, #1
 80020b2:	482f      	ldr	r0, [pc, #188]	@ (8002170 <main+0x580>)
 80020b4:	f002 fe60 	bl	8004d78 <HAL_GPIO_WritePin>
 80020b8:	e008      	b.n	80020cc <main+0x4dc>

	  }
	  else if(green==0)
 80020ba:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <main+0x57c>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <main+0x4dc>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2101      	movs	r1, #1
 80020c6:	482a      	ldr	r0, [pc, #168]	@ (8002170 <main+0x580>)
 80020c8:	f002 fe56 	bl	8004d78 <HAL_GPIO_WritePin>
	  }
	  if(blue == 1)
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <main+0x584>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <main+0x4f0>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	2180      	movs	r1, #128	@ 0x80
 80020d8:	4825      	ldr	r0, [pc, #148]	@ (8002170 <main+0x580>)
 80020da:	f002 fe4d 	bl	8004d78 <HAL_GPIO_WritePin>
 80020de:	e008      	b.n	80020f2 <main+0x502>

	  }
	  else if(blue==0)
 80020e0:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <main+0x584>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d104      	bne.n	80020f2 <main+0x502>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2180      	movs	r1, #128	@ 0x80
 80020ec:	4820      	ldr	r0, [pc, #128]	@ (8002170 <main+0x580>)
 80020ee:	f002 fe43 	bl	8004d78 <HAL_GPIO_WritePin>
	  }
	  if(red == 1)
 80020f2:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <main+0x588>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d106      	bne.n	8002108 <main+0x518>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002100:	481b      	ldr	r0, [pc, #108]	@ (8002170 <main+0x580>)
 8002102:	f002 fe39 	bl	8004d78 <HAL_GPIO_WritePin>
 8002106:	e75d      	b.n	8001fc4 <main+0x3d4>

	  }
	  else if(red==0)
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <main+0x588>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f af59 	bne.w	8001fc4 <main+0x3d4>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002118:	4815      	ldr	r0, [pc, #84]	@ (8002170 <main+0x580>)
 800211a:	f002 fe2d 	bl	8004d78 <HAL_GPIO_WritePin>
	  MX_LWIP_Process();
 800211e:	e751      	b.n	8001fc4 <main+0x3d4>
 8002120:	20000a84 	.word	0x20000a84
 8002124:	20000a50 	.word	0x20000a50
 8002128:	20000488 	.word	0x20000488
 800212c:	20000ad6 	.word	0x20000ad6
 8002130:	08019b88 	.word	0x08019b88
 8002134:	20000ad8 	.word	0x20000ad8
 8002138:	08019b90 	.word	0x08019b90
 800213c:	20000a90 	.word	0x20000a90
 8002140:	08019b98 	.word	0x08019b98
 8002144:	20000a94 	.word	0x20000a94
 8002148:	42c80000 	.word	0x42c80000
 800214c:	20000aac 	.word	0x20000aac
 8002150:	08019ba0 	.word	0x08019ba0
 8002154:	20000a98 	.word	0x20000a98
 8002158:	20000ab0 	.word	0x20000ab0
 800215c:	08019bb0 	.word	0x08019bb0
 8002160:	20000aa0 	.word	0x20000aa0
 8002164:	20000ab4 	.word	0x20000ab4
 8002168:	08019bc0 	.word	0x08019bc0
 800216c:	20000a18 	.word	0x20000a18
 8002170:	40020400 	.word	0x40020400
 8002174:	20000a19 	.word	0x20000a19
 8002178:	20000a1a 	.word	0x20000a1a

0800217c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b094      	sub	sp, #80	@ 0x50
 8002180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002182:	f107 0320 	add.w	r3, r7, #32
 8002186:	2230      	movs	r2, #48	@ 0x30
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f015 fbd7 	bl	801793e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021a0:	f002 ff4c 	bl	800503c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <SystemClock_Config+0xc8>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	4a26      	ldr	r2, [pc, #152]	@ (8002244 <SystemClock_Config+0xc8>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <SystemClock_Config+0xc8>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80021bc:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <SystemClock_Config+0xcc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80021c4:	4a20      	ldr	r2, [pc, #128]	@ (8002248 <SystemClock_Config+0xcc>)
 80021c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <SystemClock_Config+0xcc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d8:	2301      	movs	r3, #1
 80021da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e2:	2302      	movs	r3, #2
 80021e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021ec:	2304      	movs	r3, #4
 80021ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80021f0:	2348      	movs	r3, #72	@ 0x48
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021f4:	2302      	movs	r3, #2
 80021f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80021f8:	2303      	movs	r3, #3
 80021fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fc:	f107 0320 	add.w	r3, r7, #32
 8002200:	4618      	mov	r0, r3
 8002202:	f002 ff2b 	bl	800505c <HAL_RCC_OscConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800220c:	f000 f996 	bl	800253c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002210:	230f      	movs	r3, #15
 8002212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002214:	2302      	movs	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800221c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	2102      	movs	r1, #2
 800222c:	4618      	mov	r0, r3
 800222e:	f003 f9b9 	bl	80055a4 <HAL_RCC_ClockConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002238:	f000 f980 	bl	800253c <Error_Handler>
  }
}
 800223c:	bf00      	nop
 800223e:	3750      	adds	r7, #80	@ 0x50
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	40007000 	.word	0x40007000

0800224c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002250:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <MX_SPI1_Init+0x74>)
 8002252:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <MX_SPI1_Init+0x78>)
 8002254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002256:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <MX_SPI1_Init+0x74>)
 8002258:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800225c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800225e:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <MX_SPI1_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002264:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <MX_SPI1_Init+0x74>)
 8002266:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800226a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800226c:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <MX_SPI1_Init+0x74>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002272:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <MX_SPI1_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <MX_SPI1_Init+0x74>)
 800227a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800227e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <MX_SPI1_Init+0x74>)
 8002282:	2208      	movs	r2, #8
 8002284:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <MX_SPI1_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <MX_SPI1_Init+0x74>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <MX_SPI1_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <MX_SPI1_Init+0x74>)
 800229a:	2207      	movs	r2, #7
 800229c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <MX_SPI1_Init+0x74>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <MX_SPI1_Init+0x74>)
 80022a6:	2208      	movs	r2, #8
 80022a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	@ (80022c0 <MX_SPI1_Init+0x74>)
 80022ac:	f003 ff90 	bl	80061d0 <HAL_SPI_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022b6:	f000 f941 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000364 	.word	0x20000364
 80022c4:	40013000 	.word	0x40013000

080022c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022cc:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 80022ce:	4a15      	ldr	r2, [pc, #84]	@ (8002324 <MX_USART3_UART_Init+0x5c>)
 80022d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80022d2:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 80022d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 8002306:	2200      	movs	r2, #0
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800230a:	4805      	ldr	r0, [pc, #20]	@ (8002320 <MX_USART3_UART_Init+0x58>)
 800230c:	f004 ff36 	bl	800717c <HAL_UART_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002316:	f000 f911 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000488 	.word	0x20000488
 8002324:	40004800 	.word	0x40004800

08002328 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800232c:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800232e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002332:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002334:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002336:	2206      	movs	r2, #6
 8002338:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800233c:	2202      	movs	r2, #2
 800233e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002348:	2202      	movs	r2, #2
 800234a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800234e:	2201      	movs	r2, #1
 8002350:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002360:	2201      	movs	r2, #1
 8002362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002366:	2200      	movs	r2, #0
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800236a:	4805      	ldr	r0, [pc, #20]	@ (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800236c:	f002 fd1d 	bl	8004daa <HAL_PCD_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002376:	f000 f8e1 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000510 	.word	0x20000510

08002384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <MX_DMA_Init+0x48>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a0f      	ldr	r2, [pc, #60]	@ (80023cc <MX_DMA_Init+0x48>)
 8002390:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <MX_DMA_Init+0x48>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	203a      	movs	r0, #58	@ 0x3a
 80023a8:	f000 fe99 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023ac:	203a      	movs	r0, #58	@ 0x3a
 80023ae:	f000 feb2 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	203b      	movs	r0, #59	@ 0x3b
 80023b8:	f000 fe91 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80023bc:	203b      	movs	r0, #59	@ 0x3b
 80023be:	f000 feaa 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800

080023d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	@ 0x30
 80023d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
 80023e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	4b50      	ldr	r3, [pc, #320]	@ (8002528 <MX_GPIO_Init+0x158>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002528 <MX_GPIO_Init+0x158>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002528 <MX_GPIO_Init+0x158>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a49      	ldr	r2, [pc, #292]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b47      	ldr	r3, [pc, #284]	@ (8002528 <MX_GPIO_Init+0x158>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	4b44      	ldr	r3, [pc, #272]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	4a43      	ldr	r2, [pc, #268]	@ (8002528 <MX_GPIO_Init+0x158>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	@ 0x30
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	4b3e      	ldr	r3, [pc, #248]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <MX_GPIO_Init+0x158>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a37      	ldr	r2, [pc, #220]	@ (8002528 <MX_GPIO_Init+0x158>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b35      	ldr	r3, [pc, #212]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800245e:	4b32      	ldr	r3, [pc, #200]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a31      	ldr	r2, [pc, #196]	@ (8002528 <MX_GPIO_Init+0x158>)
 8002464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <MX_GPIO_Init+0x158>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002476:	2200      	movs	r2, #0
 8002478:	2110      	movs	r1, #16
 800247a:	482c      	ldr	r0, [pc, #176]	@ (800252c <MX_GPIO_Init+0x15c>)
 800247c:	f002 fc7c 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002486:	482a      	ldr	r0, [pc, #168]	@ (8002530 <MX_GPIO_Init+0x160>)
 8002488:	f002 fc76 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	2140      	movs	r1, #64	@ 0x40
 8002490:	4828      	ldr	r0, [pc, #160]	@ (8002534 <MX_GPIO_Init+0x164>)
 8002492:	f002 fc71 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002496:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800249a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800249c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4619      	mov	r1, r3
 80024ac:	4822      	ldr	r0, [pc, #136]	@ (8002538 <MX_GPIO_Init+0x168>)
 80024ae:	f002 fab7 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b2:	2310      	movs	r3, #16
 80024b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b6:	2301      	movs	r3, #1
 80024b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2300      	movs	r3, #0
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	4818      	ldr	r0, [pc, #96]	@ (800252c <MX_GPIO_Init+0x15c>)
 80024ca:	f002 faa9 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80024ce:	f244 0381 	movw	r3, #16513	@ 0x4081
 80024d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	4812      	ldr	r0, [pc, #72]	@ (8002530 <MX_GPIO_Init+0x160>)
 80024e8:	f002 fa9a 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80024ec:	2340      	movs	r3, #64	@ 0x40
 80024ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	4619      	mov	r1, r3
 8002502:	480c      	ldr	r0, [pc, #48]	@ (8002534 <MX_GPIO_Init+0x164>)
 8002504:	f002 fa8c 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250c:	2300      	movs	r3, #0
 800250e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	4806      	ldr	r0, [pc, #24]	@ (8002534 <MX_GPIO_Init+0x164>)
 800251c:	f002 fa80 	bl	8004a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	@ 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40021800 	.word	0x40021800
 8002538:	40020800 	.word	0x40020800

0800253c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002540:	b672      	cpsid	i
}
 8002542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <Error_Handler+0x8>

08002548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <HAL_MspInit+0x44>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <HAL_MspInit+0x44>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	@ 0x40
 800255a:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <HAL_MspInit+0x44>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <HAL_MspInit+0x44>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4a08      	ldr	r2, [pc, #32]	@ (800258c <HAL_MspInit+0x44>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_MspInit+0x44>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a53      	ldr	r2, [pc, #332]	@ (80026fc <HAL_SPI_MspInit+0x16c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f040 80a0 	bne.w	80026f4 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025b4:	4b52      	ldr	r3, [pc, #328]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b8:	4a51      	ldr	r2, [pc, #324]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025be:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d8:	4b49      	ldr	r3, [pc, #292]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	4b46      	ldr	r3, [pc, #280]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	4a45      	ldr	r2, [pc, #276]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f0:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <HAL_SPI_MspInit+0x170>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025fc:	2360      	movs	r3, #96	@ 0x60
 80025fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800260c:	2305      	movs	r3, #5
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	4619      	mov	r1, r3
 8002616:	483b      	ldr	r0, [pc, #236]	@ (8002704 <HAL_SPI_MspInit+0x174>)
 8002618:	f002 fa02 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800261c:	2320      	movs	r3, #32
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800262c:	2305      	movs	r3, #5
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	4834      	ldr	r0, [pc, #208]	@ (8002708 <HAL_SPI_MspInit+0x178>)
 8002638:	f002 f9f2 	bl	8004a20 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800263c:	4b33      	ldr	r3, [pc, #204]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 800263e:	4a34      	ldr	r2, [pc, #208]	@ (8002710 <HAL_SPI_MspInit+0x180>)
 8002640:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002642:	4b32      	ldr	r3, [pc, #200]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002644:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002648:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800264a:	4b30      	ldr	r3, [pc, #192]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002650:	4b2e      	ldr	r3, [pc, #184]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002656:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002658:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800265c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800265e:	4b2b      	ldr	r3, [pc, #172]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002660:	2200      	movs	r2, #0
 8002662:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002664:	4b29      	ldr	r3, [pc, #164]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002670:	4b26      	ldr	r3, [pc, #152]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002676:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800267c:	4823      	ldr	r0, [pc, #140]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 800267e:	f000 fd65 	bl	800314c <HAL_DMA_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8002688:	f7ff ff58 	bl	800253c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a1f      	ldr	r2, [pc, #124]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002690:	659a      	str	r2, [r3, #88]	@ 0x58
 8002692:	4a1e      	ldr	r2, [pc, #120]	@ (800270c <HAL_SPI_MspInit+0x17c>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 800269a:	4a1f      	ldr	r2, [pc, #124]	@ (8002718 <HAL_SPI_MspInit+0x188>)
 800269c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800269e:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026a0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ba:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80026d8:	480e      	ldr	r0, [pc, #56]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026da:	f000 fd37 	bl	800314c <HAL_DMA_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80026e4:	f7ff ff2a 	bl	800253c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80026ee:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <HAL_SPI_MspInit+0x184>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026f4:	bf00      	nop
 80026f6:	3728      	adds	r7, #40	@ 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40013000 	.word	0x40013000
 8002700:	40023800 	.word	0x40023800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	200003c8 	.word	0x200003c8
 8002710:	40026440 	.word	0x40026440
 8002714:	20000428 	.word	0x20000428
 8002718:	40026458 	.word	0x40026458

0800271c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b0aa      	sub	sp, #168	@ 0xa8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	2284      	movs	r2, #132	@ 0x84
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f015 f8fe 	bl	801793e <memset>
  if(huart->Instance==USART3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <HAL_UART_MspInit+0xb4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d13c      	bne.n	80027c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800274c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002750:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002752:	2300      	movs	r3, #0
 8002754:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f948 	bl	80059f0 <HAL_RCCEx_PeriphCLKConfig>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002766:	f7ff fee9 	bl	800253c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800276a:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_UART_MspInit+0xb8>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <HAL_UART_MspInit+0xb8>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <HAL_UART_MspInit+0xb8>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <HAL_UART_MspInit+0xb8>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a13      	ldr	r2, [pc, #76]	@ (80027d4 <HAL_UART_MspInit+0xb8>)
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_UART_MspInit+0xb8>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800279a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800279e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027b4:	2307      	movs	r3, #7
 80027b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80027be:	4619      	mov	r1, r3
 80027c0:	4805      	ldr	r0, [pc, #20]	@ (80027d8 <HAL_UART_MspInit+0xbc>)
 80027c2:	f002 f92d 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027c6:	bf00      	nop
 80027c8:	37a8      	adds	r7, #168	@ 0xa8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40004800 	.word	0x40004800
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020c00 	.word	0x40020c00

080027dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0ac      	sub	sp, #176	@ 0xb0
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f4:	f107 0318 	add.w	r3, r7, #24
 80027f8:	2284      	movs	r2, #132	@ 0x84
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f015 f89e 	bl	801793e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800280a:	d159      	bne.n	80028c0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800280c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002810:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002818:	f107 0318 	add.w	r3, r7, #24
 800281c:	4618      	mov	r0, r3
 800281e:	f003 f8e7 	bl	80059f0 <HAL_RCCEx_PeriphCLKConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002828:	f7ff fe88 	bl	800253c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282c:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	4a25      	ldr	r2, [pc, #148]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6313      	str	r3, [r2, #48]	@ 0x30
 8002838:	4b23      	ldr	r3, [pc, #140]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002844:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800285e:	230a      	movs	r3, #10
 8002860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002864:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002868:	4619      	mov	r1, r3
 800286a:	4818      	ldr	r0, [pc, #96]	@ (80028cc <HAL_PCD_MspInit+0xf0>)
 800286c:	f002 f8d8 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002870:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002884:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002888:	4619      	mov	r1, r3
 800288a:	4810      	ldr	r0, [pc, #64]	@ (80028cc <HAL_PCD_MspInit+0xf0>)
 800288c:	f002 f8c8 	bl	8004a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002890:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	4a0c      	ldr	r2, [pc, #48]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 8002896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800289a:	6353      	str	r3, [r2, #52]	@ 0x34
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	4a06      	ldr	r2, [pc, #24]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 80028ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <HAL_PCD_MspInit+0xec>)
 80028b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80028c0:	bf00      	nop
 80028c2:	37b0      	adds	r7, #176	@ 0xb0
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <NMI_Handler+0x4>

080028d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <MemManage_Handler+0x4>

080028e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002926:	f000 fabb 	bl	8002ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <DMA2_Stream2_IRQHandler+0x10>)
 8002936:	f000 fd17 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200003c8 	.word	0x200003c8

08002944 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002948:	4802      	ldr	r0, [pc, #8]	@ (8002954 <DMA2_Stream3_IRQHandler+0x10>)
 800294a:	f000 fd0d 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000428 	.word	0x20000428

08002958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return 1;
 800295c:	2301      	movs	r3, #1
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_kill>:

int _kill(int pid, int sig)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002972:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <_kill+0x20>)
 8002974:	2216      	movs	r2, #22
 8002976:	601a      	str	r2, [r3, #0]
  return -1;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	20009274 	.word	0x20009274

0800298c <_exit>:

void _exit (int status)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ffe5 	bl	8002968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800299e:	bf00      	nop
 80029a0:	e7fd      	b.n	800299e <_exit+0x12>

080029a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e00a      	b.n	80029ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b4:	f3af 8000 	nop.w
 80029b8:	4601      	mov	r1, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	60ba      	str	r2, [r7, #8]
 80029c0:	b2ca      	uxtb	r2, r1
 80029c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	dbf0      	blt.n	80029b4 <_read+0x12>
  }

  return len;
 80029d2:	687b      	ldr	r3, [r7, #4]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e009      	b.n	8002a02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	60ba      	str	r2, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	dbf1      	blt.n	80029ee <_write+0x12>
  }
  return len;
 8002a0a:	687b      	ldr	r3, [r7, #4]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <_close>:

int _close(int file)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a3c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_isatty>:

int _isatty(int file)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a84:	4a14      	ldr	r2, [pc, #80]	@ (8002ad8 <_sbrk+0x5c>)
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <_sbrk+0x60>)
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a90:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a98:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <_sbrk+0x64>)
 8002a9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <_sbrk+0x68>)
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d205      	bcs.n	8002ab8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002aac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <_sbrk+0x6c>)
 8002aae:	220c      	movs	r2, #12
 8002ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab6:	e009      	b.n	8002acc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002abe:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a06      	ldr	r2, [pc, #24]	@ (8002ae0 <_sbrk+0x64>)
 8002ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	20050000 	.word	0x20050000
 8002adc:	00000400 	.word	0x00000400
 8002ae0:	20000adc 	.word	0x20000adc
 8002ae4:	20009288 	.word	0x20009288
 8002ae8:	20009274 	.word	0x20009274

08002aec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <SystemInit+0x20>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <SystemInit+0x20>)
 8002af8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002afc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b14:	480d      	ldr	r0, [pc, #52]	@ (8002b4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b16:	490e      	ldr	r1, [pc, #56]	@ (8002b50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b18:	4a0e      	ldr	r2, [pc, #56]	@ (8002b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b1c:	e002      	b.n	8002b24 <LoopCopyDataInit>

08002b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b22:	3304      	adds	r3, #4

08002b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b28:	d3f9      	bcc.n	8002b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b2c:	4c0b      	ldr	r4, [pc, #44]	@ (8002b5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b30:	e001      	b.n	8002b36 <LoopFillZerobss>

08002b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b34:	3204      	adds	r2, #4

08002b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b38:	d3fb      	bcc.n	8002b32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b3a:	f7ff ffd7 	bl	8002aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b3e:	f014 ff6f 	bl	8017a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b42:	f7ff f855 	bl	8001bf0 <main>
  bx  lr    
 8002b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b48:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002b54:	0802086c 	.word	0x0802086c
  ldr r2, =_sbss
 8002b58:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8002b5c:	20009284 	.word	0x20009284

08002b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <ADC_IRQHandler>

08002b62 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <LAN8742_RegisterBusIO+0x28>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <LAN8742_RegisterBusIO+0x28>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <LAN8742_RegisterBusIO+0x28>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	e014      	b.n	8002bba <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d17c      	bne.n	8002ce0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e01c      	b.n	8002c3a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f107 0208 	add.w	r2, r7, #8
 8002c08:	2112      	movs	r1, #18
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	4798      	blx	r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	da03      	bge.n	8002c1c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002c14:	f06f 0304 	mvn.w	r3, #4
 8002c18:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002c1a:	e00b      	b.n	8002c34 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d105      	bne.n	8002c34 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
         break;
 8002c32:	e005      	b.n	8002c40 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3301      	adds	r3, #1
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b1f      	cmp	r3, #31
 8002c3e:	d9df      	bls.n	8002c00 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b1f      	cmp	r3, #31
 8002c46:	d902      	bls.n	8002c4e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002c48:	f06f 0302 	mvn.w	r3, #2
 8002c4c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d145      	bne.n	8002ce0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6810      	ldr	r0, [r2, #0]
 8002c5c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c60:	2100      	movs	r1, #0
 8002c62:	4798      	blx	r3
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db37      	blt.n	8002cda <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6810      	ldr	r0, [r2, #0]
 8002c72:	f107 0208 	add.w	r2, r7, #8
 8002c76:	2100      	movs	r1, #0
 8002c78:	4798      	blx	r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db28      	blt.n	8002cd2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4798      	blx	r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002c8a:	e01c      	b.n	8002cc6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4798      	blx	r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c9e:	d80e      	bhi.n	8002cbe <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6810      	ldr	r0, [r2, #0]
 8002ca8:	f107 0208 	add.w	r2, r7, #8
 8002cac:	2100      	movs	r1, #0
 8002cae:	4798      	blx	r3
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da07      	bge.n	8002cc6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002cb6:	f06f 0304 	mvn.w	r3, #4
 8002cba:	613b      	str	r3, [r7, #16]
                 break;
 8002cbc:	e010      	b.n	8002ce0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002cbe:	f06f 0301 	mvn.w	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
               break;
 8002cc4:	e00c      	b.n	8002ce0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1dd      	bne.n	8002c8c <LAN8742_Init+0xc6>
 8002cd0:	e006      	b.n	8002ce0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002cd2:	f06f 0304 	mvn.w	r3, #4
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	e002      	b.n	8002ce0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002cda:	f06f 0303 	mvn.w	r3, #3
 8002cde:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d112      	bne.n	8002d0c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	4798      	blx	r3
 8002cec:	4603      	mov	r3, r0
 8002cee:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002cf0:	bf00      	nop
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	4798      	blx	r3
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002d04:	d9f5      	bls.n	8002cf2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 }
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6810      	ldr	r0, [r2, #0]
 8002d2a:	f107 020c 	add.w	r2, r7, #12
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4798      	blx	r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da02      	bge.n	8002d3e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002d38:	f06f 0304 	mvn.w	r3, #4
 8002d3c:	e06e      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6810      	ldr	r0, [r2, #0]
 8002d46:	f107 020c 	add.w	r2, r7, #12
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	4798      	blx	r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	da02      	bge.n	8002d5a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002d54:	f06f 0304 	mvn.w	r3, #4
 8002d58:	e060      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002d64:	2301      	movs	r3, #1
 8002d66:	e059      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6810      	ldr	r0, [r2, #0]
 8002d70:	f107 020c 	add.w	r2, r7, #12
 8002d74:	2100      	movs	r1, #0
 8002d76:	4798      	blx	r3
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da02      	bge.n	8002d84 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002d7e:	f06f 0304 	mvn.w	r3, #4
 8002d82:	e04b      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11b      	bne.n	8002dc6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d006      	beq.n	8002da6 <LAN8742_GetLinkState+0x90>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002da2:	2302      	movs	r3, #2
 8002da4:	e03a      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e033      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e02c      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	e02a      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6810      	ldr	r0, [r2, #0]
 8002dce:	f107 020c 	add.w	r2, r7, #12
 8002dd2:	211f      	movs	r1, #31
 8002dd4:	4798      	blx	r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da02      	bge.n	8002de2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002ddc:	f06f 0304 	mvn.w	r3, #4
 8002de0:	e01c      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002dec:	2306      	movs	r3, #6
 8002dee:	e015      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 031c 	and.w	r3, r3, #28
 8002df6:	2b18      	cmp	r3, #24
 8002df8:	d101      	bne.n	8002dfe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e00e      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 031c 	and.w	r3, r3, #28
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d101      	bne.n	8002e0c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e007      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 031c 	and.w	r3, r3, #28
 8002e12:	2b14      	cmp	r3, #20
 8002e14:	d101      	bne.n	8002e1a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002e16:	2304      	movs	r3, #4
 8002e18:	e000      	b.n	8002e1c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002e1a:	2305      	movs	r3, #5
    }				
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f000 f94d 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f000 f806 	bl	8002e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e34:	f7ff fb88 	bl	8002548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_InitTick+0x54>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_InitTick+0x58>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f967 	bl	8003132 <HAL_SYSTICK_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d80a      	bhi.n	8002e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e74:	2200      	movs	r2, #0
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f000 f92f 	bl	80030de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e80:	4a06      	ldr	r2, [pc, #24]	@ (8002e9c <HAL_InitTick+0x5c>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	20000014 	.word	0x20000014
 8002e9c:	20000010 	.word	0x20000010

08002ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_IncTick+0x20>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_IncTick+0x24>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <HAL_IncTick+0x24>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000014 	.word	0x20000014
 8002ec4:	20000ae0 	.word	0x20000ae0

08002ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_GetTick+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000ae0 	.word	0x20000ae0

08002ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff ffee 	bl	8002ec8 <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d005      	beq.n	8002f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <HAL_Delay+0x44>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f06:	bf00      	nop
 8002f08:	f7ff ffde 	bl	8002ec8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8f7      	bhi.n	8002f08 <HAL_Delay+0x28>
  {
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000014 	.word	0x20000014

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <__NVIC_SetPriorityGrouping+0x40>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <__NVIC_SetPriorityGrouping+0x40>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00
 8002f6c:	05fa0000 	.word	0x05fa0000

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	@ (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	@ (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	@ (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	@ 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003094:	d301      	bcc.n	800309a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2301      	movs	r3, #1
 8003098:	e00f      	b.n	80030ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309a:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <SysTick_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a2:	210f      	movs	r1, #15
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f7ff ff8e 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <SysTick_Config+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <SysTick_Config+0x40>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff29 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff3e 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff8e 	bl	800301c <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5d 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff31 	bl	8002f8c <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffa2 	bl	8003084 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff feb6 	bl	8002ec8 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e099      	b.n	800329c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	e00f      	b.n	80031aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7ff fe9d 	bl	8002ec8 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d908      	bls.n	80031aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e078      	b.n	800329c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e8      	bne.n	800318a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4b38      	ldr	r3, [pc, #224]	@ (80032a4 <HAL_DMA_Init+0x158>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	2b04      	cmp	r3, #4
 800323c:	d117      	bne.n	800326e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa77 	bl	8003744 <DMA_CheckFifoParam>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2240      	movs	r2, #64	@ 0x40
 8003260:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800326a:	2301      	movs	r3, #1
 800326c:	e016      	b.n	800329c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa2e 	bl	80036d8 <DMA_CalcBaseAndBitshift>
 800327c:	4603      	mov	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	223f      	movs	r2, #63	@ 0x3f
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f010803f 	.word	0xf010803f

080032a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Start_IT+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e048      	b.n	8003360 <HAL_DMA_Start_IT+0xb8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d137      	bne.n	8003352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9c0 	bl	800367c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	223f      	movs	r2, #63	@ 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0216 	orr.w	r2, r2, #22
 8003316:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003326:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e005      	b.n	800335e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800335a:	2302      	movs	r3, #2
 800335c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800335e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003374:	4b8e      	ldr	r3, [pc, #568]	@ (80035b0 <HAL_DMA_IRQHandler+0x248>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a8e      	ldr	r2, [pc, #568]	@ (80035b4 <HAL_DMA_IRQHandler+0x24c>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003392:	2208      	movs	r2, #8
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01a      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	2208      	movs	r2, #8
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	2204      	movs	r2, #4
 8003410:	409a      	lsls	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342c:	2204      	movs	r2, #4
 800342e:	409a      	lsls	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003444:	2210      	movs	r2, #16
 8003446:	409a      	lsls	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d043      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03c      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003462:	2210      	movs	r2, #16
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d018      	beq.n	80034aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d108      	bne.n	8003498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d024      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
 8003496:	e01f      	b.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01b      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e016      	b.n	80034d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0208 	bic.w	r2, r2, #8
 80034c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034dc:	2220      	movs	r2, #32
 80034de:	409a      	lsls	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 808f 	beq.w	8003608 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8087 	beq.w	8003608 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	2220      	movs	r2, #32
 8003500:	409a      	lsls	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b05      	cmp	r3, #5
 8003510:	d136      	bne.n	8003580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0216 	bic.w	r2, r2, #22
 8003520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_DMA_IRQHandler+0x1da>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003556:	223f      	movs	r2, #63	@ 0x3f
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	d07e      	beq.n	8003674 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
        }
        return;
 800357e:	e079      	b.n	8003674 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10d      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d031      	beq.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
 80035ac:	e02c      	b.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
 80035ae:	bf00      	nop
 80035b0:	2000000c 	.word	0x2000000c
 80035b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d023      	beq.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e01e      	b.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10f      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0210 	bic.w	r2, r2, #16
 80035e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360c:	2b00      	cmp	r3, #0
 800360e:	d032      	beq.n	8003676 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d022      	beq.n	8003662 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2205      	movs	r2, #5
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3301      	adds	r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	d307      	bcc.n	8003650 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f2      	bne.n	8003634 <HAL_DMA_IRQHandler+0x2cc>
 800364e:	e000      	b.n	8003652 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003650:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	e000      	b.n	8003676 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003674:	bf00      	nop
    }
  }
}
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003698:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b40      	cmp	r3, #64	@ 0x40
 80036a8:	d108      	bne.n	80036bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ba:	e007      	b.n	80036cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	3b10      	subs	r3, #16
 80036e8:	4a13      	ldr	r2, [pc, #76]	@ (8003738 <DMA_CalcBaseAndBitshift+0x60>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f2:	4a12      	ldr	r2, [pc, #72]	@ (800373c <DMA_CalcBaseAndBitshift+0x64>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d908      	bls.n	8003718 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <DMA_CalcBaseAndBitshift+0x68>)
 800370e:	4013      	ands	r3, r2
 8003710:	1d1a      	adds	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	659a      	str	r2, [r3, #88]	@ 0x58
 8003716:	e006      	b.n	8003726 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <DMA_CalcBaseAndBitshift+0x68>)
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	aaaaaaab 	.word	0xaaaaaaab
 800373c:	0801ccc4 	.word	0x0801ccc4
 8003740:	fffffc00 	.word	0xfffffc00

08003744 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d11f      	bne.n	800379e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d856      	bhi.n	8003812 <DMA_CheckFifoParam+0xce>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <DMA_CheckFifoParam+0x28>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	0800378f 	.word	0x0800378f
 8003774:	0800377d 	.word	0x0800377d
 8003778:	08003813 	.word	0x08003813
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d046      	beq.n	8003816 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e043      	b.n	8003816 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003796:	d140      	bne.n	800381a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379c:	e03d      	b.n	800381a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a6:	d121      	bne.n	80037ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d837      	bhi.n	800381e <DMA_CheckFifoParam+0xda>
 80037ae:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <DMA_CheckFifoParam+0x70>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037cb 	.word	0x080037cb
 80037bc:	080037c5 	.word	0x080037c5
 80037c0:	080037dd 	.word	0x080037dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      break;
 80037c8:	e030      	b.n	800382c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d025      	beq.n	8003822 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037da:	e022      	b.n	8003822 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037e4:	d11f      	bne.n	8003826 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ea:	e01c      	b.n	8003826 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d903      	bls.n	80037fa <DMA_CheckFifoParam+0xb6>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d003      	beq.n	8003800 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037f8:	e018      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      break;
 80037fe:	e015      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      break;
 8003810:	e00b      	b.n	800382a <DMA_CheckFifoParam+0xe6>
      break;
 8003812:	bf00      	nop
 8003814:	e00a      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
 8003818:	e008      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e006      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e004      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;   
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
    }
  } 
  
  return status; 
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop

0800383c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e06a      	b.n	8003924 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2223      	movs	r2, #35	@ 0x23
 800385c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f004 fe8f 	bl	8008584 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	4b31      	ldr	r3, [pc, #196]	@ (800392c <HAL_ETH_Init+0xf0>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	4a30      	ldr	r2, [pc, #192]	@ (800392c <HAL_ETH_Init+0xf0>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003870:	6453      	str	r3, [r2, #68]	@ 0x44
 8003872:	4b2e      	ldr	r3, [pc, #184]	@ (800392c <HAL_ETH_Init+0xf0>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800387e:	4b2c      	ldr	r3, [pc, #176]	@ (8003930 <HAL_ETH_Init+0xf4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a2b      	ldr	r2, [pc, #172]	@ (8003930 <HAL_ETH_Init+0xf4>)
 8003884:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003888:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800388a:	4b29      	ldr	r3, [pc, #164]	@ (8003930 <HAL_ETH_Init+0xf4>)
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	4927      	ldr	r1, [pc, #156]	@ (8003930 <HAL_ETH_Init+0xf4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003898:	4b25      	ldr	r3, [pc, #148]	@ (8003930 <HAL_ETH_Init+0xf4>)
 800389a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b4:	f7ff fb08 	bl	8002ec8 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80038ba:	e011      	b.n	80038e0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80038bc:	f7ff fb04 	bl	8002ec8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80038ca:	d909      	bls.n	80038e0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2204      	movs	r2, #4
 80038d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	22e0      	movs	r2, #224	@ 0xe0
 80038d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e021      	b.n	8003924 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e4      	bne.n	80038bc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fdf0 	bl	80044d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fe97 	bl	800462c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 feed 	bl	80046de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	461a      	mov	r2, r3
 800390a:	2100      	movs	r1, #0
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fe55 	bl	80045bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2210      	movs	r2, #16
 800391e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40023800 	.word	0x40023800
 8003930:	40013800 	.word	0x40013800

08003934 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003942:	2b10      	cmp	r3, #16
 8003944:	d150      	bne.n	80039e8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2223      	movs	r2, #35	@ 0x23
 800394a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2204      	movs	r2, #4
 8003952:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f9fd 	bl	8003d54 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0208 	orr.w	r2, r2, #8
 8003968:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003972:	2001      	movs	r0, #1
 8003974:	f7ff fab4 	bl	8002ee0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0204 	orr.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003998:	2001      	movs	r0, #1
 800399a:	f7ff faa1 	bl	8002ee0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fc36 	bl	8004218 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039c2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039da:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2223      	movs	r2, #35	@ 0x23
 80039e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a00:	2b23      	cmp	r3, #35	@ 0x23
 8003a02:	d14a      	bne.n	8003a9a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2223      	movs	r2, #35	@ 0x23
 8003a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a22:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	f023 0302 	bic.w	r3, r3, #2
 8003a36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a3a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a54:	2001      	movs	r0, #1
 8003a56:	f7ff fa43 	bl	8002ee0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fbd8 	bl	8004218 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0208 	bic.w	r2, r2, #8
 8003a76:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a80:	2001      	movs	r0, #1
 8003a82:	f7ff fa2d 	bl	8002ee0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2210      	movs	r2, #16
 8003a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abc:	f043 0201 	orr.w	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07c      	b.n	8003bc4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad0:	2b23      	cmp	r3, #35	@ 0x23
 8003ad2:	d176      	bne.n	8003bc2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fe6d 	bl	80047b8 <ETH_Prepare_Tx_Descriptors>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e065      	b.n	8003bc4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003af8:	f3bf 8f4f 	dsb	sy
}
 8003afc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3206      	adds	r2, #6
 8003b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d904      	bls.n	8003b28 <HAL_ETH_Transmit+0x84>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	1f1a      	subs	r2, r3, #4
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3106      	adds	r1, #6
 8003b34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b3c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003b3e:	f7ff f9c3 	bl	8002ec8 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b44:	e037      	b.n	8003bb6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d011      	beq.n	8003b7c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f043 0208 	orr.w	r2, r3, #8
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e023      	b.n	8003bc4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d018      	beq.n	8003bb6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7ff f9a0 	bl	8002ec8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <HAL_ETH_Transmit+0xf6>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003bb0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e006      	b.n	8003bc4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	dbc3      	blt.n	8003b46 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0a8      	b.n	8003d4a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bfe:	2b23      	cmp	r3, #35	@ 0x23
 8003c00:	d001      	beq.n	8003c06 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0a1      	b.n	8003d4a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	3212      	adds	r2, #18
 8003c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c16:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c1c:	f1c3 0304 	rsb	r3, r3, #4
 8003c20:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c22:	e06a      	b.n	8003cfa <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <HAL_ETH_ReadData+0x88>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d040      	beq.n	8003cd6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00c      	beq.n	8003c98 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	0c1b      	lsrs	r3, r3, #16
 8003c84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c88:	3b04      	subs	r3, #4
 8003c8a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f004 fe2f 	bl	8008918 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	441a      	add	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d902      	bls.n	8003ce8 <HAL_ETH_ReadData+0x11c>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b04      	subs	r3, #4
 8003ce6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	3212      	adds	r2, #18
 8003cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	db06      	blt.n	8003d10 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d202      	bcs.n	8003d10 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d089      	beq.n	8003c24 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	441a      	add	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f815 	bl	8003d54 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d108      	bne.n	8003d48 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003d60:	2301      	movs	r3, #1
 8003d62:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d68:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	3212      	adds	r2, #18
 8003d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d74:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003d7c:	e040      	b.n	8003e00 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d112      	bne.n	8003dac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f004 fd94 	bl	80088b8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	74fb      	strb	r3, [r7, #19]
 8003d9a:	e007      	b.n	8003dac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	461a      	mov	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d026      	beq.n	8003e00 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003e38 <ETH_UpdateDescriptor+0xe4>)
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	e003      	b.n	8003dca <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003dc8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003dca:	f3bf 8f5f 	dmb	sy
}
 8003dce:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	3301      	adds	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d902      	bls.n	8003dee <ETH_UpdateDescriptor+0x9a>
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3b04      	subs	r3, #4
 8003dec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	3212      	adds	r2, #18
 8003df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df8:	617b      	str	r3, [r7, #20]
      desccount--;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <ETH_UpdateDescriptor+0xb8>
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1b8      	bne.n	8003d7e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d00c      	beq.n	8003e30 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2300      	movs	r3, #0
 8003e22:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003e30:	bf00      	nop
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	80004600 	.word	0x80004600

08003e3c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 031c 	and.w	r3, r3, #28
 8003e58:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	02db      	lsls	r3, r3, #11
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	019b      	lsls	r3, r3, #6
 8003e6a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0302 	bic.w	r3, r3, #2
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003e8c:	f7ff f81c 	bl	8002ec8 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e92:	e00d      	b.n	8003eb0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003e94:	f7ff f818 	bl	8002ec8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea2:	d301      	bcc.n	8003ea8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e010      	b.n	8003eca <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ec      	bne.n	8003e94 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 031c 	and.w	r3, r3, #28
 8003eee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	02db      	lsls	r3, r3, #11
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	019b      	lsls	r3, r3, #6
 8003f00:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f2c:	f7fe ffcc 	bl	8002ec8 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f32:	e00d      	b.n	8003f50 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003f34:	f7fe ffc8 	bl	8002ec8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f42:	d301      	bcc.n	8003f48 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e009      	b.n	8003f5c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ec      	bne.n	8003f34 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0d9      	b.n	800412c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf14      	ite	ne
 8003fcc:	2301      	movne	r3, #1
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf14      	ite	ne
 8004092:	2301      	movne	r3, #1
 8004094:	2300      	moveq	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf14      	ite	ne
 800411c:	2301      	movne	r3, #1
 800411e:	2300      	moveq	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e00b      	b.n	8004164 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004152:	2b10      	cmp	r3, #16
 8004154:	d105      	bne.n	8004162 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f883 	bl	8004264 <ETH_SetMACConfig>

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 031c 	bic.w	r3, r3, #28
 8004182:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004184:	f001 fc00 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 8004188:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4a1d      	ldr	r2, [pc, #116]	@ (8004204 <HAL_ETH_SetMDIOClockRange+0x98>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d908      	bls.n	80041a4 <HAL_ETH_SetMDIOClockRange+0x38>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d804      	bhi.n	80041a4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f043 0308 	orr.w	r3, r3, #8
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e027      	b.n	80041f4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a18      	ldr	r2, [pc, #96]	@ (8004208 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d908      	bls.n	80041be <HAL_ETH_SetMDIOClockRange+0x52>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a17      	ldr	r2, [pc, #92]	@ (800420c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d204      	bcs.n	80041be <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f043 030c 	orr.w	r3, r3, #12
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e01a      	b.n	80041f4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a12      	ldr	r2, [pc, #72]	@ (800420c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d303      	bcc.n	80041ce <HAL_ETH_SetMDIOClockRange+0x62>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a11      	ldr	r2, [pc, #68]	@ (8004210 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d911      	bls.n	80041f2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004210 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d908      	bls.n	80041e8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004214 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d804      	bhi.n	80041e8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f043 0304 	orr.w	r3, r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e005      	b.n	80041f4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f043 0310 	orr.w	r3, r3, #16
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e000      	b.n	80041f4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80041f2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	611a      	str	r2, [r3, #16]
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	01312cff 	.word	0x01312cff
 8004208:	02160ebf 	.word	0x02160ebf
 800420c:	03938700 	.word	0x03938700
 8004210:	05f5e0ff 	.word	0x05f5e0ff
 8004214:	08f0d17f 	.word	0x08f0d17f

08004218 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004236:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800423a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004248:	2001      	movs	r0, #1
 800424a:	f7fe fe49 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004258:	6193      	str	r3, [r2, #24]
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4b51      	ldr	r3, [pc, #324]	@ (80043c0 <ETH_SetMACConfig+0x15c>)
 800427a:	4013      	ands	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	7c1b      	ldrb	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <ETH_SetMACConfig+0x28>
 8004286:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800428a:	e000      	b.n	800428e <ETH_SetMACConfig+0x2a>
 800428c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	7c5b      	ldrb	r3, [r3, #17]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <ETH_SetMACConfig+0x38>
 8004296:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800429a:	e000      	b.n	800429e <ETH_SetMACConfig+0x3a>
 800429c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800429e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80042a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	7fdb      	ldrb	r3, [r3, #31]
 80042aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80042ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80042b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	7f92      	ldrb	r2, [r2, #30]
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	d102      	bne.n	80042c2 <ETH_SetMACConfig+0x5e>
 80042bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042c0:	e000      	b.n	80042c4 <ETH_SetMACConfig+0x60>
 80042c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80042c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	7f1b      	ldrb	r3, [r3, #28]
 80042ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80042cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80042d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	791b      	ldrb	r3, [r3, #4]
 80042d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80042da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80042e2:	2a00      	cmp	r2, #0
 80042e4:	d102      	bne.n	80042ec <ETH_SetMACConfig+0x88>
 80042e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042ea:	e000      	b.n	80042ee <ETH_SetMACConfig+0x8a>
 80042ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80042ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	7bdb      	ldrb	r3, [r3, #15]
 80042f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80042f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80042fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004304:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004306:	4313      	orrs	r3, r2
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800431e:	2001      	movs	r0, #1
 8004320:	f7fe fdde 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800433a:	4013      	ands	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004342:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800434a:	2a00      	cmp	r2, #0
 800434c:	d101      	bne.n	8004352 <ETH_SetMACConfig+0xee>
 800434e:	2280      	movs	r2, #128	@ 0x80
 8004350:	e000      	b.n	8004354 <ETH_SetMACConfig+0xf0>
 8004352:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004354:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800435a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004362:	2a01      	cmp	r2, #1
 8004364:	d101      	bne.n	800436a <ETH_SetMACConfig+0x106>
 8004366:	2208      	movs	r2, #8
 8004368:	e000      	b.n	800436c <ETH_SetMACConfig+0x108>
 800436a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800436c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004374:	2a01      	cmp	r2, #1
 8004376:	d101      	bne.n	800437c <ETH_SetMACConfig+0x118>
 8004378:	2204      	movs	r2, #4
 800437a:	e000      	b.n	800437e <ETH_SetMACConfig+0x11a>
 800437c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800437e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004386:	2a01      	cmp	r2, #1
 8004388:	d101      	bne.n	800438e <ETH_SetMACConfig+0x12a>
 800438a:	2202      	movs	r2, #2
 800438c:	e000      	b.n	8004390 <ETH_SetMACConfig+0x12c>
 800438e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004390:	4313      	orrs	r3, r2
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043a8:	2001      	movs	r0, #1
 80043aa:	f7fe fd99 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	619a      	str	r2, [r3, #24]
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	ff20810f 	.word	0xff20810f

080043c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4b3d      	ldr	r3, [pc, #244]	@ (80044d4 <ETH_SetDMAConfig+0x110>)
 80043de:	4013      	ands	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	7b1b      	ldrb	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <ETH_SetDMAConfig+0x2c>
 80043ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80043ee:	e000      	b.n	80043f2 <ETH_SetDMAConfig+0x2e>
 80043f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	7b5b      	ldrb	r3, [r3, #13]
 80043f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80043f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	7f52      	ldrb	r2, [r2, #29]
 80043fe:	2a00      	cmp	r2, #0
 8004400:	d102      	bne.n	8004408 <ETH_SetDMAConfig+0x44>
 8004402:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004406:	e000      	b.n	800440a <ETH_SetDMAConfig+0x46>
 8004408:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800440a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	7b9b      	ldrb	r3, [r3, #14]
 8004410:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004412:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004418:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	7f1b      	ldrb	r3, [r3, #28]
 800441e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004420:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	7f9b      	ldrb	r3, [r3, #30]
 8004426:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004428:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800442e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004436:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004438:	4313      	orrs	r3, r2
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004448:	461a      	mov	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800445a:	2001      	movs	r0, #1
 800445c:	f7fe fd40 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004468:	461a      	mov	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	791b      	ldrb	r3, [r3, #4]
 8004472:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004478:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800447e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004484:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800448c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800448e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004496:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800449c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044b8:	2001      	movs	r0, #1
 80044ba:	f7fe fd11 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6013      	str	r3, [r2, #0]
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	f8de3f23 	.word	0xf8de3f23

080044d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b0a6      	sub	sp, #152	@ 0x98
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80044ec:	2300      	movs	r3, #0
 80044ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004508:	2300      	movs	r3, #0
 800450a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004514:	2300      	movs	r3, #0
 8004516:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004518:	2300      	movs	r3, #0
 800451a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800451e:	2300      	movs	r3, #0
 8004520:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004522:	2300      	movs	r3, #0
 8004524:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800452e:	2300      	movs	r3, #0
 8004530:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004534:	2300      	movs	r3, #0
 8004536:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800453a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800453e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004540:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004546:	2300      	movs	r3, #0
 8004548:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800454c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fe86 	bl	8004264 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004558:	2301      	movs	r3, #1
 800455a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800455c:	2301      	movs	r3, #1
 800455e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004566:	2301      	movs	r3, #1
 8004568:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004574:	2300      	movs	r3, #0
 8004576:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800457a:	2300      	movs	r3, #0
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004584:	2301      	movs	r3, #1
 8004586:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800458c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800458e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004592:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004598:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff ff08 	bl	80043c4 <ETH_SetDMAConfig>
}
 80045b4:	bf00      	nop
 80045b6:	3798      	adds	r7, #152	@ 0x98
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3305      	adds	r3, #5
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	3204      	adds	r2, #4
 80045d4:	7812      	ldrb	r2, [r2, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <ETH_MACAddressConfig+0x68>)
 80045de:	4413      	add	r3, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3303      	adds	r3, #3
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	061a      	lsls	r2, r3, #24
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3302      	adds	r3, #2
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3301      	adds	r3, #1
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	4313      	orrs	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	7812      	ldrb	r2, [r2, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <ETH_MACAddressConfig+0x6c>)
 800460e:	4413      	add	r3, r2
 8004610:	461a      	mov	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	6013      	str	r3, [r2, #0]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40028040 	.word	0x40028040
 8004628:	40028044 	.word	0x40028044

0800462c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e03e      	b.n	80046b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68d9      	ldr	r1, [r3, #12]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	440b      	add	r3, r1
 800464a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2200      	movs	r2, #0
 8004662:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	3206      	adds	r2, #6
 800466c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d80c      	bhi.n	800469c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	440b      	add	r3, r1
 8004694:	461a      	mov	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	e004      	b.n	80046a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d9bd      	bls.n	800463a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d0:	611a      	str	r2, [r3, #16]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e046      	b.n	800477a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6919      	ldr	r1, [r3, #16]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	440b      	add	r3, r1
 80046fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2200      	movs	r2, #0
 8004708:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2200      	movs	r2, #0
 800470e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2200      	movs	r2, #0
 800471a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2200      	movs	r2, #0
 8004720:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004728:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8004730:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	3212      	adds	r2, #18
 8004746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d80c      	bhi.n	800476a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6919      	ldr	r1, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	440b      	add	r3, r1
 8004762:	461a      	mov	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	60da      	str	r2, [r3, #12]
 8004768:	e004      	b.n	8004774 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3301      	adds	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d9b5      	bls.n	80046ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047aa:	60da      	str	r2, [r3, #12]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b08d      	sub	sp, #52	@ 0x34
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3318      	adds	r3, #24
 80047c8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047fa:	d007      	beq.n	800480c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004800:	3304      	adds	r3, #4
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800480c:	2302      	movs	r3, #2
 800480e:	e0ff      	b.n	8004a10 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	3301      	adds	r3, #1
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4b7d      	ldr	r3, [pc, #500]	@ (8004a1c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004826:	4013      	ands	r3, r2
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	6852      	ldr	r2, [r2, #4]
 800482c:	431a      	orrs	r2, r3
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004892:	f3bf 8f5f 	dmb	sy
}
 8004896:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80048a4:	e082      	b.n	80049ac <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d006      	beq.n	80048c6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e005      	b.n	80048d2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80048d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d4:	3301      	adds	r3, #1
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d902      	bls.n	80048e4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80048de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e0:	3b04      	subs	r3, #4
 80048e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ec:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004902:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004906:	d007      	beq.n	8004918 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490c:	3304      	adds	r3, #4
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d029      	beq.n	800496c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004924:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004926:	2300      	movs	r3, #0
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800492a:	e019      	b.n	8004960 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800492c:	f3bf 8f5f 	dmb	sy
}
 8004930:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800493e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004940:	3301      	adds	r3, #1
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004946:	2b03      	cmp	r3, #3
 8004948:	d902      	bls.n	8004950 <ETH_Prepare_Tx_Descriptors+0x198>
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	3b04      	subs	r3, #4
 800494e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004958:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	3301      	adds	r3, #1
 800495e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	429a      	cmp	r2, r3
 8004966:	d3e1      	bcc.n	800492c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004968:	2302      	movs	r3, #2
 800496a:	e051      	b.n	8004a10 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	3301      	adds	r3, #1
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	4b25      	ldr	r3, [pc, #148]	@ (8004a1c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004988:	4013      	ands	r3, r2
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	6852      	ldr	r2, [r2, #4]
 800498e:	431a      	orrs	r2, r3
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	3301      	adds	r3, #1
 8004998:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800499a:	f3bf 8f5f 	dmb	sy
}
 800499e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f47f af78 	bne.w	80048a6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d006      	beq.n	80049ca <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e005      	b.n	80049d6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049e6:	6979      	ldr	r1, [r7, #20]
 80049e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ea:	3304      	adds	r3, #4
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049f6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80049f8:	b672      	cpsid	i
}
 80049fa:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	4413      	add	r3, r2
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004a0a:	b662      	cpsie	i
}
 8004a0c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3734      	adds	r7, #52	@ 0x34
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	ffffe000 	.word	0xffffe000

08004a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	@ 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e175      	b.n	8004d2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a40:	2201      	movs	r2, #1
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4013      	ands	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	f040 8164 	bne.w	8004d26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d005      	beq.n	8004a76 <HAL_GPIO_Init+0x56>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d130      	bne.n	8004ad8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aac:	2201      	movs	r2, #1
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 0201 	and.w	r2, r3, #1
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d017      	beq.n	8004b14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	2203      	movs	r2, #3
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d123      	bne.n	8004b68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	08da      	lsrs	r2, r3, #3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3208      	adds	r2, #8
 8004b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	220f      	movs	r2, #15
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	08da      	lsrs	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3208      	adds	r2, #8
 8004b62:	69b9      	ldr	r1, [r7, #24]
 8004b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	2203      	movs	r2, #3
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0203 	and.w	r2, r3, #3
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80be 	beq.w	8004d26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004baa:	4b66      	ldr	r3, [pc, #408]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	4a65      	ldr	r2, [pc, #404]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bb6:	4b63      	ldr	r3, [pc, #396]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004bc2:	4a61      	ldr	r2, [pc, #388]	@ (8004d48 <HAL_GPIO_Init+0x328>)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	3302      	adds	r3, #2
 8004bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	220f      	movs	r2, #15
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a58      	ldr	r2, [pc, #352]	@ (8004d4c <HAL_GPIO_Init+0x32c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d037      	beq.n	8004c5e <HAL_GPIO_Init+0x23e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a57      	ldr	r2, [pc, #348]	@ (8004d50 <HAL_GPIO_Init+0x330>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d031      	beq.n	8004c5a <HAL_GPIO_Init+0x23a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a56      	ldr	r2, [pc, #344]	@ (8004d54 <HAL_GPIO_Init+0x334>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02b      	beq.n	8004c56 <HAL_GPIO_Init+0x236>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a55      	ldr	r2, [pc, #340]	@ (8004d58 <HAL_GPIO_Init+0x338>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d025      	beq.n	8004c52 <HAL_GPIO_Init+0x232>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a54      	ldr	r2, [pc, #336]	@ (8004d5c <HAL_GPIO_Init+0x33c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01f      	beq.n	8004c4e <HAL_GPIO_Init+0x22e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a53      	ldr	r2, [pc, #332]	@ (8004d60 <HAL_GPIO_Init+0x340>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d019      	beq.n	8004c4a <HAL_GPIO_Init+0x22a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a52      	ldr	r2, [pc, #328]	@ (8004d64 <HAL_GPIO_Init+0x344>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_GPIO_Init+0x226>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a51      	ldr	r2, [pc, #324]	@ (8004d68 <HAL_GPIO_Init+0x348>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00d      	beq.n	8004c42 <HAL_GPIO_Init+0x222>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a50      	ldr	r2, [pc, #320]	@ (8004d6c <HAL_GPIO_Init+0x34c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <HAL_GPIO_Init+0x21e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a4f      	ldr	r2, [pc, #316]	@ (8004d70 <HAL_GPIO_Init+0x350>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <HAL_GPIO_Init+0x21a>
 8004c36:	2309      	movs	r3, #9
 8004c38:	e012      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	e010      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c3e:	2308      	movs	r3, #8
 8004c40:	e00e      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c42:	2307      	movs	r3, #7
 8004c44:	e00c      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c46:	2306      	movs	r3, #6
 8004c48:	e00a      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c4a:	2305      	movs	r3, #5
 8004c4c:	e008      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	e006      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c52:	2303      	movs	r3, #3
 8004c54:	e004      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e002      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_GPIO_Init+0x240>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	f002 0203 	and.w	r2, r2, #3
 8004c66:	0092      	lsls	r2, r2, #2
 8004c68:	4093      	lsls	r3, r2
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c70:	4935      	ldr	r1, [pc, #212]	@ (8004d48 <HAL_GPIO_Init+0x328>)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	3302      	adds	r3, #2
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d74 <HAL_GPIO_Init+0x354>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ca2:	4a34      	ldr	r2, [pc, #208]	@ (8004d74 <HAL_GPIO_Init+0x354>)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ca8:	4b32      	ldr	r3, [pc, #200]	@ (8004d74 <HAL_GPIO_Init+0x354>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ccc:	4a29      	ldr	r2, [pc, #164]	@ (8004d74 <HAL_GPIO_Init+0x354>)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cd2:	4b28      	ldr	r3, [pc, #160]	@ (8004d74 <HAL_GPIO_Init+0x354>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <HAL_GPIO_Init+0x354>)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d74 <HAL_GPIO_Init+0x354>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d20:	4a14      	ldr	r2, [pc, #80]	@ (8004d74 <HAL_GPIO_Init+0x354>)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b0f      	cmp	r3, #15
 8004d30:	f67f ae86 	bls.w	8004a40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3724      	adds	r7, #36	@ 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40020000 	.word	0x40020000
 8004d50:	40020400 	.word	0x40020400
 8004d54:	40020800 	.word	0x40020800
 8004d58:	40020c00 	.word	0x40020c00
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40021400 	.word	0x40021400
 8004d64:	40021800 	.word	0x40021800
 8004d68:	40021c00 	.word	0x40021c00
 8004d6c:	40022000 	.word	0x40022000
 8004d70:	40022400 	.word	0x40022400
 8004d74:	40013c00 	.word	0x40013c00

08004d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
 8004d84:	4613      	mov	r3, r2
 8004d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d88:	787b      	ldrb	r3, [r7, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d94:	e003      	b.n	8004d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d96:	887b      	ldrh	r3, [r7, #2]
 8004d98:	041a      	lsls	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	619a      	str	r2, [r3, #24]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dac:	b08f      	sub	sp, #60	@ 0x3c
 8004dae:	af0a      	add	r7, sp, #40	@ 0x28
 8004db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e116      	b.n	8004fea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fd fd00 	bl	80027dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2203      	movs	r2, #3
 8004de0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 feec 	bl	8007bd8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	687e      	ldr	r6, [r7, #4]
 8004e08:	466d      	mov	r5, sp
 8004e0a:	f106 0410 	add.w	r4, r6, #16
 8004e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e1e:	1d33      	adds	r3, r6, #4
 8004e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e22:	6838      	ldr	r0, [r7, #0]
 8004e24:	f002 fe80 	bl	8007b28 <USB_CoreInit>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e0d7      	b.n	8004fea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	f002 feda 	bl	8007bfa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e04a      	b.n	8004ee2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	333d      	adds	r3, #61	@ 0x3d
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	333c      	adds	r3, #60	@ 0x3c
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	b298      	uxth	r0, r3
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	3344      	adds	r3, #68	@ 0x44
 8004e88:	4602      	mov	r2, r0
 8004e8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3340      	adds	r3, #64	@ 0x40
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	3348      	adds	r3, #72	@ 0x48
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	334c      	adds	r3, #76	@ 0x4c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3354      	adds	r3, #84	@ 0x54
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d3af      	bcc.n	8004e4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]
 8004ef0:	e044      	b.n	8004f7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f34:	7bfa      	ldrb	r2, [r7, #15]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f4a:	7bfa      	ldrb	r2, [r7, #15]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f60:	7bfa      	ldrb	r2, [r7, #15]
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
 8004f7c:	7bfa      	ldrb	r2, [r7, #15]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3b5      	bcc.n	8004ef2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	687e      	ldr	r6, [r7, #4]
 8004f8e:	466d      	mov	r5, sp
 8004f90:	f106 0410 	add.w	r4, r6, #16
 8004f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fa4:	1d33      	adds	r3, r6, #4
 8004fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fa8:	6838      	ldr	r0, [r7, #0]
 8004faa:	f002 fe73 	bl	8007c94 <USB_DevInit>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e014      	b.n	8004fea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d102      	bne.n	8004fde <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f80b 	bl	8004ff4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f003 f831 	bl	800804a <USB_DevDisconnect>

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004ff4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005022:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_PCDEx_ActivateLPM+0x44>)
 8005024:	4313      	orrs	r3, r2
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	10000003 	.word	0x10000003

0800503c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005040:	4b05      	ldr	r3, [pc, #20]	@ (8005058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a04      	ldr	r2, [pc, #16]	@ (8005058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40007000 	.word	0x40007000

0800505c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005064:	2300      	movs	r3, #0
 8005066:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e291      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8087 	beq.w	800518e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005080:	4b96      	ldr	r3, [pc, #600]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b04      	cmp	r3, #4
 800508a:	d00c      	beq.n	80050a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508c:	4b93      	ldr	r3, [pc, #588]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	2b08      	cmp	r3, #8
 8005096:	d112      	bne.n	80050be <HAL_RCC_OscConfig+0x62>
 8005098:	4b90      	ldr	r3, [pc, #576]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050a4:	d10b      	bne.n	80050be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a6:	4b8d      	ldr	r3, [pc, #564]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d06c      	beq.n	800518c <HAL_RCC_OscConfig+0x130>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d168      	bne.n	800518c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e26b      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c6:	d106      	bne.n	80050d6 <HAL_RCC_OscConfig+0x7a>
 80050c8:	4b84      	ldr	r3, [pc, #528]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a83      	ldr	r2, [pc, #524]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80050ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e02e      	b.n	8005134 <HAL_RCC_OscConfig+0xd8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x9c>
 80050de:	4b7f      	ldr	r3, [pc, #508]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a7e      	ldr	r2, [pc, #504]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80050e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	4b7c      	ldr	r3, [pc, #496]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a7b      	ldr	r2, [pc, #492]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80050f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e01d      	b.n	8005134 <HAL_RCC_OscConfig+0xd8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0xc0>
 8005102:	4b76      	ldr	r3, [pc, #472]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a75      	ldr	r2, [pc, #468]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b73      	ldr	r3, [pc, #460]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a72      	ldr	r2, [pc, #456]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e00b      	b.n	8005134 <HAL_RCC_OscConfig+0xd8>
 800511c:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a6e      	ldr	r2, [pc, #440]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b6c      	ldr	r3, [pc, #432]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6b      	ldr	r2, [pc, #428]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fd fec4 	bl	8002ec8 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd fec0 	bl	8002ec8 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e21f      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	4b61      	ldr	r3, [pc, #388]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0xe8>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fd feb0 	bl	8002ec8 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516c:	f7fd feac 	bl	8002ec8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	@ 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e20b      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517e:	4b57      	ldr	r3, [pc, #348]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x110>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d069      	beq.n	800526e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800519a:	4b50      	ldr	r3, [pc, #320]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b4d      	ldr	r3, [pc, #308]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d11c      	bne.n	80051ec <HAL_RCC_OscConfig+0x190>
 80051b2:	4b4a      	ldr	r3, [pc, #296]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d116      	bne.n	80051ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051be:	4b47      	ldr	r3, [pc, #284]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_RCC_OscConfig+0x17a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e1df      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d6:	4b41      	ldr	r3, [pc, #260]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	493d      	ldr	r1, [pc, #244]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	e040      	b.n	800526e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d023      	beq.n	800523c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f4:	4b39      	ldr	r3, [pc, #228]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a38      	ldr	r2, [pc, #224]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fd fe62 	bl	8002ec8 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005208:	f7fd fe5e 	bl	8002ec8 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e1bd      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521a:	4b30      	ldr	r3, [pc, #192]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005226:	4b2d      	ldr	r3, [pc, #180]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	4929      	ldr	r1, [pc, #164]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]
 800523a:	e018      	b.n	800526e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523c:	4b27      	ldr	r3, [pc, #156]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a26      	ldr	r2, [pc, #152]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd fe3e 	bl	8002ec8 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005250:	f7fd fe3a 	bl	8002ec8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e199      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005262:	4b1e      	ldr	r3, [pc, #120]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d038      	beq.n	80052ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d019      	beq.n	80052b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005282:	4b16      	ldr	r3, [pc, #88]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005286:	4a15      	ldr	r2, [pc, #84]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528e:	f7fd fe1b 	bl	8002ec8 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005296:	f7fd fe17 	bl	8002ec8 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e176      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a8:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80052aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x23a>
 80052b4:	e01a      	b.n	80052ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b6:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80052b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ba:	4a08      	ldr	r2, [pc, #32]	@ (80052dc <HAL_RCC_OscConfig+0x280>)
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c2:	f7fd fe01 	bl	8002ec8 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ca:	f7fd fdfd 	bl	8002ec8 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d903      	bls.n	80052e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e15c      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
 80052dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e0:	4b91      	ldr	r3, [pc, #580]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80052e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1ee      	bne.n	80052ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80a4 	beq.w	8005442 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052fa:	4b8b      	ldr	r3, [pc, #556]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10d      	bne.n	8005322 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005306:	4b88      	ldr	r3, [pc, #544]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	4a87      	ldr	r2, [pc, #540]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005310:	6413      	str	r3, [r2, #64]	@ 0x40
 8005312:	4b85      	ldr	r3, [pc, #532]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005322:	4b82      	ldr	r3, [pc, #520]	@ (800552c <HAL_RCC_OscConfig+0x4d0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532a:	2b00      	cmp	r3, #0
 800532c:	d118      	bne.n	8005360 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800532e:	4b7f      	ldr	r3, [pc, #508]	@ (800552c <HAL_RCC_OscConfig+0x4d0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a7e      	ldr	r2, [pc, #504]	@ (800552c <HAL_RCC_OscConfig+0x4d0>)
 8005334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800533a:	f7fd fdc5 	bl	8002ec8 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005342:	f7fd fdc1 	bl	8002ec8 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b64      	cmp	r3, #100	@ 0x64
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e120      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005354:	4b75      	ldr	r3, [pc, #468]	@ (800552c <HAL_RCC_OscConfig+0x4d0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d106      	bne.n	8005376 <HAL_RCC_OscConfig+0x31a>
 8005368:	4b6f      	ldr	r3, [pc, #444]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536c:	4a6e      	ldr	r2, [pc, #440]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6713      	str	r3, [r2, #112]	@ 0x70
 8005374:	e02d      	b.n	80053d2 <HAL_RCC_OscConfig+0x376>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0x33c>
 800537e:	4b6a      	ldr	r3, [pc, #424]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005382:	4a69      	ldr	r2, [pc, #420]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	6713      	str	r3, [r2, #112]	@ 0x70
 800538a:	4b67      	ldr	r3, [pc, #412]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538e:	4a66      	ldr	r2, [pc, #408]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	6713      	str	r3, [r2, #112]	@ 0x70
 8005396:	e01c      	b.n	80053d2 <HAL_RCC_OscConfig+0x376>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b05      	cmp	r3, #5
 800539e:	d10c      	bne.n	80053ba <HAL_RCC_OscConfig+0x35e>
 80053a0:	4b61      	ldr	r3, [pc, #388]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a4:	4a60      	ldr	r2, [pc, #384]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ac:	4b5e      	ldr	r3, [pc, #376]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b8:	e00b      	b.n	80053d2 <HAL_RCC_OscConfig+0x376>
 80053ba:	4b5b      	ldr	r3, [pc, #364]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053be:	4a5a      	ldr	r2, [pc, #360]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c6:	4b58      	ldr	r3, [pc, #352]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ca:	4a57      	ldr	r2, [pc, #348]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053cc:	f023 0304 	bic.w	r3, r3, #4
 80053d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d015      	beq.n	8005406 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053da:	f7fd fd75 	bl	8002ec8 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fd fd71 	bl	8002ec8 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e0ce      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ee      	beq.n	80053e2 <HAL_RCC_OscConfig+0x386>
 8005404:	e014      	b.n	8005430 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005406:	f7fd fd5f 	bl	8002ec8 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fd fd5b 	bl	8002ec8 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0b8      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005424:	4b40      	ldr	r3, [pc, #256]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1ee      	bne.n	800540e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d105      	bne.n	8005442 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005436:	4b3c      	ldr	r3, [pc, #240]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	4a3b      	ldr	r2, [pc, #236]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 800543c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005440:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80a4 	beq.w	8005594 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800544c:	4b36      	ldr	r3, [pc, #216]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 030c 	and.w	r3, r3, #12
 8005454:	2b08      	cmp	r3, #8
 8005456:	d06b      	beq.n	8005530 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d149      	bne.n	80054f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005460:	4b31      	ldr	r3, [pc, #196]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a30      	ldr	r2, [pc, #192]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800546a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd fd2c 	bl	8002ec8 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005474:	f7fd fd28 	bl	8002ec8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e087      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	4b28      	ldr	r3, [pc, #160]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69da      	ldr	r2, [r3, #28]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	019b      	lsls	r3, r3, #6
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	3b01      	subs	r3, #1
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	4313      	orrs	r3, r2
 80054b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80054ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80054c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fd fcfc 	bl	8002ec8 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fd fcf8 	bl	8002ec8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e057      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	4b10      	ldr	r3, [pc, #64]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x478>
 80054f2:	e04f      	b.n	8005594 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 80054fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fd fce2 	bl	8002ec8 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005508:	f7fd fcde 	bl	8002ec8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e03d      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551a:	4b03      	ldr	r3, [pc, #12]	@ (8005528 <HAL_RCC_OscConfig+0x4cc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0x4ac>
 8005526:	e035      	b.n	8005594 <HAL_RCC_OscConfig+0x538>
 8005528:	40023800 	.word	0x40023800
 800552c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005530:	4b1b      	ldr	r3, [pc, #108]	@ (80055a0 <HAL_RCC_OscConfig+0x544>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d028      	beq.n	8005590 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005548:	429a      	cmp	r2, r3
 800554a:	d121      	bne.n	8005590 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005556:	429a      	cmp	r2, r3
 8005558:	d11a      	bne.n	8005590 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005560:	4013      	ands	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005566:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005568:	4293      	cmp	r3, r2
 800556a:	d111      	bne.n	8005590 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	3b01      	subs	r3, #1
 800557a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800557c:	429a      	cmp	r2, r3
 800557e:	d107      	bne.n	8005590 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800

080055a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0d0      	b.n	800575e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d910      	bls.n	80055ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b67      	ldr	r3, [pc, #412]	@ (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 020f 	bic.w	r2, r3, #15
 80055d2:	4965      	ldr	r1, [pc, #404]	@ (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055da:	4b63      	ldr	r3, [pc, #396]	@ (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0b8      	b.n	800575e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d020      	beq.n	800563a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005604:	4b59      	ldr	r3, [pc, #356]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4a58      	ldr	r2, [pc, #352]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 800560a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800560e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800561c:	4b53      	ldr	r3, [pc, #332]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	4a52      	ldr	r2, [pc, #328]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005626:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005628:	4b50      	ldr	r3, [pc, #320]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	494d      	ldr	r1, [pc, #308]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d040      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d107      	bne.n	800565e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564e:	4b47      	ldr	r3, [pc, #284]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d115      	bne.n	8005686 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e07f      	b.n	800575e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d107      	bne.n	8005676 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005666:	4b41      	ldr	r3, [pc, #260]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e073      	b.n	800575e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005676:	4b3d      	ldr	r3, [pc, #244]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e06b      	b.n	800575e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005686:	4b39      	ldr	r3, [pc, #228]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4936      	ldr	r1, [pc, #216]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005694:	4313      	orrs	r3, r2
 8005696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005698:	f7fd fc16 	bl	8002ec8 <HAL_GetTick>
 800569c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a0:	f7fd fc12 	bl	8002ec8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e053      	b.n	800575e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	4b2d      	ldr	r3, [pc, #180]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 020c 	and.w	r2, r3, #12
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1eb      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056c8:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d210      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b24      	ldr	r3, [pc, #144]	@ (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 020f 	bic.w	r2, r3, #15
 80056de:	4922      	ldr	r1, [pc, #136]	@ (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e6:	4b20      	ldr	r3, [pc, #128]	@ (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e032      	b.n	800575e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005704:	4b19      	ldr	r3, [pc, #100]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4916      	ldr	r1, [pc, #88]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005722:	4b12      	ldr	r3, [pc, #72]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	490e      	ldr	r1, [pc, #56]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005736:	f000 f821 	bl	800577c <HAL_RCC_GetSysClockFreq>
 800573a:	4602      	mov	r2, r0
 800573c:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <HAL_RCC_ClockConfig+0x1c8>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	490a      	ldr	r1, [pc, #40]	@ (8005770 <HAL_RCC_ClockConfig+0x1cc>)
 8005748:	5ccb      	ldrb	r3, [r1, r3]
 800574a:	fa22 f303 	lsr.w	r3, r2, r3
 800574e:	4a09      	ldr	r2, [pc, #36]	@ (8005774 <HAL_RCC_ClockConfig+0x1d0>)
 8005750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005752:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <HAL_RCC_ClockConfig+0x1d4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7fd fb72 	bl	8002e40 <HAL_InitTick>

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40023c00 	.word	0x40023c00
 800576c:	40023800 	.word	0x40023800
 8005770:	0801ccac 	.word	0x0801ccac
 8005774:	2000000c 	.word	0x2000000c
 8005778:	20000010 	.word	0x20000010

0800577c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800577c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005780:	b094      	sub	sp, #80	@ 0x50
 8005782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	647b      	str	r3, [r7, #68]	@ 0x44
 8005788:	2300      	movs	r3, #0
 800578a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800578c:	2300      	movs	r3, #0
 800578e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005794:	4b79      	ldr	r3, [pc, #484]	@ (800597c <HAL_RCC_GetSysClockFreq+0x200>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 030c 	and.w	r3, r3, #12
 800579c:	2b08      	cmp	r3, #8
 800579e:	d00d      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x40>
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	f200 80e1 	bhi.w	8005968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0x34>
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d003      	beq.n	80057b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ae:	e0db      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057b0:	4b73      	ldr	r3, [pc, #460]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x204>)
 80057b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057b4:	e0db      	b.n	800596e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057b6:	4b73      	ldr	r3, [pc, #460]	@ (8005984 <HAL_RCC_GetSysClockFreq+0x208>)
 80057b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057ba:	e0d8      	b.n	800596e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057bc:	4b6f      	ldr	r3, [pc, #444]	@ (800597c <HAL_RCC_GetSysClockFreq+0x200>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057c6:	4b6d      	ldr	r3, [pc, #436]	@ (800597c <HAL_RCC_GetSysClockFreq+0x200>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d063      	beq.n	800589a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d2:	4b6a      	ldr	r3, [pc, #424]	@ (800597c <HAL_RCC_GetSysClockFreq+0x200>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	099b      	lsrs	r3, r3, #6
 80057d8:	2200      	movs	r2, #0
 80057da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e6:	2300      	movs	r3, #0
 80057e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057ee:	4622      	mov	r2, r4
 80057f0:	462b      	mov	r3, r5
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f04f 0100 	mov.w	r1, #0
 80057fa:	0159      	lsls	r1, r3, #5
 80057fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005800:	0150      	lsls	r0, r2, #5
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4621      	mov	r1, r4
 8005808:	1a51      	subs	r1, r2, r1
 800580a:	6139      	str	r1, [r7, #16]
 800580c:	4629      	mov	r1, r5
 800580e:	eb63 0301 	sbc.w	r3, r3, r1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005820:	4659      	mov	r1, fp
 8005822:	018b      	lsls	r3, r1, #6
 8005824:	4651      	mov	r1, sl
 8005826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800582a:	4651      	mov	r1, sl
 800582c:	018a      	lsls	r2, r1, #6
 800582e:	4651      	mov	r1, sl
 8005830:	ebb2 0801 	subs.w	r8, r2, r1
 8005834:	4659      	mov	r1, fp
 8005836:	eb63 0901 	sbc.w	r9, r3, r1
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800584a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800584e:	4690      	mov	r8, r2
 8005850:	4699      	mov	r9, r3
 8005852:	4623      	mov	r3, r4
 8005854:	eb18 0303 	adds.w	r3, r8, r3
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	462b      	mov	r3, r5
 800585c:	eb49 0303 	adc.w	r3, r9, r3
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800586e:	4629      	mov	r1, r5
 8005870:	024b      	lsls	r3, r1, #9
 8005872:	4621      	mov	r1, r4
 8005874:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005878:	4621      	mov	r1, r4
 800587a:	024a      	lsls	r2, r1, #9
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005882:	2200      	movs	r2, #0
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800588c:	f7fb fa0c 	bl	8000ca8 <__aeabi_uldivmod>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4613      	mov	r3, r2
 8005896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005898:	e058      	b.n	800594c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800589a:	4b38      	ldr	r3, [pc, #224]	@ (800597c <HAL_RCC_GetSysClockFreq+0x200>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	099b      	lsrs	r3, r3, #6
 80058a0:	2200      	movs	r2, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	4611      	mov	r1, r2
 80058a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	2300      	movs	r3, #0
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058b4:	4642      	mov	r2, r8
 80058b6:	464b      	mov	r3, r9
 80058b8:	f04f 0000 	mov.w	r0, #0
 80058bc:	f04f 0100 	mov.w	r1, #0
 80058c0:	0159      	lsls	r1, r3, #5
 80058c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c6:	0150      	lsls	r0, r2, #5
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4641      	mov	r1, r8
 80058ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80058d2:	4649      	mov	r1, r9
 80058d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058ec:	ebb2 040a 	subs.w	r4, r2, sl
 80058f0:	eb63 050b 	sbc.w	r5, r3, fp
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	00eb      	lsls	r3, r5, #3
 80058fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005902:	00e2      	lsls	r2, r4, #3
 8005904:	4614      	mov	r4, r2
 8005906:	461d      	mov	r5, r3
 8005908:	4643      	mov	r3, r8
 800590a:	18e3      	adds	r3, r4, r3
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	464b      	mov	r3, r9
 8005910:	eb45 0303 	adc.w	r3, r5, r3
 8005914:	607b      	str	r3, [r7, #4]
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005922:	4629      	mov	r1, r5
 8005924:	028b      	lsls	r3, r1, #10
 8005926:	4621      	mov	r1, r4
 8005928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800592c:	4621      	mov	r1, r4
 800592e:	028a      	lsls	r2, r1, #10
 8005930:	4610      	mov	r0, r2
 8005932:	4619      	mov	r1, r3
 8005934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005936:	2200      	movs	r2, #0
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	61fa      	str	r2, [r7, #28]
 800593c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005940:	f7fb f9b2 	bl	8000ca8 <__aeabi_uldivmod>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4613      	mov	r3, r2
 800594a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800594c:	4b0b      	ldr	r3, [pc, #44]	@ (800597c <HAL_RCC_GetSysClockFreq+0x200>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	3301      	adds	r3, #1
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800595c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800595e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005966:	e002      	b.n	800596e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005968:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x204>)
 800596a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800596c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800596e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005970:	4618      	mov	r0, r3
 8005972:	3750      	adds	r7, #80	@ 0x50
 8005974:	46bd      	mov	sp, r7
 8005976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800597a:	bf00      	nop
 800597c:	40023800 	.word	0x40023800
 8005980:	00f42400 	.word	0x00f42400
 8005984:	007a1200 	.word	0x007a1200

08005988 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800598c:	4b03      	ldr	r3, [pc, #12]	@ (800599c <HAL_RCC_GetHCLKFreq+0x14>)
 800598e:	681b      	ldr	r3, [r3, #0]
}
 8005990:	4618      	mov	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	2000000c 	.word	0x2000000c

080059a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059a4:	f7ff fff0 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	0a9b      	lsrs	r3, r3, #10
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4903      	ldr	r1, [pc, #12]	@ (80059c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40023800 	.word	0x40023800
 80059c4:	0801ccbc 	.word	0x0801ccbc

080059c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059cc:	f7ff ffdc 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	0b5b      	lsrs	r3, r3, #13
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	@ (80059ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40023800 	.word	0x40023800
 80059ec:	0801ccbc 	.word	0x0801ccbc

080059f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d012      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a18:	4b69      	ldr	r3, [pc, #420]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	4a68      	ldr	r2, [pc, #416]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a22:	6093      	str	r3, [r2, #8]
 8005a24:	4b66      	ldr	r3, [pc, #408]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2c:	4964      	ldr	r1, [pc, #400]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d017      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a58:	4959      	ldr	r1, [pc, #356]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a68:	d101      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005a76:	2301      	movs	r3, #1
 8005a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d017      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a86:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	494a      	ldr	r1, [pc, #296]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 808b 	beq.w	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	4a39      	ldr	r2, [pc, #228]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ae0:	4b37      	ldr	r3, [pc, #220]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005aec:	4b35      	ldr	r3, [pc, #212]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a34      	ldr	r2, [pc, #208]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af8:	f7fd f9e6 	bl	8002ec8 <HAL_GetTick>
 8005afc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b00:	f7fd f9e2 	bl	8002ec8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	@ 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e357      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b12:	4b2c      	ldr	r3, [pc, #176]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b1e:	4b28      	ldr	r3, [pc, #160]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d035      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d02e      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b3c:	4b20      	ldr	r3, [pc, #128]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b46:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b50:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b52:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b56:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b5e:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b64:	4b16      	ldr	r3, [pc, #88]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d114      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b70:	f7fd f9aa 	bl	8002ec8 <HAL_GetTick>
 8005b74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b76:	e00a      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b78:	f7fd f9a6 	bl	8002ec8 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e319      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0ee      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ba6:	d111      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005bb4:	4b04      	ldr	r3, [pc, #16]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bb6:	400b      	ands	r3, r1
 8005bb8:	4901      	ldr	r1, [pc, #4]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]
 8005bbe:	e00b      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	0ffffcff 	.word	0x0ffffcff
 8005bcc:	4baa      	ldr	r3, [pc, #680]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4aa9      	ldr	r2, [pc, #676]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bd2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005bd6:	6093      	str	r3, [r2, #8]
 8005bd8:	4ba7      	ldr	r3, [pc, #668]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be4:	49a4      	ldr	r1, [pc, #656]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d010      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bf6:	4ba0      	ldr	r3, [pc, #640]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bfc:	4a9e      	ldr	r2, [pc, #632]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005c06:	4b9c      	ldr	r3, [pc, #624]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c08:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c10:	4999      	ldr	r1, [pc, #612]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c24:	4b94      	ldr	r3, [pc, #592]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c32:	4991      	ldr	r1, [pc, #580]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c46:	4b8c      	ldr	r3, [pc, #560]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c54:	4988      	ldr	r1, [pc, #544]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c68:	4b83      	ldr	r3, [pc, #524]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c76:	4980      	ldr	r1, [pc, #512]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c98:	4977      	ldr	r1, [pc, #476]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cac:	4b72      	ldr	r3, [pc, #456]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb2:	f023 0203 	bic.w	r2, r3, #3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cba:	496f      	ldr	r1, [pc, #444]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cce:	4b6a      	ldr	r3, [pc, #424]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd4:	f023 020c 	bic.w	r2, r3, #12
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cdc:	4966      	ldr	r1, [pc, #408]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cf0:	4b61      	ldr	r3, [pc, #388]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cfe:	495e      	ldr	r1, [pc, #376]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d12:	4b59      	ldr	r3, [pc, #356]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d18:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d20:	4955      	ldr	r1, [pc, #340]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d34:	4b50      	ldr	r3, [pc, #320]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d42:	494d      	ldr	r1, [pc, #308]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d56:	4b48      	ldr	r3, [pc, #288]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d64:	4944      	ldr	r1, [pc, #272]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d78:	4b3f      	ldr	r3, [pc, #252]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d86:	493c      	ldr	r1, [pc, #240]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d9a:	4b37      	ldr	r3, [pc, #220]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	4933      	ldr	r1, [pc, #204]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dca:	492b      	ldr	r1, [pc, #172]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d011      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dde:	4b26      	ldr	r3, [pc, #152]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dec:	4922      	ldr	r1, [pc, #136]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005df8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dfc:	d101      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e1e:	4b16      	ldr	r3, [pc, #88]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e2c:	4912      	ldr	r1, [pc, #72]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e40:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e46:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e50:	4909      	ldr	r1, [pc, #36]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d006      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80d9 	beq.w	800601e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e6c:	4b02      	ldr	r3, [pc, #8]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a01      	ldr	r2, [pc, #4]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e76:	e001      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7e:	f7fd f823 	bl	8002ec8 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e86:	f7fd f81f 	bl	8002ec8 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b64      	cmp	r3, #100	@ 0x64
 8005e92:	d901      	bls.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e194      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e98:	4b6c      	ldr	r3, [pc, #432]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f0      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d021      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d11d      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005eb8:	4b64      	ldr	r3, [pc, #400]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ebe:	0c1b      	lsrs	r3, r3, #16
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ec6:	4b61      	ldr	r3, [pc, #388]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ecc:	0e1b      	lsrs	r3, r3, #24
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	019a      	lsls	r2, r3, #6
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	041b      	lsls	r3, r3, #16
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	071b      	lsls	r3, r3, #28
 8005eec:	4957      	ldr	r1, [pc, #348]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f08:	d00a      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d02e      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f1e:	d129      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f20:	4b4a      	ldr	r3, [pc, #296]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f2e:	4b47      	ldr	r3, [pc, #284]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f34:	0f1b      	lsrs	r3, r3, #28
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	019a      	lsls	r2, r3, #6
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	041b      	lsls	r3, r3, #16
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	071b      	lsls	r3, r3, #28
 8005f54:	493d      	ldr	r1, [pc, #244]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f62:	f023 021f 	bic.w	r2, r3, #31
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	4937      	ldr	r1, [pc, #220]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01d      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f80:	4b32      	ldr	r3, [pc, #200]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f86:	0e1b      	lsrs	r3, r3, #24
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f94:	0f1b      	lsrs	r3, r3, #28
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	019a      	lsls	r2, r3, #6
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	061b      	lsls	r3, r3, #24
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	071b      	lsls	r3, r3, #28
 8005fb4:	4925      	ldr	r1, [pc, #148]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d011      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	019a      	lsls	r2, r3, #6
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	061b      	lsls	r3, r3, #24
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	071b      	lsls	r3, r3, #28
 8005fe4:	4919      	ldr	r1, [pc, #100]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fec:	4b17      	ldr	r3, [pc, #92]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a16      	ldr	r2, [pc, #88]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ff2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff8:	f7fc ff66 	bl	8002ec8 <HAL_GetTick>
 8005ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006000:	f7fc ff62 	bl	8002ec8 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	@ 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e0d7      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006012:	4b0e      	ldr	r3, [pc, #56]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 80cd 	bne.w	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006026:	4b09      	ldr	r3, [pc, #36]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a08      	ldr	r2, [pc, #32]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800602c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006032:	f7fc ff49 	bl	8002ec8 <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006038:	e00a      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800603a:	f7fc ff45 	bl	8002ec8 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b64      	cmp	r3, #100	@ 0x64
 8006046:	d903      	bls.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e0ba      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800604c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006050:	4b5e      	ldr	r3, [pc, #376]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605c:	d0ed      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800607a:	2b00      	cmp	r3, #0
 800607c:	d02e      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d12a      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006086:	4b51      	ldr	r3, [pc, #324]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006094:	4b4d      	ldr	r3, [pc, #308]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609a:	0f1b      	lsrs	r3, r3, #28
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	019a      	lsls	r2, r3, #6
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	041b      	lsls	r3, r3, #16
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	061b      	lsls	r3, r3, #24
 80060b4:	431a      	orrs	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	071b      	lsls	r3, r3, #28
 80060ba:	4944      	ldr	r1, [pc, #272]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060c2:	4b42      	ldr	r3, [pc, #264]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d0:	3b01      	subs	r3, #1
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	493d      	ldr	r1, [pc, #244]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d022      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060f0:	d11d      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060f2:	4b36      	ldr	r3, [pc, #216]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f8:	0e1b      	lsrs	r3, r3, #24
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006100:	4b32      	ldr	r3, [pc, #200]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006106:	0f1b      	lsrs	r3, r3, #28
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	019a      	lsls	r2, r3, #6
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	431a      	orrs	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	061b      	lsls	r3, r3, #24
 8006120:	431a      	orrs	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	071b      	lsls	r3, r3, #28
 8006126:	4929      	ldr	r1, [pc, #164]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d028      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800613a:	4b24      	ldr	r3, [pc, #144]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006140:	0e1b      	lsrs	r3, r3, #24
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006148:	4b20      	ldr	r3, [pc, #128]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	019a      	lsls	r2, r3, #6
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	041b      	lsls	r3, r3, #16
 8006160:	431a      	orrs	r2, r3
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	071b      	lsls	r3, r3, #28
 800616e:	4917      	ldr	r1, [pc, #92]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006176:	4b15      	ldr	r3, [pc, #84]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800617c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	4911      	ldr	r1, [pc, #68]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800618c:	4b0f      	ldr	r3, [pc, #60]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0e      	ldr	r2, [pc, #56]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006198:	f7fc fe96 	bl	8002ec8 <HAL_GetTick>
 800619c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061a0:	f7fc fe92 	bl	8002ec8 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	@ 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e007      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061b2:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061be:	d1ef      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40023800 	.word	0x40023800

080061d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e09d      	b.n	800631e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d108      	bne.n	80061fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061f2:	d009      	beq.n	8006208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	61da      	str	r2, [r3, #28]
 80061fa:	e005      	b.n	8006208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fc f9b4 	bl	8002590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800623e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006248:	d902      	bls.n	8006250 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	e002      	b.n	8006256 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006250:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006254:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800625e:	d007      	beq.n	8006270 <HAL_SPI_Init+0xa0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006268:	d002      	beq.n	8006270 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b2:	ea42 0103 	orr.w	r1, r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	f003 0204 	and.w	r2, r3, #4
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80062ec:	ea42 0103 	orr.w	r1, r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800630c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_SPI_Transmit_DMA+0x20>
 8006344:	2302      	movs	r3, #2
 8006346:	e0d8      	b.n	80064fa <HAL_SPI_Transmit_DMA+0x1d2>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	d002      	beq.n	8006362 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800635c:	2302      	movs	r3, #2
 800635e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006360:	e0c6      	b.n	80064f0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_SPI_Transmit_DMA+0x46>
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006372:	e0bd      	b.n	80064f0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2203      	movs	r2, #3
 8006378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063be:	d10f      	bne.n	80063e0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e4:	4a47      	ldr	r2, [pc, #284]	@ (8006504 <HAL_SPI_Transmit_DMA+0x1dc>)
 80063e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ec:	4a46      	ldr	r2, [pc, #280]	@ (8006508 <HAL_SPI_Transmit_DMA+0x1e0>)
 80063ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f4:	4a45      	ldr	r2, [pc, #276]	@ (800650c <HAL_SPI_Transmit_DMA+0x1e4>)
 80063f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fc:	2200      	movs	r2, #0
 80063fe:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800640e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006418:	d82d      	bhi.n	8006476 <HAL_SPI_Transmit_DMA+0x14e>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006424:	d127      	bne.n	8006476 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800642a:	b29b      	uxth	r3, r3
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10f      	bne.n	8006454 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006442:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006448:	b29b      	uxth	r3, r3
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006452:	e010      	b.n	8006476 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006462:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	3301      	adds	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647e:	4619      	mov	r1, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	330c      	adds	r3, #12
 8006486:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800648c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800648e:	f7fc ff0b 	bl	80032a8 <HAL_DMA_Start_IT>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00c      	beq.n	80064b2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800649c:	f043 0210 	orr.w	r2, r3, #16
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 80064b0:	e01e      	b.n	80064f0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064bc:	2b40      	cmp	r3, #64	@ 0x40
 80064be:	d007      	beq.n	80064d0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064ce:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0220 	orr.w	r2, r2, #32
 80064de:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0202 	orr.w	r2, r2, #2
 80064ee:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08006ce1 	.word	0x08006ce1
 8006508:	08006afd 	.word	0x08006afd
 800650c:	08006d35 	.word	0x08006d35

08006510 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d110      	bne.n	800654c <HAL_SPI_Receive_DMA+0x3c>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006532:	d10b      	bne.n	800654c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2204      	movs	r2, #4
 8006538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f908 	bl	8006758 <HAL_SPI_TransmitReceive_DMA>
 8006548:	4603      	mov	r3, r0
 800654a:	e0fb      	b.n	8006744 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_SPI_Receive_DMA+0x4a>
 8006556:	2302      	movs	r3, #2
 8006558:	e0f4      	b.n	8006744 <HAL_SPI_Receive_DMA+0x234>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b01      	cmp	r3, #1
 800656c:	d002      	beq.n	8006574 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800656e:	2302      	movs	r3, #2
 8006570:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006572:	e0e2      	b.n	800673a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_SPI_Receive_DMA+0x70>
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d102      	bne.n	8006586 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006584:	e0d9      	b.n	800673a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2204      	movs	r2, #4
 800658a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	88fa      	ldrh	r2, [r7, #6]
 800659e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ca:	d10f      	bne.n	80065ec <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065fa:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006604:	d908      	bls.n	8006618 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	e042      	b.n	800669e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006626:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006632:	d134      	bne.n	800669e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006642:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800664a:	b29b      	uxth	r3, r3
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d111      	bne.n	8006678 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006662:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800666a:	b29b      	uxth	r3, r3
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006676:	e012      	b.n	800669e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006686:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800668e:	b29b      	uxth	r3, r3
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	3301      	adds	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a2:	4a2a      	ldr	r2, [pc, #168]	@ (800674c <HAL_SPI_Receive_DMA+0x23c>)
 80066a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066aa:	4a29      	ldr	r2, [pc, #164]	@ (8006750 <HAL_SPI_Receive_DMA+0x240>)
 80066ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b2:	4a28      	ldr	r2, [pc, #160]	@ (8006754 <HAL_SPI_Receive_DMA+0x244>)
 80066b4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ba:	2200      	movs	r2, #0
 80066bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	330c      	adds	r3, #12
 80066c8:	4619      	mov	r1, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80066d8:	f7fc fde6 	bl	80032a8 <HAL_DMA_Start_IT>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00c      	beq.n	80066fc <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e6:	f043 0210 	orr.w	r2, r3, #16
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 80066fa:	e01e      	b.n	800673a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006706:	2b40      	cmp	r3, #64	@ 0x40
 8006708:	d007      	beq.n	800671a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006718:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0220 	orr.w	r2, r2, #32
 8006728:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0201 	orr.w	r2, r2, #1
 8006738:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006742:	7dfb      	ldrb	r3, [r7, #23]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	08006cfd 	.word	0x08006cfd
 8006750:	08006ba5 	.word	0x08006ba5
 8006754:	08006d35 	.word	0x08006d35

08006758 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006774:	2302      	movs	r3, #2
 8006776:	e16c      	b.n	8006a52 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006786:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800678e:	7dbb      	ldrb	r3, [r7, #22]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d00d      	beq.n	80067b0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800679a:	d106      	bne.n	80067aa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d102      	bne.n	80067aa <HAL_SPI_TransmitReceive_DMA+0x52>
 80067a4:	7dbb      	ldrb	r3, [r7, #22]
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d002      	beq.n	80067b0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80067aa:	2302      	movs	r3, #2
 80067ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067ae:	e14b      	b.n	8006a48 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067c6:	e13f      	b.n	8006a48 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d003      	beq.n	80067dc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2205      	movs	r2, #5
 80067d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	887a      	ldrh	r2, [r7, #2]
 80067f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	887a      	ldrh	r2, [r7, #2]
 80067fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	887a      	ldrh	r2, [r7, #2]
 8006806:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8006824:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800682e:	d908      	bls.n	8006842 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800683e:	605a      	str	r2, [r3, #4]
 8006840:	e06f      	b.n	8006922 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006850:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800685c:	d126      	bne.n	80068ac <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10f      	bne.n	800688a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006878:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800687e:	b29b      	uxth	r3, r3
 8006880:	085b      	lsrs	r3, r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006888:	e010      	b.n	80068ac <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006898:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800689e:	b29b      	uxth	r3, r3
 80068a0:	085b      	lsrs	r3, r3, #1
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3301      	adds	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b6:	d134      	bne.n	8006922 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068c6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d111      	bne.n	80068fc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068e6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80068fa:	e012      	b.n	8006922 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800690a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006912:	b29b      	uxth	r3, r3
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	b29b      	uxth	r3, r3
 8006918:	3301      	adds	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b04      	cmp	r3, #4
 800692c:	d108      	bne.n	8006940 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006932:	4a4a      	ldr	r2, [pc, #296]	@ (8006a5c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006934:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693a:	4a49      	ldr	r2, [pc, #292]	@ (8006a60 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800693c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800693e:	e007      	b.n	8006950 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006944:	4a47      	ldr	r2, [pc, #284]	@ (8006a64 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006946:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800694c:	4a46      	ldr	r2, [pc, #280]	@ (8006a68 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800694e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006954:	4a45      	ldr	r2, [pc, #276]	@ (8006a6c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006956:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695c:	2200      	movs	r2, #0
 800695e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	4619      	mov	r1, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006970:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006978:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800697a:	f7fc fc95 	bl	80032a8 <HAL_DMA_Start_IT>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00c      	beq.n	800699e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006988:	f043 0210 	orr.w	r2, r3, #16
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 800699c:	e054      	b.n	8006a48 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b2:	2200      	movs	r2, #0
 80069b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ba:	2200      	movs	r2, #0
 80069bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c2:	2200      	movs	r2, #0
 80069c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	2200      	movs	r2, #0
 80069cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d6:	4619      	mov	r1, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	330c      	adds	r3, #12
 80069de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069e6:	f7fc fc5f 	bl	80032a8 <HAL_DMA_Start_IT>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00c      	beq.n	8006a0a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069f4:	f043 0210 	orr.w	r2, r3, #16
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 8006a08:	e01e      	b.n	8006a48 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a14:	2b40      	cmp	r3, #64	@ 0x40
 8006a16:	d007      	beq.n	8006a28 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a26:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0220 	orr.w	r2, r2, #32
 8006a36:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0202 	orr.w	r2, r2, #2
 8006a46:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08006cfd 	.word	0x08006cfd
 8006a60:	08006ba5 	.word	0x08006ba5
 8006a64:	08006d19 	.word	0x08006d19
 8006a68:	08006c4f 	.word	0x08006c4f
 8006a6c:	08006d35 	.word	0x08006d35

08006a70 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b08:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b0a:	f7fc f9dd 	bl	8002ec8 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b1e:	d03b      	beq.n	8006b98 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0220 	bic.w	r2, r2, #32
 8006b2e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0202 	bic.w	r2, r2, #2
 8006b3e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	2164      	movs	r1, #100	@ 0x64
 8006b44:	6978      	ldr	r0, [r7, #20]
 8006b46:	f000 faaf 	bl	80070a8 <SPI_EndRxTxTransaction>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b54:	f043 0220 	orr.w	r2, r3, #32
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b90:	6978      	ldr	r0, [r7, #20]
 8006b92:	f7ff ffa9 	bl	8006ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b96:	e002      	b.n	8006b9e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006b98:	6978      	ldr	r0, [r7, #20]
 8006b9a:	f7ff ff69 	bl	8006a70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bb2:	f7fc f989 	bl	8002ec8 <HAL_GetTick>
 8006bb6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc6:	d03c      	beq.n	8006c42 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0220 	bic.w	r2, r2, #32
 8006bd6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10d      	bne.n	8006bfc <SPI_DMAReceiveCplt+0x58>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006be8:	d108      	bne.n	8006bfc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0203 	bic.w	r2, r2, #3
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	e007      	b.n	8006c0c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0201 	bic.w	r2, r2, #1
 8006c0a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	2164      	movs	r1, #100	@ 0x64
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 f9cd 	bl	8006fb0 <SPI_EndRxTransaction>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff ff54 	bl	8006ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c40:	e002      	b.n	8006c48 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff ff1e 	bl	8006a84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c5c:	f7fc f934 	bl	8002ec8 <HAL_GetTick>
 8006c60:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c70:	d030      	beq.n	8006cd4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0220 	bic.w	r2, r2, #32
 8006c80:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	2164      	movs	r1, #100	@ 0x64
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 fa0e 	bl	80070a8 <SPI_EndRxTxTransaction>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d005      	beq.n	8006c9e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0203 	bic.w	r2, r2, #3
 8006cac:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7ff ff0b 	bl	8006ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006cd2:	e002      	b.n	8006cda <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff fedf 	bl	8006a98 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff fedc 	bl	8006aac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff fed8 	bl	8006ac0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d24:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff fed4 	bl	8006ad4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0203 	bic.w	r2, r2, #3
 8006d50:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d56:	f043 0210 	orr.w	r2, r3, #16
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7ff febe 	bl	8006ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d84:	f7fc f8a0 	bl	8002ec8 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4413      	add	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d94:	f7fc f898 	bl	8002ec8 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d9a:	4b39      	ldr	r3, [pc, #228]	@ (8006e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006daa:	e054      	b.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d050      	beq.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006db4:	f7fc f888 	bl	8002ec8 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d902      	bls.n	8006dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d13d      	bne.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de2:	d111      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dec:	d004      	beq.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df6:	d107      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e10:	d10f      	bne.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e017      	b.n	8006e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d19b      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	2000000c 	.word	0x2000000c

08006e84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	@ 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e96:	f7fc f817 	bl	8002ec8 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006ea6:	f7fc f80f 	bl	8002ec8 <HAL_GetTick>
 8006eaa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8006fac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	0d1b      	lsrs	r3, r3, #20
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ecc:	e060      	b.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ed4:	d107      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d050      	beq.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eee:	f7fb ffeb 	bl	8002ec8 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d902      	bls.n	8006f04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d13d      	bne.n	8006f80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f1c:	d111      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f26:	d004      	beq.n	8006f32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f30:	d107      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f4a:	d10f      	bne.n	8006f6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e010      	b.n	8006fa2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d196      	bne.n	8006ece <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3728      	adds	r7, #40	@ 0x28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	2000000c 	.word	0x2000000c

08006fb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc4:	d111      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fce:	d004      	beq.n	8006fda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd8:	d107      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff2:	d112      	bne.n	800701a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2180      	movs	r1, #128	@ 0x80
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7ff feb8 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d021      	beq.n	800704e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700e:	f043 0220 	orr.w	r2, r3, #32
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e03d      	b.n	8007096 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800701a:	4b21      	ldr	r3, [pc, #132]	@ (80070a0 <SPI_EndRxTransaction+0xf0>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a21      	ldr	r2, [pc, #132]	@ (80070a4 <SPI_EndRxTransaction+0xf4>)
 8007020:	fba2 2303 	umull	r2, r3, r2, r3
 8007024:	0d5b      	lsrs	r3, r3, #21
 8007026:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800702a:	fb02 f303 	mul.w	r3, r2, r3
 800702e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	3b01      	subs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007046:	2b80      	cmp	r3, #128	@ 0x80
 8007048:	d0f2      	beq.n	8007030 <SPI_EndRxTransaction+0x80>
 800704a:	e000      	b.n	800704e <SPI_EndRxTransaction+0x9e>
        break;
 800704c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007056:	d11d      	bne.n	8007094 <SPI_EndRxTransaction+0xe4>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007060:	d004      	beq.n	800706c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706a:	d113      	bne.n	8007094 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff03 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e000      	b.n	8007096 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	2000000c 	.word	0x2000000c
 80070a4:	165e9f81 	.word	0x165e9f81

080070a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7ff fedf 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e046      	b.n	800716a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070dc:	4b25      	ldr	r3, [pc, #148]	@ (8007174 <SPI_EndRxTxTransaction+0xcc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a25      	ldr	r2, [pc, #148]	@ (8007178 <SPI_EndRxTxTransaction+0xd0>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	0d5b      	lsrs	r3, r3, #21
 80070e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070ec:	fb02 f303 	mul.w	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070fa:	d112      	bne.n	8007122 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	2180      	movs	r1, #128	@ 0x80
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff fe34 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d016      	beq.n	8007140 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007116:	f043 0220 	orr.w	r2, r3, #32
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e023      	b.n	800716a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	3b01      	subs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007138:	2b80      	cmp	r3, #128	@ 0x80
 800713a:	d0f2      	beq.n	8007122 <SPI_EndRxTxTransaction+0x7a>
 800713c:	e000      	b.n	8007140 <SPI_EndRxTxTransaction+0x98>
        break;
 800713e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fe99 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e000      	b.n	800716a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	2000000c 	.word	0x2000000c
 8007178:	165e9f81 	.word	0x165e9f81

0800717c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e040      	b.n	8007210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fb fabc 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	@ 0x24
 80071a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0201 	bic.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f8b0 	bl	8007320 <UART_SetConfig>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e022      	b.n	8007210 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fb08 	bl	80077e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fb8f 	bl	800792c <UART_CheckIdleState>
 800720e:	4603      	mov	r3, r0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	@ 0x28
 800721c:	af02      	add	r7, sp, #8
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800722c:	2b20      	cmp	r3, #32
 800722e:	d171      	bne.n	8007314 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_UART_Transmit+0x24>
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e06a      	b.n	8007316 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2221      	movs	r2, #33	@ 0x21
 800724c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800724e:	f7fb fe3b 	bl	8002ec8 <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800726c:	d108      	bne.n	8007280 <HAL_UART_Transmit+0x68>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d104      	bne.n	8007280 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e003      	b.n	8007288 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007288:	e02c      	b.n	80072e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2200      	movs	r2, #0
 8007292:	2180      	movs	r1, #128	@ 0x80
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fb80 	bl	800799a <UART_WaitOnFlagUntilTimeout>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e038      	b.n	8007316 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	3302      	adds	r3, #2
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	e007      	b.n	80072d2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	781a      	ldrb	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	3301      	adds	r3, #1
 80072d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1cc      	bne.n	800728a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2200      	movs	r2, #0
 80072f8:	2140      	movs	r1, #64	@ 0x40
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fb4d 	bl	800799a <UART_WaitOnFlagUntilTimeout>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e005      	b.n	8007316 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	e000      	b.n	8007316 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007314:	2302      	movs	r3, #2
  }
}
 8007316:	4618      	mov	r0, r3
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4ba6      	ldr	r3, [pc, #664]	@ (80075e4 <UART_SetConfig+0x2c4>)
 800734c:	4013      	ands	r3, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	6979      	ldr	r1, [r7, #20]
 8007354:	430b      	orrs	r3, r1
 8007356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	430a      	orrs	r2, r1
 8007390:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a94      	ldr	r2, [pc, #592]	@ (80075e8 <UART_SetConfig+0x2c8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d120      	bne.n	80073de <UART_SetConfig+0xbe>
 800739c:	4b93      	ldr	r3, [pc, #588]	@ (80075ec <UART_SetConfig+0x2cc>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d816      	bhi.n	80073d8 <UART_SetConfig+0xb8>
 80073aa:	a201      	add	r2, pc, #4	@ (adr r2, 80073b0 <UART_SetConfig+0x90>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	080073cd 	.word	0x080073cd
 80073b8:	080073c7 	.word	0x080073c7
 80073bc:	080073d3 	.word	0x080073d3
 80073c0:	2301      	movs	r3, #1
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e150      	b.n	8007668 <UART_SetConfig+0x348>
 80073c6:	2302      	movs	r3, #2
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	e14d      	b.n	8007668 <UART_SetConfig+0x348>
 80073cc:	2304      	movs	r3, #4
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e14a      	b.n	8007668 <UART_SetConfig+0x348>
 80073d2:	2308      	movs	r3, #8
 80073d4:	77fb      	strb	r3, [r7, #31]
 80073d6:	e147      	b.n	8007668 <UART_SetConfig+0x348>
 80073d8:	2310      	movs	r3, #16
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e144      	b.n	8007668 <UART_SetConfig+0x348>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a83      	ldr	r2, [pc, #524]	@ (80075f0 <UART_SetConfig+0x2d0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d132      	bne.n	800744e <UART_SetConfig+0x12e>
 80073e8:	4b80      	ldr	r3, [pc, #512]	@ (80075ec <UART_SetConfig+0x2cc>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	f003 030c 	and.w	r3, r3, #12
 80073f2:	2b0c      	cmp	r3, #12
 80073f4:	d828      	bhi.n	8007448 <UART_SetConfig+0x128>
 80073f6:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <UART_SetConfig+0xdc>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007449 	.word	0x08007449
 8007404:	08007449 	.word	0x08007449
 8007408:	08007449 	.word	0x08007449
 800740c:	0800743d 	.word	0x0800743d
 8007410:	08007449 	.word	0x08007449
 8007414:	08007449 	.word	0x08007449
 8007418:	08007449 	.word	0x08007449
 800741c:	08007437 	.word	0x08007437
 8007420:	08007449 	.word	0x08007449
 8007424:	08007449 	.word	0x08007449
 8007428:	08007449 	.word	0x08007449
 800742c:	08007443 	.word	0x08007443
 8007430:	2300      	movs	r3, #0
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e118      	b.n	8007668 <UART_SetConfig+0x348>
 8007436:	2302      	movs	r3, #2
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e115      	b.n	8007668 <UART_SetConfig+0x348>
 800743c:	2304      	movs	r3, #4
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e112      	b.n	8007668 <UART_SetConfig+0x348>
 8007442:	2308      	movs	r3, #8
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e10f      	b.n	8007668 <UART_SetConfig+0x348>
 8007448:	2310      	movs	r3, #16
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e10c      	b.n	8007668 <UART_SetConfig+0x348>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a68      	ldr	r2, [pc, #416]	@ (80075f4 <UART_SetConfig+0x2d4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d120      	bne.n	800749a <UART_SetConfig+0x17a>
 8007458:	4b64      	ldr	r3, [pc, #400]	@ (80075ec <UART_SetConfig+0x2cc>)
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007462:	2b30      	cmp	r3, #48	@ 0x30
 8007464:	d013      	beq.n	800748e <UART_SetConfig+0x16e>
 8007466:	2b30      	cmp	r3, #48	@ 0x30
 8007468:	d814      	bhi.n	8007494 <UART_SetConfig+0x174>
 800746a:	2b20      	cmp	r3, #32
 800746c:	d009      	beq.n	8007482 <UART_SetConfig+0x162>
 800746e:	2b20      	cmp	r3, #32
 8007470:	d810      	bhi.n	8007494 <UART_SetConfig+0x174>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <UART_SetConfig+0x15c>
 8007476:	2b10      	cmp	r3, #16
 8007478:	d006      	beq.n	8007488 <UART_SetConfig+0x168>
 800747a:	e00b      	b.n	8007494 <UART_SetConfig+0x174>
 800747c:	2300      	movs	r3, #0
 800747e:	77fb      	strb	r3, [r7, #31]
 8007480:	e0f2      	b.n	8007668 <UART_SetConfig+0x348>
 8007482:	2302      	movs	r3, #2
 8007484:	77fb      	strb	r3, [r7, #31]
 8007486:	e0ef      	b.n	8007668 <UART_SetConfig+0x348>
 8007488:	2304      	movs	r3, #4
 800748a:	77fb      	strb	r3, [r7, #31]
 800748c:	e0ec      	b.n	8007668 <UART_SetConfig+0x348>
 800748e:	2308      	movs	r3, #8
 8007490:	77fb      	strb	r3, [r7, #31]
 8007492:	e0e9      	b.n	8007668 <UART_SetConfig+0x348>
 8007494:	2310      	movs	r3, #16
 8007496:	77fb      	strb	r3, [r7, #31]
 8007498:	e0e6      	b.n	8007668 <UART_SetConfig+0x348>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a56      	ldr	r2, [pc, #344]	@ (80075f8 <UART_SetConfig+0x2d8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d120      	bne.n	80074e6 <UART_SetConfig+0x1c6>
 80074a4:	4b51      	ldr	r3, [pc, #324]	@ (80075ec <UART_SetConfig+0x2cc>)
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80074b0:	d013      	beq.n	80074da <UART_SetConfig+0x1ba>
 80074b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80074b4:	d814      	bhi.n	80074e0 <UART_SetConfig+0x1c0>
 80074b6:	2b80      	cmp	r3, #128	@ 0x80
 80074b8:	d009      	beq.n	80074ce <UART_SetConfig+0x1ae>
 80074ba:	2b80      	cmp	r3, #128	@ 0x80
 80074bc:	d810      	bhi.n	80074e0 <UART_SetConfig+0x1c0>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <UART_SetConfig+0x1a8>
 80074c2:	2b40      	cmp	r3, #64	@ 0x40
 80074c4:	d006      	beq.n	80074d4 <UART_SetConfig+0x1b4>
 80074c6:	e00b      	b.n	80074e0 <UART_SetConfig+0x1c0>
 80074c8:	2300      	movs	r3, #0
 80074ca:	77fb      	strb	r3, [r7, #31]
 80074cc:	e0cc      	b.n	8007668 <UART_SetConfig+0x348>
 80074ce:	2302      	movs	r3, #2
 80074d0:	77fb      	strb	r3, [r7, #31]
 80074d2:	e0c9      	b.n	8007668 <UART_SetConfig+0x348>
 80074d4:	2304      	movs	r3, #4
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	e0c6      	b.n	8007668 <UART_SetConfig+0x348>
 80074da:	2308      	movs	r3, #8
 80074dc:	77fb      	strb	r3, [r7, #31]
 80074de:	e0c3      	b.n	8007668 <UART_SetConfig+0x348>
 80074e0:	2310      	movs	r3, #16
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e0c0      	b.n	8007668 <UART_SetConfig+0x348>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a44      	ldr	r2, [pc, #272]	@ (80075fc <UART_SetConfig+0x2dc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d125      	bne.n	800753c <UART_SetConfig+0x21c>
 80074f0:	4b3e      	ldr	r3, [pc, #248]	@ (80075ec <UART_SetConfig+0x2cc>)
 80074f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074fe:	d017      	beq.n	8007530 <UART_SetConfig+0x210>
 8007500:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007504:	d817      	bhi.n	8007536 <UART_SetConfig+0x216>
 8007506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800750a:	d00b      	beq.n	8007524 <UART_SetConfig+0x204>
 800750c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007510:	d811      	bhi.n	8007536 <UART_SetConfig+0x216>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <UART_SetConfig+0x1fe>
 8007516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751a:	d006      	beq.n	800752a <UART_SetConfig+0x20a>
 800751c:	e00b      	b.n	8007536 <UART_SetConfig+0x216>
 800751e:	2300      	movs	r3, #0
 8007520:	77fb      	strb	r3, [r7, #31]
 8007522:	e0a1      	b.n	8007668 <UART_SetConfig+0x348>
 8007524:	2302      	movs	r3, #2
 8007526:	77fb      	strb	r3, [r7, #31]
 8007528:	e09e      	b.n	8007668 <UART_SetConfig+0x348>
 800752a:	2304      	movs	r3, #4
 800752c:	77fb      	strb	r3, [r7, #31]
 800752e:	e09b      	b.n	8007668 <UART_SetConfig+0x348>
 8007530:	2308      	movs	r3, #8
 8007532:	77fb      	strb	r3, [r7, #31]
 8007534:	e098      	b.n	8007668 <UART_SetConfig+0x348>
 8007536:	2310      	movs	r3, #16
 8007538:	77fb      	strb	r3, [r7, #31]
 800753a:	e095      	b.n	8007668 <UART_SetConfig+0x348>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a2f      	ldr	r2, [pc, #188]	@ (8007600 <UART_SetConfig+0x2e0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d125      	bne.n	8007592 <UART_SetConfig+0x272>
 8007546:	4b29      	ldr	r3, [pc, #164]	@ (80075ec <UART_SetConfig+0x2cc>)
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007554:	d017      	beq.n	8007586 <UART_SetConfig+0x266>
 8007556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800755a:	d817      	bhi.n	800758c <UART_SetConfig+0x26c>
 800755c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007560:	d00b      	beq.n	800757a <UART_SetConfig+0x25a>
 8007562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007566:	d811      	bhi.n	800758c <UART_SetConfig+0x26c>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <UART_SetConfig+0x254>
 800756c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007570:	d006      	beq.n	8007580 <UART_SetConfig+0x260>
 8007572:	e00b      	b.n	800758c <UART_SetConfig+0x26c>
 8007574:	2301      	movs	r3, #1
 8007576:	77fb      	strb	r3, [r7, #31]
 8007578:	e076      	b.n	8007668 <UART_SetConfig+0x348>
 800757a:	2302      	movs	r3, #2
 800757c:	77fb      	strb	r3, [r7, #31]
 800757e:	e073      	b.n	8007668 <UART_SetConfig+0x348>
 8007580:	2304      	movs	r3, #4
 8007582:	77fb      	strb	r3, [r7, #31]
 8007584:	e070      	b.n	8007668 <UART_SetConfig+0x348>
 8007586:	2308      	movs	r3, #8
 8007588:	77fb      	strb	r3, [r7, #31]
 800758a:	e06d      	b.n	8007668 <UART_SetConfig+0x348>
 800758c:	2310      	movs	r3, #16
 800758e:	77fb      	strb	r3, [r7, #31]
 8007590:	e06a      	b.n	8007668 <UART_SetConfig+0x348>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1b      	ldr	r2, [pc, #108]	@ (8007604 <UART_SetConfig+0x2e4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d138      	bne.n	800760e <UART_SetConfig+0x2ee>
 800759c:	4b13      	ldr	r3, [pc, #76]	@ (80075ec <UART_SetConfig+0x2cc>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80075a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075aa:	d017      	beq.n	80075dc <UART_SetConfig+0x2bc>
 80075ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075b0:	d82a      	bhi.n	8007608 <UART_SetConfig+0x2e8>
 80075b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b6:	d00b      	beq.n	80075d0 <UART_SetConfig+0x2b0>
 80075b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075bc:	d824      	bhi.n	8007608 <UART_SetConfig+0x2e8>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <UART_SetConfig+0x2aa>
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c6:	d006      	beq.n	80075d6 <UART_SetConfig+0x2b6>
 80075c8:	e01e      	b.n	8007608 <UART_SetConfig+0x2e8>
 80075ca:	2300      	movs	r3, #0
 80075cc:	77fb      	strb	r3, [r7, #31]
 80075ce:	e04b      	b.n	8007668 <UART_SetConfig+0x348>
 80075d0:	2302      	movs	r3, #2
 80075d2:	77fb      	strb	r3, [r7, #31]
 80075d4:	e048      	b.n	8007668 <UART_SetConfig+0x348>
 80075d6:	2304      	movs	r3, #4
 80075d8:	77fb      	strb	r3, [r7, #31]
 80075da:	e045      	b.n	8007668 <UART_SetConfig+0x348>
 80075dc:	2308      	movs	r3, #8
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e042      	b.n	8007668 <UART_SetConfig+0x348>
 80075e2:	bf00      	nop
 80075e4:	efff69f3 	.word	0xefff69f3
 80075e8:	40011000 	.word	0x40011000
 80075ec:	40023800 	.word	0x40023800
 80075f0:	40004400 	.word	0x40004400
 80075f4:	40004800 	.word	0x40004800
 80075f8:	40004c00 	.word	0x40004c00
 80075fc:	40005000 	.word	0x40005000
 8007600:	40011400 	.word	0x40011400
 8007604:	40007800 	.word	0x40007800
 8007608:	2310      	movs	r3, #16
 800760a:	77fb      	strb	r3, [r7, #31]
 800760c:	e02c      	b.n	8007668 <UART_SetConfig+0x348>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a72      	ldr	r2, [pc, #456]	@ (80077dc <UART_SetConfig+0x4bc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d125      	bne.n	8007664 <UART_SetConfig+0x344>
 8007618:	4b71      	ldr	r3, [pc, #452]	@ (80077e0 <UART_SetConfig+0x4c0>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800761e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007622:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007626:	d017      	beq.n	8007658 <UART_SetConfig+0x338>
 8007628:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800762c:	d817      	bhi.n	800765e <UART_SetConfig+0x33e>
 800762e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007632:	d00b      	beq.n	800764c <UART_SetConfig+0x32c>
 8007634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007638:	d811      	bhi.n	800765e <UART_SetConfig+0x33e>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <UART_SetConfig+0x326>
 800763e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007642:	d006      	beq.n	8007652 <UART_SetConfig+0x332>
 8007644:	e00b      	b.n	800765e <UART_SetConfig+0x33e>
 8007646:	2300      	movs	r3, #0
 8007648:	77fb      	strb	r3, [r7, #31]
 800764a:	e00d      	b.n	8007668 <UART_SetConfig+0x348>
 800764c:	2302      	movs	r3, #2
 800764e:	77fb      	strb	r3, [r7, #31]
 8007650:	e00a      	b.n	8007668 <UART_SetConfig+0x348>
 8007652:	2304      	movs	r3, #4
 8007654:	77fb      	strb	r3, [r7, #31]
 8007656:	e007      	b.n	8007668 <UART_SetConfig+0x348>
 8007658:	2308      	movs	r3, #8
 800765a:	77fb      	strb	r3, [r7, #31]
 800765c:	e004      	b.n	8007668 <UART_SetConfig+0x348>
 800765e:	2310      	movs	r3, #16
 8007660:	77fb      	strb	r3, [r7, #31]
 8007662:	e001      	b.n	8007668 <UART_SetConfig+0x348>
 8007664:	2310      	movs	r3, #16
 8007666:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007670:	d15b      	bne.n	800772a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007672:	7ffb      	ldrb	r3, [r7, #31]
 8007674:	2b08      	cmp	r3, #8
 8007676:	d828      	bhi.n	80076ca <UART_SetConfig+0x3aa>
 8007678:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <UART_SetConfig+0x360>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076a5 	.word	0x080076a5
 8007684:	080076ad 	.word	0x080076ad
 8007688:	080076b5 	.word	0x080076b5
 800768c:	080076cb 	.word	0x080076cb
 8007690:	080076bb 	.word	0x080076bb
 8007694:	080076cb 	.word	0x080076cb
 8007698:	080076cb 	.word	0x080076cb
 800769c:	080076cb 	.word	0x080076cb
 80076a0:	080076c3 	.word	0x080076c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a4:	f7fe f97c 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 80076a8:	61b8      	str	r0, [r7, #24]
        break;
 80076aa:	e013      	b.n	80076d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ac:	f7fe f98c 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 80076b0:	61b8      	str	r0, [r7, #24]
        break;
 80076b2:	e00f      	b.n	80076d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b4:	4b4b      	ldr	r3, [pc, #300]	@ (80077e4 <UART_SetConfig+0x4c4>)
 80076b6:	61bb      	str	r3, [r7, #24]
        break;
 80076b8:	e00c      	b.n	80076d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ba:	f7fe f85f 	bl	800577c <HAL_RCC_GetSysClockFreq>
 80076be:	61b8      	str	r0, [r7, #24]
        break;
 80076c0:	e008      	b.n	80076d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c6:	61bb      	str	r3, [r7, #24]
        break;
 80076c8:	e004      	b.n	80076d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	77bb      	strb	r3, [r7, #30]
        break;
 80076d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d074      	beq.n	80077c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	005a      	lsls	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d916      	bls.n	8007724 <UART_SetConfig+0x404>
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076fc:	d212      	bcs.n	8007724 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f023 030f 	bic.w	r3, r3, #15
 8007706:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	085b      	lsrs	r3, r3, #1
 800770c:	b29b      	uxth	r3, r3
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	b29a      	uxth	r2, r3
 8007714:	89fb      	ldrh	r3, [r7, #14]
 8007716:	4313      	orrs	r3, r2
 8007718:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	89fa      	ldrh	r2, [r7, #14]
 8007720:	60da      	str	r2, [r3, #12]
 8007722:	e04f      	b.n	80077c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	77bb      	strb	r3, [r7, #30]
 8007728:	e04c      	b.n	80077c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800772a:	7ffb      	ldrb	r3, [r7, #31]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d828      	bhi.n	8007782 <UART_SetConfig+0x462>
 8007730:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <UART_SetConfig+0x418>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007765 	.word	0x08007765
 8007740:	0800776d 	.word	0x0800776d
 8007744:	08007783 	.word	0x08007783
 8007748:	08007773 	.word	0x08007773
 800774c:	08007783 	.word	0x08007783
 8007750:	08007783 	.word	0x08007783
 8007754:	08007783 	.word	0x08007783
 8007758:	0800777b 	.word	0x0800777b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775c:	f7fe f920 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 8007760:	61b8      	str	r0, [r7, #24]
        break;
 8007762:	e013      	b.n	800778c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007764:	f7fe f930 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8007768:	61b8      	str	r0, [r7, #24]
        break;
 800776a:	e00f      	b.n	800778c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800776c:	4b1d      	ldr	r3, [pc, #116]	@ (80077e4 <UART_SetConfig+0x4c4>)
 800776e:	61bb      	str	r3, [r7, #24]
        break;
 8007770:	e00c      	b.n	800778c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007772:	f7fe f803 	bl	800577c <HAL_RCC_GetSysClockFreq>
 8007776:	61b8      	str	r0, [r7, #24]
        break;
 8007778:	e008      	b.n	800778c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800777a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800777e:	61bb      	str	r3, [r7, #24]
        break;
 8007780:	e004      	b.n	800778c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	77bb      	strb	r3, [r7, #30]
        break;
 800778a:	bf00      	nop
    }

    if (pclk != 0U)
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d018      	beq.n	80077c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	085a      	lsrs	r2, r3, #1
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	441a      	add	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b0f      	cmp	r3, #15
 80077aa:	d909      	bls.n	80077c0 <UART_SetConfig+0x4a0>
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b2:	d205      	bcs.n	80077c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60da      	str	r2, [r3, #12]
 80077be:	e001      	b.n	80077c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80077d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	40007c00 	.word	0x40007c00
 80077e0:	40023800 	.word	0x40023800
 80077e4:	00f42400 	.word	0x00f42400

080077e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01a      	beq.n	80078fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e6:	d10a      	bne.n	80078fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800793c:	f7fb fac4 	bl	8002ec8 <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b08      	cmp	r3, #8
 800794e:	d10e      	bne.n	800796e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007950:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f81b 	bl	800799a <UART_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e011      	b.n	8007992 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b09c      	sub	sp, #112	@ 0x70
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	4613      	mov	r3, r2
 80079a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079aa:	e0a7      	b.n	8007afc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	f000 80a3 	beq.w	8007afc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b6:	f7fb fa87 	bl	8002ec8 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d302      	bcc.n	80079cc <UART_WaitOnFlagUntilTimeout+0x32>
 80079c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d13f      	bne.n	8007a4c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079dc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80079e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80079f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80079f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a1e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007a20:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e068      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d050      	beq.n	8007afc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a68:	d148      	bne.n	8007afc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007a88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a94:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e6      	bne.n	8007a74 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ac6:	623a      	str	r2, [r7, #32]
 8007ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	69f9      	ldr	r1, [r7, #28]
 8007acc:	6a3a      	ldr	r2, [r7, #32]
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e5      	bne.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2220      	movs	r2, #32
 8007ade:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e010      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69da      	ldr	r2, [r3, #28]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	f43f af48 	beq.w	80079ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3770      	adds	r7, #112	@ 0x70
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b28:	b084      	sub	sp, #16
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	f107 001c 	add.w	r0, r7, #28
 8007b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d120      	bne.n	8007b82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	4b20      	ldr	r3, [pc, #128]	@ (8007bd4 <USB_CoreInit+0xac>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d105      	bne.n	8007b76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa96 	bl	80080a8 <USB_CoreReset>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	e010      	b.n	8007ba4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa8a 	bl	80080a8 <USB_CoreReset>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d10b      	bne.n	8007bc2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f043 0206 	orr.w	r2, r3, #6
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f043 0220 	orr.w	r2, r3, #32
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bce:	b004      	add	sp, #16
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	ffbdffbf 	.word	0xffbdffbf

08007bd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f023 0201 	bic.w	r2, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d115      	bne.n	8007c48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c28:	2001      	movs	r0, #1
 8007c2a:	f7fb f959 	bl	8002ee0 <HAL_Delay>
      ms++;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3301      	adds	r3, #1
 8007c32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa29 	bl	800808c <USB_GetMode>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d01e      	beq.n	8007c7e <USB_SetCurrentMode+0x84>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b31      	cmp	r3, #49	@ 0x31
 8007c44:	d9f0      	bls.n	8007c28 <USB_SetCurrentMode+0x2e>
 8007c46:	e01a      	b.n	8007c7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d115      	bne.n	8007c7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	f7fb f940 	bl	8002ee0 <HAL_Delay>
      ms++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa10 	bl	800808c <USB_GetMode>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <USB_SetCurrentMode+0x84>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b31      	cmp	r3, #49	@ 0x31
 8007c76:	d9f0      	bls.n	8007c5a <USB_SetCurrentMode+0x60>
 8007c78:	e001      	b.n	8007c7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e005      	b.n	8007c8a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b32      	cmp	r3, #50	@ 0x32
 8007c82:	d101      	bne.n	8007c88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c94:	b084      	sub	sp, #16
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007cae:	2300      	movs	r3, #0
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	e009      	b.n	8007cc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	3340      	adds	r3, #64	@ 0x40
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b0e      	cmp	r3, #14
 8007ccc:	d9f2      	bls.n	8007cb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d11c      	bne.n	8007d0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ce2:	f043 0302 	orr.w	r3, r3, #2
 8007ce6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	e005      	b.n	8007d1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d20:	461a      	mov	r2, r3
 8007d22:	2300      	movs	r3, #0
 8007d24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d34:	461a      	mov	r2, r3
 8007d36:	680b      	ldr	r3, [r1, #0]
 8007d38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10c      	bne.n	8007d5a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d46:	2100      	movs	r1, #0
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f965 	bl	8008018 <USB_SetDevSpeed>
 8007d4e:	e008      	b.n	8007d62 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d50:	2101      	movs	r1, #1
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f960 	bl	8008018 <USB_SetDevSpeed>
 8007d58:	e003      	b.n	8007d62 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d5a:	2103      	movs	r1, #3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f95b 	bl	8008018 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d62:	2110      	movs	r1, #16
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f8f3 	bl	8007f50 <USB_FlushTxFifo>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f91f 	bl	8007fb8 <USB_FlushRxFifo>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d96:	461a      	mov	r2, r3
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da2:	461a      	mov	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007da8:	2300      	movs	r3, #0
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	e043      	b.n	8007e36 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dc4:	d118      	bne.n	8007df8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd8:	461a      	mov	r2, r3
 8007dda:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	e013      	b.n	8007e0a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dee:	461a      	mov	r2, r3
 8007df0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	e008      	b.n	8007e0a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e04:	461a      	mov	r2, r3
 8007e06:	2300      	movs	r3, #0
 8007e08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e16:	461a      	mov	r2, r3
 8007e18:	2300      	movs	r3, #0
 8007e1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	3301      	adds	r3, #1
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d3b7      	bcc.n	8007dae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e3e:	2300      	movs	r3, #0
 8007e40:	613b      	str	r3, [r7, #16]
 8007e42:	e043      	b.n	8007ecc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e5a:	d118      	bne.n	8007e8e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e013      	b.n	8007ea0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e84:	461a      	mov	r2, r3
 8007e86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	e008      	b.n	8007ea0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eac:	461a      	mov	r2, r3
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ec4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	613b      	str	r3, [r7, #16]
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d3b7      	bcc.n	8007e44 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ee2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ee6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007ef4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d105      	bne.n	8007f08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f043 0210 	orr.w	r2, r3, #16
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699a      	ldr	r2, [r3, #24]
 8007f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f48 <USB_DevInit+0x2b4>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d005      	beq.n	8007f26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	f043 0208 	orr.w	r2, r3, #8
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d105      	bne.n	8007f38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	699a      	ldr	r2, [r3, #24]
 8007f30:	4b06      	ldr	r3, [pc, #24]	@ (8007f4c <USB_DevInit+0x2b8>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f44:	b004      	add	sp, #16
 8007f46:	4770      	bx	lr
 8007f48:	803c3800 	.word	0x803c3800
 8007f4c:	40000004 	.word	0x40000004

08007f50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4a13      	ldr	r2, [pc, #76]	@ (8007fb4 <USB_FlushTxFifo+0x64>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d901      	bls.n	8007f70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e01b      	b.n	8007fa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	daf2      	bge.n	8007f5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	019b      	lsls	r3, r3, #6
 8007f80:	f043 0220 	orr.w	r2, r3, #32
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4a08      	ldr	r2, [pc, #32]	@ (8007fb4 <USB_FlushTxFifo+0x64>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d901      	bls.n	8007f9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e006      	b.n	8007fa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d0f0      	beq.n	8007f88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	00030d40 	.word	0x00030d40

08007fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a11      	ldr	r2, [pc, #68]	@ (8008014 <USB_FlushRxFifo+0x5c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e018      	b.n	8008008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	daf2      	bge.n	8007fc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2210      	movs	r2, #16
 8007fe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4a08      	ldr	r2, [pc, #32]	@ (8008014 <USB_FlushRxFifo+0x5c>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e006      	b.n	8008008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	f003 0310 	and.w	r3, r3, #16
 8008002:	2b10      	cmp	r3, #16
 8008004:	d0f0      	beq.n	8007fe8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	00030d40 	.word	0x00030d40

08008018 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008038:	4313      	orrs	r3, r2
 800803a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008064:	f023 0303 	bic.w	r3, r3, #3
 8008068:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008078:	f043 0302 	orr.w	r3, r3, #2
 800807c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	f003 0301 	and.w	r3, r3, #1
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4a13      	ldr	r2, [pc, #76]	@ (800810c <USB_CoreReset+0x64>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d901      	bls.n	80080c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e01b      	b.n	80080fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	daf2      	bge.n	80080b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f043 0201 	orr.w	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3301      	adds	r3, #1
 80080e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4a09      	ldr	r2, [pc, #36]	@ (800810c <USB_CoreReset+0x64>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d901      	bls.n	80080f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e006      	b.n	80080fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d0f0      	beq.n	80080de <USB_CoreReset+0x36>

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	00030d40 	.word	0x00030d40

08008110 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8008116:	f002 f86f 	bl	800a1f8 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800811a:	4b12      	ldr	r3, [pc, #72]	@ (8008164 <MX_LWIP_Init+0x54>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008120:	4b11      	ldr	r3, [pc, #68]	@ (8008168 <MX_LWIP_Init+0x58>)
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8008126:	4b11      	ldr	r3, [pc, #68]	@ (800816c <MX_LWIP_Init+0x5c>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800812c:	4b10      	ldr	r3, [pc, #64]	@ (8008170 <MX_LWIP_Init+0x60>)
 800812e:	9302      	str	r3, [sp, #8]
 8008130:	4b10      	ldr	r3, [pc, #64]	@ (8008174 <MX_LWIP_Init+0x64>)
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	2300      	movs	r3, #0
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	4b0c      	ldr	r3, [pc, #48]	@ (800816c <MX_LWIP_Init+0x5c>)
 800813a:	4a0b      	ldr	r2, [pc, #44]	@ (8008168 <MX_LWIP_Init+0x58>)
 800813c:	4909      	ldr	r1, [pc, #36]	@ (8008164 <MX_LWIP_Init+0x54>)
 800813e:	480e      	ldr	r0, [pc, #56]	@ (8008178 <MX_LWIP_Init+0x68>)
 8008140:	f002 fd46 	bl	800abd0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008144:	480c      	ldr	r0, [pc, #48]	@ (8008178 <MX_LWIP_Init+0x68>)
 8008146:	f002 fefd 	bl	800af44 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800814a:	480b      	ldr	r0, [pc, #44]	@ (8008178 <MX_LWIP_Init+0x68>)
 800814c:	f002 ff0a 	bl	800af64 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008150:	490a      	ldr	r1, [pc, #40]	@ (800817c <MX_LWIP_Init+0x6c>)
 8008152:	4809      	ldr	r0, [pc, #36]	@ (8008178 <MX_LWIP_Init+0x68>)
 8008154:	f003 f80c 	bl	800b170 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8008158:	4807      	ldr	r0, [pc, #28]	@ (8008178 <MX_LWIP_Init+0x68>)
 800815a:	f00b f801 	bl	8013160 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800815e:	bf00      	nop
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20000b20 	.word	0x20000b20
 8008168:	20000b24 	.word	0x20000b24
 800816c:	20000b28 	.word	0x20000b28
 8008170:	08016ba5 	.word	0x08016ba5
 8008174:	080084e5 	.word	0x080084e5
 8008178:	20000ae8 	.word	0x20000ae8
 800817c:	080081d1 	.word	0x080081d1

08008180 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8008188:	f7fa fe9e 	bl	8002ec8 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	4b08      	ldr	r3, [pc, #32]	@ (80081b0 <Ethernet_Link_Periodic_Handle+0x30>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b63      	cmp	r3, #99	@ 0x63
 8008196:	d907      	bls.n	80081a8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8008198:	f7fa fe96 	bl	8002ec8 <HAL_GetTick>
 800819c:	4603      	mov	r3, r0
 800819e:	4a04      	ldr	r2, [pc, #16]	@ (80081b0 <Ethernet_Link_Periodic_Handle+0x30>)
 80081a0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fafc 	bl	80087a0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000ae4 	.word	0x20000ae4

080081b4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80081b8:	4804      	ldr	r0, [pc, #16]	@ (80081cc <MX_LWIP_Process+0x18>)
 80081ba:	f000 f973 	bl	80084a4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80081be:	f009 ff53 	bl	8012068 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80081c2:	4802      	ldr	r0, [pc, #8]	@ (80081cc <MX_LWIP_Process+0x18>)
 80081c4:	f7ff ffdc 	bl	8008180 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000ae8 	.word	0x20000ae8

080081d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <SCB_InvalidateDCache_by_Addr>:
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80081f6:	2320      	movs	r3, #32
 80081f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80081fa:	f3bf 8f4f 	dsb	sy
}
 80081fe:	bf00      	nop
    while (op_size > 0) {
 8008200:	e00b      	b.n	800821a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008202:	4a0d      	ldr	r2, [pc, #52]	@ (8008238 <SCB_InvalidateDCache_by_Addr+0x54>)
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	4413      	add	r3, r2
 8008210:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dcf0      	bgt.n	8008202 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008220:	f3bf 8f4f 	dsb	sy
}
 8008224:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008226:	f3bf 8f6f 	isb	sy
}
 800822a:	bf00      	nop
}
 800822c:	bf00      	nop
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	e000ed00 	.word	0xe000ed00

0800823c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008248:	4b40      	ldr	r3, [pc, #256]	@ (800834c <low_level_init+0x110>)
 800824a:	4a41      	ldr	r2, [pc, #260]	@ (8008350 <low_level_init+0x114>)
 800824c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800824e:	2300      	movs	r3, #0
 8008250:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008252:	2380      	movs	r3, #128	@ 0x80
 8008254:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008256:	23e1      	movs	r3, #225	@ 0xe1
 8008258:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800825a:	2300      	movs	r3, #0
 800825c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800825e:	2300      	movs	r3, #0
 8008260:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008262:	2300      	movs	r3, #0
 8008264:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008266:	4a39      	ldr	r2, [pc, #228]	@ (800834c <low_level_init+0x110>)
 8008268:	f107 0308 	add.w	r3, r7, #8
 800826c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800826e:	4b37      	ldr	r3, [pc, #220]	@ (800834c <low_level_init+0x110>)
 8008270:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008274:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008276:	4b35      	ldr	r3, [pc, #212]	@ (800834c <low_level_init+0x110>)
 8008278:	4a36      	ldr	r2, [pc, #216]	@ (8008354 <low_level_init+0x118>)
 800827a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800827c:	4b33      	ldr	r3, [pc, #204]	@ (800834c <low_level_init+0x110>)
 800827e:	4a36      	ldr	r2, [pc, #216]	@ (8008358 <low_level_init+0x11c>)
 8008280:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008282:	4b32      	ldr	r3, [pc, #200]	@ (800834c <low_level_init+0x110>)
 8008284:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008288:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800828a:	4830      	ldr	r0, [pc, #192]	@ (800834c <low_level_init+0x110>)
 800828c:	f7fb fad6 	bl	800383c <HAL_ETH_Init>
 8008290:	4603      	mov	r3, r0
 8008292:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008294:	2238      	movs	r2, #56	@ 0x38
 8008296:	2100      	movs	r1, #0
 8008298:	4830      	ldr	r0, [pc, #192]	@ (800835c <low_level_init+0x120>)
 800829a:	f00f fb50 	bl	801793e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800829e:	4b2f      	ldr	r3, [pc, #188]	@ (800835c <low_level_init+0x120>)
 80082a0:	2221      	movs	r2, #33	@ 0x21
 80082a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80082a4:	4b2d      	ldr	r3, [pc, #180]	@ (800835c <low_level_init+0x120>)
 80082a6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80082aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80082ac:	4b2b      	ldr	r3, [pc, #172]	@ (800835c <low_level_init+0x120>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80082b2:	482b      	ldr	r0, [pc, #172]	@ (8008360 <low_level_init+0x124>)
 80082b4:	f002 fb54 	bl	800a960 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2206      	movs	r2, #6
 80082bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80082c0:	4b22      	ldr	r3, [pc, #136]	@ (800834c <low_level_init+0x110>)
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80082cc:	4b1f      	ldr	r3, [pc, #124]	@ (800834c <low_level_init+0x110>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	785a      	ldrb	r2, [r3, #1]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80082d8:	4b1c      	ldr	r3, [pc, #112]	@ (800834c <low_level_init+0x110>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	789a      	ldrb	r2, [r3, #2]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80082e4:	4b19      	ldr	r3, [pc, #100]	@ (800834c <low_level_init+0x110>)
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	78da      	ldrb	r2, [r3, #3]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80082f0:	4b16      	ldr	r3, [pc, #88]	@ (800834c <low_level_init+0x110>)
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	791a      	ldrb	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80082fc:	4b13      	ldr	r3, [pc, #76]	@ (800834c <low_level_init+0x110>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	795a      	ldrb	r2, [r3, #5]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800830e:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008316:	f043 030a 	orr.w	r3, r3, #10
 800831a:	b2da      	uxtb	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008322:	4910      	ldr	r1, [pc, #64]	@ (8008364 <low_level_init+0x128>)
 8008324:	4810      	ldr	r0, [pc, #64]	@ (8008368 <low_level_init+0x12c>)
 8008326:	f7fa fc1c 	bl	8002b62 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800832a:	480f      	ldr	r0, [pc, #60]	@ (8008368 <low_level_init+0x12c>)
 800832c:	f7fa fc4b 	bl	8002bc6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d103      	bne.n	800833e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa32 	bl	80087a0 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800833c:	e001      	b.n	8008342 <low_level_init+0x106>
    Error_Handler();
 800833e:	f7fa f8fd 	bl	800253c <Error_Handler>
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	200054b8 	.word	0x200054b8
 8008350:	40028000 	.word	0x40028000
 8008354:	200002a4 	.word	0x200002a4
 8008358:	20000204 	.word	0x20000204
 800835c:	20005568 	.word	0x20005568
 8008360:	0801cccc 	.word	0x0801cccc
 8008364:	20000018 	.word	0x20000018
 8008368:	200055a0 	.word	0x200055a0

0800836c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b092      	sub	sp, #72	@ 0x48
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008384:	f107 030c 	add.w	r3, r7, #12
 8008388:	2230      	movs	r2, #48	@ 0x30
 800838a:	2100      	movs	r1, #0
 800838c:	4618      	mov	r0, r3
 800838e:	f00f fad6 	bl	801793e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008392:	f107 030c 	add.w	r3, r7, #12
 8008396:	2230      	movs	r2, #48	@ 0x30
 8008398:	2100      	movs	r1, #0
 800839a:	4618      	mov	r0, r3
 800839c:	f00f facf 	bl	801793e <memset>

  for(q = p; q != NULL; q = q->next)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80083a4:	e045      	b.n	8008432 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80083a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d902      	bls.n	80083b2 <low_level_output+0x46>
      return ERR_IF;
 80083ac:	f06f 030b 	mvn.w	r3, #11
 80083b0:	e055      	b.n	800845e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80083b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083b4:	6859      	ldr	r1, [r3, #4]
 80083b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083b8:	4613      	mov	r3, r2
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	3348      	adds	r3, #72	@ 0x48
 80083c2:	443b      	add	r3, r7
 80083c4:	3b3c      	subs	r3, #60	@ 0x3c
 80083c6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80083c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ca:	895b      	ldrh	r3, [r3, #10]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083d0:	4613      	mov	r3, r2
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	3348      	adds	r3, #72	@ 0x48
 80083da:	443b      	add	r3, r7
 80083dc:	3b38      	subs	r3, #56	@ 0x38
 80083de:	6019      	str	r1, [r3, #0]

    if(i>0)
 80083e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d011      	beq.n	800840a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80083e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083e8:	1e5a      	subs	r2, r3, #1
 80083ea:	f107 000c 	add.w	r0, r7, #12
 80083ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083f0:	460b      	mov	r3, r1
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	440b      	add	r3, r1
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	18c1      	adds	r1, r0, r3
 80083fa:	4613      	mov	r3, r2
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	3348      	adds	r3, #72	@ 0x48
 8008404:	443b      	add	r3, r7
 8008406:	3b34      	subs	r3, #52	@ 0x34
 8008408:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800840a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008414:	4613      	mov	r3, r2
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	3348      	adds	r3, #72	@ 0x48
 800841e:	443b      	add	r3, r7
 8008420:	3b34      	subs	r3, #52	@ 0x34
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008428:	3301      	adds	r3, #1
 800842a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800842c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	643b      	str	r3, [r7, #64]	@ 0x40
 8008432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1b6      	bne.n	80083a6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	891b      	ldrh	r3, [r3, #8]
 800843c:	461a      	mov	r2, r3
 800843e:	4b0a      	ldr	r3, [pc, #40]	@ (8008468 <low_level_output+0xfc>)
 8008440:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008442:	4a09      	ldr	r2, [pc, #36]	@ (8008468 <low_level_output+0xfc>)
 8008444:	f107 030c 	add.w	r3, r7, #12
 8008448:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800844a:	4a07      	ldr	r2, [pc, #28]	@ (8008468 <low_level_output+0xfc>)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008450:	2214      	movs	r2, #20
 8008452:	4905      	ldr	r1, [pc, #20]	@ (8008468 <low_level_output+0xfc>)
 8008454:	4805      	ldr	r0, [pc, #20]	@ (800846c <low_level_output+0x100>)
 8008456:	f7fb fb25 	bl	8003aa4 <HAL_ETH_Transmit>

  return errval;
 800845a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800845e:	4618      	mov	r0, r3
 8008460:	3748      	adds	r7, #72	@ 0x48
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20005568 	.word	0x20005568
 800846c:	200054b8 	.word	0x200054b8

08008470 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800847c:	4b07      	ldr	r3, [pc, #28]	@ (800849c <low_level_input+0x2c>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d105      	bne.n	8008490 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008484:	f107 030c 	add.w	r3, r7, #12
 8008488:	4619      	mov	r1, r3
 800848a:	4805      	ldr	r0, [pc, #20]	@ (80084a0 <low_level_input+0x30>)
 800848c:	f7fb fb9e 	bl	8003bcc <HAL_ETH_ReadData>
  }

  return p;
 8008490:	68fb      	ldr	r3, [r7, #12]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	200054b4 	.word	0x200054b4
 80084a0:	200054b8 	.word	0x200054b8

080084a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff ffdd 	bl	8008470 <low_level_input>
 80084b6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	4798      	blx	r3
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f003 f9ce 	bl	800b870 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1ea      	bne.n	80084b0 <ethernetif_input+0xc>
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <ethernetif_init+0x1c>
 80084f2:	4b0e      	ldr	r3, [pc, #56]	@ (800852c <ethernetif_init+0x48>)
 80084f4:	f240 127b 	movw	r2, #379	@ 0x17b
 80084f8:	490d      	ldr	r1, [pc, #52]	@ (8008530 <ethernetif_init+0x4c>)
 80084fa:	480e      	ldr	r0, [pc, #56]	@ (8008534 <ethernetif_init+0x50>)
 80084fc:	f00f f980 	bl	8017800 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2273      	movs	r2, #115	@ 0x73
 8008504:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2274      	movs	r2, #116	@ 0x74
 800850c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a09      	ldr	r2, [pc, #36]	@ (8008538 <ethernetif_init+0x54>)
 8008514:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a08      	ldr	r2, [pc, #32]	@ (800853c <ethernetif_init+0x58>)
 800851a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff fe8d 	bl	800823c <low_level_init>

  return ERR_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	08019c14 	.word	0x08019c14
 8008530:	08019c30 	.word	0x08019c30
 8008534:	08019c40 	.word	0x08019c40
 8008538:	08015021 	.word	0x08015021
 800853c:	0800836d 	.word	0x0800836d

08008540 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800854c:	68f9      	ldr	r1, [r7, #12]
 800854e:	4807      	ldr	r0, [pc, #28]	@ (800856c <pbuf_free_custom+0x2c>)
 8008550:	f002 fae8 	bl	800ab24 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008554:	4b06      	ldr	r3, [pc, #24]	@ (8008570 <pbuf_free_custom+0x30>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d102      	bne.n	8008562 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800855c:	4b04      	ldr	r3, [pc, #16]	@ (8008570 <pbuf_free_custom+0x30>)
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
  }
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	0801cccc 	.word	0x0801cccc
 8008570:	200054b4 	.word	0x200054b4

08008574 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008578:	f7fa fca6 	bl	8002ec8 <HAL_GetTick>
 800857c:	4603      	mov	r3, r0
}
 800857e:	4618      	mov	r0, r3
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08e      	sub	sp, #56	@ 0x38
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800858c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	609a      	str	r2, [r3, #8]
 8008598:	60da      	str	r2, [r3, #12]
 800859a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a52      	ldr	r2, [pc, #328]	@ (80086ec <HAL_ETH_MspInit+0x168>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f040 809e 	bne.w	80086e4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80085a8:	4b51      	ldr	r3, [pc, #324]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ac:	4a50      	ldr	r2, [pc, #320]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80085b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80085b4:	4b4e      	ldr	r3, [pc, #312]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085bc:	623b      	str	r3, [r7, #32]
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	4b4b      	ldr	r3, [pc, #300]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c4:	4a4a      	ldr	r2, [pc, #296]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80085cc:	4b48      	ldr	r3, [pc, #288]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4b45      	ldr	r3, [pc, #276]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085dc:	4a44      	ldr	r2, [pc, #272]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80085e4:	4b42      	ldr	r3, [pc, #264]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085f0:	4b3f      	ldr	r3, [pc, #252]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f4:	4a3e      	ldr	r2, [pc, #248]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085f6:	f043 0304 	orr.w	r3, r3, #4
 80085fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80085fc:	4b3c      	ldr	r3, [pc, #240]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 80085fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008608:	4b39      	ldr	r3, [pc, #228]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 800860a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860c:	4a38      	ldr	r2, [pc, #224]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 800860e:	f043 0301 	orr.w	r3, r3, #1
 8008612:	6313      	str	r3, [r2, #48]	@ 0x30
 8008614:	4b36      	ldr	r3, [pc, #216]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 8008616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008620:	4b33      	ldr	r3, [pc, #204]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 8008622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008624:	4a32      	ldr	r2, [pc, #200]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 8008626:	f043 0302 	orr.w	r3, r3, #2
 800862a:	6313      	str	r3, [r2, #48]	@ 0x30
 800862c:	4b30      	ldr	r3, [pc, #192]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	60fb      	str	r3, [r7, #12]
 8008636:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008638:	4b2d      	ldr	r3, [pc, #180]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 800863a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863c:	4a2c      	ldr	r2, [pc, #176]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 800863e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008642:	6313      	str	r3, [r2, #48]	@ 0x30
 8008644:	4b2a      	ldr	r3, [pc, #168]	@ (80086f0 <HAL_ETH_MspInit+0x16c>)
 8008646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864c:	60bb      	str	r3, [r7, #8]
 800864e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008650:	2332      	movs	r3, #50	@ 0x32
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008654:	2302      	movs	r3, #2
 8008656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008658:	2300      	movs	r3, #0
 800865a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800865c:	2303      	movs	r3, #3
 800865e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008660:	230b      	movs	r3, #11
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008668:	4619      	mov	r1, r3
 800866a:	4822      	ldr	r0, [pc, #136]	@ (80086f4 <HAL_ETH_MspInit+0x170>)
 800866c:	f7fc f9d8 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008670:	2386      	movs	r3, #134	@ 0x86
 8008672:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008674:	2302      	movs	r3, #2
 8008676:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008678:	2300      	movs	r3, #0
 800867a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800867c:	2303      	movs	r3, #3
 800867e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008680:	230b      	movs	r3, #11
 8008682:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008688:	4619      	mov	r1, r3
 800868a:	481b      	ldr	r0, [pc, #108]	@ (80086f8 <HAL_ETH_MspInit+0x174>)
 800868c:	f7fc f9c8 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008696:	2302      	movs	r3, #2
 8008698:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869a:	2300      	movs	r3, #0
 800869c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800869e:	2303      	movs	r3, #3
 80086a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086a2:	230b      	movs	r3, #11
 80086a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80086a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086aa:	4619      	mov	r1, r3
 80086ac:	4813      	ldr	r0, [pc, #76]	@ (80086fc <HAL_ETH_MspInit+0x178>)
 80086ae:	f7fc f9b7 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80086b2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80086b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b8:	2302      	movs	r3, #2
 80086ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086c0:	2303      	movs	r3, #3
 80086c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086c4:	230b      	movs	r3, #11
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80086c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086cc:	4619      	mov	r1, r3
 80086ce:	480c      	ldr	r0, [pc, #48]	@ (8008700 <HAL_ETH_MspInit+0x17c>)
 80086d0:	f7fc f9a6 	bl	8004a20 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80086d4:	2200      	movs	r2, #0
 80086d6:	2100      	movs	r1, #0
 80086d8:	203d      	movs	r0, #61	@ 0x3d
 80086da:	f7fa fd00 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80086de:	203d      	movs	r0, #61	@ 0x3d
 80086e0:	f7fa fd19 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80086e4:	bf00      	nop
 80086e6:	3738      	adds	r7, #56	@ 0x38
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40028000 	.word	0x40028000
 80086f0:	40023800 	.word	0x40023800
 80086f4:	40020800 	.word	0x40020800
 80086f8:	40020000 	.word	0x40020000
 80086fc:	40020400 	.word	0x40020400
 8008700:	40021800 	.word	0x40021800

08008704 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008708:	4802      	ldr	r0, [pc, #8]	@ (8008714 <ETH_PHY_IO_Init+0x10>)
 800870a:	f7fb fd2f 	bl	800416c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200054b8 	.word	0x200054b8

08008718 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  return 0;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	4807      	ldr	r0, [pc, #28]	@ (8008758 <ETH_PHY_IO_ReadReg+0x30>)
 800873c:	f7fb fb7e 	bl	8003e3c <HAL_ETH_ReadPHYRegister>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008746:	f04f 33ff 	mov.w	r3, #4294967295
 800874a:	e000      	b.n	800874e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200054b8 	.word	0x200054b8

0800875c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	68f9      	ldr	r1, [r7, #12]
 800876e:	4807      	ldr	r0, [pc, #28]	@ (800878c <ETH_PHY_IO_WriteReg+0x30>)
 8008770:	f7fb fbaf 	bl	8003ed2 <HAL_ETH_WritePHYRegister>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800877a:	f04f 33ff 	mov.w	r3, #4294967295
 800877e:	e000      	b.n	8008782 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200054b8 	.word	0x200054b8

08008790 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008794:	f7fa fb98 	bl	8002ec8 <HAL_GetTick>
 8008798:	4603      	mov	r3, r0
}
 800879a:	4618      	mov	r0, r3
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b0a0      	sub	sp, #128	@ 0x80
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80087a8:	f107 030c 	add.w	r3, r7, #12
 80087ac:	2264      	movs	r2, #100	@ 0x64
 80087ae:	2100      	movs	r1, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f00f f8c4 	bl	801793e <memset>
  int32_t PHYLinkState = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087be:	2300      	movs	r3, #0
 80087c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087c2:	2300      	movs	r3, #0
 80087c4:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80087c6:	483a      	ldr	r0, [pc, #232]	@ (80088b0 <ethernet_link_check_state+0x110>)
 80087c8:	f7fa faa5 	bl	8002d16 <LAN8742_GetLinkState>
 80087cc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80087d4:	089b      	lsrs	r3, r3, #2
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00c      	beq.n	80087fa <ethernet_link_check_state+0x5a>
 80087e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	dc09      	bgt.n	80087fa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80087e6:	4833      	ldr	r0, [pc, #204]	@ (80088b4 <ethernet_link_check_state+0x114>)
 80087e8:	f7fb f903 	bl	80039f2 <HAL_ETH_Stop>
    netif_set_down(netif);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f002 fc25 	bl	800b03c <netif_set_down>
    netif_set_link_down(netif);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f002 fc8c 	bl	800b110 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80087f8:	e055      	b.n	80088a6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d14e      	bne.n	80088a6 <ethernet_link_check_state+0x106>
 8008808:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800880a:	2b01      	cmp	r3, #1
 800880c:	dd4b      	ble.n	80088a6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800880e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008810:	3b02      	subs	r3, #2
 8008812:	2b03      	cmp	r3, #3
 8008814:	d82a      	bhi.n	800886c <ethernet_link_check_state+0xcc>
 8008816:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <ethernet_link_check_state+0x7c>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	0800882d 	.word	0x0800882d
 8008820:	0800883f 	.word	0x0800883f
 8008824:	0800884f 	.word	0x0800884f
 8008828:	0800885f 	.word	0x0800885f
      duplex = ETH_FULLDUPLEX_MODE;
 800882c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008830:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008832:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008836:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008838:	2301      	movs	r3, #1
 800883a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800883c:	e017      	b.n	800886e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800883e:	2300      	movs	r3, #0
 8008840:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008842:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008846:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008848:	2301      	movs	r3, #1
 800884a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800884c:	e00f      	b.n	800886e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800884e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008852:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008854:	2300      	movs	r3, #0
 8008856:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008858:	2301      	movs	r3, #1
 800885a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800885c:	e007      	b.n	800886e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800885e:	2300      	movs	r3, #0
 8008860:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008862:	2300      	movs	r3, #0
 8008864:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008866:	2301      	movs	r3, #1
 8008868:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800886a:	e000      	b.n	800886e <ethernet_link_check_state+0xce>
      break;
 800886c:	bf00      	nop
    if(linkchanged)
 800886e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d018      	beq.n	80088a6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008874:	f107 030c 	add.w	r3, r7, #12
 8008878:	4619      	mov	r1, r3
 800887a:	480e      	ldr	r0, [pc, #56]	@ (80088b4 <ethernet_link_check_state+0x114>)
 800887c:	f7fb fb72 	bl	8003f64 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008880:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008882:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8008884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008886:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008888:	f107 030c 	add.w	r3, r7, #12
 800888c:	4619      	mov	r1, r3
 800888e:	4809      	ldr	r0, [pc, #36]	@ (80088b4 <ethernet_link_check_state+0x114>)
 8008890:	f7fb fc52 	bl	8004138 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8008894:	4807      	ldr	r0, [pc, #28]	@ (80088b4 <ethernet_link_check_state+0x114>)
 8008896:	f7fb f84d 	bl	8003934 <HAL_ETH_Start>
      netif_set_up(netif);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f002 fb62 	bl	800af64 <netif_set_up>
      netif_set_link_up(netif);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 fbfd 	bl	800b0a0 <netif_set_link_up>
}
 80088a6:	bf00      	nop
 80088a8:	3780      	adds	r7, #128	@ 0x80
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	200055a0 	.word	0x200055a0
 80088b4:	200054b8 	.word	0x200054b8

080088b8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af02      	add	r7, sp, #8
 80088be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80088c0:	4812      	ldr	r0, [pc, #72]	@ (800890c <HAL_ETH_RxAllocateCallback+0x54>)
 80088c2:	f002 f8c1 	bl	800aa48 <memp_malloc_pool>
 80088c6:	60f8      	str	r0, [r7, #12]
  if (p)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d014      	beq.n	80088f8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f103 0220 	add.w	r2, r3, #32
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4a0d      	ldr	r2, [pc, #52]	@ (8008910 <HAL_ETH_RxAllocateCallback+0x58>)
 80088dc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80088e6:	9201      	str	r2, [sp, #4]
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2241      	movs	r2, #65	@ 0x41
 80088ee:	2100      	movs	r1, #0
 80088f0:	2000      	movs	r0, #0
 80088f2:	f002 fe03 	bl	800b4fc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80088f6:	e005      	b.n	8008904 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80088f8:	4b06      	ldr	r3, [pc, #24]	@ (8008914 <HAL_ETH_RxAllocateCallback+0x5c>)
 80088fa:	2201      	movs	r2, #1
 80088fc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	0801cccc 	.word	0x0801cccc
 8008910:	08008541 	.word	0x08008541
 8008914:	200054b4 	.word	0x200054b4

08008918 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	3b20      	subs	r3, #32
 8008936:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	2200      	movs	r2, #0
 8008942:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	887a      	ldrh	r2, [r7, #2]
 8008948:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d103      	bne.n	800895a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	e003      	b.n	8008962 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	e009      	b.n	8008984 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	891a      	ldrh	r2, [r3, #8]
 8008974:	887b      	ldrh	r3, [r7, #2]
 8008976:	4413      	add	r3, r2
 8008978:	b29a      	uxth	r2, r3
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f2      	bne.n	8008970 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800898a:	887b      	ldrh	r3, [r7, #2]
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff fc28 	bl	80081e4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008994:	bf00      	nop
 8008996:	3720      	adds	r7, #32
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <fs_open+0x16>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <fs_open+0x1c>
    return ERR_ARG;
 80089b2:	f06f 030f 	mvn.w	r3, #15
 80089b6:	e028      	b.n	8008a0a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80089b8:	4b16      	ldr	r3, [pc, #88]	@ (8008a14 <fs_open+0x78>)
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	e020      	b.n	8008a00 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6838      	ldr	r0, [r7, #0]
 80089c6:	f7f7 fc23 	bl	8000210 <strcmp>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d114      	bne.n	80089fa <fs_open+0x5e>
      file->data = (const char *)f->data;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	7c1a      	ldrb	r2, [r3, #16]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	e007      	b.n	8008a0a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1db      	bne.n	80089be <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8008a06:	f06f 0305 	mvn.w	r3, #5
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	0802033c 	.word	0x0802033c

08008a18 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	1ad3      	subs	r3, r2, r3
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8008a50:	20e0      	movs	r0, #224	@ 0xe0
 8008a52:	f001 fe8b 	bl	800a76c <mem_malloc>
 8008a56:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d004      	beq.n	8008a68 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8008a5e:	22e0      	movs	r2, #224	@ 0xe0
 8008a60:	2100      	movs	r1, #0
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f00e ff6b 	bl	801793e <memset>
  }
  return ret;
 8008a68:	687b      	ldr	r3, [r7, #4]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fd0d 	bl	800a4a0 <mem_free>
  }
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8008a96:	22b0      	movs	r2, #176	@ 0xb0
 8008a98:	2100      	movs	r1, #0
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f00e ff4f 	bl	801793e <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8008aae:	20b0      	movs	r0, #176	@ 0xb0
 8008ab0:	f001 fe5c 	bl	800a76c <mem_malloc>
 8008ab4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <http_state_alloc+0x1a>
    http_state_init(ret);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff ffe6 	bl	8008a8e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8008ac2:	687b      	ldr	r3, [r7, #4]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff ff99 	bl	8008a18 <fs_close>
    hs->handle = NULL;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d007      	beq.n	8008b04 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff ffba 	bl	8008a72 <http_ssi_state_free>
    hs->ssi = NULL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <http_state_eof+0x50>
    pbuf_free(hs->req);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f002 fead 	bl	800b870 <pbuf_free>
    hs->req = NULL;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <http_state_free+0x1a>
    http_state_eof(hs);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff ffca 	bl	8008acc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fcb1 	bl	800a4a0 <mem_free>
  }
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <http_write+0x22>
 8008b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8008c10 <http_write+0xc8>)
 8008b5e:	f240 2219 	movw	r2, #537	@ 0x219
 8008b62:	492c      	ldr	r1, [pc, #176]	@ (8008c14 <http_write+0xcc>)
 8008b64:	482c      	ldr	r0, [pc, #176]	@ (8008c18 <http_write+0xd0>)
 8008b66:	f00e fe4b 	bl	8017800 <iprintf>
  len = *length;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008b70:	8afb      	ldrh	r3, [r7, #22]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <http_write+0x32>
    return ERR_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e045      	b.n	8008c06 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8008b80:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8008b82:	8aba      	ldrh	r2, [r7, #20]
 8008b84:	8afb      	ldrh	r3, [r7, #22]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d201      	bcs.n	8008b8e <http_write+0x46>
    len = max_len;
 8008b8a:	8abb      	ldrh	r3, [r7, #20]
 8008b8c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8008b96:	8afa      	ldrh	r2, [r7, #22]
 8008b98:	8abb      	ldrh	r3, [r7, #20]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d901      	bls.n	8008ba2 <http_write+0x5a>
    len = max_len;
 8008b9e:	8abb      	ldrh	r3, [r7, #20]
 8008ba0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	8afa      	ldrh	r2, [r7, #22]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f007 fbf5 	bl	8010398 <tcp_write>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8008bb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d10f      	bne.n	8008bdc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d902      	bls.n	8008bd6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	82fb      	strh	r3, [r7, #22]
 8008bd4:	e002      	b.n	8008bdc <http_write+0x94>
      } else {
        len /= 2;
 8008bd6:	8afb      	ldrh	r3, [r7, #22]
 8008bd8:	085b      	lsrs	r3, r3, #1
 8008bda:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008bdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be4:	d102      	bne.n	8008bec <http_write+0xa4>
 8008be6:	8afb      	ldrh	r3, [r7, #22]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d8da      	bhi.n	8008ba2 <http_write+0x5a>

  if (err == ERR_OK) {
 8008bec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8afa      	ldrh	r2, [r7, #22]
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	e002      	b.n	8008c02 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008c02:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	08019ce4 	.word	0x08019ce4
 8008c14:	08019d1c 	.word	0x08019d1c
 8008c18:	08019d2c 	.word	0x08019d2c

08008c1c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f004 fc77 	bl	800d520 <tcp_arg>
  altcp_recv(pcb, NULL);
 8008c32:	2100      	movs	r1, #0
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f004 fc85 	bl	800d544 <tcp_recv>
  altcp_err(pcb, NULL);
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f004 fcc5 	bl	800d5cc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008c42:	2200      	movs	r2, #0
 8008c44:	2100      	movs	r1, #0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f004 fcfa 	bl	800d640 <tcp_poll>
  altcp_sent(pcb, NULL);
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f004 fc9a 	bl	800d588 <tcp_sent>
  if (hs != NULL) {
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8008c5a:	68b8      	ldr	r0, [r7, #8]
 8008c5c:	f7ff ff62 	bl	8008b24 <http_state_free>
  }

  if (abort_conn) {
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d004      	beq.n	8008c70 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f003 fb9a 	bl	800c3a0 <tcp_abort>
    return ERR_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e00f      	b.n	8008c90 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f003 faab 	bl	800c1cc <tcp_close>
 8008c76:	4603      	mov	r3, r0
 8008c78:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8008c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d004      	beq.n	8008c8c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8008c82:	2204      	movs	r2, #4
 8008c84:	4904      	ldr	r1, [pc, #16]	@ (8008c98 <http_close_or_abort_conn+0x7c>)
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f004 fcda 	bl	800d640 <tcp_poll>
  }
  return err;
 8008c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	08009d17 	.word	0x08009d17

08008c9c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff ffb6 	bl	8008c1c <http_close_or_abort_conn>
 8008cb0:	4603      	mov	r3, r0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff ffe8 	bl	8008c9c <http_close_conn>
  }
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <extract_uri_parameters+0x18>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <extract_uri_parameters+0x1c>
    return (0);
 8008cec:	2300      	movs	r3, #0
 8008cee:	e04b      	b.n	8008d88 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	e03f      	b.n	8008d7a <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	320c      	adds	r2, #12
 8008d00:	6979      	ldr	r1, [r7, #20]
 8008d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8008d0a:	2126      	movs	r1, #38	@ 0x26
 8008d0c:	6978      	ldr	r0, [r7, #20]
 8008d0e:	f00e fe1e 	bl	801794e <strchr>
 8008d12:	6178      	str	r0, [r7, #20]
    if (pair) {
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <extract_uri_parameters+0x54>
      *pair = '\0';
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
      pair++;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	3301      	adds	r3, #1
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	e00c      	b.n	8008d42 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8008d28:	2120      	movs	r1, #32
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f00e fe0f 	bl	801794e <strchr>
 8008d30:	6178      	str	r0, [r7, #20]
      if (pair) {
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <extract_uri_parameters+0x6a>
        *pair = '\0';
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8008d42:	213d      	movs	r1, #61	@ 0x3d
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f00e fe02 	bl	801794e <strchr>
 8008d4a:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <extract_uri_parameters+0x94>
      *equals = '\0';
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	1c59      	adds	r1, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	321c      	adds	r2, #28
 8008d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008d66:	e005      	b.n	8008d74 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	321c      	adds	r2, #28
 8008d6e:	2100      	movs	r1, #0
 8008d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	3301      	adds	r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b0f      	cmp	r3, #15
 8008d7e:	dc02      	bgt.n	8008d86 <extract_uri_parameters+0xb2>
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1b9      	bne.n	8008cfa <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8008d86:	693b      	ldr	r3, [r7, #16]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <get_tag_insert+0x1c>
 8008d9e:	4b51      	ldr	r3, [pc, #324]	@ (8008ee4 <get_tag_insert+0x154>)
 8008da0:	f44f 7241 	mov.w	r2, #772	@ 0x304
 8008da4:	4950      	ldr	r1, [pc, #320]	@ (8008ee8 <get_tag_insert+0x158>)
 8008da6:	4851      	ldr	r0, [pc, #324]	@ (8008eec <get_tag_insert+0x15c>)
 8008da8:	f00e fd2a 	bl	8017800 <iprintf>
  ssi = hs->ssi;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db0:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <get_tag_insert+0x36>
 8008db8:	4b4a      	ldr	r3, [pc, #296]	@ (8008ee4 <get_tag_insert+0x154>)
 8008dba:	f240 3206 	movw	r2, #774	@ 0x306
 8008dbe:	494c      	ldr	r1, [pc, #304]	@ (8008ef0 <get_tag_insert+0x160>)
 8008dc0:	484a      	ldr	r0, [pc, #296]	@ (8008eec <get_tag_insert+0x15c>)
 8008dc2:	f00e fd1d 	bl	8017800 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8008dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef4 <get_tag_insert+0x164>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d02e      	beq.n	8008e2c <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8008dce:	4b4a      	ldr	r3, [pc, #296]	@ (8008ef8 <get_tag_insert+0x168>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d02a      	beq.n	8008e2c <get_tag_insert+0x9c>
 8008dd6:	4b49      	ldr	r3, [pc, #292]	@ (8008efc <get_tag_insert+0x16c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d026      	beq.n	8008e2c <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	e01e      	b.n	8008e22 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f103 0012 	add.w	r0, r3, #18
 8008dea:	4b43      	ldr	r3, [pc, #268]	@ (8008ef8 <get_tag_insert+0x168>)
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4619      	mov	r1, r3
 8008df8:	f7f7 fa0a 	bl	8000210 <strcmp>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10c      	bne.n	8008e1c <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8008e02:	4b3c      	ldr	r3, [pc, #240]	@ (8008ef4 <get_tag_insert+0x164>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	f102 011b 	add.w	r1, r2, #27
 8008e0c:	22c0      	movs	r2, #192	@ 0xc0
 8008e0e:	6978      	ldr	r0, [r7, #20]
 8008e10:	4798      	blx	r3
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8008e1a:	e060      	b.n	8008ede <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	4b36      	ldr	r3, [pc, #216]	@ (8008efc <get_tag_insert+0x16c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	dbdb      	blt.n	8008de4 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	3312      	adds	r3, #18
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7f7 fa4d 	bl	80002d0 <strlen>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2ba6      	cmp	r3, #166	@ 0xa6
 8008e3a:	d818      	bhi.n	8008e6e <get_tag_insert+0xde>
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	3312      	adds	r3, #18
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7f7 fa45 	bl	80002d0 <strlen>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b09      	cmp	r3, #9
 8008e4a:	d810      	bhi.n	8008e6e <get_tag_insert+0xde>
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	3312      	adds	r3, #18
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7f7 fa3d 	bl	80002d0 <strlen>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2ba6      	cmp	r3, #166	@ 0xa6
 8008e5a:	d806      	bhi.n	8008e6a <get_tag_insert+0xda>
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	3312      	adds	r3, #18
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f7 fa35 	bl	80002d0 <strlen>
 8008e66:	4603      	mov	r3, r0
 8008e68:	e002      	b.n	8008e70 <get_tag_insert+0xe0>
 8008e6a:	23a7      	movs	r3, #167	@ 0xa7
 8008e6c:	e000      	b.n	8008e70 <get_tag_insert+0xe0>
 8008e6e:	2309      	movs	r3, #9
 8008e70:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	331b      	adds	r3, #27
 8008e76:	2212      	movs	r2, #18
 8008e78:	4921      	ldr	r1, [pc, #132]	@ (8008f00 <get_tag_insert+0x170>)
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f00e fdf7 	bl	8017a6e <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	3312      	adds	r3, #18
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f00e fdee 	bl	8017a6e <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3312      	adds	r3, #18
 8008e96:	3318      	adds	r3, #24
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	3303      	adds	r3, #3
 8008e9e:	2207      	movs	r2, #7
 8008ea0:	4918      	ldr	r1, [pc, #96]	@ (8008f04 <get_tag_insert+0x174>)
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f00e fde3 	bl	8017a6e <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3319      	adds	r3, #25
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	4413      	add	r3, r2
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	331b      	adds	r3, #27
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7f7 fa09 	bl	80002d0 <strlen>
 8008ebe:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec6:	d306      	bcc.n	8008ed6 <get_tag_insert+0x146>
 8008ec8:	4b06      	ldr	r3, [pc, #24]	@ (8008ee4 <get_tag_insert+0x154>)
 8008eca:	f240 323f 	movw	r2, #831	@ 0x33f
 8008ece:	490e      	ldr	r1, [pc, #56]	@ (8008f08 <get_tag_insert+0x178>)
 8008ed0:	4806      	ldr	r0, [pc, #24]	@ (8008eec <get_tag_insert+0x15c>)
 8008ed2:	f00e fc95 	bl	8017800 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	81da      	strh	r2, [r3, #14]
}
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	08019ce4 	.word	0x08019ce4
 8008ee8:	08019d54 	.word	0x08019d54
 8008eec:	08019d2c 	.word	0x08019d2c
 8008ef0:	08019d60 	.word	0x08019d60
 8008ef4:	20005a00 	.word	0x20005a00
 8008ef8:	20005a08 	.word	0x20005a08
 8008efc:	20005a04 	.word	0x20005a04
 8008f00:	08019d6c 	.word	0x08019d6c
 8008f04:	08019d80 	.word	0x08019d80
 8008f08:	08019d88 	.word	0x08019d88

08008f0c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff feca 	bl	8008cba <http_eof>
    return 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	e016      	b.n	8008f58 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff fd7c 	bl	8008a2c <fs_bytes_left>
 8008f34:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	dc05      	bgt.n	8008f48 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff febb 	bl	8008cba <http_eof>
    return 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e007      	b.n	8008f58 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8008f48:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <http_check_eof+0x54>)
 8008f4a:	f240 429d 	movw	r2, #1181	@ 0x49d
 8008f4e:	4905      	ldr	r1, [pc, #20]	@ (8008f64 <http_check_eof+0x58>)
 8008f50:	4805      	ldr	r0, [pc, #20]	@ (8008f68 <http_check_eof+0x5c>)
 8008f52:	f00e fc55 	bl	8017800 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8008f56:	2301      	movs	r3, #1
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	08019ce4 	.word	0x08019ce4
 8008f64:	08019d98 	.word	0x08019d98
 8008f68:	08019d2c 	.word	0x08019d2c

08008f6c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d803      	bhi.n	8008f8e <http_send_data_nonssi+0x22>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	e001      	b.n	8008f92 <http_send_data_nonssi+0x26>
 8008f8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f92:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	6999      	ldr	r1, [r3, #24]
 8008f98:	f107 020c 	add.w	r2, r7, #12
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fdd2 	bl	8008b48 <http_write>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8008fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10d      	bne.n	8008fcc <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	89ba      	ldrh	r2, [r7, #12]
 8008fba:	441a      	add	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc4:	89ba      	ldrh	r2, [r7, #12]
 8008fc6:	1a9a      	subs	r2, r3, r2
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fee:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d106      	bne.n	8009004 <http_send_data_ssi+0x2c>
 8008ff6:	4b87      	ldr	r3, [pc, #540]	@ (8009214 <http_send_data_ssi+0x23c>)
 8008ff8:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8008ffc:	4986      	ldr	r1, [pc, #536]	@ (8009218 <http_send_data_ssi+0x240>)
 8008ffe:	4887      	ldr	r0, [pc, #540]	@ (800921c <http_send_data_ssi+0x244>)
 8009000:	f00e fbfe 	bl	8017800 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800900a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	429a      	cmp	r2, r3
 8009016:	f240 8273 	bls.w	8009500 <http_send_data_ssi+0x528>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009028:	4293      	cmp	r3, r2
 800902a:	dc06      	bgt.n	800903a <http_send_data_ssi+0x62>
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	b29b      	uxth	r3, r3
 8009038:	e001      	b.n	800903e <http_send_data_ssi+0x66>
 800903a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800903e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	6999      	ldr	r1, [r3, #24]
 8009044:	f107 020e 	add.w	r2, r7, #14
 8009048:	2300      	movs	r3, #0
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff fd7c 	bl	8008b48 <http_write>
 8009050:	4603      	mov	r3, r0
 8009052:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009054:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10d      	bne.n	8009078 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800905c:	2301      	movs	r3, #1
 800905e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	89fa      	ldrh	r2, [r7, #14]
 8009066:	441a      	add	r2, r3
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009070:	89fa      	ldrh	r2, [r7, #14]
 8009072:	1a9a      	subs	r2, r3, r2
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800907e:	2b00      	cmp	r3, #0
 8009080:	f040 823e 	bne.w	8009500 <http_send_data_ssi+0x528>
      return data_to_send;
 8009084:	7dbb      	ldrb	r3, [r7, #22]
 8009086:	e284      	b.n	8009592 <http_send_data_ssi+0x5ba>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8009088:	89fb      	ldrh	r3, [r7, #14]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <http_send_data_ssi+0xba>
      return data_to_send;
 800908e:	7dbb      	ldrb	r3, [r7, #22]
 8009090:	e27f      	b.n	8009592 <http_send_data_ssi+0x5ba>
    }
    switch (ssi->tag_state) {
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8009098:	2b04      	cmp	r3, #4
 800909a:	f200 822c 	bhi.w	80094f6 <http_send_data_ssi+0x51e>
 800909e:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <http_send_data_ssi+0xcc>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090b9 	.word	0x080090b9
 80090a8:	0800910b 	.word	0x0800910b
 80090ac:	0800917d 	.word	0x0800917d
 80090b0:	080092c5 	.word	0x080092c5
 80090b4:	0800940d 	.word	0x0800940d
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80090b8:	2300      	movs	r3, #0
 80090ba:	757b      	strb	r3, [r7, #21]
 80090bc:	e017      	b.n	80090ee <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	781a      	ldrb	r2, [r3, #0]
 80090c4:	7d7b      	ldrb	r3, [r7, #21]
 80090c6:	4956      	ldr	r1, [pc, #344]	@ (8009220 <http_send_data_ssi+0x248>)
 80090c8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d10a      	bne.n	80090e8 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	7d7a      	ldrb	r2, [r7, #21]
 80090d6:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            ssi->tag_index = 1;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2201      	movs	r2, #1
 80090e4:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 80090e6:	e005      	b.n	80090f4 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80090e8:	7d7b      	ldrb	r3, [r7, #21]
 80090ea:	3301      	adds	r3, #1
 80090ec:	757b      	strb	r3, [r7, #21]
 80090ee:	7d7b      	ldrb	r3, [r7, #21]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d9e4      	bls.n	80090be <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	1e5a      	subs	r2, r3, #1
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	601a      	str	r2, [r3, #0]
        break;
 8009108:	e1fa      	b.n	8009500 <http_send_data_ssi+0x528>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	7c1b      	ldrb	r3, [r3, #16]
 800910e:	461a      	mov	r2, r3
 8009110:	4b43      	ldr	r3, [pc, #268]	@ (8009220 <http_send_data_ssi+0x248>)
 8009112:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	8992      	ldrh	r2, [r2, #12]
 800911a:	4413      	add	r3, r2
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d107      	bne.n	8009132 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2200      	movs	r2, #0
 8009126:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 8009130:	e1e6      	b.n	8009500 <http_send_data_ssi+0x528>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	7c1b      	ldrb	r3, [r3, #16]
 800913c:	4619      	mov	r1, r3
 800913e:	4b38      	ldr	r3, [pc, #224]	@ (8009220 <http_send_data_ssi+0x248>)
 8009140:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8009144:	6939      	ldr	r1, [r7, #16]
 8009146:	8989      	ldrh	r1, [r1, #12]
 8009148:	440b      	add	r3, r1
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d106      	bne.n	800915e <http_send_data_ssi+0x186>
            ssi->tag_index++;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	899b      	ldrh	r3, [r3, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	819a      	strh	r2, [r3, #12]
 800915c:	e003      	b.n	8009166 <http_send_data_ssi+0x18e>
            ssi->tag_state = TAG_NONE;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          ssi->parse_left--;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	1e5a      	subs	r2, r3, #1
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	601a      	str	r2, [r3, #0]
        break;
 800917a:	e1c1      	b.n	8009500 <http_send_data_ssi+0x528>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	899b      	ldrh	r3, [r3, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d11e      	bne.n	80091c2 <http_send_data_ssi+0x1ea>
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b20      	cmp	r3, #32
 800918c:	d00e      	beq.n	80091ac <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009194:	2b09      	cmp	r3, #9
 8009196:	d009      	beq.n	80091ac <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	2b0a      	cmp	r3, #10
 80091a0:	d004      	beq.n	80091ac <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80091a8:	2b0d      	cmp	r3, #13
 80091aa:	d10a      	bne.n	80091c2 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	1e5a      	subs	r2, r3, #1
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	601a      	str	r2, [r3, #0]
          break;
 80091c0:	e19e      	b.n	8009500 <http_send_data_ssi+0x528>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	781a      	ldrb	r2, [r3, #0]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	7c1b      	ldrb	r3, [r3, #16]
 80091cc:	4914      	ldr	r1, [pc, #80]	@ (8009220 <http_send_data_ssi+0x248>)
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	440b      	add	r3, r1
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d013      	beq.n	8009202 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80091e0:	2b20      	cmp	r3, #32
 80091e2:	d00e      	beq.n	8009202 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d009      	beq.n	8009202 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80091f4:	2b0a      	cmp	r3, #10
 80091f6:	d004      	beq.n	8009202 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b0d      	cmp	r3, #13
 8009200:	d13f      	bne.n	8009282 <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	899b      	ldrh	r3, [r3, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10c      	bne.n	8009224 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          if (ssi->tag_index == 0) {
 8009212:	e04c      	b.n	80092ae <http_send_data_ssi+0x2d6>
 8009214:	08019ce4 	.word	0x08019ce4
 8009218:	08019d60 	.word	0x08019d60
 800921c:	08019d2c 	.word	0x08019d2c
 8009220:	0802038c 	.word	0x0802038c
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	2203      	movs	r2, #3
 8009228:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	899b      	ldrh	r3, [r3, #12]
 8009230:	2bff      	cmp	r3, #255	@ 0xff
 8009232:	d906      	bls.n	8009242 <http_send_data_ssi+0x26a>
 8009234:	4b93      	ldr	r3, [pc, #588]	@ (8009484 <http_send_data_ssi+0x4ac>)
 8009236:	f240 523a 	movw	r2, #1338	@ 0x53a
 800923a:	4993      	ldr	r1, [pc, #588]	@ (8009488 <http_send_data_ssi+0x4b0>)
 800923c:	4893      	ldr	r0, [pc, #588]	@ (800948c <http_send_data_ssi+0x4b4>)
 800923e:	f00e fadf 	bl	8017800 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	899b      	ldrh	r3, [r3, #12]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	899b      	ldrh	r3, [r3, #12]
 8009250:	461a      	mov	r2, r3
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4413      	add	r3, r2
 8009256:	2200      	movs	r2, #0
 8009258:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	7c1b      	ldrb	r3, [r3, #16]
 8009264:	498a      	ldr	r1, [pc, #552]	@ (8009490 <http_send_data_ssi+0x4b8>)
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	440b      	add	r3, r1
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d103      	bne.n	800927a <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2201      	movs	r2, #1
 8009276:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8009278:	e019      	b.n	80092ae <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2200      	movs	r2, #0
 800927e:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8009280:	e015      	b.n	80092ae <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	899b      	ldrh	r3, [r3, #12]
 8009286:	2b07      	cmp	r3, #7
 8009288:	d80d      	bhi.n	80092a6 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	899b      	ldrh	r3, [r3, #12]
 8009292:	1c59      	adds	r1, r3, #1
 8009294:	b288      	uxth	r0, r1
 8009296:	6939      	ldr	r1, [r7, #16]
 8009298:	8188      	strh	r0, [r1, #12]
 800929a:	4619      	mov	r1, r3
 800929c:	7812      	ldrb	r2, [r2, #0]
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	440b      	add	r3, r1
 80092a2:	749a      	strb	r2, [r3, #18]
 80092a4:	e003      	b.n	80092ae <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	1e5a      	subs	r2, r3, #1
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	601a      	str	r2, [r3, #0]

        break;
 80092c2:	e11d      	b.n	8009500 <http_send_data_ssi+0x528>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	899b      	ldrh	r3, [r3, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d11e      	bne.n	800930a <http_send_data_ssi+0x332>
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d00e      	beq.n	80092f4 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80092dc:	2b09      	cmp	r3, #9
 80092de:	d009      	beq.n	80092f4 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b0a      	cmp	r3, #10
 80092e8:	d004      	beq.n	80092f4 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80092f0:	2b0d      	cmp	r3, #13
 80092f2:	d10a      	bne.n	800930a <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	1e5a      	subs	r2, r3, #1
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	601a      	str	r2, [r3, #0]
          break;
 8009308:	e0fa      	b.n	8009500 <http_send_data_ssi+0x528>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	7c1b      	ldrb	r3, [r3, #16]
 8009314:	495e      	ldr	r1, [pc, #376]	@ (8009490 <http_send_data_ssi+0x4b8>)
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	440b      	add	r3, r1
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	6939      	ldr	r1, [r7, #16]
 800931e:	8989      	ldrh	r1, [r1, #12]
 8009320:	440b      	add	r3, r1
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	429a      	cmp	r2, r3
 8009326:	d162      	bne.n	80093ee <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	1e5a      	subs	r2, r3, #1
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	899b      	ldrh	r3, [r3, #12]
 8009340:	3301      	adds	r3, #1
 8009342:	b29a      	uxth	r2, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	7c1b      	ldrb	r3, [r3, #16]
 800934c:	4a50      	ldr	r2, [pc, #320]	@ (8009490 <http_send_data_ssi+0x4b8>)
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	4413      	add	r3, r2
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	8992      	ldrh	r2, [r2, #12]
 8009358:	4413      	add	r3, r2
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 80cc 	bne.w	80094fa <http_send_data_ssi+0x522>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8009362:	6838      	ldr	r0, [r7, #0]
 8009364:	f7ff fd14 	bl	8008d90 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2200      	movs	r2, #0
 800936c:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2204      	movs	r2, #4
 8009372:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            ssi->tag_end = ssi->parsed;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	429a      	cmp	r2, r3
 8009388:	f240 80b7 	bls.w	80094fa <http_send_data_ssi+0x522>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800939a:	4293      	cmp	r3, r2
 800939c:	dc06      	bgt.n	80093ac <http_send_data_ssi+0x3d4>
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	e001      	b.n	80093b0 <http_send_data_ssi+0x3d8>
 80093ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093b0:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6999      	ldr	r1, [r3, #24]
 80093b6:	f107 020e 	add.w	r2, r7, #14
 80093ba:	2300      	movs	r3, #0
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff fbc3 	bl	8008b48 <http_write>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 80093c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f040 8095 	bne.w	80094fa <http_send_data_ssi+0x522>
                data_to_send = 1;
 80093d0:	2301      	movs	r3, #1
 80093d2:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	89fa      	ldrh	r2, [r7, #14]
 80093da:	441a      	add	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e4:	89fa      	ldrh	r2, [r7, #14]
 80093e6:	1a9a      	subs	r2, r3, r2
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 80093ec:	e085      	b.n	80094fa <http_send_data_ssi+0x522>
          ssi->parse_left--;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	1e5a      	subs	r2, r3, #1
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
        break;
 800940a:	e076      	b.n	80094fa <http_send_data_ssi+0x522>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	429a      	cmp	r2, r3
 8009416:	d93d      	bls.n	8009494 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009426:	4293      	cmp	r3, r2
 8009428:	dc06      	bgt.n	8009438 <http_send_data_ssi+0x460>
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	b29b      	uxth	r3, r3
 8009436:	e001      	b.n	800943c <http_send_data_ssi+0x464>
 8009438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800943c:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800943e:	89fb      	ldrh	r3, [r7, #14]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00a      	beq.n	800945a <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	6999      	ldr	r1, [r3, #24]
 8009448:	f107 020e 	add.w	r2, r7, #14
 800944c:	2300      	movs	r3, #0
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fb7a 	bl	8008b48 <http_write>
 8009454:	4603      	mov	r3, r0
 8009456:	75fb      	strb	r3, [r7, #23]
 8009458:	e001      	b.n	800945e <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800945e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d14c      	bne.n	8009500 <http_send_data_ssi+0x528>
            data_to_send = 1;
 8009466:	2301      	movs	r3, #1
 8009468:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	89fa      	ldrh	r2, [r7, #14]
 8009470:	441a      	add	r2, r3
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947a:	89fa      	ldrh	r2, [r7, #14]
 800947c:	1a9a      	subs	r2, r3, r2
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	625a      	str	r2, [r3, #36]	@ 0x24
 8009482:	e03d      	b.n	8009500 <http_send_data_ssi+0x528>
 8009484:	08019ce4 	.word	0x08019ce4
 8009488:	08019dd0 	.word	0x08019dd0
 800948c:	08019d2c 	.word	0x08019d2c
 8009490:	0802038c 	.word	0x0802038c
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	899a      	ldrh	r2, [r3, #12]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	89db      	ldrh	r3, [r3, #14]
 800949c:	429a      	cmp	r2, r3
 800949e:	d222      	bcs.n	80094e6 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	89da      	ldrh	r2, [r3, #14]
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	899b      	ldrh	r3, [r3, #12]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	899b      	ldrh	r3, [r3, #12]
 80094b2:	3318      	adds	r3, #24
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	4413      	add	r3, r2
 80094b8:	1cd9      	adds	r1, r3, #3
 80094ba:	f107 020e 	add.w	r2, r7, #14
 80094be:	2301      	movs	r3, #1
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff fb41 	bl	8008b48 <http_write>
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 80094ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d115      	bne.n	80094fe <http_send_data_ssi+0x526>
              data_to_send = 1;
 80094d2:	2301      	movs	r3, #1
 80094d4:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	899a      	ldrh	r2, [r3, #12]
 80094da:	89fb      	ldrh	r3, [r7, #14]
 80094dc:	4413      	add	r3, r2
 80094de:	b29a      	uxth	r2, r3
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 80094e4:	e00b      	b.n	80094fe <http_send_data_ssi+0x526>
              ssi->tag_index = 0;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2200      	movs	r2, #0
 80094ea:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          break;
 80094f4:	e003      	b.n	80094fe <http_send_data_ssi+0x526>
        default:
          break;
 80094f6:	bf00      	nop
 80094f8:	e002      	b.n	8009500 <http_send_data_ssi+0x528>
        break;
 80094fa:	bf00      	nop
 80094fc:	e000      	b.n	8009500 <http_send_data_ssi+0x528>
          break;
 80094fe:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8009506:	2b04      	cmp	r3, #4
 8009508:	d003      	beq.n	8009512 <http_send_data_ssi+0x53a>
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <http_send_data_ssi+0x544>
 8009512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	f43f adb6 	beq.w	8009088 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8009522:	2b04      	cmp	r3, #4
 8009524:	d034      	beq.n	8009590 <http_send_data_ssi+0x5b8>
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	429a      	cmp	r2, r3
 8009530:	d92e      	bls.n	8009590 <http_send_data_ssi+0x5b8>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009540:	4293      	cmp	r3, r2
 8009542:	dc06      	bgt.n	8009552 <http_send_data_ssi+0x57a>
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	b29b      	uxth	r3, r3
 8009550:	e001      	b.n	8009556 <http_send_data_ssi+0x57e>
 8009552:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009556:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	6999      	ldr	r1, [r3, #24]
 800955c:	f107 020e 	add.w	r2, r7, #14
 8009560:	2300      	movs	r3, #0
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff faf0 	bl	8008b48 <http_write>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800956c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10d      	bne.n	8009590 <http_send_data_ssi+0x5b8>
      data_to_send = 1;
 8009574:	2301      	movs	r3, #1
 8009576:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	89fa      	ldrh	r2, [r7, #14]
 800957e:	441a      	add	r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009588:	89fa      	ldrh	r2, [r7, #14]
 800958a:	1a9a      	subs	r2, r3, r2
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 8009590:	7dbb      	ldrb	r3, [r7, #22]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop

0800959c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <http_send+0x18>
    return 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	e030      	b.n	8009616 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d108      	bne.n	80095ce <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff fca4 	bl	8008f0c <http_check_eof>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <http_send+0x32>
      return 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e023      	b.n	8009616 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d006      	beq.n	80095e4 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff fcfd 	bl	8008fd8 <http_send_data_ssi>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]
 80095e2:	e005      	b.n	80095f0 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff fcc0 	bl	8008f6c <http_send_data_nonssi>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10d      	bne.n	8009614 <http_send+0x78>
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7ff fa15 	bl	8008a2c <fs_bytes_left>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	dc05      	bgt.n	8009614 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fb55 	bl	8008cba <http_eof>
    return 0;
 8009610:	2300      	movs	r3, #0
 8009612:	e000      	b.n	8009616 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009614:	7bfb      	ldrb	r3, [r7, #15]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	4a1c      	ldr	r2, [pc, #112]	@ (80096a0 <http_get_404_file+0x80>)
 800962e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7ff f9af 	bl	800899c <fs_open>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d024      	beq.n	8009694 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	4a15      	ldr	r2, [pc, #84]	@ (80096a4 <http_get_404_file+0x84>)
 800964e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4619      	mov	r1, r3
 8009658:	4610      	mov	r0, r2
 800965a:	f7ff f99f 	bl	800899c <fs_open>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d014      	beq.n	8009694 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	4a0e      	ldr	r2, [pc, #56]	@ (80096a8 <http_get_404_file+0x88>)
 800966e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7ff f98f 	bl	800899c <fs_open>
 800967e:	4603      	mov	r3, r0
 8009680:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8009682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d004      	beq.n	8009694 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]
        return NULL;
 8009690:	2300      	movs	r3, #0
 8009692:	e000      	b.n	8009696 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8009694:	687b      	ldr	r3, [r7, #4]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	08019de8 	.word	0x08019de8
 80096a4:	08019df4 	.word	0x08019df4
 80096a8:	08019e00 	.word	0x08019e00

080096ac <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08e      	sub	sp, #56	@ 0x38
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80096bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <http_parse_request+0x24>
 80096c2:	4b65      	ldr	r3, [pc, #404]	@ (8009858 <http_parse_request+0x1ac>)
 80096c4:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 80096c8:	4964      	ldr	r1, [pc, #400]	@ (800985c <http_parse_request+0x1b0>)
 80096ca:	4865      	ldr	r0, [pc, #404]	@ (8009860 <http_parse_request+0x1b4>)
 80096cc:	f00e f898 	bl	8017800 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d106      	bne.n	80096e4 <http_parse_request+0x38>
 80096d6:	4b60      	ldr	r3, [pc, #384]	@ (8009858 <http_parse_request+0x1ac>)
 80096d8:	f240 72af 	movw	r2, #1967	@ 0x7af
 80096dc:	4961      	ldr	r1, [pc, #388]	@ (8009864 <http_parse_request+0x1b8>)
 80096de:	4860      	ldr	r0, [pc, #384]	@ (8009860 <http_parse_request+0x1b4>)
 80096e0:	f00e f88e 	bl	8017800 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d103      	bne.n	80096f4 <http_parse_request+0x48>
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80096f4:	f06f 0307 	mvn.w	r3, #7
 80096f8:	e0a9      	b.n	800984e <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d103      	bne.n	800970a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009706:	621a      	str	r2, [r3, #32]
 8009708:	e005      	b.n	8009716 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009710:	4618      	mov	r0, r3
 8009712:	f002 f96f 	bl	800b9f4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8009716:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009718:	f002 f94a 	bl	800b9b0 <pbuf_ref>

  if (hs->req->next != NULL) {
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d012      	beq.n	800974c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	891b      	ldrh	r3, [r3, #8]
 800972c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8009730:	4293      	cmp	r3, r2
 8009732:	bf28      	it	cs
 8009734:	4613      	movcs	r3, r2
 8009736:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	6a18      	ldr	r0, [r3, #32]
 800973c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800973e:	2300      	movs	r3, #0
 8009740:	4949      	ldr	r1, [pc, #292]	@ (8009868 <http_parse_request+0x1bc>)
 8009742:	f002 fa8f 	bl	800bc64 <pbuf_copy_partial>
    data = httpd_req_buf;
 8009746:	4b48      	ldr	r3, [pc, #288]	@ (8009868 <http_parse_request+0x1bc>)
 8009748:	637b      	str	r3, [r7, #52]	@ 0x34
 800974a:	e005      	b.n	8009758 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8009752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009754:	895b      	ldrh	r3, [r3, #10]
 8009756:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009758:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800975a:	2b06      	cmp	r3, #6
 800975c:	d962      	bls.n	8009824 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800975e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009760:	461a      	mov	r2, r3
 8009762:	4942      	ldr	r1, [pc, #264]	@ (800986c <http_parse_request+0x1c0>)
 8009764:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009766:	f000 fcdd 	bl	800a124 <lwip_strnstr>
 800976a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d058      	beq.n	8009824 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8009776:	2204      	movs	r2, #4
 8009778:	493d      	ldr	r1, [pc, #244]	@ (8009870 <http_parse_request+0x1c4>)
 800977a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800977c:	f00e f8f4 	bl	8017968 <strncmp>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d116      	bne.n	80097b4 <http_parse_request+0x108>
        sp1 = data + 3;
 8009786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009788:	3303      	adds	r3, #3
 800978a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	b29b      	uxth	r3, r3
 8009796:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	3301      	adds	r3, #1
 80097a0:	8b7a      	ldrh	r2, [r7, #26]
 80097a2:	4934      	ldr	r1, [pc, #208]	@ (8009874 <http_parse_request+0x1c8>)
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fcbd 	bl	800a124 <lwip_strnstr>
 80097aa:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80097ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d111      	bne.n	80097d6 <http_parse_request+0x12a>
 80097b2:	e006      	b.n	80097c2 <http_parse_request+0x116>
        data[4] = 0;
 80097b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b6:	3304      	adds	r3, #4
 80097b8:	2200      	movs	r2, #0
 80097ba:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80097bc:	f06f 030f 	mvn.w	r3, #15
 80097c0:	e045      	b.n	800984e <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	3301      	adds	r3, #1
 80097c6:	8b7a      	ldrh	r2, [r7, #26]
 80097c8:	4928      	ldr	r1, [pc, #160]	@ (800986c <http_parse_request+0x1c0>)
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 fcaa 	bl	800a124 <lwip_strnstr>
 80097d0:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 80097d2:	2301      	movs	r3, #1
 80097d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	3301      	adds	r3, #1
 80097da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01e      	beq.n	8009824 <http_parse_request+0x178>
 80097e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d91a      	bls.n	8009824 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80097ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80097f0:	461a      	mov	r2, r3
 80097f2:	4921      	ldr	r1, [pc, #132]	@ (8009878 <http_parse_request+0x1cc>)
 80097f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80097f6:	f000 fc95 	bl	800a124 <lwip_strnstr>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d011      	beq.n	8009824 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	3301      	adds	r3, #1
 8009804:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	2200      	movs	r2, #0
 800980a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800980c:	8b3b      	ldrh	r3, [r7, #24]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4413      	add	r3, r2
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8009816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009818:	6979      	ldr	r1, [r7, #20]
 800981a:	68b8      	ldr	r0, [r7, #8]
 800981c:	f000 f880 	bl	8009920 <http_find_file>
 8009820:	4603      	mov	r3, r0
 8009822:	e014      	b.n	800984e <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	4618      	mov	r0, r3
 800982a:	f002 f8a9 	bl	800b980 <pbuf_clen>
 800982e:	4603      	mov	r3, r0
 8009830:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	891b      	ldrh	r3, [r3, #8]
 8009838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800983c:	d205      	bcs.n	800984a <http_parse_request+0x19e>
 800983e:	8a7b      	ldrh	r3, [r7, #18]
 8009840:	2b05      	cmp	r3, #5
 8009842:	d802      	bhi.n	800984a <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8009844:	f06f 0304 	mvn.w	r3, #4
 8009848:	e001      	b.n	800984e <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800984a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800984e:	4618      	mov	r0, r3
 8009850:	3738      	adds	r7, #56	@ 0x38
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	08019ce4 	.word	0x08019ce4
 800985c:	08019e0c 	.word	0x08019e0c
 8009860:	08019d2c 	.word	0x08019d2c
 8009864:	08019d54 	.word	0x08019d54
 8009868:	200055c0 	.word	0x200055c0
 800986c:	08019e18 	.word	0x08019e18
 8009870:	08019e1c 	.word	0x08019e1c
 8009874:	08019e24 	.word	0x08019e24
 8009878:	08019e28 	.word	0x08019e28

0800987c <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d040      	beq.n	8009912 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8009890:	2300      	movs	r3, #0
 8009892:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8009894:	213f      	movs	r1, #63	@ 0x3f
 8009896:	6838      	ldr	r0, [r7, #0]
 8009898:	f00e f859 	bl	801794e <strchr>
 800989c:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	613b      	str	r3, [r7, #16]
    ext = uri;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80098b2:	212e      	movs	r1, #46	@ 0x2e
 80098b4:	6938      	ldr	r0, [r7, #16]
 80098b6:	f00e f84a 	bl	801794e <strchr>
 80098ba:	6138      	str	r0, [r7, #16]
 80098bc:	e009      	b.n	80098d2 <http_uri_is_ssi+0x56>
      ext = sub;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	617b      	str	r3, [r7, #20]
      sub++;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	3301      	adds	r3, #1
 80098c6:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80098c8:	212e      	movs	r1, #46	@ 0x2e
 80098ca:	6938      	ldr	r0, [r7, #16]
 80098cc:	f00e f83f 	bl	801794e <strchr>
 80098d0:	6138      	str	r0, [r7, #16]
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1f2      	bne.n	80098be <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80098d8:	2300      	movs	r3, #0
 80098da:	61fb      	str	r3, [r7, #28]
 80098dc:	e010      	b.n	8009900 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80098de:	4a0f      	ldr	r2, [pc, #60]	@ (800991c <http_uri_is_ssi+0xa0>)
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6978      	ldr	r0, [r7, #20]
 80098ea:	f000 fc51 	bl	800a190 <lwip_stricmp>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <http_uri_is_ssi+0x7e>
        tag_check = 1;
 80098f4:	2301      	movs	r3, #1
 80098f6:	76fb      	strb	r3, [r7, #27]
        break;
 80098f8:	e005      	b.n	8009906 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	3301      	adds	r3, #1
 80098fe:	61fb      	str	r3, [r7, #28]
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	2b04      	cmp	r3, #4
 8009904:	d9eb      	bls.n	80098de <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <http_uri_is_ssi+0x96>
      *param = '?';
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	223f      	movs	r2, #63	@ 0x3f
 8009910:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8009912:	7efb      	ldrb	r3, [r7, #27]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3720      	adds	r7, #32
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	08020350 	.word	0x08020350

08009920 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8009920:	b590      	push	{r4, r7, lr}
 8009922:	b093      	sub	sp, #76	@ 0x4c
 8009924:	af02      	add	r7, sp, #8
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800992c:	2300      	movs	r3, #0
 800992e:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4618      	mov	r0, r3
 800993e:	f7f6 fcc7 	bl	80002d0 <strlen>
 8009942:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009946:	2b00      	cmp	r3, #0
 8009948:	d072      	beq.n	8009a30 <http_find_file+0x110>
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	3b01      	subs	r3, #1
 8009950:	4413      	add	r3, r2
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2b2f      	cmp	r3, #47	@ 0x2f
 8009956:	d16b      	bne.n	8009a30 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009958:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800995a:	4a80      	ldr	r2, [pc, #512]	@ (8009b5c <http_find_file+0x23c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d102      	bne.n	8009966 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009962:	2b01      	cmp	r3, #1
 8009964:	d164      	bne.n	8009a30 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	3b01      	subs	r3, #1
 800996a:	2b3f      	cmp	r3, #63	@ 0x3f
 800996c:	bf28      	it	cs
 800996e:	233f      	movcs	r3, #63	@ 0x3f
 8009970:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00a      	beq.n	800998e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	6a3a      	ldr	r2, [r7, #32]
 800997c:	4619      	mov	r1, r3
 800997e:	4877      	ldr	r0, [pc, #476]	@ (8009b5c <http_find_file+0x23c>)
 8009980:	f00e f875 	bl	8017a6e <memcpy>
      http_uri_buf[copy_len] = 0;
 8009984:	4a75      	ldr	r2, [pc, #468]	@ (8009b5c <http_find_file+0x23c>)
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	4413      	add	r3, r2
 800998a:	2200      	movs	r2, #0
 800998c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800998e:	2300      	movs	r3, #0
 8009990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009992:	e04a      	b.n	8009a2a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d028      	beq.n	80099ec <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80099a0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d01e      	beq.n	80099e6 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80099a8:	4a6d      	ldr	r2, [pc, #436]	@ (8009b60 <http_find_file+0x240>)
 80099aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7f6 fc8d 	bl	80002d0 <strlen>
 80099b6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	4293      	cmp	r3, r2
 80099be:	bf28      	it	cs
 80099c0:	4613      	movcs	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	4a65      	ldr	r2, [pc, #404]	@ (8009b5c <http_find_file+0x23c>)
 80099c8:	1898      	adds	r0, r3, r2
 80099ca:	4a65      	ldr	r2, [pc, #404]	@ (8009b60 <http_find_file+0x240>)
 80099cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	4619      	mov	r1, r3
 80099d6:	f00e f84a 	bl	8017a6e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80099da:	6a3a      	ldr	r2, [r7, #32]
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	4413      	add	r3, r2
 80099e0:	4a5e      	ldr	r2, [pc, #376]	@ (8009b5c <http_find_file+0x23c>)
 80099e2:	2100      	movs	r1, #0
 80099e4:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80099e6:	4b5d      	ldr	r3, [pc, #372]	@ (8009b5c <http_find_file+0x23c>)
 80099e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099ea:	e004      	b.n	80099f6 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80099ec:	4a5c      	ldr	r2, [pc, #368]	@ (8009b60 <http_find_file+0x240>)
 80099ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe ffce 	bl	800899c <fs_open>
 8009a00:	4603      	mov	r3, r0
 8009a02:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8009a04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10b      	bne.n	8009a24 <http_find_file+0x104>
        uri = file_name;
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8009a14:	4a52      	ldr	r2, [pc, #328]	@ (8009b60 <http_find_file+0x240>)
 8009a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	791b      	ldrb	r3, [r3, #4]
 8009a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8009a22:	e005      	b.n	8009a30 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a26:	3301      	adds	r3, #1
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d9b1      	bls.n	8009994 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8009a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d176      	bne.n	8009b24 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	213f      	movs	r1, #63	@ 0x3f
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f00d ff87 	bl	801794e <strchr>
 8009a40:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8009a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d005      	beq.n	8009a54 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8009a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
      params++;
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a50:	3301      	adds	r3, #1
 8009a52:	637b      	str	r3, [r7, #52]	@ 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8009a54:	4b43      	ldr	r3, [pc, #268]	@ (8009b64 <http_find_file+0x244>)
 8009a56:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5a:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8009a5c:	4b42      	ldr	r3, [pc, #264]	@ (8009b68 <http_find_file+0x248>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d034      	beq.n	8009ace <http_find_file+0x1ae>
 8009a64:	4b41      	ldr	r3, [pc, #260]	@ (8009b6c <http_find_file+0x24c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d030      	beq.n	8009ace <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a70:	e028      	b.n	8009ac4 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8009a72:	68b8      	ldr	r0, [r7, #8]
 8009a74:	4b3d      	ldr	r3, [pc, #244]	@ (8009b6c <http_find_file+0x24c>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	4413      	add	r3, r2
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7f6 fbc5 	bl	8000210 <strcmp>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d118      	bne.n	8009abe <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8009a8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7ff f920 	bl	8008cd4 <extract_uri_parameters>
 8009a94:	4603      	mov	r3, r0
 8009a96:	4a33      	ldr	r2, [pc, #204]	@ (8009b64 <http_find_file+0x244>)
 8009a98:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009a9a:	4b34      	ldr	r3, [pc, #208]	@ (8009b6c <http_find_file+0x24c>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	4413      	add	r3, r2
 8009aa4:	685c      	ldr	r4, [r3, #4]
 8009aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8009b64 <http_find_file+0x244>)
 8009aa8:	6819      	ldr	r1, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                         hs->param_vals);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3370      	adds	r3, #112	@ 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ab6:	47a0      	blx	r4
 8009ab8:	4603      	mov	r3, r0
 8009aba:	60bb      	str	r3, [r7, #8]
          break;
 8009abc:	e007      	b.n	8009ace <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac4:	4b28      	ldr	r3, [pc, #160]	@ (8009b68 <http_find_file+0x248>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aca:	429a      	cmp	r2, r3
 8009acc:	dbd1      	blt.n	8009a72 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fe ff61 	bl	800899c <fs_open>
 8009ada:	4603      	mov	r3, r0
 8009adc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8009ade:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <http_find_file+0x1cc>
      file = &hs->file_handle;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009aea:	e006      	b.n	8009afa <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8009aec:	f107 0308 	add.w	r3, r7, #8
 8009af0:	4619      	mov	r1, r3
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7ff fd94 	bl	8009620 <http_get_404_file>
 8009af8:	63b8      	str	r0, [r7, #56]	@ 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d011      	beq.n	8009b24 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8009b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b02:	7c1b      	ldrb	r3, [r3, #16]
 8009b04:	f003 0308 	and.w	r3, r3, #8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <http_find_file+0x1f4>
        tag_check = 1;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b12:	e007      	b.n	8009b24 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b1a:	f7ff feaf 	bl	800987c <http_uri_is_ssi>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f7ff fd75 	bl	8009620 <http_get_404_file>
 8009b36:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	4613      	mov	r3, r2
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 f810 	bl	8009b70 <http_init_file>
 8009b50:	4603      	mov	r3, r0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3744      	adds	r7, #68	@ 0x44
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	200059c0 	.word	0x200059c0
 8009b60:	08020364 	.word	0x08020364
 8009b64:	20005a14 	.word	0x20005a14
 8009b68:	20005a10 	.word	0x20005a10
 8009b6c:	20005a0c 	.word	0x20005a0c

08009b70 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d07d      	beq.n	8009c80 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <http_init_file+0x2a>
 8009b8c:	4b45      	ldr	r3, [pc, #276]	@ (8009ca4 <http_init_file+0x134>)
 8009b8e:	f640 120b 	movw	r2, #2315	@ 0x90b
 8009b92:	4945      	ldr	r1, [pc, #276]	@ (8009ca8 <http_init_file+0x138>)
 8009b94:	4845      	ldr	r0, [pc, #276]	@ (8009cac <http_init_file+0x13c>)
 8009b96:	f00d fe33 	bl	8017800 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8009b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d01c      	beq.n	8009bdc <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8009ba2:	f7fe ff52 	bl	8008a4a <http_ssi_state_alloc>
 8009ba6:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d016      	beq.n	8009bdc <http_init_file+0x6c>
        ssi->tag_index = 0;
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
        ssi->parsed = file->data;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	69fa      	ldr	r2, [r7, #28]
 8009bda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	da06      	bge.n	8009c00 <http_init_file+0x90>
 8009bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca4 <http_init_file+0x134>)
 8009bf4:	f640 1234 	movw	r2, #2356	@ 0x934
 8009bf8:	492d      	ldr	r1, [pc, #180]	@ (8009cb0 <http_init_file+0x140>)
 8009bfa:	482c      	ldr	r0, [pc, #176]	@ (8009cac <http_init_file+0x13c>)
 8009bfc:	f00d fe00 	bl	8017800 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	461a      	mov	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	7c1b      	ldrb	r3, [r3, #16]
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d106      	bne.n	8009c2e <http_init_file+0xbe>
 8009c20:	4b20      	ldr	r3, [pc, #128]	@ (8009ca4 <http_init_file+0x134>)
 8009c22:	f640 1243 	movw	r2, #2371	@ 0x943
 8009c26:	4923      	ldr	r1, [pc, #140]	@ (8009cb4 <http_init_file+0x144>)
 8009c28:	4820      	ldr	r0, [pc, #128]	@ (8009cac <http_init_file+0x13c>)
 8009c2a:	f00d fde9 	bl	8017800 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d032      	beq.n	8009c9a <http_init_file+0x12a>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	7c1b      	ldrb	r3, [r3, #16]
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d02b      	beq.n	8009c9a <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6998      	ldr	r0, [r3, #24]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	491a      	ldr	r1, [pc, #104]	@ (8009cb8 <http_init_file+0x148>)
 8009c4e:	f000 fa69 	bl	800a124 <lwip_strnstr>
 8009c52:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01f      	beq.n	8009c9a <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	1d1a      	adds	r2, r3, #4
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	699a      	ldr	r2, [r3, #24]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	441a      	add	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	1ad2      	subs	r2, r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c7e:	e00c      	b.n	8009c9a <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	08019ce4 	.word	0x08019ce4
 8009ca8:	08019e30 	.word	0x08019e30
 8009cac:	08019d2c 	.word	0x08019d2c
 8009cb0:	08019e44 	.word	0x08019e44
 8009cb4:	08019e64 	.word	0x08019e64
 8009cb8:	08019e28 	.word	0x08019e28

08009cbc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <http_err+0x1c>
    http_state_free(hs);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7fe ff26 	bl	8008b24 <http_state_free>
  }
}
 8009cd8:	bf00      	nop
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	4613      	mov	r3, r2
 8009cec:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <http_sent+0x1c>
    return ERR_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e008      	b.n	8009d0e <http_sent+0x2e>
  }

  hs->retries = 0;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	68b8      	ldr	r0, [r7, #8]
 8009d08:	f7ff fc48 	bl	800959c <http_send>

  return ERR_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d107      	bne.n	8009d3a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6838      	ldr	r0, [r7, #0]
 8009d2e:	f7fe ffb5 	bl	8008c9c <http_close_conn>
 8009d32:	4603      	mov	r3, r0
 8009d34:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e021      	b.n	8009d7e <http_poll+0x68>
  } else {
    hs->retries++;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d40:	3301      	adds	r3, #1
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d105      	bne.n	8009d60 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8009d54:	68f9      	ldr	r1, [r7, #12]
 8009d56:	6838      	ldr	r0, [r7, #0]
 8009d58:	f7fe ffa0 	bl	8008c9c <http_close_conn>
      return ERR_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e00e      	b.n	8009d7e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d009      	beq.n	8009d7c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009d68:	68f9      	ldr	r1, [r7, #12]
 8009d6a:	6838      	ldr	r0, [r7, #0]
 8009d6c:	f7ff fc16 	bl	800959c <http_send>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009d76:	6838      	ldr	r0, [r7, #0]
 8009d78:	f007 f8f8 	bl	8010f6c <tcp_output>
      }
    }
  }

  return ERR_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8009d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <http_recv+0x26>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <http_recv+0x26>
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d111      	bne.n	8009dd2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d008      	beq.n	8009dc6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	891b      	ldrh	r3, [r3, #8]
 8009db8:	4619      	mov	r1, r3
 8009dba:	68b8      	ldr	r0, [r7, #8]
 8009dbc:	f002 fcca 	bl	800c754 <tcp_recved>
      pbuf_free(p);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 fd55 	bl	800b870 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009dc6:	6979      	ldr	r1, [r7, #20]
 8009dc8:	68b8      	ldr	r0, [r7, #8]
 8009dca:	f7fe ff67 	bl	8008c9c <http_close_conn>
    return ERR_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e055      	b.n	8009e7e <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	891b      	ldrh	r3, [r3, #8]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68b8      	ldr	r0, [r7, #8]
 8009dda:	f002 fcbb 	bl	800c754 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d147      	bne.n	8009e76 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	6979      	ldr	r1, [r7, #20]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff fc5e 	bl	80096ac <http_parse_request>
 8009df0:	4603      	mov	r3, r0
 8009df2:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8009df4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d015      	beq.n	8009e28 <http_recv+0xa0>
 8009dfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e00:	f113 0f05 	cmn.w	r3, #5
 8009e04:	d010      	beq.n	8009e28 <http_recv+0xa0>
 8009e06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e0a:	f113 0f10 	cmn.w	r3, #16
 8009e0e:	d00b      	beq.n	8009e28 <http_recv+0xa0>
 8009e10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e14:	f113 0f08 	cmn.w	r3, #8
 8009e18:	d006      	beq.n	8009e28 <http_recv+0xa0>
 8009e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8009e88 <http_recv+0x100>)
 8009e1c:	f640 2204 	movw	r2, #2564	@ 0xa04
 8009e20:	491a      	ldr	r1, [pc, #104]	@ (8009e8c <http_recv+0x104>)
 8009e22:	481b      	ldr	r0, [pc, #108]	@ (8009e90 <http_recv+0x108>)
 8009e24:	f00d fcec 	bl	8017800 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8009e28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e2c:	f113 0f05 	cmn.w	r3, #5
 8009e30:	d00b      	beq.n	8009e4a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <http_recv+0xc2>
          pbuf_free(hs->req);
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 fd16 	bl	800b870 <pbuf_free>
          hs->req = NULL;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2200      	movs	r2, #0
 8009e48:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 fd10 	bl	800b870 <pbuf_free>
      if (parsed == ERR_OK) {
 8009e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d104      	bne.n	8009e62 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8009e58:	6979      	ldr	r1, [r7, #20]
 8009e5a:	68b8      	ldr	r0, [r7, #8]
 8009e5c:	f7ff fb9e 	bl	800959c <http_send>
 8009e60:	e00c      	b.n	8009e7c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8009e62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e66:	f113 0f10 	cmn.w	r3, #16
 8009e6a:	d107      	bne.n	8009e7c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8009e6c:	6979      	ldr	r1, [r7, #20]
 8009e6e:	68b8      	ldr	r0, [r7, #8]
 8009e70:	f7fe ff14 	bl	8008c9c <http_close_conn>
 8009e74:	e002      	b.n	8009e7c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 fcfa 	bl	800b870 <pbuf_free>
    }
  }
  return ERR_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	08019ce4 	.word	0x08019ce4
 8009e8c:	08019e90 	.word	0x08019e90
 8009e90:	08019d2c 	.word	0x08019d2c

08009e94 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8009ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d102      	bne.n	8009eb0 <http_accept+0x1c>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <http_accept+0x22>
    return ERR_VAL;
 8009eb0:	f06f 0305 	mvn.w	r3, #5
 8009eb4:	e025      	b.n	8009f02 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	68b8      	ldr	r0, [r7, #8]
 8009eba:	f003 f931 	bl	800d120 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8009ebe:	f7fe fdf3 	bl	8008aa8 <http_state_alloc>
 8009ec2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d102      	bne.n	8009ed0 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8009eca:	f04f 33ff 	mov.w	r3, #4294967295
 8009ece:	e018      	b.n	8009f02 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8009ed6:	6979      	ldr	r1, [r7, #20]
 8009ed8:	68b8      	ldr	r0, [r7, #8]
 8009eda:	f003 fb21 	bl	800d520 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8009ede:	490b      	ldr	r1, [pc, #44]	@ (8009f0c <http_accept+0x78>)
 8009ee0:	68b8      	ldr	r0, [r7, #8]
 8009ee2:	f003 fb2f 	bl	800d544 <tcp_recv>
  altcp_err(pcb, http_err);
 8009ee6:	490a      	ldr	r1, [pc, #40]	@ (8009f10 <http_accept+0x7c>)
 8009ee8:	68b8      	ldr	r0, [r7, #8]
 8009eea:	f003 fb6f 	bl	800d5cc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8009eee:	2204      	movs	r2, #4
 8009ef0:	4908      	ldr	r1, [pc, #32]	@ (8009f14 <http_accept+0x80>)
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	f003 fba4 	bl	800d640 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8009ef8:	4907      	ldr	r1, [pc, #28]	@ (8009f18 <http_accept+0x84>)
 8009efa:	68b8      	ldr	r0, [r7, #8]
 8009efc:	f003 fb44 	bl	800d588 <tcp_sent>

  return ERR_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	08009d89 	.word	0x08009d89
 8009f10:	08009cbd 	.word	0x08009cbd
 8009f14:	08009d17 	.word	0x08009d17
 8009f18:	08009ce1 	.word	0x08009ce1

08009f1c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d029      	beq.n	8009f82 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009f2e:	2101      	movs	r1, #1
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f003 f8f5 	bl	800d120 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8009f36:	887b      	ldrh	r3, [r7, #2]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4914      	ldr	r1, [pc, #80]	@ (8009f8c <httpd_init_pcb+0x70>)
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f002 fa3b 	bl	800c3b8 <tcp_bind>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8009f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d006      	beq.n	8009f5c <httpd_init_pcb+0x40>
 8009f4e:	4b10      	ldr	r3, [pc, #64]	@ (8009f90 <httpd_init_pcb+0x74>)
 8009f50:	f640 2257 	movw	r2, #2647	@ 0xa57
 8009f54:	490f      	ldr	r1, [pc, #60]	@ (8009f94 <httpd_init_pcb+0x78>)
 8009f56:	4810      	ldr	r0, [pc, #64]	@ (8009f98 <httpd_init_pcb+0x7c>)
 8009f58:	f00d fc52 	bl	8017800 <iprintf>
    pcb = altcp_listen(pcb);
 8009f5c:	21ff      	movs	r1, #255	@ 0xff
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f002 fae2 	bl	800c528 <tcp_listen_with_backlog>
 8009f64:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d106      	bne.n	8009f7a <httpd_init_pcb+0x5e>
 8009f6c:	4b08      	ldr	r3, [pc, #32]	@ (8009f90 <httpd_init_pcb+0x74>)
 8009f6e:	f640 2259 	movw	r2, #2649	@ 0xa59
 8009f72:	490a      	ldr	r1, [pc, #40]	@ (8009f9c <httpd_init_pcb+0x80>)
 8009f74:	4808      	ldr	r0, [pc, #32]	@ (8009f98 <httpd_init_pcb+0x7c>)
 8009f76:	f00d fc43 	bl	8017800 <iprintf>
    altcp_accept(pcb, http_accept);
 8009f7a:	4909      	ldr	r1, [pc, #36]	@ (8009fa0 <httpd_init_pcb+0x84>)
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f003 fb47 	bl	800d610 <tcp_accept>
  }
}
 8009f82:	bf00      	nop
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0802047c 	.word	0x0802047c
 8009f90:	08019ce4 	.word	0x08019ce4
 8009f94:	08019ebc 	.word	0x08019ebc
 8009f98:	08019d2c 	.word	0x08019d2c
 8009f9c:	08019ed8 	.word	0x08019ed8
 8009fa0:	08009e95 	.word	0x08009e95

08009fa4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8009faa:	202e      	movs	r0, #46	@ 0x2e
 8009fac:	f003 faaa 	bl	800d504 <tcp_new_ip_type>
 8009fb0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <httpd_init+0x22>
 8009fb8:	4b07      	ldr	r3, [pc, #28]	@ (8009fd8 <httpd_init+0x34>)
 8009fba:	f640 2272 	movw	r2, #2674	@ 0xa72
 8009fbe:	4907      	ldr	r1, [pc, #28]	@ (8009fdc <httpd_init+0x38>)
 8009fc0:	4807      	ldr	r0, [pc, #28]	@ (8009fe0 <httpd_init+0x3c>)
 8009fc2:	f00d fc1d 	bl	8017800 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8009fc6:	2150      	movs	r1, #80	@ 0x50
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff ffa7 	bl	8009f1c <httpd_init_pcb>
}
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	08019ce4 	.word	0x08019ce4
 8009fdc:	08019ef8 	.word	0x08019ef8
 8009fe0:	08019d2c 	.word	0x08019d2c

08009fe4 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <http_set_ssi_handler+0x20>
 8009ff6:	4b14      	ldr	r3, [pc, #80]	@ (800a048 <http_set_ssi_handler+0x64>)
 8009ff8:	f640 2297 	movw	r2, #2711	@ 0xa97
 8009ffc:	4913      	ldr	r1, [pc, #76]	@ (800a04c <http_set_ssi_handler+0x68>)
 8009ffe:	4814      	ldr	r0, [pc, #80]	@ (800a050 <http_set_ssi_handler+0x6c>)
 800a000:	f00d fbfe 	bl	8017800 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800a004:	4a13      	ldr	r2, [pc, #76]	@ (800a054 <http_set_ssi_handler+0x70>)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d106      	bne.n	800a01e <http_set_ssi_handler+0x3a>
 800a010:	4b0d      	ldr	r3, [pc, #52]	@ (800a048 <http_set_ssi_handler+0x64>)
 800a012:	f640 229e 	movw	r2, #2718	@ 0xa9e
 800a016:	4910      	ldr	r1, [pc, #64]	@ (800a058 <http_set_ssi_handler+0x74>)
 800a018:	480d      	ldr	r0, [pc, #52]	@ (800a050 <http_set_ssi_handler+0x6c>)
 800a01a:	f00d fbf1 	bl	8017800 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	dc06      	bgt.n	800a032 <http_set_ssi_handler+0x4e>
 800a024:	4b08      	ldr	r3, [pc, #32]	@ (800a048 <http_set_ssi_handler+0x64>)
 800a026:	f640 229f 	movw	r2, #2719	@ 0xa9f
 800a02a:	490c      	ldr	r1, [pc, #48]	@ (800a05c <http_set_ssi_handler+0x78>)
 800a02c:	4808      	ldr	r0, [pc, #32]	@ (800a050 <http_set_ssi_handler+0x6c>)
 800a02e:	f00d fbe7 	bl	8017800 <iprintf>

  httpd_tags = tags;
 800a032:	4a0b      	ldr	r2, [pc, #44]	@ (800a060 <http_set_ssi_handler+0x7c>)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800a038:	4a0a      	ldr	r2, [pc, #40]	@ (800a064 <http_set_ssi_handler+0x80>)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	08019ce4 	.word	0x08019ce4
 800a04c:	08019f14 	.word	0x08019f14
 800a050:	08019d2c 	.word	0x08019d2c
 800a054:	20005a00 	.word	0x20005a00
 800a058:	08019f2c 	.word	0x08019f2c
 800a05c:	08019f3c 	.word	0x08019f3c
 800a060:	20005a08 	.word	0x20005a08
 800a064:	20005a04 	.word	0x20005a04

0800a068 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d106      	bne.n	800a086 <http_set_cgi_handlers+0x1e>
 800a078:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b0 <http_set_cgi_handlers+0x48>)
 800a07a:	f640 22b2 	movw	r2, #2738	@ 0xab2
 800a07e:	490d      	ldr	r1, [pc, #52]	@ (800a0b4 <http_set_cgi_handlers+0x4c>)
 800a080:	480d      	ldr	r0, [pc, #52]	@ (800a0b8 <http_set_cgi_handlers+0x50>)
 800a082:	f00d fbbd 	bl	8017800 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	dc06      	bgt.n	800a09a <http_set_cgi_handlers+0x32>
 800a08c:	4b08      	ldr	r3, [pc, #32]	@ (800a0b0 <http_set_cgi_handlers+0x48>)
 800a08e:	f640 22b3 	movw	r2, #2739	@ 0xab3
 800a092:	490a      	ldr	r1, [pc, #40]	@ (800a0bc <http_set_cgi_handlers+0x54>)
 800a094:	4808      	ldr	r0, [pc, #32]	@ (800a0b8 <http_set_cgi_handlers+0x50>)
 800a096:	f00d fbb3 	bl	8017800 <iprintf>

  httpd_cgis = cgis;
 800a09a:	4a09      	ldr	r2, [pc, #36]	@ (800a0c0 <http_set_cgi_handlers+0x58>)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800a0a0:	4a08      	ldr	r2, [pc, #32]	@ (800a0c4 <http_set_cgi_handlers+0x5c>)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	6013      	str	r3, [r2, #0]
}
 800a0a6:	bf00      	nop
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	08019ce4 	.word	0x08019ce4
 800a0b4:	08019f54 	.word	0x08019f54
 800a0b8:	08019d2c 	.word	0x08019d2c
 800a0bc:	08019f64 	.word	0x08019f64
 800a0c0:	20005a0c 	.word	0x20005a0c
 800a0c4:	20005a10 	.word	0x20005a10

0800a0c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	021b      	lsls	r3, r3, #8
 800a0d6:	b21a      	sxth	r2, r3
 800a0d8:	88fb      	ldrh	r3, [r7, #6]
 800a0da:	0a1b      	lsrs	r3, r3, #8
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	b21b      	sxth	r3, r3
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	b21b      	sxth	r3, r3
 800a0e4:	b29b      	uxth	r3, r3
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	061a      	lsls	r2, r3, #24
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	021b      	lsls	r3, r3, #8
 800a102:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	0a1b      	lsrs	r3, r3, #8
 800a10c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a110:	431a      	orrs	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	0e1b      	lsrs	r3, r3, #24
 800a116:	4313      	orrs	r3, r2
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800a130:	68b8      	ldr	r0, [r7, #8]
 800a132:	f7f6 f8cd 	bl	80002d0 <strlen>
 800a136:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	e022      	b.n	800a188 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	e012      	b.n	800a16e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	781a      	ldrb	r2, [r3, #0]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	429a      	cmp	r2, r3
 800a152:	d109      	bne.n	800a168 <lwip_strnstr+0x44>
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	6978      	ldr	r0, [r7, #20]
 800a15a:	f00d fc05 	bl	8017968 <strncmp>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	e00f      	b.n	800a188 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	3301      	adds	r3, #1
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d007      	beq.n	800a186 <lwip_strnstr+0x62>
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	441a      	add	r2, r3
 800a17c:	68f9      	ldr	r1, [r7, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	440b      	add	r3, r1
 800a182:	429a      	cmp	r2, r3
 800a184:	d9e0      	bls.n	800a148 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	603a      	str	r2, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800a1ae:	7bfa      	ldrb	r2, [r7, #15]
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d016      	beq.n	800a1e4 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	f043 0320 	orr.w	r3, r3, #32
 800a1bc:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a1be:	7b7b      	ldrb	r3, [r7, #13]
 800a1c0:	2b60      	cmp	r3, #96	@ 0x60
 800a1c2:	d90c      	bls.n	800a1de <lwip_stricmp+0x4e>
 800a1c4:	7b7b      	ldrb	r3, [r7, #13]
 800a1c6:	2b7a      	cmp	r3, #122	@ 0x7a
 800a1c8:	d809      	bhi.n	800a1de <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	f043 0320 	orr.w	r3, r3, #32
 800a1d0:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800a1d2:	7b7a      	ldrb	r2, [r7, #13]
 800a1d4:	7b3b      	ldrb	r3, [r7, #12]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d003      	beq.n	800a1e2 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e006      	b.n	800a1ec <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e004      	b.n	800a1ec <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a1e2:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1d7      	bne.n	800a19a <lwip_stricmp+0xa>
  return 0;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a202:	f000 f8d5 	bl	800a3b0 <mem_init>
  memp_init();
 800a206:	f000 fbdb 	bl	800a9c0 <memp_init>
  pbuf_init();
  netif_init();
 800a20a:	f000 fcd9 	bl	800abc0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a20e:	f007 ff6d 	bl	80120ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a212:	f001 fdcb 	bl	800bdac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a216:	f007 fedf 	bl	8011fd8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a21a:	bf00      	nop
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a22e:	4b05      	ldr	r3, [pc, #20]	@ (800a244 <ptr_to_mem+0x20>)
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	4413      	add	r3, r2
}
 800a236:	4618      	mov	r0, r3
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20006084 	.word	0x20006084

0800a248 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a250:	4b05      	ldr	r3, [pc, #20]	@ (800a268 <mem_to_ptr+0x20>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	b29b      	uxth	r3, r3
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	20006084 	.word	0x20006084

0800a26c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a26c:	b590      	push	{r4, r7, lr}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a274:	4b45      	ldr	r3, [pc, #276]	@ (800a38c <plug_holes+0x120>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d206      	bcs.n	800a28c <plug_holes+0x20>
 800a27e:	4b44      	ldr	r3, [pc, #272]	@ (800a390 <plug_holes+0x124>)
 800a280:	f240 12df 	movw	r2, #479	@ 0x1df
 800a284:	4943      	ldr	r1, [pc, #268]	@ (800a394 <plug_holes+0x128>)
 800a286:	4844      	ldr	r0, [pc, #272]	@ (800a398 <plug_holes+0x12c>)
 800a288:	f00d faba 	bl	8017800 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a28c:	4b43      	ldr	r3, [pc, #268]	@ (800a39c <plug_holes+0x130>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	429a      	cmp	r2, r3
 800a294:	d306      	bcc.n	800a2a4 <plug_holes+0x38>
 800a296:	4b3e      	ldr	r3, [pc, #248]	@ (800a390 <plug_holes+0x124>)
 800a298:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a29c:	4940      	ldr	r1, [pc, #256]	@ (800a3a0 <plug_holes+0x134>)
 800a29e:	483e      	ldr	r0, [pc, #248]	@ (800a398 <plug_holes+0x12c>)
 800a2a0:	f00d faae 	bl	8017800 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	791b      	ldrb	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d006      	beq.n	800a2ba <plug_holes+0x4e>
 800a2ac:	4b38      	ldr	r3, [pc, #224]	@ (800a390 <plug_holes+0x124>)
 800a2ae:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a2b2:	493c      	ldr	r1, [pc, #240]	@ (800a3a4 <plug_holes+0x138>)
 800a2b4:	4838      	ldr	r0, [pc, #224]	@ (800a398 <plug_holes+0x12c>)
 800a2b6:	f00d faa3 	bl	8017800 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a2c2:	d906      	bls.n	800a2d2 <plug_holes+0x66>
 800a2c4:	4b32      	ldr	r3, [pc, #200]	@ (800a390 <plug_holes+0x124>)
 800a2c6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a2ca:	4937      	ldr	r1, [pc, #220]	@ (800a3a8 <plug_holes+0x13c>)
 800a2cc:	4832      	ldr	r0, [pc, #200]	@ (800a398 <plug_holes+0x12c>)
 800a2ce:	f00d fa97 	bl	8017800 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff ffa4 	bl	800a224 <ptr_to_mem>
 800a2dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d024      	beq.n	800a330 <plug_holes+0xc4>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	791b      	ldrb	r3, [r3, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d120      	bne.n	800a330 <plug_holes+0xc4>
 800a2ee:	4b2b      	ldr	r3, [pc, #172]	@ (800a39c <plug_holes+0x130>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d01b      	beq.n	800a330 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a2f8:	4b2c      	ldr	r3, [pc, #176]	@ (800a3ac <plug_holes+0x140>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d102      	bne.n	800a308 <plug_holes+0x9c>
      lfree = mem;
 800a302:	4a2a      	ldr	r2, [pc, #168]	@ (800a3ac <plug_holes+0x140>)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	881a      	ldrh	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a318:	d00a      	beq.n	800a330 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff ff80 	bl	800a224 <ptr_to_mem>
 800a324:	4604      	mov	r4, r0
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff ff8e 	bl	800a248 <mem_to_ptr>
 800a32c:	4603      	mov	r3, r0
 800a32e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	885b      	ldrh	r3, [r3, #2]
 800a334:	4618      	mov	r0, r3
 800a336:	f7ff ff75 	bl	800a224 <ptr_to_mem>
 800a33a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	429a      	cmp	r2, r3
 800a342:	d01f      	beq.n	800a384 <plug_holes+0x118>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	791b      	ldrb	r3, [r3, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d11b      	bne.n	800a384 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a34c:	4b17      	ldr	r3, [pc, #92]	@ (800a3ac <plug_holes+0x140>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d102      	bne.n	800a35c <plug_holes+0xf0>
      lfree = pmem;
 800a356:	4a15      	ldr	r2, [pc, #84]	@ (800a3ac <plug_holes+0x140>)
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	881a      	ldrh	r2, [r3, #0]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a36c:	d00a      	beq.n	800a384 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff ff56 	bl	800a224 <ptr_to_mem>
 800a378:	4604      	mov	r4, r0
 800a37a:	68b8      	ldr	r0, [r7, #8]
 800a37c:	f7ff ff64 	bl	800a248 <mem_to_ptr>
 800a380:	4603      	mov	r3, r0
 800a382:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a384:	bf00      	nop
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd90      	pop	{r4, r7, pc}
 800a38c:	20006084 	.word	0x20006084
 800a390:	08019f80 	.word	0x08019f80
 800a394:	08019fb0 	.word	0x08019fb0
 800a398:	08019fc8 	.word	0x08019fc8
 800a39c:	20006088 	.word	0x20006088
 800a3a0:	08019ff0 	.word	0x08019ff0
 800a3a4:	0801a00c 	.word	0x0801a00c
 800a3a8:	0801a028 	.word	0x0801a028
 800a3ac:	2000608c 	.word	0x2000608c

0800a3b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a3b6:	4b18      	ldr	r3, [pc, #96]	@ (800a418 <mem_init+0x68>)
 800a3b8:	3303      	adds	r3, #3
 800a3ba:	f023 0303 	bic.w	r3, r3, #3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	4b16      	ldr	r3, [pc, #88]	@ (800a41c <mem_init+0x6c>)
 800a3c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a3c4:	4b15      	ldr	r3, [pc, #84]	@ (800a41c <mem_init+0x6c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a3d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a3de:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a3e2:	f7ff ff1f 	bl	800a224 <ptr_to_mem>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	4a0d      	ldr	r2, [pc, #52]	@ (800a420 <mem_init+0x70>)
 800a3ea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a3ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a420 <mem_init+0x70>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a420 <mem_init+0x70>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a3fc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a3fe:	4b08      	ldr	r3, [pc, #32]	@ (800a420 <mem_init+0x70>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a406:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a408:	4b04      	ldr	r3, [pc, #16]	@ (800a41c <mem_init+0x6c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a05      	ldr	r2, [pc, #20]	@ (800a424 <mem_init+0x74>)
 800a40e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20005a30 	.word	0x20005a30
 800a41c:	20006084 	.word	0x20006084
 800a420:	20006088 	.word	0x20006088
 800a424:	2000608c 	.word	0x2000608c

0800a428 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7ff ff09 	bl	800a248 <mem_to_ptr>
 800a436:	4603      	mov	r3, r0
 800a438:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff fef0 	bl	800a224 <ptr_to_mem>
 800a444:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	885b      	ldrh	r3, [r3, #2]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff feea 	bl	800a224 <ptr_to_mem>
 800a450:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a45a:	d818      	bhi.n	800a48e <mem_link_valid+0x66>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	885b      	ldrh	r3, [r3, #2]
 800a460:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a464:	d813      	bhi.n	800a48e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a46a:	8afa      	ldrh	r2, [r7, #22]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d004      	beq.n	800a47a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	8afa      	ldrh	r2, [r7, #22]
 800a476:	429a      	cmp	r2, r3
 800a478:	d109      	bne.n	800a48e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a47a:	4b08      	ldr	r3, [pc, #32]	@ (800a49c <mem_link_valid+0x74>)
 800a47c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	429a      	cmp	r2, r3
 800a482:	d006      	beq.n	800a492 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	885b      	ldrh	r3, [r3, #2]
 800a488:	8afa      	ldrh	r2, [r7, #22]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d001      	beq.n	800a492 <mem_link_valid+0x6a>
    return 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	e000      	b.n	800a494 <mem_link_valid+0x6c>
  }
  return 1;
 800a492:	2301      	movs	r3, #1
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	20006088 	.word	0x20006088

0800a4a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d04c      	beq.n	800a548 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f003 0303 	and.w	r3, r3, #3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d007      	beq.n	800a4c8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a4b8:	4b25      	ldr	r3, [pc, #148]	@ (800a550 <mem_free+0xb0>)
 800a4ba:	f240 2273 	movw	r2, #627	@ 0x273
 800a4be:	4925      	ldr	r1, [pc, #148]	@ (800a554 <mem_free+0xb4>)
 800a4c0:	4825      	ldr	r0, [pc, #148]	@ (800a558 <mem_free+0xb8>)
 800a4c2:	f00d f99d 	bl	8017800 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a4c6:	e040      	b.n	800a54a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3b08      	subs	r3, #8
 800a4cc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a4ce:	4b23      	ldr	r3, [pc, #140]	@ (800a55c <mem_free+0xbc>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d306      	bcc.n	800a4e6 <mem_free+0x46>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f103 020c 	add.w	r2, r3, #12
 800a4de:	4b20      	ldr	r3, [pc, #128]	@ (800a560 <mem_free+0xc0>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d907      	bls.n	800a4f6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a550 <mem_free+0xb0>)
 800a4e8:	f240 227f 	movw	r2, #639	@ 0x27f
 800a4ec:	491d      	ldr	r1, [pc, #116]	@ (800a564 <mem_free+0xc4>)
 800a4ee:	481a      	ldr	r0, [pc, #104]	@ (800a558 <mem_free+0xb8>)
 800a4f0:	f00d f986 	bl	8017800 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a4f4:	e029      	b.n	800a54a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	791b      	ldrb	r3, [r3, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d107      	bne.n	800a50e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a4fe:	4b14      	ldr	r3, [pc, #80]	@ (800a550 <mem_free+0xb0>)
 800a500:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a504:	4918      	ldr	r1, [pc, #96]	@ (800a568 <mem_free+0xc8>)
 800a506:	4814      	ldr	r0, [pc, #80]	@ (800a558 <mem_free+0xb8>)
 800a508:	f00d f97a 	bl	8017800 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a50c:	e01d      	b.n	800a54a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7ff ff8a 	bl	800a428 <mem_link_valid>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d107      	bne.n	800a52a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a51a:	4b0d      	ldr	r3, [pc, #52]	@ (800a550 <mem_free+0xb0>)
 800a51c:	f240 2295 	movw	r2, #661	@ 0x295
 800a520:	4912      	ldr	r1, [pc, #72]	@ (800a56c <mem_free+0xcc>)
 800a522:	480d      	ldr	r0, [pc, #52]	@ (800a558 <mem_free+0xb8>)
 800a524:	f00d f96c 	bl	8017800 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a528:	e00f      	b.n	800a54a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a530:	4b0f      	ldr	r3, [pc, #60]	@ (800a570 <mem_free+0xd0>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	429a      	cmp	r2, r3
 800a538:	d202      	bcs.n	800a540 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a53a:	4a0d      	ldr	r2, [pc, #52]	@ (800a570 <mem_free+0xd0>)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f7ff fe93 	bl	800a26c <plug_holes>
 800a546:	e000      	b.n	800a54a <mem_free+0xaa>
    return;
 800a548:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	08019f80 	.word	0x08019f80
 800a554:	0801a054 	.word	0x0801a054
 800a558:	08019fc8 	.word	0x08019fc8
 800a55c:	20006084 	.word	0x20006084
 800a560:	20006088 	.word	0x20006088
 800a564:	0801a078 	.word	0x0801a078
 800a568:	0801a094 	.word	0x0801a094
 800a56c:	0801a0bc 	.word	0x0801a0bc
 800a570:	2000608c 	.word	0x2000608c

0800a574 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a580:	887b      	ldrh	r3, [r7, #2]
 800a582:	3303      	adds	r3, #3
 800a584:	b29b      	uxth	r3, r3
 800a586:	f023 0303 	bic.w	r3, r3, #3
 800a58a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a58c:	8bfb      	ldrh	r3, [r7, #30]
 800a58e:	2b0b      	cmp	r3, #11
 800a590:	d801      	bhi.n	800a596 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a592:	230c      	movs	r3, #12
 800a594:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a596:	8bfb      	ldrh	r3, [r7, #30]
 800a598:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a59c:	d803      	bhi.n	800a5a6 <mem_trim+0x32>
 800a59e:	8bfa      	ldrh	r2, [r7, #30]
 800a5a0:	887b      	ldrh	r3, [r7, #2]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d201      	bcs.n	800a5aa <mem_trim+0x36>
    return NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e0cc      	b.n	800a744 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a5aa:	4b68      	ldr	r3, [pc, #416]	@ (800a74c <mem_trim+0x1d8>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d304      	bcc.n	800a5be <mem_trim+0x4a>
 800a5b4:	4b66      	ldr	r3, [pc, #408]	@ (800a750 <mem_trim+0x1dc>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d306      	bcc.n	800a5cc <mem_trim+0x58>
 800a5be:	4b65      	ldr	r3, [pc, #404]	@ (800a754 <mem_trim+0x1e0>)
 800a5c0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a5c4:	4964      	ldr	r1, [pc, #400]	@ (800a758 <mem_trim+0x1e4>)
 800a5c6:	4865      	ldr	r0, [pc, #404]	@ (800a75c <mem_trim+0x1e8>)
 800a5c8:	f00d f91a 	bl	8017800 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a5cc:	4b5f      	ldr	r3, [pc, #380]	@ (800a74c <mem_trim+0x1d8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d304      	bcc.n	800a5e0 <mem_trim+0x6c>
 800a5d6:	4b5e      	ldr	r3, [pc, #376]	@ (800a750 <mem_trim+0x1dc>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d301      	bcc.n	800a5e4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	e0af      	b.n	800a744 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3b08      	subs	r3, #8
 800a5e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a5ea:	69b8      	ldr	r0, [r7, #24]
 800a5ec:	f7ff fe2c 	bl	800a248 <mem_to_ptr>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	881a      	ldrh	r2, [r3, #0]
 800a5f8:	8afb      	ldrh	r3, [r7, #22]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	3b08      	subs	r3, #8
 800a600:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a602:	8bfa      	ldrh	r2, [r7, #30]
 800a604:	8abb      	ldrh	r3, [r7, #20]
 800a606:	429a      	cmp	r2, r3
 800a608:	d906      	bls.n	800a618 <mem_trim+0xa4>
 800a60a:	4b52      	ldr	r3, [pc, #328]	@ (800a754 <mem_trim+0x1e0>)
 800a60c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a610:	4953      	ldr	r1, [pc, #332]	@ (800a760 <mem_trim+0x1ec>)
 800a612:	4852      	ldr	r0, [pc, #328]	@ (800a75c <mem_trim+0x1e8>)
 800a614:	f00d f8f4 	bl	8017800 <iprintf>
  if (newsize > size) {
 800a618:	8bfa      	ldrh	r2, [r7, #30]
 800a61a:	8abb      	ldrh	r3, [r7, #20]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d901      	bls.n	800a624 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a620:	2300      	movs	r3, #0
 800a622:	e08f      	b.n	800a744 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a624:	8bfa      	ldrh	r2, [r7, #30]
 800a626:	8abb      	ldrh	r3, [r7, #20]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d101      	bne.n	800a630 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	e089      	b.n	800a744 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff fdf5 	bl	800a224 <ptr_to_mem>
 800a63a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	791b      	ldrb	r3, [r3, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d13f      	bne.n	800a6c4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a64c:	d106      	bne.n	800a65c <mem_trim+0xe8>
 800a64e:	4b41      	ldr	r3, [pc, #260]	@ (800a754 <mem_trim+0x1e0>)
 800a650:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a654:	4943      	ldr	r1, [pc, #268]	@ (800a764 <mem_trim+0x1f0>)
 800a656:	4841      	ldr	r0, [pc, #260]	@ (800a75c <mem_trim+0x1e8>)
 800a658:	f00d f8d2 	bl	8017800 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a662:	8afa      	ldrh	r2, [r7, #22]
 800a664:	8bfb      	ldrh	r3, [r7, #30]
 800a666:	4413      	add	r3, r2
 800a668:	b29b      	uxth	r3, r3
 800a66a:	3308      	adds	r3, #8
 800a66c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a66e:	4b3e      	ldr	r3, [pc, #248]	@ (800a768 <mem_trim+0x1f4>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	429a      	cmp	r2, r3
 800a676:	d106      	bne.n	800a686 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a678:	89fb      	ldrh	r3, [r7, #14]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff fdd2 	bl	800a224 <ptr_to_mem>
 800a680:	4603      	mov	r3, r0
 800a682:	4a39      	ldr	r2, [pc, #228]	@ (800a768 <mem_trim+0x1f4>)
 800a684:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a686:	89fb      	ldrh	r3, [r7, #14]
 800a688:	4618      	mov	r0, r3
 800a68a:	f7ff fdcb 	bl	800a224 <ptr_to_mem>
 800a68e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2200      	movs	r2, #0
 800a694:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	89ba      	ldrh	r2, [r7, #12]
 800a69a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	8afa      	ldrh	r2, [r7, #22]
 800a6a0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	89fa      	ldrh	r2, [r7, #14]
 800a6a6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a6b0:	d047      	beq.n	800a742 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7ff fdb4 	bl	800a224 <ptr_to_mem>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	89fb      	ldrh	r3, [r7, #14]
 800a6c0:	8053      	strh	r3, [r2, #2]
 800a6c2:	e03e      	b.n	800a742 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a6c4:	8bfb      	ldrh	r3, [r7, #30]
 800a6c6:	f103 0214 	add.w	r2, r3, #20
 800a6ca:	8abb      	ldrh	r3, [r7, #20]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d838      	bhi.n	800a742 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a6d0:	8afa      	ldrh	r2, [r7, #22]
 800a6d2:	8bfb      	ldrh	r3, [r7, #30]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	3308      	adds	r3, #8
 800a6da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a6e4:	d106      	bne.n	800a6f4 <mem_trim+0x180>
 800a6e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a754 <mem_trim+0x1e0>)
 800a6e8:	f240 3216 	movw	r2, #790	@ 0x316
 800a6ec:	491d      	ldr	r1, [pc, #116]	@ (800a764 <mem_trim+0x1f0>)
 800a6ee:	481b      	ldr	r0, [pc, #108]	@ (800a75c <mem_trim+0x1e8>)
 800a6f0:	f00d f886 	bl	8017800 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a6f4:	89fb      	ldrh	r3, [r7, #14]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff fd94 	bl	800a224 <ptr_to_mem>
 800a6fc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a768 <mem_trim+0x1f4>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	429a      	cmp	r2, r3
 800a706:	d202      	bcs.n	800a70e <mem_trim+0x19a>
      lfree = mem2;
 800a708:	4a17      	ldr	r2, [pc, #92]	@ (800a768 <mem_trim+0x1f4>)
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	2200      	movs	r2, #0
 800a712:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	881a      	ldrh	r2, [r3, #0]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	8afa      	ldrh	r2, [r7, #22]
 800a720:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	89fa      	ldrh	r2, [r7, #14]
 800a726:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a730:	d007      	beq.n	800a742 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff fd74 	bl	800a224 <ptr_to_mem>
 800a73c:	4602      	mov	r2, r0
 800a73e:	89fb      	ldrh	r3, [r7, #14]
 800a740:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a742:	687b      	ldr	r3, [r7, #4]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3720      	adds	r7, #32
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20006084 	.word	0x20006084
 800a750:	20006088 	.word	0x20006088
 800a754:	08019f80 	.word	0x08019f80
 800a758:	0801a0f0 	.word	0x0801a0f0
 800a75c:	08019fc8 	.word	0x08019fc8
 800a760:	0801a108 	.word	0x0801a108
 800a764:	0801a128 	.word	0x0801a128
 800a768:	2000608c 	.word	0x2000608c

0800a76c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a776:	88fb      	ldrh	r3, [r7, #6]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <mem_malloc+0x14>
    return NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	e0d9      	b.n	800a934 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	3303      	adds	r3, #3
 800a784:	b29b      	uxth	r3, r3
 800a786:	f023 0303 	bic.w	r3, r3, #3
 800a78a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a78c:	8bbb      	ldrh	r3, [r7, #28]
 800a78e:	2b0b      	cmp	r3, #11
 800a790:	d801      	bhi.n	800a796 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a792:	230c      	movs	r3, #12
 800a794:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a796:	8bbb      	ldrh	r3, [r7, #28]
 800a798:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a79c:	d803      	bhi.n	800a7a6 <mem_malloc+0x3a>
 800a79e:	8bba      	ldrh	r2, [r7, #28]
 800a7a0:	88fb      	ldrh	r3, [r7, #6]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d201      	bcs.n	800a7aa <mem_malloc+0x3e>
    return NULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e0c4      	b.n	800a934 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a7aa:	4b64      	ldr	r3, [pc, #400]	@ (800a93c <mem_malloc+0x1d0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff fd4a 	bl	800a248 <mem_to_ptr>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	83fb      	strh	r3, [r7, #30]
 800a7b8:	e0b4      	b.n	800a924 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a7ba:	8bfb      	ldrh	r3, [r7, #30]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fd31 	bl	800a224 <ptr_to_mem>
 800a7c2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	791b      	ldrb	r3, [r3, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f040 80a4 	bne.w	800a916 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	8bfb      	ldrh	r3, [r7, #30]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	f1a3 0208 	sub.w	r2, r3, #8
 800a7dc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	f0c0 8099 	bcc.w	800a916 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	8bfb      	ldrh	r3, [r7, #30]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	f1a3 0208 	sub.w	r2, r3, #8
 800a7f2:	8bbb      	ldrh	r3, [r7, #28]
 800a7f4:	3314      	adds	r3, #20
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d333      	bcc.n	800a862 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a7fa:	8bfa      	ldrh	r2, [r7, #30]
 800a7fc:	8bbb      	ldrh	r3, [r7, #28]
 800a7fe:	4413      	add	r3, r2
 800a800:	b29b      	uxth	r3, r3
 800a802:	3308      	adds	r3, #8
 800a804:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a806:	8a7b      	ldrh	r3, [r7, #18]
 800a808:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a80c:	d106      	bne.n	800a81c <mem_malloc+0xb0>
 800a80e:	4b4c      	ldr	r3, [pc, #304]	@ (800a940 <mem_malloc+0x1d4>)
 800a810:	f240 3287 	movw	r2, #903	@ 0x387
 800a814:	494b      	ldr	r1, [pc, #300]	@ (800a944 <mem_malloc+0x1d8>)
 800a816:	484c      	ldr	r0, [pc, #304]	@ (800a948 <mem_malloc+0x1dc>)
 800a818:	f00c fff2 	bl	8017800 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a81c:	8a7b      	ldrh	r3, [r7, #18]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff fd00 	bl	800a224 <ptr_to_mem>
 800a824:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	881a      	ldrh	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8bfa      	ldrh	r2, [r7, #30]
 800a838:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	8a7a      	ldrh	r2, [r7, #18]
 800a83e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2201      	movs	r2, #1
 800a844:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a84e:	d00b      	beq.n	800a868 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	4618      	mov	r0, r3
 800a856:	f7ff fce5 	bl	800a224 <ptr_to_mem>
 800a85a:	4602      	mov	r2, r0
 800a85c:	8a7b      	ldrh	r3, [r7, #18]
 800a85e:	8053      	strh	r3, [r2, #2]
 800a860:	e002      	b.n	800a868 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2201      	movs	r2, #1
 800a866:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a868:	4b34      	ldr	r3, [pc, #208]	@ (800a93c <mem_malloc+0x1d0>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d127      	bne.n	800a8c2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a872:	4b32      	ldr	r3, [pc, #200]	@ (800a93c <mem_malloc+0x1d0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a878:	e005      	b.n	800a886 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fcd0 	bl	800a224 <ptr_to_mem>
 800a884:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	791b      	ldrb	r3, [r3, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d004      	beq.n	800a898 <mem_malloc+0x12c>
 800a88e:	4b2f      	ldr	r3, [pc, #188]	@ (800a94c <mem_malloc+0x1e0>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	429a      	cmp	r2, r3
 800a896:	d1f0      	bne.n	800a87a <mem_malloc+0x10e>
          }
          lfree = cur;
 800a898:	4a28      	ldr	r2, [pc, #160]	@ (800a93c <mem_malloc+0x1d0>)
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a89e:	4b27      	ldr	r3, [pc, #156]	@ (800a93c <mem_malloc+0x1d0>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4b2a      	ldr	r3, [pc, #168]	@ (800a94c <mem_malloc+0x1e0>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d00b      	beq.n	800a8c2 <mem_malloc+0x156>
 800a8aa:	4b24      	ldr	r3, [pc, #144]	@ (800a93c <mem_malloc+0x1d0>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	791b      	ldrb	r3, [r3, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d006      	beq.n	800a8c2 <mem_malloc+0x156>
 800a8b4:	4b22      	ldr	r3, [pc, #136]	@ (800a940 <mem_malloc+0x1d4>)
 800a8b6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a8ba:	4925      	ldr	r1, [pc, #148]	@ (800a950 <mem_malloc+0x1e4>)
 800a8bc:	4822      	ldr	r0, [pc, #136]	@ (800a948 <mem_malloc+0x1dc>)
 800a8be:	f00c ff9f 	bl	8017800 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a8c2:	8bba      	ldrh	r2, [r7, #28]
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	4a20      	ldr	r2, [pc, #128]	@ (800a94c <mem_malloc+0x1e0>)
 800a8cc:	6812      	ldr	r2, [r2, #0]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d906      	bls.n	800a8e0 <mem_malloc+0x174>
 800a8d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a940 <mem_malloc+0x1d4>)
 800a8d4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a8d8:	491e      	ldr	r1, [pc, #120]	@ (800a954 <mem_malloc+0x1e8>)
 800a8da:	481b      	ldr	r0, [pc, #108]	@ (800a948 <mem_malloc+0x1dc>)
 800a8dc:	f00c ff90 	bl	8017800 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f003 0303 	and.w	r3, r3, #3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d006      	beq.n	800a8f8 <mem_malloc+0x18c>
 800a8ea:	4b15      	ldr	r3, [pc, #84]	@ (800a940 <mem_malloc+0x1d4>)
 800a8ec:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a8f0:	4919      	ldr	r1, [pc, #100]	@ (800a958 <mem_malloc+0x1ec>)
 800a8f2:	4815      	ldr	r0, [pc, #84]	@ (800a948 <mem_malloc+0x1dc>)
 800a8f4:	f00c ff84 	bl	8017800 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f003 0303 	and.w	r3, r3, #3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d006      	beq.n	800a910 <mem_malloc+0x1a4>
 800a902:	4b0f      	ldr	r3, [pc, #60]	@ (800a940 <mem_malloc+0x1d4>)
 800a904:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a908:	4914      	ldr	r1, [pc, #80]	@ (800a95c <mem_malloc+0x1f0>)
 800a90a:	480f      	ldr	r0, [pc, #60]	@ (800a948 <mem_malloc+0x1dc>)
 800a90c:	f00c ff78 	bl	8017800 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	3308      	adds	r3, #8
 800a914:	e00e      	b.n	800a934 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a916:	8bfb      	ldrh	r3, [r7, #30]
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fc83 	bl	800a224 <ptr_to_mem>
 800a91e:	4603      	mov	r3, r0
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a924:	8bfa      	ldrh	r2, [r7, #30]
 800a926:	8bbb      	ldrh	r3, [r7, #28]
 800a928:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800a92c:	429a      	cmp	r2, r3
 800a92e:	f4ff af44 	bcc.w	800a7ba <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3720      	adds	r7, #32
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	2000608c 	.word	0x2000608c
 800a940:	08019f80 	.word	0x08019f80
 800a944:	0801a128 	.word	0x0801a128
 800a948:	08019fc8 	.word	0x08019fc8
 800a94c:	20006088 	.word	0x20006088
 800a950:	0801a13c 	.word	0x0801a13c
 800a954:	0801a158 	.word	0x0801a158
 800a958:	0801a188 	.word	0x0801a188
 800a95c:	0801a1b8 	.word	0x0801a1b8

0800a960 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	2200      	movs	r2, #0
 800a96e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	3303      	adds	r3, #3
 800a976:	f023 0303 	bic.w	r3, r3, #3
 800a97a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e011      	b.n	800a9a6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	4413      	add	r3, r2
 800a99e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	60fb      	str	r3, [r7, #12]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	885b      	ldrh	r3, [r3, #2]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	dbe7      	blt.n	800a982 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	80fb      	strh	r3, [r7, #6]
 800a9ca:	e009      	b.n	800a9e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	4a08      	ldr	r2, [pc, #32]	@ (800a9f0 <memp_init+0x30>)
 800a9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff ffc3 	bl	800a960 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a9da:	88fb      	ldrh	r3, [r7, #6]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	80fb      	strh	r3, [r7, #6]
 800a9e0:	88fb      	ldrh	r3, [r7, #6]
 800a9e2:	2b08      	cmp	r3, #8
 800a9e4:	d9f2      	bls.n	800a9cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a9e6:	bf00      	nop
 800a9e8:	bf00      	nop
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	08020408 	.word	0x08020408

0800a9f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d012      	beq.n	800aa30 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	6812      	ldr	r2, [r2, #0]
 800aa12:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d006      	beq.n	800aa2c <do_memp_malloc_pool+0x38>
 800aa1e:	4b07      	ldr	r3, [pc, #28]	@ (800aa3c <do_memp_malloc_pool+0x48>)
 800aa20:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800aa24:	4906      	ldr	r1, [pc, #24]	@ (800aa40 <do_memp_malloc_pool+0x4c>)
 800aa26:	4807      	ldr	r0, [pc, #28]	@ (800aa44 <do_memp_malloc_pool+0x50>)
 800aa28:	f00c feea 	bl	8017800 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	e000      	b.n	800aa32 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0801a1dc 	.word	0x0801a1dc
 800aa40:	0801a20c 	.word	0x0801a20c
 800aa44:	0801a230 	.word	0x0801a230

0800aa48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <memp_malloc_pool+0x1c>
 800aa56:	4b0a      	ldr	r3, [pc, #40]	@ (800aa80 <memp_malloc_pool+0x38>)
 800aa58:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800aa5c:	4909      	ldr	r1, [pc, #36]	@ (800aa84 <memp_malloc_pool+0x3c>)
 800aa5e:	480a      	ldr	r0, [pc, #40]	@ (800aa88 <memp_malloc_pool+0x40>)
 800aa60:	f00c fece 	bl	8017800 <iprintf>
  if (desc == NULL) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <memp_malloc_pool+0x26>
    return NULL;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e003      	b.n	800aa76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff ffc0 	bl	800a9f4 <do_memp_malloc_pool>
 800aa74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	0801a1dc 	.word	0x0801a1dc
 800aa84:	0801a258 	.word	0x0801a258
 800aa88:	0801a230 	.word	0x0801a230

0800aa8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	2b08      	cmp	r3, #8
 800aa9a:	d908      	bls.n	800aaae <memp_malloc+0x22>
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	@ (800aac8 <memp_malloc+0x3c>)
 800aa9e:	f240 1257 	movw	r2, #343	@ 0x157
 800aaa2:	490a      	ldr	r1, [pc, #40]	@ (800aacc <memp_malloc+0x40>)
 800aaa4:	480a      	ldr	r0, [pc, #40]	@ (800aad0 <memp_malloc+0x44>)
 800aaa6:	f00c feab 	bl	8017800 <iprintf>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e008      	b.n	800aac0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	4a08      	ldr	r2, [pc, #32]	@ (800aad4 <memp_malloc+0x48>)
 800aab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff ff9c 	bl	800a9f4 <do_memp_malloc_pool>
 800aabc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800aabe:	68fb      	ldr	r3, [r7, #12]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	0801a1dc 	.word	0x0801a1dc
 800aacc:	0801a26c 	.word	0x0801a26c
 800aad0:	0801a230 	.word	0x0801a230
 800aad4:	08020408 	.word	0x08020408

0800aad8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	f003 0303 	and.w	r3, r3, #3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d006      	beq.n	800aafa <do_memp_free_pool+0x22>
 800aaec:	4b0a      	ldr	r3, [pc, #40]	@ (800ab18 <do_memp_free_pool+0x40>)
 800aaee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800aaf2:	490a      	ldr	r1, [pc, #40]	@ (800ab1c <do_memp_free_pool+0x44>)
 800aaf4:	480a      	ldr	r0, [pc, #40]	@ (800ab20 <do_memp_free_pool+0x48>)
 800aaf6:	f00c fe83 	bl	8017800 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ab10:	bf00      	nop
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	0801a1dc 	.word	0x0801a1dc
 800ab1c:	0801a28c 	.word	0x0801a28c
 800ab20:	0801a230 	.word	0x0801a230

0800ab24 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d106      	bne.n	800ab42 <memp_free_pool+0x1e>
 800ab34:	4b0a      	ldr	r3, [pc, #40]	@ (800ab60 <memp_free_pool+0x3c>)
 800ab36:	f240 1295 	movw	r2, #405	@ 0x195
 800ab3a:	490a      	ldr	r1, [pc, #40]	@ (800ab64 <memp_free_pool+0x40>)
 800ab3c:	480a      	ldr	r0, [pc, #40]	@ (800ab68 <memp_free_pool+0x44>)
 800ab3e:	f00c fe5f 	bl	8017800 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d007      	beq.n	800ab58 <memp_free_pool+0x34>
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d004      	beq.n	800ab58 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff ffc1 	bl	800aad8 <do_memp_free_pool>
 800ab56:	e000      	b.n	800ab5a <memp_free_pool+0x36>
    return;
 800ab58:	bf00      	nop
}
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	0801a1dc 	.word	0x0801a1dc
 800ab64:	0801a258 	.word	0x0801a258
 800ab68:	0801a230 	.word	0x0801a230

0800ab6c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	2b08      	cmp	r3, #8
 800ab7c:	d907      	bls.n	800ab8e <memp_free+0x22>
 800ab7e:	4b0c      	ldr	r3, [pc, #48]	@ (800abb0 <memp_free+0x44>)
 800ab80:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800ab84:	490b      	ldr	r1, [pc, #44]	@ (800abb4 <memp_free+0x48>)
 800ab86:	480c      	ldr	r0, [pc, #48]	@ (800abb8 <memp_free+0x4c>)
 800ab88:	f00c fe3a 	bl	8017800 <iprintf>
 800ab8c:	e00c      	b.n	800aba8 <memp_free+0x3c>

  if (mem == NULL) {
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d008      	beq.n	800aba6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	4a09      	ldr	r2, [pc, #36]	@ (800abbc <memp_free+0x50>)
 800ab98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff ff9a 	bl	800aad8 <do_memp_free_pool>
 800aba4:	e000      	b.n	800aba8 <memp_free+0x3c>
    return;
 800aba6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	0801a1dc 	.word	0x0801a1dc
 800abb4:	0801a2ac 	.word	0x0801a2ac
 800abb8:	0801a230 	.word	0x0801a230
 800abbc:	08020408 	.word	0x08020408

0800abc0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800abc0:	b480      	push	{r7}
 800abc2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800abc4:	bf00      	nop
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d108      	bne.n	800abf6 <netif_add+0x26>
 800abe4:	4b5b      	ldr	r3, [pc, #364]	@ (800ad54 <netif_add+0x184>)
 800abe6:	f240 1227 	movw	r2, #295	@ 0x127
 800abea:	495b      	ldr	r1, [pc, #364]	@ (800ad58 <netif_add+0x188>)
 800abec:	485b      	ldr	r0, [pc, #364]	@ (800ad5c <netif_add+0x18c>)
 800abee:	f00c fe07 	bl	8017800 <iprintf>
 800abf2:	2300      	movs	r3, #0
 800abf4:	e0a9      	b.n	800ad4a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d108      	bne.n	800ac0e <netif_add+0x3e>
 800abfc:	4b55      	ldr	r3, [pc, #340]	@ (800ad54 <netif_add+0x184>)
 800abfe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ac02:	4957      	ldr	r1, [pc, #348]	@ (800ad60 <netif_add+0x190>)
 800ac04:	4855      	ldr	r0, [pc, #340]	@ (800ad5c <netif_add+0x18c>)
 800ac06:	f00c fdfb 	bl	8017800 <iprintf>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e09d      	b.n	800ad4a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ac14:	4b53      	ldr	r3, [pc, #332]	@ (800ad64 <netif_add+0x194>)
 800ac16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ac1e:	4b51      	ldr	r3, [pc, #324]	@ (800ad64 <netif_add+0x194>)
 800ac20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ac28:	4b4e      	ldr	r3, [pc, #312]	@ (800ad64 <netif_add+0x194>)
 800ac2a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4a49      	ldr	r2, [pc, #292]	@ (800ad68 <netif_add+0x198>)
 800ac42:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3324      	adds	r3, #36	@ 0x24
 800ac56:	2204      	movs	r2, #4
 800ac58:	2100      	movs	r1, #0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f00c fe6f 	bl	801793e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a3a      	ldr	r2, [r7, #32]
 800ac6a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ac6c:	4b3f      	ldr	r3, [pc, #252]	@ (800ad6c <netif_add+0x19c>)
 800ac6e:	781a      	ldrb	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac7a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	68b9      	ldr	r1, [r7, #8]
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 f914 	bl	800aeb0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ac88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	4798      	blx	r3
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <netif_add+0xc8>
    return NULL;
 800ac94:	2300      	movs	r3, #0
 800ac96:	e058      	b.n	800ad4a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ac9e:	2bff      	cmp	r3, #255	@ 0xff
 800aca0:	d103      	bne.n	800acaa <netif_add+0xda>
        netif->num = 0;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800acae:	4b30      	ldr	r3, [pc, #192]	@ (800ad70 <netif_add+0x1a0>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	617b      	str	r3, [r7, #20]
 800acb4:	e02b      	b.n	800ad0e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d106      	bne.n	800accc <netif_add+0xfc>
 800acbe:	4b25      	ldr	r3, [pc, #148]	@ (800ad54 <netif_add+0x184>)
 800acc0:	f240 128b 	movw	r2, #395	@ 0x18b
 800acc4:	492b      	ldr	r1, [pc, #172]	@ (800ad74 <netif_add+0x1a4>)
 800acc6:	4825      	ldr	r0, [pc, #148]	@ (800ad5c <netif_add+0x18c>)
 800acc8:	f00c fd9a 	bl	8017800 <iprintf>
        num_netifs++;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	3301      	adds	r3, #1
 800acd0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2bff      	cmp	r3, #255	@ 0xff
 800acd6:	dd06      	ble.n	800ace6 <netif_add+0x116>
 800acd8:	4b1e      	ldr	r3, [pc, #120]	@ (800ad54 <netif_add+0x184>)
 800acda:	f240 128d 	movw	r2, #397	@ 0x18d
 800acde:	4926      	ldr	r1, [pc, #152]	@ (800ad78 <netif_add+0x1a8>)
 800ace0:	481e      	ldr	r0, [pc, #120]	@ (800ad5c <netif_add+0x18c>)
 800ace2:	f00c fd8d 	bl	8017800 <iprintf>
        if (netif2->num == netif->num) {
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d108      	bne.n	800ad08 <netif_add+0x138>
          netif->num++;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800acfc:	3301      	adds	r3, #1
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800ad06:	e005      	b.n	800ad14 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	617b      	str	r3, [r7, #20]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1d0      	bne.n	800acb6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1be      	bne.n	800ac98 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ad20:	2bfe      	cmp	r3, #254	@ 0xfe
 800ad22:	d103      	bne.n	800ad2c <netif_add+0x15c>
    netif_num = 0;
 800ad24:	4b11      	ldr	r3, [pc, #68]	@ (800ad6c <netif_add+0x19c>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	e006      	b.n	800ad3a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ad32:	3301      	adds	r3, #1
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	4b0d      	ldr	r3, [pc, #52]	@ (800ad6c <netif_add+0x19c>)
 800ad38:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ad3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad70 <netif_add+0x1a0>)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ad42:	4a0b      	ldr	r2, [pc, #44]	@ (800ad70 <netif_add+0x1a0>)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ad48:	68fb      	ldr	r3, [r7, #12]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	0801a2c8 	.word	0x0801a2c8
 800ad58:	0801a35c 	.word	0x0801a35c
 800ad5c:	0801a318 	.word	0x0801a318
 800ad60:	0801a378 	.word	0x0801a378
 800ad64:	0802047c 	.word	0x0802047c
 800ad68:	0800b193 	.word	0x0800b193
 800ad6c:	20008fa4 	.word	0x20008fa4
 800ad70:	20008f9c 	.word	0x20008f9c
 800ad74:	0801a39c 	.word	0x0801a39c
 800ad78:	0801a3b0 	.word	0x0801a3b0

0800ad7c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f002 fdff 	bl	800d98c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f007 fe37 	bl	8012a04 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
	...

0800ada0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d106      	bne.n	800adc0 <netif_do_set_ipaddr+0x20>
 800adb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae28 <netif_do_set_ipaddr+0x88>)
 800adb4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800adb8:	491c      	ldr	r1, [pc, #112]	@ (800ae2c <netif_do_set_ipaddr+0x8c>)
 800adba:	481d      	ldr	r0, [pc, #116]	@ (800ae30 <netif_do_set_ipaddr+0x90>)
 800adbc:	f00c fd20 	bl	8017800 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d106      	bne.n	800add4 <netif_do_set_ipaddr+0x34>
 800adc6:	4b18      	ldr	r3, [pc, #96]	@ (800ae28 <netif_do_set_ipaddr+0x88>)
 800adc8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800adcc:	4917      	ldr	r1, [pc, #92]	@ (800ae2c <netif_do_set_ipaddr+0x8c>)
 800adce:	4818      	ldr	r0, [pc, #96]	@ (800ae30 <netif_do_set_ipaddr+0x90>)
 800add0:	f00c fd16 	bl	8017800 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3304      	adds	r3, #4
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d01c      	beq.n	800ae1c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3304      	adds	r3, #4
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800adf2:	f107 0314 	add.w	r3, r7, #20
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff ffbf 	bl	800ad7c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <netif_do_set_ipaddr+0x6a>
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	e000      	b.n	800ae0c <netif_do_set_ipaddr+0x6c>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ae10:	2101      	movs	r1, #1
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f000 f8d2 	bl	800afbc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e000      	b.n	800ae1e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	0801a2c8 	.word	0x0801a2c8
 800ae2c:	0801a3e0 	.word	0x0801a3e0
 800ae30:	0801a318 	.word	0x0801a318

0800ae34 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3308      	adds	r3, #8
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d00a      	beq.n	800ae64 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <netif_do_set_netmask+0x26>
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	e000      	b.n	800ae5c <netif_do_set_netmask+0x28>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ae60:	2301      	movs	r3, #1
 800ae62:	e000      	b.n	800ae66 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	60f8      	str	r0, [r7, #12]
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	330c      	adds	r3, #12
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d00a      	beq.n	800aea2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <netif_do_set_gw+0x26>
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	e000      	b.n	800ae9a <netif_do_set_gw+0x28>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aecc:	4b1c      	ldr	r3, [pc, #112]	@ (800af40 <netif_set_addr+0x90>)
 800aece:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aed6:	4b1a      	ldr	r3, [pc, #104]	@ (800af40 <netif_set_addr+0x90>)
 800aed8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aee0:	4b17      	ldr	r3, [pc, #92]	@ (800af40 <netif_set_addr+0x90>)
 800aee2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d003      	beq.n	800aef2 <netif_set_addr+0x42>
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <netif_set_addr+0x46>
 800aef2:	2301      	movs	r3, #1
 800aef4:	e000      	b.n	800aef8 <netif_set_addr+0x48>
 800aef6:	2300      	movs	r3, #0
 800aef8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d006      	beq.n	800af0e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af00:	f107 0310 	add.w	r3, r7, #16
 800af04:	461a      	mov	r2, r3
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f7ff ff49 	bl	800ada0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800af0e:	69fa      	ldr	r2, [r7, #28]
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff ff8e 	bl	800ae34 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7ff ffa8 	bl	800ae72 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af28:	f107 0310 	add.w	r3, r7, #16
 800af2c:	461a      	mov	r2, r3
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7ff ff35 	bl	800ada0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800af36:	bf00      	nop
 800af38:	3720      	adds	r7, #32
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	0802047c 	.word	0x0802047c

0800af44 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800af4c:	4a04      	ldr	r2, [pc, #16]	@ (800af60 <netif_set_default+0x1c>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800af52:	bf00      	nop
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	20008fa0 	.word	0x20008fa0

0800af64 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d107      	bne.n	800af82 <netif_set_up+0x1e>
 800af72:	4b0f      	ldr	r3, [pc, #60]	@ (800afb0 <netif_set_up+0x4c>)
 800af74:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800af78:	490e      	ldr	r1, [pc, #56]	@ (800afb4 <netif_set_up+0x50>)
 800af7a:	480f      	ldr	r0, [pc, #60]	@ (800afb8 <netif_set_up+0x54>)
 800af7c:	f00c fc40 	bl	8017800 <iprintf>
 800af80:	e013      	b.n	800afaa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10c      	bne.n	800afaa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800af96:	f043 0301 	orr.w	r3, r3, #1
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800afa2:	2103      	movs	r1, #3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f809 	bl	800afbc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	0801a2c8 	.word	0x0801a2c8
 800afb4:	0801a450 	.word	0x0801a450
 800afb8:	0801a318 	.word	0x0801a318

0800afbc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	460b      	mov	r3, r1
 800afc6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <netif_issue_reports+0x20>
 800afce:	4b18      	ldr	r3, [pc, #96]	@ (800b030 <netif_issue_reports+0x74>)
 800afd0:	f240 326d 	movw	r2, #877	@ 0x36d
 800afd4:	4917      	ldr	r1, [pc, #92]	@ (800b034 <netif_issue_reports+0x78>)
 800afd6:	4818      	ldr	r0, [pc, #96]	@ (800b038 <netif_issue_reports+0x7c>)
 800afd8:	f00c fc12 	bl	8017800 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800afe2:	f003 0304 	and.w	r3, r3, #4
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d01e      	beq.n	800b028 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800aff0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d017      	beq.n	800b028 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aff8:	78fb      	ldrb	r3, [r7, #3]
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d013      	beq.n	800b02a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3304      	adds	r3, #4
 800b006:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00e      	beq.n	800b02a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b012:	f003 0308 	and.w	r3, r3, #8
 800b016:	2b00      	cmp	r3, #0
 800b018:	d007      	beq.n	800b02a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3304      	adds	r3, #4
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f00a faeb 	bl	80155fc <etharp_request>
 800b026:	e000      	b.n	800b02a <netif_issue_reports+0x6e>
    return;
 800b028:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	0801a2c8 	.word	0x0801a2c8
 800b034:	0801a46c 	.word	0x0801a46c
 800b038:	0801a318 	.word	0x0801a318

0800b03c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d107      	bne.n	800b05a <netif_set_down+0x1e>
 800b04a:	4b12      	ldr	r3, [pc, #72]	@ (800b094 <netif_set_down+0x58>)
 800b04c:	f240 329b 	movw	r2, #923	@ 0x39b
 800b050:	4911      	ldr	r1, [pc, #68]	@ (800b098 <netif_set_down+0x5c>)
 800b052:	4812      	ldr	r0, [pc, #72]	@ (800b09c <netif_set_down+0x60>)
 800b054:	f00c fbd4 	bl	8017800 <iprintf>
 800b058:	e019      	b.n	800b08e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d012      	beq.n	800b08e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b06e:	f023 0301 	bic.w	r3, r3, #1
 800b072:	b2da      	uxtb	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b080:	f003 0308 	and.w	r3, r3, #8
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f009 fe71 	bl	8014d70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	0801a2c8 	.word	0x0801a2c8
 800b098:	0801a490 	.word	0x0801a490
 800b09c:	0801a318 	.word	0x0801a318

0800b0a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d107      	bne.n	800b0be <netif_set_link_up+0x1e>
 800b0ae:	4b15      	ldr	r3, [pc, #84]	@ (800b104 <netif_set_link_up+0x64>)
 800b0b0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b0b4:	4914      	ldr	r1, [pc, #80]	@ (800b108 <netif_set_link_up+0x68>)
 800b0b6:	4815      	ldr	r0, [pc, #84]	@ (800b10c <netif_set_link_up+0x6c>)
 800b0b8:	f00c fba2 	bl	8017800 <iprintf>
 800b0bc:	e01e      	b.n	800b0fc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b0c4:	f003 0304 	and.w	r3, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d117      	bne.n	800b0fc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b0d2:	f043 0304 	orr.w	r3, r3, #4
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f008 f8bc 	bl	801325c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b0e4:	2103      	movs	r1, #3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff ff68 	bl	800afbc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <netif_set_link_up+0x5c>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	0801a2c8 	.word	0x0801a2c8
 800b108:	0801a4b0 	.word	0x0801a4b0
 800b10c:	0801a318 	.word	0x0801a318

0800b110 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d107      	bne.n	800b12e <netif_set_link_down+0x1e>
 800b11e:	4b11      	ldr	r3, [pc, #68]	@ (800b164 <netif_set_link_down+0x54>)
 800b120:	f240 4206 	movw	r2, #1030	@ 0x406
 800b124:	4910      	ldr	r1, [pc, #64]	@ (800b168 <netif_set_link_down+0x58>)
 800b126:	4811      	ldr	r0, [pc, #68]	@ (800b16c <netif_set_link_down+0x5c>)
 800b128:	f00c fb6a 	bl	8017800 <iprintf>
 800b12c:	e017      	b.n	800b15e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d010      	beq.n	800b15e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b142:	f023 0304 	bic.w	r3, r3, #4
 800b146:	b2da      	uxtb	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <netif_set_link_down+0x4e>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	0801a2c8 	.word	0x0801a2c8
 800b168:	0801a4d4 	.word	0x0801a4d4
 800b16c:	0801a318 	.word	0x0801a318

0800b170 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	61da      	str	r2, [r3, #28]
  }
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	60f8      	str	r0, [r7, #12]
 800b19a:	60b9      	str	r1, [r7, #8]
 800b19c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b19e:	f06f 030b 	mvn.w	r3, #11
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
	...

0800b1b0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d013      	beq.n	800b1e8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b1c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f8 <netif_get_by_index+0x48>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	e00c      	b.n	800b1e2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	79fa      	ldrb	r2, [r7, #7]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d101      	bne.n	800b1dc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	e006      	b.n	800b1ea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1ef      	bne.n	800b1c8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	20008f9c 	.word	0x20008f9c

0800b1fc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b202:	4b0c      	ldr	r3, [pc, #48]	@ (800b234 <pbuf_free_ooseq+0x38>)
 800b204:	2200      	movs	r2, #0
 800b206:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b208:	4b0b      	ldr	r3, [pc, #44]	@ (800b238 <pbuf_free_ooseq+0x3c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	607b      	str	r3, [r7, #4]
 800b20e:	e00a      	b.n	800b226 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f002 fbf5 	bl	800da08 <tcp_free_ooseq>
      return;
 800b21e:	e005      	b.n	800b22c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	607b      	str	r3, [r7, #4]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1f1      	bne.n	800b210 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	20008fa5 	.word	0x20008fa5
 800b238:	20008fb4 	.word	0x20008fb4

0800b23c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b240:	4b03      	ldr	r3, [pc, #12]	@ (800b250 <pbuf_pool_is_empty+0x14>)
 800b242:	2201      	movs	r2, #1
 800b244:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b246:	bf00      	nop
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	20008fa5 	.word	0x20008fa5

0800b254 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	4611      	mov	r1, r2
 800b260:	461a      	mov	r2, r3
 800b262:	460b      	mov	r3, r1
 800b264:	80fb      	strh	r3, [r7, #6]
 800b266:	4613      	mov	r3, r2
 800b268:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	88fa      	ldrh	r2, [r7, #6]
 800b27a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	88ba      	ldrh	r2, [r7, #4]
 800b280:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b282:	8b3b      	ldrh	r3, [r7, #24]
 800b284:	b2da      	uxtb	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	7f3a      	ldrb	r2, [r7, #28]
 800b28e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2201      	movs	r2, #1
 800b294:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	73da      	strb	r2, [r3, #15]
}
 800b29c:	bf00      	nop
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08c      	sub	sp, #48	@ 0x30
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	71fb      	strb	r3, [r7, #7]
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	80bb      	strh	r3, [r7, #4]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b2be:	887b      	ldrh	r3, [r7, #2]
 800b2c0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b2c4:	d07f      	beq.n	800b3c6 <pbuf_alloc+0x11e>
 800b2c6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b2ca:	f300 80c8 	bgt.w	800b45e <pbuf_alloc+0x1b6>
 800b2ce:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b2d2:	d010      	beq.n	800b2f6 <pbuf_alloc+0x4e>
 800b2d4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b2d8:	f300 80c1 	bgt.w	800b45e <pbuf_alloc+0x1b6>
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d002      	beq.n	800b2e6 <pbuf_alloc+0x3e>
 800b2e0:	2b41      	cmp	r3, #65	@ 0x41
 800b2e2:	f040 80bc 	bne.w	800b45e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b2e6:	887a      	ldrh	r2, [r7, #2]
 800b2e8:	88bb      	ldrh	r3, [r7, #4]
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	f000 f8d1 	bl	800b494 <pbuf_alloc_reference>
 800b2f2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b2f4:	e0bd      	b.n	800b472 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b2fe:	88bb      	ldrh	r3, [r7, #4]
 800b300:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b302:	2008      	movs	r0, #8
 800b304:	f7ff fbc2 	bl	800aa8c <memp_malloc>
 800b308:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d109      	bne.n	800b324 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b310:	f7ff ff94 	bl	800b23c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	2b00      	cmp	r3, #0
 800b318:	d002      	beq.n	800b320 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b31a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b31c:	f000 faa8 	bl	800b870 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	e0a7      	b.n	800b474 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b324:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b326:	3303      	adds	r3, #3
 800b328:	b29b      	uxth	r3, r3
 800b32a:	f023 0303 	bic.w	r3, r3, #3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b334:	b29b      	uxth	r3, r3
 800b336:	8b7a      	ldrh	r2, [r7, #26]
 800b338:	4293      	cmp	r3, r2
 800b33a:	bf28      	it	cs
 800b33c:	4613      	movcs	r3, r2
 800b33e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b340:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b342:	3310      	adds	r3, #16
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	4413      	add	r3, r2
 800b348:	3303      	adds	r3, #3
 800b34a:	f023 0303 	bic.w	r3, r3, #3
 800b34e:	4618      	mov	r0, r3
 800b350:	89f9      	ldrh	r1, [r7, #14]
 800b352:	8b7a      	ldrh	r2, [r7, #26]
 800b354:	2300      	movs	r3, #0
 800b356:	9301      	str	r3, [sp, #4]
 800b358:	887b      	ldrh	r3, [r7, #2]
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	460b      	mov	r3, r1
 800b35e:	4601      	mov	r1, r0
 800b360:	6938      	ldr	r0, [r7, #16]
 800b362:	f7ff ff77 	bl	800b254 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d006      	beq.n	800b380 <pbuf_alloc+0xd8>
 800b372:	4b42      	ldr	r3, [pc, #264]	@ (800b47c <pbuf_alloc+0x1d4>)
 800b374:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b378:	4941      	ldr	r1, [pc, #260]	@ (800b480 <pbuf_alloc+0x1d8>)
 800b37a:	4842      	ldr	r0, [pc, #264]	@ (800b484 <pbuf_alloc+0x1dc>)
 800b37c:	f00c fa40 	bl	8017800 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b380:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b382:	3303      	adds	r3, #3
 800b384:	f023 0303 	bic.w	r3, r3, #3
 800b388:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b38c:	d106      	bne.n	800b39c <pbuf_alloc+0xf4>
 800b38e:	4b3b      	ldr	r3, [pc, #236]	@ (800b47c <pbuf_alloc+0x1d4>)
 800b390:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b394:	493c      	ldr	r1, [pc, #240]	@ (800b488 <pbuf_alloc+0x1e0>)
 800b396:	483b      	ldr	r0, [pc, #236]	@ (800b484 <pbuf_alloc+0x1dc>)
 800b398:	f00c fa32 	bl	8017800 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d102      	bne.n	800b3a8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3a6:	e002      	b.n	800b3ae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b3b2:	8b7a      	ldrh	r2, [r7, #26]
 800b3b4:	89fb      	ldrh	r3, [r7, #14]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b3be:	8b7b      	ldrh	r3, [r7, #26]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d19e      	bne.n	800b302 <pbuf_alloc+0x5a>
      break;
 800b3c4:	e055      	b.n	800b472 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b3c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b3c8:	3303      	adds	r3, #3
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	f023 0303 	bic.w	r3, r3, #3
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	88bb      	ldrh	r3, [r7, #4]
 800b3d4:	3303      	adds	r3, #3
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	f023 0303 	bic.w	r3, r3, #3
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	4413      	add	r3, r2
 800b3e0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b3e2:	8b3b      	ldrh	r3, [r7, #24]
 800b3e4:	3310      	adds	r3, #16
 800b3e6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b3e8:	8b3a      	ldrh	r2, [r7, #24]
 800b3ea:	88bb      	ldrh	r3, [r7, #4]
 800b3ec:	3303      	adds	r3, #3
 800b3ee:	f023 0303 	bic.w	r3, r3, #3
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d306      	bcc.n	800b404 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b3f6:	8afa      	ldrh	r2, [r7, #22]
 800b3f8:	88bb      	ldrh	r3, [r7, #4]
 800b3fa:	3303      	adds	r3, #3
 800b3fc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b400:	429a      	cmp	r2, r3
 800b402:	d201      	bcs.n	800b408 <pbuf_alloc+0x160>
        return NULL;
 800b404:	2300      	movs	r3, #0
 800b406:	e035      	b.n	800b474 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b408:	8afb      	ldrh	r3, [r7, #22]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7ff f9ae 	bl	800a76c <mem_malloc>
 800b410:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <pbuf_alloc+0x174>
        return NULL;
 800b418:	2300      	movs	r3, #0
 800b41a:	e02b      	b.n	800b474 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b41c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b41e:	3310      	adds	r3, #16
 800b420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b422:	4413      	add	r3, r2
 800b424:	3303      	adds	r3, #3
 800b426:	f023 0303 	bic.w	r3, r3, #3
 800b42a:	4618      	mov	r0, r3
 800b42c:	88b9      	ldrh	r1, [r7, #4]
 800b42e:	88ba      	ldrh	r2, [r7, #4]
 800b430:	2300      	movs	r3, #0
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	887b      	ldrh	r3, [r7, #2]
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	460b      	mov	r3, r1
 800b43a:	4601      	mov	r1, r0
 800b43c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b43e:	f7ff ff09 	bl	800b254 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d010      	beq.n	800b470 <pbuf_alloc+0x1c8>
 800b44e:	4b0b      	ldr	r3, [pc, #44]	@ (800b47c <pbuf_alloc+0x1d4>)
 800b450:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b454:	490d      	ldr	r1, [pc, #52]	@ (800b48c <pbuf_alloc+0x1e4>)
 800b456:	480b      	ldr	r0, [pc, #44]	@ (800b484 <pbuf_alloc+0x1dc>)
 800b458:	f00c f9d2 	bl	8017800 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b45c:	e008      	b.n	800b470 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b45e:	4b07      	ldr	r3, [pc, #28]	@ (800b47c <pbuf_alloc+0x1d4>)
 800b460:	f240 1227 	movw	r2, #295	@ 0x127
 800b464:	490a      	ldr	r1, [pc, #40]	@ (800b490 <pbuf_alloc+0x1e8>)
 800b466:	4807      	ldr	r0, [pc, #28]	@ (800b484 <pbuf_alloc+0x1dc>)
 800b468:	f00c f9ca 	bl	8017800 <iprintf>
      return NULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e001      	b.n	800b474 <pbuf_alloc+0x1cc>
      break;
 800b470:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b474:	4618      	mov	r0, r3
 800b476:	3728      	adds	r7, #40	@ 0x28
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	0801a4f8 	.word	0x0801a4f8
 800b480:	0801a528 	.word	0x0801a528
 800b484:	0801a558 	.word	0x0801a558
 800b488:	0801a580 	.word	0x0801a580
 800b48c:	0801a5b4 	.word	0x0801a5b4
 800b490:	0801a5e0 	.word	0x0801a5e0

0800b494 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af02      	add	r7, sp, #8
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	807b      	strh	r3, [r7, #2]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b4a4:	883b      	ldrh	r3, [r7, #0]
 800b4a6:	2b41      	cmp	r3, #65	@ 0x41
 800b4a8:	d009      	beq.n	800b4be <pbuf_alloc_reference+0x2a>
 800b4aa:	883b      	ldrh	r3, [r7, #0]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d006      	beq.n	800b4be <pbuf_alloc_reference+0x2a>
 800b4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f0 <pbuf_alloc_reference+0x5c>)
 800b4b2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b4b6:	490f      	ldr	r1, [pc, #60]	@ (800b4f4 <pbuf_alloc_reference+0x60>)
 800b4b8:	480f      	ldr	r0, [pc, #60]	@ (800b4f8 <pbuf_alloc_reference+0x64>)
 800b4ba:	f00c f9a1 	bl	8017800 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b4be:	2007      	movs	r0, #7
 800b4c0:	f7ff fae4 	bl	800aa8c <memp_malloc>
 800b4c4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	e00b      	b.n	800b4e8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b4d0:	8879      	ldrh	r1, [r7, #2]
 800b4d2:	887a      	ldrh	r2, [r7, #2]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	883b      	ldrh	r3, [r7, #0]
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	6879      	ldr	r1, [r7, #4]
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f7ff feb7 	bl	800b254 <pbuf_init_alloced_pbuf>
  return p;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	0801a4f8 	.word	0x0801a4f8
 800b4f4:	0801a5fc 	.word	0x0801a5fc
 800b4f8:	0801a558 	.word	0x0801a558

0800b4fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b088      	sub	sp, #32
 800b500:	af02      	add	r7, sp, #8
 800b502:	607b      	str	r3, [r7, #4]
 800b504:	4603      	mov	r3, r0
 800b506:	73fb      	strb	r3, [r7, #15]
 800b508:	460b      	mov	r3, r1
 800b50a:	81bb      	strh	r3, [r7, #12]
 800b50c:	4613      	mov	r3, r2
 800b50e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b514:	8a7b      	ldrh	r3, [r7, #18]
 800b516:	3303      	adds	r3, #3
 800b518:	f023 0203 	bic.w	r2, r3, #3
 800b51c:	89bb      	ldrh	r3, [r7, #12]
 800b51e:	441a      	add	r2, r3
 800b520:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b522:	429a      	cmp	r2, r3
 800b524:	d901      	bls.n	800b52a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b526:	2300      	movs	r3, #0
 800b528:	e018      	b.n	800b55c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b52a:	6a3b      	ldr	r3, [r7, #32]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d007      	beq.n	800b540 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b530:	8a7b      	ldrh	r3, [r7, #18]
 800b532:	3303      	adds	r3, #3
 800b534:	f023 0303 	bic.w	r3, r3, #3
 800b538:	6a3a      	ldr	r2, [r7, #32]
 800b53a:	4413      	add	r3, r2
 800b53c:	617b      	str	r3, [r7, #20]
 800b53e:	e001      	b.n	800b544 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	89b9      	ldrh	r1, [r7, #12]
 800b548:	89ba      	ldrh	r2, [r7, #12]
 800b54a:	2302      	movs	r3, #2
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	897b      	ldrh	r3, [r7, #10]
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	460b      	mov	r3, r1
 800b554:	6979      	ldr	r1, [r7, #20]
 800b556:	f7ff fe7d 	bl	800b254 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b55a:	687b      	ldr	r3, [r7, #4]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <pbuf_realloc+0x20>
 800b576:	4b3a      	ldr	r3, [pc, #232]	@ (800b660 <pbuf_realloc+0xfc>)
 800b578:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b57c:	4939      	ldr	r1, [pc, #228]	@ (800b664 <pbuf_realloc+0x100>)
 800b57e:	483a      	ldr	r0, [pc, #232]	@ (800b668 <pbuf_realloc+0x104>)
 800b580:	f00c f93e 	bl	8017800 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	891b      	ldrh	r3, [r3, #8]
 800b588:	887a      	ldrh	r2, [r7, #2]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d263      	bcs.n	800b656 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	891a      	ldrh	r2, [r3, #8]
 800b592:	887b      	ldrh	r3, [r7, #2]
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b598:	887b      	ldrh	r3, [r7, #2]
 800b59a:	817b      	strh	r3, [r7, #10]
  q = p;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b5a0:	e018      	b.n	800b5d4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	895b      	ldrh	r3, [r3, #10]
 800b5a6:	897a      	ldrh	r2, [r7, #10]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	891a      	ldrh	r2, [r3, #8]
 800b5b0:	893b      	ldrh	r3, [r7, #8]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <pbuf_realloc+0x70>
 800b5c6:	4b26      	ldr	r3, [pc, #152]	@ (800b660 <pbuf_realloc+0xfc>)
 800b5c8:	f240 12af 	movw	r2, #431	@ 0x1af
 800b5cc:	4927      	ldr	r1, [pc, #156]	@ (800b66c <pbuf_realloc+0x108>)
 800b5ce:	4826      	ldr	r0, [pc, #152]	@ (800b668 <pbuf_realloc+0x104>)
 800b5d0:	f00c f916 	bl	8017800 <iprintf>
  while (rem_len > q->len) {
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	895b      	ldrh	r3, [r3, #10]
 800b5d8:	897a      	ldrh	r2, [r7, #10]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d8e1      	bhi.n	800b5a2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	7b1b      	ldrb	r3, [r3, #12]
 800b5e2:	f003 030f 	and.w	r3, r3, #15
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d121      	bne.n	800b62e <pbuf_realloc+0xca>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	895b      	ldrh	r3, [r3, #10]
 800b5ee:	897a      	ldrh	r2, [r7, #10]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d01c      	beq.n	800b62e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	7b5b      	ldrb	r3, [r3, #13]
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d116      	bne.n	800b62e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	b29a      	uxth	r2, r3
 800b60a:	897b      	ldrh	r3, [r7, #10]
 800b60c:	4413      	add	r3, r2
 800b60e:	b29b      	uxth	r3, r3
 800b610:	4619      	mov	r1, r3
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f7fe ffae 	bl	800a574 <mem_trim>
 800b618:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d106      	bne.n	800b62e <pbuf_realloc+0xca>
 800b620:	4b0f      	ldr	r3, [pc, #60]	@ (800b660 <pbuf_realloc+0xfc>)
 800b622:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b626:	4912      	ldr	r1, [pc, #72]	@ (800b670 <pbuf_realloc+0x10c>)
 800b628:	480f      	ldr	r0, [pc, #60]	@ (800b668 <pbuf_realloc+0x104>)
 800b62a:	f00c f8e9 	bl	8017800 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	897a      	ldrh	r2, [r7, #10]
 800b632:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	895a      	ldrh	r2, [r3, #10]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d004      	beq.n	800b64e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 f911 	bl	800b870 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	e000      	b.n	800b658 <pbuf_realloc+0xf4>
    return;
 800b656:	bf00      	nop

}
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	0801a4f8 	.word	0x0801a4f8
 800b664:	0801a610 	.word	0x0801a610
 800b668:	0801a558 	.word	0x0801a558
 800b66c:	0801a628 	.word	0x0801a628
 800b670:	0801a640 	.word	0x0801a640

0800b674 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d106      	bne.n	800b696 <pbuf_add_header_impl+0x22>
 800b688:	4b2b      	ldr	r3, [pc, #172]	@ (800b738 <pbuf_add_header_impl+0xc4>)
 800b68a:	f240 12df 	movw	r2, #479	@ 0x1df
 800b68e:	492b      	ldr	r1, [pc, #172]	@ (800b73c <pbuf_add_header_impl+0xc8>)
 800b690:	482b      	ldr	r0, [pc, #172]	@ (800b740 <pbuf_add_header_impl+0xcc>)
 800b692:	f00c f8b5 	bl	8017800 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <pbuf_add_header_impl+0x30>
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6a2:	d301      	bcc.n	800b6a8 <pbuf_add_header_impl+0x34>
    return 1;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e043      	b.n	800b730 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <pbuf_add_header_impl+0x3e>
    return 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e03e      	b.n	800b730 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	891a      	ldrh	r2, [r3, #8]
 800b6ba:	8a7b      	ldrh	r3, [r7, #18]
 800b6bc:	4413      	add	r3, r2
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	8a7a      	ldrh	r2, [r7, #18]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d901      	bls.n	800b6ca <pbuf_add_header_impl+0x56>
    return 1;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e032      	b.n	800b730 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	7b1b      	ldrb	r3, [r3, #12]
 800b6ce:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b6d0:	8a3b      	ldrh	r3, [r7, #16]
 800b6d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00c      	beq.n	800b6f4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	425b      	negs	r3, r3
 800b6e2:	4413      	add	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3310      	adds	r3, #16
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d20d      	bcs.n	800b70c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e01d      	b.n	800b730 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b6f4:	79fb      	ldrb	r3, [r7, #7]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d006      	beq.n	800b708 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	425b      	negs	r3, r3
 800b702:	4413      	add	r3, r2
 800b704:	617b      	str	r3, [r7, #20]
 800b706:	e001      	b.n	800b70c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b708:	2301      	movs	r3, #1
 800b70a:	e011      	b.n	800b730 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	895a      	ldrh	r2, [r3, #10]
 800b716:	8a7b      	ldrh	r3, [r7, #18]
 800b718:	4413      	add	r3, r2
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	891a      	ldrh	r2, [r3, #8]
 800b724:	8a7b      	ldrh	r3, [r7, #18]
 800b726:	4413      	add	r3, r2
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	0801a4f8 	.word	0x0801a4f8
 800b73c:	0801a65c 	.word	0x0801a65c
 800b740:	0801a558 	.word	0x0801a558

0800b744 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b74e:	2200      	movs	r2, #0
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff ff8e 	bl	800b674 <pbuf_add_header_impl>
 800b758:	4603      	mov	r3, r0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
	...

0800b764 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d106      	bne.n	800b782 <pbuf_remove_header+0x1e>
 800b774:	4b20      	ldr	r3, [pc, #128]	@ (800b7f8 <pbuf_remove_header+0x94>)
 800b776:	f240 224b 	movw	r2, #587	@ 0x24b
 800b77a:	4920      	ldr	r1, [pc, #128]	@ (800b7fc <pbuf_remove_header+0x98>)
 800b77c:	4820      	ldr	r0, [pc, #128]	@ (800b800 <pbuf_remove_header+0x9c>)
 800b77e:	f00c f83f 	bl	8017800 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d003      	beq.n	800b790 <pbuf_remove_header+0x2c>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b78e:	d301      	bcc.n	800b794 <pbuf_remove_header+0x30>
    return 1;
 800b790:	2301      	movs	r3, #1
 800b792:	e02c      	b.n	800b7ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <pbuf_remove_header+0x3a>
    return 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	e027      	b.n	800b7ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	895b      	ldrh	r3, [r3, #10]
 800b7a6:	89fa      	ldrh	r2, [r7, #14]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d908      	bls.n	800b7be <pbuf_remove_header+0x5a>
 800b7ac:	4b12      	ldr	r3, [pc, #72]	@ (800b7f8 <pbuf_remove_header+0x94>)
 800b7ae:	f240 2255 	movw	r2, #597	@ 0x255
 800b7b2:	4914      	ldr	r1, [pc, #80]	@ (800b804 <pbuf_remove_header+0xa0>)
 800b7b4:	4812      	ldr	r0, [pc, #72]	@ (800b800 <pbuf_remove_header+0x9c>)
 800b7b6:	f00c f823 	bl	8017800 <iprintf>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e017      	b.n	800b7ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	441a      	add	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	895a      	ldrh	r2, [r3, #10]
 800b7d4:	89fb      	ldrh	r3, [r7, #14]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	891a      	ldrh	r2, [r3, #8]
 800b7e2:	89fb      	ldrh	r3, [r7, #14]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0801a4f8 	.word	0x0801a4f8
 800b7fc:	0801a65c 	.word	0x0801a65c
 800b800:	0801a558 	.word	0x0801a558
 800b804:	0801a668 	.word	0x0801a668

0800b808 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	460b      	mov	r3, r1
 800b812:	807b      	strh	r3, [r7, #2]
 800b814:	4613      	mov	r3, r2
 800b816:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b818:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	da08      	bge.n	800b832 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b824:	425b      	negs	r3, r3
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff ff9b 	bl	800b764 <pbuf_remove_header>
 800b82e:	4603      	mov	r3, r0
 800b830:	e007      	b.n	800b842 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b832:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b836:	787a      	ldrb	r2, [r7, #1]
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7ff ff1a 	bl	800b674 <pbuf_add_header_impl>
 800b840:	4603      	mov	r3, r0
  }
}
 800b842:	4618      	mov	r0, r3
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b082      	sub	sp, #8
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	460b      	mov	r3, r1
 800b854:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b856:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b85a:	2201      	movs	r2, #1
 800b85c:	4619      	mov	r1, r3
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7ff ffd2 	bl	800b808 <pbuf_header_impl>
 800b864:	4603      	mov	r3, r0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10b      	bne.n	800b896 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d106      	bne.n	800b892 <pbuf_free+0x22>
 800b884:	4b38      	ldr	r3, [pc, #224]	@ (800b968 <pbuf_free+0xf8>)
 800b886:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b88a:	4938      	ldr	r1, [pc, #224]	@ (800b96c <pbuf_free+0xfc>)
 800b88c:	4838      	ldr	r0, [pc, #224]	@ (800b970 <pbuf_free+0x100>)
 800b88e:	f00b ffb7 	bl	8017800 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b892:	2300      	movs	r3, #0
 800b894:	e063      	b.n	800b95e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b89a:	e05c      	b.n	800b956 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	7b9b      	ldrb	r3, [r3, #14]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d106      	bne.n	800b8b2 <pbuf_free+0x42>
 800b8a4:	4b30      	ldr	r3, [pc, #192]	@ (800b968 <pbuf_free+0xf8>)
 800b8a6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b8aa:	4932      	ldr	r1, [pc, #200]	@ (800b974 <pbuf_free+0x104>)
 800b8ac:	4830      	ldr	r0, [pc, #192]	@ (800b970 <pbuf_free+0x100>)
 800b8ae:	f00b ffa7 	bl	8017800 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	7b9b      	ldrb	r3, [r3, #14]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	739a      	strb	r2, [r3, #14]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	7b9b      	ldrb	r3, [r3, #14]
 800b8c2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b8c4:	7dbb      	ldrb	r3, [r7, #22]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d143      	bne.n	800b952 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	7b1b      	ldrb	r3, [r3, #12]
 800b8d4:	f003 030f 	and.w	r3, r3, #15
 800b8d8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	7b5b      	ldrb	r3, [r3, #13]
 800b8de:	f003 0302 	and.w	r3, r3, #2
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d011      	beq.n	800b90a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <pbuf_free+0x90>
 800b8f2:	4b1d      	ldr	r3, [pc, #116]	@ (800b968 <pbuf_free+0xf8>)
 800b8f4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b8f8:	491f      	ldr	r1, [pc, #124]	@ (800b978 <pbuf_free+0x108>)
 800b8fa:	481d      	ldr	r0, [pc, #116]	@ (800b970 <pbuf_free+0x100>)
 800b8fc:	f00b ff80 	bl	8017800 <iprintf>
        pc->custom_free_function(p);
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	4798      	blx	r3
 800b908:	e01d      	b.n	800b946 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d104      	bne.n	800b91a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	2008      	movs	r0, #8
 800b914:	f7ff f92a 	bl	800ab6c <memp_free>
 800b918:	e015      	b.n	800b946 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d104      	bne.n	800b92a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	2007      	movs	r0, #7
 800b924:	f7ff f922 	bl	800ab6c <memp_free>
 800b928:	e00d      	b.n	800b946 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d103      	bne.n	800b938 <pbuf_free+0xc8>
          mem_free(p);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f7fe fdb5 	bl	800a4a0 <mem_free>
 800b936:	e006      	b.n	800b946 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b938:	4b0b      	ldr	r3, [pc, #44]	@ (800b968 <pbuf_free+0xf8>)
 800b93a:	f240 320f 	movw	r2, #783	@ 0x30f
 800b93e:	490f      	ldr	r1, [pc, #60]	@ (800b97c <pbuf_free+0x10c>)
 800b940:	480b      	ldr	r0, [pc, #44]	@ (800b970 <pbuf_free+0x100>)
 800b942:	f00b ff5d 	bl	8017800 <iprintf>
        }
      }
      count++;
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	3301      	adds	r3, #1
 800b94a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	607b      	str	r3, [r7, #4]
 800b950:	e001      	b.n	800b956 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b952:	2300      	movs	r3, #0
 800b954:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d19f      	bne.n	800b89c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3718      	adds	r7, #24
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	0801a4f8 	.word	0x0801a4f8
 800b96c:	0801a65c 	.word	0x0801a65c
 800b970:	0801a558 	.word	0x0801a558
 800b974:	0801a688 	.word	0x0801a688
 800b978:	0801a6a0 	.word	0x0801a6a0
 800b97c:	0801a6c4 	.word	0x0801a6c4

0800b980 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b988:	2300      	movs	r3, #0
 800b98a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b98c:	e005      	b.n	800b99a <pbuf_clen+0x1a>
    ++len;
 800b98e:	89fb      	ldrh	r3, [r7, #14]
 800b990:	3301      	adds	r3, #1
 800b992:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1f6      	bne.n	800b98e <pbuf_clen+0xe>
  }
  return len;
 800b9a0:	89fb      	ldrh	r3, [r7, #14]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
	...

0800b9b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d010      	beq.n	800b9e0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	7b9b      	ldrb	r3, [r3, #14]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7b9b      	ldrb	r3, [r3, #14]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d106      	bne.n	800b9e0 <pbuf_ref+0x30>
 800b9d2:	4b05      	ldr	r3, [pc, #20]	@ (800b9e8 <pbuf_ref+0x38>)
 800b9d4:	f240 3242 	movw	r2, #834	@ 0x342
 800b9d8:	4904      	ldr	r1, [pc, #16]	@ (800b9ec <pbuf_ref+0x3c>)
 800b9da:	4805      	ldr	r0, [pc, #20]	@ (800b9f0 <pbuf_ref+0x40>)
 800b9dc:	f00b ff10 	bl	8017800 <iprintf>
  }
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	0801a4f8 	.word	0x0801a4f8
 800b9ec:	0801a6d8 	.word	0x0801a6d8
 800b9f0:	0801a558 	.word	0x0801a558

0800b9f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <pbuf_cat+0x16>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d107      	bne.n	800ba1a <pbuf_cat+0x26>
 800ba0a:	4b20      	ldr	r3, [pc, #128]	@ (800ba8c <pbuf_cat+0x98>)
 800ba0c:	f240 3259 	movw	r2, #857	@ 0x359
 800ba10:	491f      	ldr	r1, [pc, #124]	@ (800ba90 <pbuf_cat+0x9c>)
 800ba12:	4820      	ldr	r0, [pc, #128]	@ (800ba94 <pbuf_cat+0xa0>)
 800ba14:	f00b fef4 	bl	8017800 <iprintf>
 800ba18:	e034      	b.n	800ba84 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	e00a      	b.n	800ba36 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	891a      	ldrh	r2, [r3, #8]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	891b      	ldrh	r3, [r3, #8]
 800ba28:	4413      	add	r3, r2
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1f0      	bne.n	800ba20 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	891a      	ldrh	r2, [r3, #8]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	895b      	ldrh	r3, [r3, #10]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d006      	beq.n	800ba58 <pbuf_cat+0x64>
 800ba4a:	4b10      	ldr	r3, [pc, #64]	@ (800ba8c <pbuf_cat+0x98>)
 800ba4c:	f240 3262 	movw	r2, #866	@ 0x362
 800ba50:	4911      	ldr	r1, [pc, #68]	@ (800ba98 <pbuf_cat+0xa4>)
 800ba52:	4810      	ldr	r0, [pc, #64]	@ (800ba94 <pbuf_cat+0xa0>)
 800ba54:	f00b fed4 	bl	8017800 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d006      	beq.n	800ba6e <pbuf_cat+0x7a>
 800ba60:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <pbuf_cat+0x98>)
 800ba62:	f240 3263 	movw	r2, #867	@ 0x363
 800ba66:	490d      	ldr	r1, [pc, #52]	@ (800ba9c <pbuf_cat+0xa8>)
 800ba68:	480a      	ldr	r0, [pc, #40]	@ (800ba94 <pbuf_cat+0xa0>)
 800ba6a:	f00b fec9 	bl	8017800 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	891a      	ldrh	r2, [r3, #8]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	891b      	ldrh	r3, [r3, #8]
 800ba76:	4413      	add	r3, r2
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	0801a4f8 	.word	0x0801a4f8
 800ba90:	0801a6ec 	.word	0x0801a6ec
 800ba94:	0801a558 	.word	0x0801a558
 800ba98:	0801a724 	.word	0x0801a724
 800ba9c:	0801a754 	.word	0x0801a754

0800baa0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7ff ffa1 	bl	800b9f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bab2:	6838      	ldr	r0, [r7, #0]
 800bab4:	f7ff ff7c 	bl	800b9b0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bab8:	bf00      	nop
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800baca:	2300      	movs	r3, #0
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	2300      	movs	r3, #0
 800bad0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d008      	beq.n	800baea <pbuf_copy+0x2a>
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d005      	beq.n	800baea <pbuf_copy+0x2a>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	891a      	ldrh	r2, [r3, #8]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	891b      	ldrh	r3, [r3, #8]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d209      	bcs.n	800bafe <pbuf_copy+0x3e>
 800baea:	4b57      	ldr	r3, [pc, #348]	@ (800bc48 <pbuf_copy+0x188>)
 800baec:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800baf0:	4956      	ldr	r1, [pc, #344]	@ (800bc4c <pbuf_copy+0x18c>)
 800baf2:	4857      	ldr	r0, [pc, #348]	@ (800bc50 <pbuf_copy+0x190>)
 800baf4:	f00b fe84 	bl	8017800 <iprintf>
 800baf8:	f06f 030f 	mvn.w	r3, #15
 800bafc:	e09f      	b.n	800bc3e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	895b      	ldrh	r3, [r3, #10]
 800bb02:	461a      	mov	r2, r3
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	1ad2      	subs	r2, r2, r3
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	895b      	ldrh	r3, [r3, #10]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	1acb      	subs	r3, r1, r3
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d306      	bcc.n	800bb24 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	895b      	ldrh	r3, [r3, #10]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	60fb      	str	r3, [r7, #12]
 800bb22:	e005      	b.n	800bb30 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	895b      	ldrh	r3, [r3, #10]
 800bb28:	461a      	mov	r2, r3
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	18d0      	adds	r0, r2, r3
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	4413      	add	r3, r2
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	4619      	mov	r1, r3
 800bb44:	f00b ff93 	bl	8017a6e <memcpy>
    offset_to += len;
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	4413      	add	r3, r2
 800bb56:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	895b      	ldrh	r3, [r3, #10]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d906      	bls.n	800bb72 <pbuf_copy+0xb2>
 800bb64:	4b38      	ldr	r3, [pc, #224]	@ (800bc48 <pbuf_copy+0x188>)
 800bb66:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800bb6a:	493a      	ldr	r1, [pc, #232]	@ (800bc54 <pbuf_copy+0x194>)
 800bb6c:	4838      	ldr	r0, [pc, #224]	@ (800bc50 <pbuf_copy+0x190>)
 800bb6e:	f00b fe47 	bl	8017800 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	895b      	ldrh	r3, [r3, #10]
 800bb76:	461a      	mov	r2, r3
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d906      	bls.n	800bb8c <pbuf_copy+0xcc>
 800bb7e:	4b32      	ldr	r3, [pc, #200]	@ (800bc48 <pbuf_copy+0x188>)
 800bb80:	f240 32da 	movw	r2, #986	@ 0x3da
 800bb84:	4934      	ldr	r1, [pc, #208]	@ (800bc58 <pbuf_copy+0x198>)
 800bb86:	4832      	ldr	r0, [pc, #200]	@ (800bc50 <pbuf_copy+0x190>)
 800bb88:	f00b fe3a 	bl	8017800 <iprintf>
    if (offset_from >= p_from->len) {
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	895b      	ldrh	r3, [r3, #10]
 800bb90:	461a      	mov	r2, r3
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d304      	bcc.n	800bba2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	895b      	ldrh	r3, [r3, #10]
 800bba6:	461a      	mov	r2, r3
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d114      	bne.n	800bbd8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10c      	bne.n	800bbd8 <pbuf_copy+0x118>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d009      	beq.n	800bbd8 <pbuf_copy+0x118>
 800bbc4:	4b20      	ldr	r3, [pc, #128]	@ (800bc48 <pbuf_copy+0x188>)
 800bbc6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bbca:	4924      	ldr	r1, [pc, #144]	@ (800bc5c <pbuf_copy+0x19c>)
 800bbcc:	4820      	ldr	r0, [pc, #128]	@ (800bc50 <pbuf_copy+0x190>)
 800bbce:	f00b fe17 	bl	8017800 <iprintf>
 800bbd2:	f06f 030f 	mvn.w	r3, #15
 800bbd6:	e032      	b.n	800bc3e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d013      	beq.n	800bc06 <pbuf_copy+0x146>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	895a      	ldrh	r2, [r3, #10]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	891b      	ldrh	r3, [r3, #8]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d10d      	bne.n	800bc06 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <pbuf_copy+0x146>
 800bbf2:	4b15      	ldr	r3, [pc, #84]	@ (800bc48 <pbuf_copy+0x188>)
 800bbf4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bbf8:	4919      	ldr	r1, [pc, #100]	@ (800bc60 <pbuf_copy+0x1a0>)
 800bbfa:	4815      	ldr	r0, [pc, #84]	@ (800bc50 <pbuf_copy+0x190>)
 800bbfc:	f00b fe00 	bl	8017800 <iprintf>
 800bc00:	f06f 0305 	mvn.w	r3, #5
 800bc04:	e01b      	b.n	800bc3e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d013      	beq.n	800bc34 <pbuf_copy+0x174>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	895a      	ldrh	r2, [r3, #10]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	891b      	ldrh	r3, [r3, #8]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d10d      	bne.n	800bc34 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d009      	beq.n	800bc34 <pbuf_copy+0x174>
 800bc20:	4b09      	ldr	r3, [pc, #36]	@ (800bc48 <pbuf_copy+0x188>)
 800bc22:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bc26:	490e      	ldr	r1, [pc, #56]	@ (800bc60 <pbuf_copy+0x1a0>)
 800bc28:	4809      	ldr	r0, [pc, #36]	@ (800bc50 <pbuf_copy+0x190>)
 800bc2a:	f00b fde9 	bl	8017800 <iprintf>
 800bc2e:	f06f 0305 	mvn.w	r3, #5
 800bc32:	e004      	b.n	800bc3e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f47f af61 	bne.w	800bafe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	0801a4f8 	.word	0x0801a4f8
 800bc4c:	0801a7a0 	.word	0x0801a7a0
 800bc50:	0801a558 	.word	0x0801a558
 800bc54:	0801a7d0 	.word	0x0801a7d0
 800bc58:	0801a7e8 	.word	0x0801a7e8
 800bc5c:	0801a804 	.word	0x0801a804
 800bc60:	0801a814 	.word	0x0801a814

0800bc64 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4611      	mov	r1, r2
 800bc70:	461a      	mov	r2, r3
 800bc72:	460b      	mov	r3, r1
 800bc74:	80fb      	strh	r3, [r7, #6]
 800bc76:	4613      	mov	r3, r2
 800bc78:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d108      	bne.n	800bc9a <pbuf_copy_partial+0x36>
 800bc88:	4b2b      	ldr	r3, [pc, #172]	@ (800bd38 <pbuf_copy_partial+0xd4>)
 800bc8a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bc8e:	492b      	ldr	r1, [pc, #172]	@ (800bd3c <pbuf_copy_partial+0xd8>)
 800bc90:	482b      	ldr	r0, [pc, #172]	@ (800bd40 <pbuf_copy_partial+0xdc>)
 800bc92:	f00b fdb5 	bl	8017800 <iprintf>
 800bc96:	2300      	movs	r3, #0
 800bc98:	e04a      	b.n	800bd30 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d108      	bne.n	800bcb2 <pbuf_copy_partial+0x4e>
 800bca0:	4b25      	ldr	r3, [pc, #148]	@ (800bd38 <pbuf_copy_partial+0xd4>)
 800bca2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800bca6:	4927      	ldr	r1, [pc, #156]	@ (800bd44 <pbuf_copy_partial+0xe0>)
 800bca8:	4825      	ldr	r0, [pc, #148]	@ (800bd40 <pbuf_copy_partial+0xdc>)
 800bcaa:	f00b fda9 	bl	8017800 <iprintf>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e03e      	b.n	800bd30 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	61fb      	str	r3, [r7, #28]
 800bcb6:	e034      	b.n	800bd22 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bcb8:	88bb      	ldrh	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <pbuf_copy_partial+0x70>
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	895b      	ldrh	r3, [r3, #10]
 800bcc2:	88ba      	ldrh	r2, [r7, #4]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d305      	bcc.n	800bcd4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	895b      	ldrh	r3, [r3, #10]
 800bccc:	88ba      	ldrh	r2, [r7, #4]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	80bb      	strh	r3, [r7, #4]
 800bcd2:	e023      	b.n	800bd1c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	895a      	ldrh	r2, [r3, #10]
 800bcd8:	88bb      	ldrh	r3, [r7, #4]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bcde:	8b3a      	ldrh	r2, [r7, #24]
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d901      	bls.n	800bcea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bce6:	88fb      	ldrh	r3, [r7, #6]
 800bce8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bcea:	8b7b      	ldrh	r3, [r7, #26]
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	18d0      	adds	r0, r2, r3
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	88bb      	ldrh	r3, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	8b3a      	ldrh	r2, [r7, #24]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	f00b feb7 	bl	8017a6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bd00:	8afa      	ldrh	r2, [r7, #22]
 800bd02:	8b3b      	ldrh	r3, [r7, #24]
 800bd04:	4413      	add	r3, r2
 800bd06:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bd08:	8b7a      	ldrh	r2, [r7, #26]
 800bd0a:	8b3b      	ldrh	r3, [r7, #24]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bd10:	88fa      	ldrh	r2, [r7, #6]
 800bd12:	8b3b      	ldrh	r3, [r7, #24]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	61fb      	str	r3, [r7, #28]
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <pbuf_copy_partial+0xca>
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1c4      	bne.n	800bcb8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bd2e:	8afb      	ldrh	r3, [r7, #22]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3720      	adds	r7, #32
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	0801a4f8 	.word	0x0801a4f8
 800bd3c:	0801a840 	.word	0x0801a840
 800bd40:	0801a558 	.word	0x0801a558
 800bd44:	0801a860 	.word	0x0801a860

0800bd48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	603a      	str	r2, [r7, #0]
 800bd52:	71fb      	strb	r3, [r7, #7]
 800bd54:	460b      	mov	r3, r1
 800bd56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	8919      	ldrh	r1, [r3, #8]
 800bd5c:	88ba      	ldrh	r2, [r7, #4]
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff faa1 	bl	800b2a8 <pbuf_alloc>
 800bd66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <pbuf_clone+0x2a>
    return NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e011      	b.n	800bd96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f7ff fea3 	bl	800bac0 <pbuf_copy>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bd7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d006      	beq.n	800bd94 <pbuf_clone+0x4c>
 800bd86:	4b06      	ldr	r3, [pc, #24]	@ (800bda0 <pbuf_clone+0x58>)
 800bd88:	f240 5224 	movw	r2, #1316	@ 0x524
 800bd8c:	4905      	ldr	r1, [pc, #20]	@ (800bda4 <pbuf_clone+0x5c>)
 800bd8e:	4806      	ldr	r0, [pc, #24]	@ (800bda8 <pbuf_clone+0x60>)
 800bd90:	f00b fd36 	bl	8017800 <iprintf>
  return q;
 800bd94:	68fb      	ldr	r3, [r7, #12]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	0801a4f8 	.word	0x0801a4f8
 800bda4:	0801a96c 	.word	0x0801a96c
 800bda8:	0801a558 	.word	0x0801a558

0800bdac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdb0:	f00a ffce 	bl	8016d50 <rand>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	4b01      	ldr	r3, [pc, #4]	@ (800bdcc <tcp_init+0x20>)
 800bdc6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bdc8:	bf00      	nop
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	2000002c 	.word	0x2000002c

0800bdd0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	7d1b      	ldrb	r3, [r3, #20]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d105      	bne.n	800bdec <tcp_free+0x1c>
 800bde0:	4b06      	ldr	r3, [pc, #24]	@ (800bdfc <tcp_free+0x2c>)
 800bde2:	22d4      	movs	r2, #212	@ 0xd4
 800bde4:	4906      	ldr	r1, [pc, #24]	@ (800be00 <tcp_free+0x30>)
 800bde6:	4807      	ldr	r0, [pc, #28]	@ (800be04 <tcp_free+0x34>)
 800bde8:	f00b fd0a 	bl	8017800 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bdec:	6879      	ldr	r1, [r7, #4]
 800bdee:	2001      	movs	r0, #1
 800bdf0:	f7fe febc 	bl	800ab6c <memp_free>
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	0801a9f8 	.word	0x0801a9f8
 800be00:	0801aa28 	.word	0x0801aa28
 800be04:	0801aa3c 	.word	0x0801aa3c

0800be08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	7d1b      	ldrb	r3, [r3, #20]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d105      	bne.n	800be24 <tcp_free_listen+0x1c>
 800be18:	4b06      	ldr	r3, [pc, #24]	@ (800be34 <tcp_free_listen+0x2c>)
 800be1a:	22df      	movs	r2, #223	@ 0xdf
 800be1c:	4906      	ldr	r1, [pc, #24]	@ (800be38 <tcp_free_listen+0x30>)
 800be1e:	4807      	ldr	r0, [pc, #28]	@ (800be3c <tcp_free_listen+0x34>)
 800be20:	f00b fcee 	bl	8017800 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	2002      	movs	r0, #2
 800be28:	f7fe fea0 	bl	800ab6c <memp_free>
}
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	0801a9f8 	.word	0x0801a9f8
 800be38:	0801aa64 	.word	0x0801aa64
 800be3c:	0801aa3c 	.word	0x0801aa3c

0800be40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800be44:	f001 f85e 	bl	800cf04 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800be48:	4b07      	ldr	r3, [pc, #28]	@ (800be68 <tcp_tmr+0x28>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	4b05      	ldr	r3, [pc, #20]	@ (800be68 <tcp_tmr+0x28>)
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	4b04      	ldr	r3, [pc, #16]	@ (800be68 <tcp_tmr+0x28>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800be60:	f000 fd0e 	bl	800c880 <tcp_slowtmr>
  }
}
 800be64:	bf00      	nop
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20008fbd 	.word	0x20008fbd

0800be6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d105      	bne.n	800be88 <tcp_remove_listener+0x1c>
 800be7c:	4b0d      	ldr	r3, [pc, #52]	@ (800beb4 <tcp_remove_listener+0x48>)
 800be7e:	22ff      	movs	r2, #255	@ 0xff
 800be80:	490d      	ldr	r1, [pc, #52]	@ (800beb8 <tcp_remove_listener+0x4c>)
 800be82:	480e      	ldr	r0, [pc, #56]	@ (800bebc <tcp_remove_listener+0x50>)
 800be84:	f00b fcbc 	bl	8017800 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	e00a      	b.n	800bea4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	429a      	cmp	r2, r3
 800be96:	d102      	bne.n	800be9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1f1      	bne.n	800be8e <tcp_remove_listener+0x22>
    }
  }
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	0801a9f8 	.word	0x0801a9f8
 800beb8:	0801aa80 	.word	0x0801aa80
 800bebc:	0801aa3c 	.word	0x0801aa3c

0800bec0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <tcp_listen_closed+0x1c>
 800bece:	4b14      	ldr	r3, [pc, #80]	@ (800bf20 <tcp_listen_closed+0x60>)
 800bed0:	f240 1211 	movw	r2, #273	@ 0x111
 800bed4:	4913      	ldr	r1, [pc, #76]	@ (800bf24 <tcp_listen_closed+0x64>)
 800bed6:	4814      	ldr	r0, [pc, #80]	@ (800bf28 <tcp_listen_closed+0x68>)
 800bed8:	f00b fc92 	bl	8017800 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7d1b      	ldrb	r3, [r3, #20]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d006      	beq.n	800bef2 <tcp_listen_closed+0x32>
 800bee4:	4b0e      	ldr	r3, [pc, #56]	@ (800bf20 <tcp_listen_closed+0x60>)
 800bee6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800beea:	4910      	ldr	r1, [pc, #64]	@ (800bf2c <tcp_listen_closed+0x6c>)
 800beec:	480e      	ldr	r0, [pc, #56]	@ (800bf28 <tcp_listen_closed+0x68>)
 800beee:	f00b fc87 	bl	8017800 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bef2:	2301      	movs	r3, #1
 800bef4:	60fb      	str	r3, [r7, #12]
 800bef6:	e00b      	b.n	800bf10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bef8:	4a0d      	ldr	r2, [pc, #52]	@ (800bf30 <tcp_listen_closed+0x70>)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6879      	ldr	r1, [r7, #4]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff ffb1 	bl	800be6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	60fb      	str	r3, [r7, #12]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d9f0      	bls.n	800bef8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bf16:	bf00      	nop
 800bf18:	bf00      	nop
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	0801a9f8 	.word	0x0801a9f8
 800bf24:	0801aaa8 	.word	0x0801aaa8
 800bf28:	0801aa3c 	.word	0x0801aa3c
 800bf2c:	0801aab4 	.word	0x0801aab4
 800bf30:	08020444 	.word	0x08020444

0800bf34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bf34:	b5b0      	push	{r4, r5, r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af04      	add	r7, sp, #16
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <tcp_close_shutdown+0x20>
 800bf46:	4b63      	ldr	r3, [pc, #396]	@ (800c0d4 <tcp_close_shutdown+0x1a0>)
 800bf48:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800bf4c:	4962      	ldr	r1, [pc, #392]	@ (800c0d8 <tcp_close_shutdown+0x1a4>)
 800bf4e:	4863      	ldr	r0, [pc, #396]	@ (800c0dc <tcp_close_shutdown+0x1a8>)
 800bf50:	f00b fc56 	bl	8017800 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d066      	beq.n	800c028 <tcp_close_shutdown+0xf4>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7d1b      	ldrb	r3, [r3, #20]
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d003      	beq.n	800bf6a <tcp_close_shutdown+0x36>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7d1b      	ldrb	r3, [r3, #20]
 800bf66:	2b07      	cmp	r3, #7
 800bf68:	d15e      	bne.n	800c028 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d104      	bne.n	800bf7c <tcp_close_shutdown+0x48>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf76:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bf7a:	d055      	beq.n	800c028 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	8b5b      	ldrh	r3, [r3, #26]
 800bf80:	f003 0310 	and.w	r3, r3, #16
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <tcp_close_shutdown+0x62>
 800bf88:	4b52      	ldr	r3, [pc, #328]	@ (800c0d4 <tcp_close_shutdown+0x1a0>)
 800bf8a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800bf8e:	4954      	ldr	r1, [pc, #336]	@ (800c0e0 <tcp_close_shutdown+0x1ac>)
 800bf90:	4852      	ldr	r0, [pc, #328]	@ (800c0dc <tcp_close_shutdown+0x1a8>)
 800bf92:	f00b fc35 	bl	8017800 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bf9e:	687d      	ldr	r5, [r7, #4]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	8ad2      	ldrh	r2, [r2, #22]
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	8b09      	ldrh	r1, [r1, #24]
 800bfac:	9102      	str	r1, [sp, #8]
 800bfae:	9201      	str	r2, [sp, #4]
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	4622      	mov	r2, r4
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f005 fd8b 	bl	8011ad4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f001 fb6e 	bl	800d6a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bfc4:	4b47      	ldr	r3, [pc, #284]	@ (800c0e4 <tcp_close_shutdown+0x1b0>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d105      	bne.n	800bfda <tcp_close_shutdown+0xa6>
 800bfce:	4b45      	ldr	r3, [pc, #276]	@ (800c0e4 <tcp_close_shutdown+0x1b0>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	4a43      	ldr	r2, [pc, #268]	@ (800c0e4 <tcp_close_shutdown+0x1b0>)
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	e013      	b.n	800c002 <tcp_close_shutdown+0xce>
 800bfda:	4b42      	ldr	r3, [pc, #264]	@ (800c0e4 <tcp_close_shutdown+0x1b0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	e00c      	b.n	800bffc <tcp_close_shutdown+0xc8>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d104      	bne.n	800bff6 <tcp_close_shutdown+0xc2>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68da      	ldr	r2, [r3, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	60da      	str	r2, [r3, #12]
 800bff4:	e005      	b.n	800c002 <tcp_close_shutdown+0xce>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1ef      	bne.n	800bfe2 <tcp_close_shutdown+0xae>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	60da      	str	r2, [r3, #12]
 800c008:	4b37      	ldr	r3, [pc, #220]	@ (800c0e8 <tcp_close_shutdown+0x1b4>)
 800c00a:	2201      	movs	r2, #1
 800c00c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c00e:	4b37      	ldr	r3, [pc, #220]	@ (800c0ec <tcp_close_shutdown+0x1b8>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	429a      	cmp	r2, r3
 800c016:	d102      	bne.n	800c01e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c018:	f004 f802 	bl	8010020 <tcp_trigger_input_pcb_close>
 800c01c:	e002      	b.n	800c024 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff fed6 	bl	800bdd0 <tcp_free>
      }
      return ERR_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	e050      	b.n	800c0ca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	7d1b      	ldrb	r3, [r3, #20]
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d03b      	beq.n	800c0a8 <tcp_close_shutdown+0x174>
 800c030:	2b02      	cmp	r3, #2
 800c032:	dc44      	bgt.n	800c0be <tcp_close_shutdown+0x18a>
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <tcp_close_shutdown+0x10a>
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d02a      	beq.n	800c092 <tcp_close_shutdown+0x15e>
 800c03c:	e03f      	b.n	800c0be <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	8adb      	ldrh	r3, [r3, #22]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d021      	beq.n	800c08a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c046:	4b2a      	ldr	r3, [pc, #168]	@ (800c0f0 <tcp_close_shutdown+0x1bc>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d105      	bne.n	800c05c <tcp_close_shutdown+0x128>
 800c050:	4b27      	ldr	r3, [pc, #156]	@ (800c0f0 <tcp_close_shutdown+0x1bc>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	4a26      	ldr	r2, [pc, #152]	@ (800c0f0 <tcp_close_shutdown+0x1bc>)
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	e013      	b.n	800c084 <tcp_close_shutdown+0x150>
 800c05c:	4b24      	ldr	r3, [pc, #144]	@ (800c0f0 <tcp_close_shutdown+0x1bc>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	60bb      	str	r3, [r7, #8]
 800c062:	e00c      	b.n	800c07e <tcp_close_shutdown+0x14a>
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d104      	bne.n	800c078 <tcp_close_shutdown+0x144>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	60da      	str	r2, [r3, #12]
 800c076:	e005      	b.n	800c084 <tcp_close_shutdown+0x150>
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	60bb      	str	r3, [r7, #8]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1ef      	bne.n	800c064 <tcp_close_shutdown+0x130>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff fea0 	bl	800bdd0 <tcp_free>
      break;
 800c090:	e01a      	b.n	800c0c8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff ff14 	bl	800bec0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	4816      	ldr	r0, [pc, #88]	@ (800c0f4 <tcp_close_shutdown+0x1c0>)
 800c09c:	f001 fb50 	bl	800d740 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7ff feb1 	bl	800be08 <tcp_free_listen>
      break;
 800c0a6:	e00f      	b.n	800c0c8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	480e      	ldr	r0, [pc, #56]	@ (800c0e4 <tcp_close_shutdown+0x1b0>)
 800c0ac:	f001 fb48 	bl	800d740 <tcp_pcb_remove>
 800c0b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e8 <tcp_close_shutdown+0x1b4>)
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7ff fe8a 	bl	800bdd0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c0bc:	e004      	b.n	800c0c8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f81a 	bl	800c0f8 <tcp_close_shutdown_fin>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	e000      	b.n	800c0ca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	0801a9f8 	.word	0x0801a9f8
 800c0d8:	0801aacc 	.word	0x0801aacc
 800c0dc:	0801aa3c 	.word	0x0801aa3c
 800c0e0:	0801aaec 	.word	0x0801aaec
 800c0e4:	20008fb4 	.word	0x20008fb4
 800c0e8:	20008fbc 	.word	0x20008fbc
 800c0ec:	20008ff4 	.word	0x20008ff4
 800c0f0:	20008fac 	.word	0x20008fac
 800c0f4:	20008fb0 	.word	0x20008fb0

0800c0f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <tcp_close_shutdown_fin+0x1c>
 800c106:	4b2e      	ldr	r3, [pc, #184]	@ (800c1c0 <tcp_close_shutdown_fin+0xc8>)
 800c108:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c10c:	492d      	ldr	r1, [pc, #180]	@ (800c1c4 <tcp_close_shutdown_fin+0xcc>)
 800c10e:	482e      	ldr	r0, [pc, #184]	@ (800c1c8 <tcp_close_shutdown_fin+0xd0>)
 800c110:	f00b fb76 	bl	8017800 <iprintf>

  switch (pcb->state) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	7d1b      	ldrb	r3, [r3, #20]
 800c118:	2b07      	cmp	r3, #7
 800c11a:	d020      	beq.n	800c15e <tcp_close_shutdown_fin+0x66>
 800c11c:	2b07      	cmp	r3, #7
 800c11e:	dc2b      	bgt.n	800c178 <tcp_close_shutdown_fin+0x80>
 800c120:	2b03      	cmp	r3, #3
 800c122:	d002      	beq.n	800c12a <tcp_close_shutdown_fin+0x32>
 800c124:	2b04      	cmp	r3, #4
 800c126:	d00d      	beq.n	800c144 <tcp_close_shutdown_fin+0x4c>
 800c128:	e026      	b.n	800c178 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f004 fde0 	bl	8010cf0 <tcp_send_fin>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d11f      	bne.n	800c17c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2205      	movs	r2, #5
 800c140:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c142:	e01b      	b.n	800c17c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f004 fdd3 	bl	8010cf0 <tcp_send_fin>
 800c14a:	4603      	mov	r3, r0
 800c14c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d114      	bne.n	800c180 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2205      	movs	r2, #5
 800c15a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c15c:	e010      	b.n	800c180 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f004 fdc6 	bl	8010cf0 <tcp_send_fin>
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d109      	bne.n	800c184 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2209      	movs	r2, #9
 800c174:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c176:	e005      	b.n	800c184 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	e01c      	b.n	800c1b6 <tcp_close_shutdown_fin+0xbe>
      break;
 800c17c:	bf00      	nop
 800c17e:	e002      	b.n	800c186 <tcp_close_shutdown_fin+0x8e>
      break;
 800c180:	bf00      	nop
 800c182:	e000      	b.n	800c186 <tcp_close_shutdown_fin+0x8e>
      break;
 800c184:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d103      	bne.n	800c196 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f004 feec 	bl	8010f6c <tcp_output>
 800c194:	e00d      	b.n	800c1b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19e:	d108      	bne.n	800c1b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	8b5b      	ldrh	r3, [r3, #26]
 800c1a4:	f043 0308 	orr.w	r3, r3, #8
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e001      	b.n	800c1b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	0801a9f8 	.word	0x0801a9f8
 800c1c4:	0801aaa8 	.word	0x0801aaa8
 800c1c8:	0801aa3c 	.word	0x0801aa3c

0800c1cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d109      	bne.n	800c1ee <tcp_close+0x22>
 800c1da:	4b0f      	ldr	r3, [pc, #60]	@ (800c218 <tcp_close+0x4c>)
 800c1dc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c1e0:	490e      	ldr	r1, [pc, #56]	@ (800c21c <tcp_close+0x50>)
 800c1e2:	480f      	ldr	r0, [pc, #60]	@ (800c220 <tcp_close+0x54>)
 800c1e4:	f00b fb0c 	bl	8017800 <iprintf>
 800c1e8:	f06f 030f 	mvn.w	r3, #15
 800c1ec:	e00f      	b.n	800c20e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	7d1b      	ldrb	r3, [r3, #20]
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d006      	beq.n	800c204 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	8b5b      	ldrh	r3, [r3, #26]
 800c1fa:	f043 0310 	orr.w	r3, r3, #16
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c204:	2101      	movs	r1, #1
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff fe94 	bl	800bf34 <tcp_close_shutdown>
 800c20c:	4603      	mov	r3, r0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	0801a9f8 	.word	0x0801a9f8
 800c21c:	0801ab08 	.word	0x0801ab08
 800c220:	0801aa3c 	.word	0x0801aa3c

0800c224 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08e      	sub	sp, #56	@ 0x38
 800c228:	af04      	add	r7, sp, #16
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d107      	bne.n	800c244 <tcp_abandon+0x20>
 800c234:	4b52      	ldr	r3, [pc, #328]	@ (800c380 <tcp_abandon+0x15c>)
 800c236:	f240 223d 	movw	r2, #573	@ 0x23d
 800c23a:	4952      	ldr	r1, [pc, #328]	@ (800c384 <tcp_abandon+0x160>)
 800c23c:	4852      	ldr	r0, [pc, #328]	@ (800c388 <tcp_abandon+0x164>)
 800c23e:	f00b fadf 	bl	8017800 <iprintf>
 800c242:	e099      	b.n	800c378 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7d1b      	ldrb	r3, [r3, #20]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d106      	bne.n	800c25a <tcp_abandon+0x36>
 800c24c:	4b4c      	ldr	r3, [pc, #304]	@ (800c380 <tcp_abandon+0x15c>)
 800c24e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c252:	494e      	ldr	r1, [pc, #312]	@ (800c38c <tcp_abandon+0x168>)
 800c254:	484c      	ldr	r0, [pc, #304]	@ (800c388 <tcp_abandon+0x164>)
 800c256:	f00b fad3 	bl	8017800 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7d1b      	ldrb	r3, [r3, #20]
 800c25e:	2b0a      	cmp	r3, #10
 800c260:	d107      	bne.n	800c272 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	484a      	ldr	r0, [pc, #296]	@ (800c390 <tcp_abandon+0x16c>)
 800c266:	f001 fa6b 	bl	800d740 <tcp_pcb_remove>
    tcp_free(pcb);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff fdb0 	bl	800bdd0 <tcp_free>
 800c270:	e082      	b.n	800c378 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c27e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c284:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c28c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	7d1b      	ldrb	r3, [r3, #20]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d126      	bne.n	800c2ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	8adb      	ldrh	r3, [r3, #22]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d02e      	beq.n	800c302 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c2a4:	4b3b      	ldr	r3, [pc, #236]	@ (800c394 <tcp_abandon+0x170>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d105      	bne.n	800c2ba <tcp_abandon+0x96>
 800c2ae:	4b39      	ldr	r3, [pc, #228]	@ (800c394 <tcp_abandon+0x170>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	4a37      	ldr	r2, [pc, #220]	@ (800c394 <tcp_abandon+0x170>)
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	e013      	b.n	800c2e2 <tcp_abandon+0xbe>
 800c2ba:	4b36      	ldr	r3, [pc, #216]	@ (800c394 <tcp_abandon+0x170>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	61fb      	str	r3, [r7, #28]
 800c2c0:	e00c      	b.n	800c2dc <tcp_abandon+0xb8>
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d104      	bne.n	800c2d6 <tcp_abandon+0xb2>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68da      	ldr	r2, [r3, #12]
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	60da      	str	r2, [r3, #12]
 800c2d4:	e005      	b.n	800c2e2 <tcp_abandon+0xbe>
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	61fb      	str	r3, [r7, #28]
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1ef      	bne.n	800c2c2 <tcp_abandon+0x9e>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	60da      	str	r2, [r3, #12]
 800c2e8:	e00b      	b.n	800c302 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	8adb      	ldrh	r3, [r3, #22]
 800c2f2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c2f4:	6879      	ldr	r1, [r7, #4]
 800c2f6:	4828      	ldr	r0, [pc, #160]	@ (800c398 <tcp_abandon+0x174>)
 800c2f8:	f001 fa22 	bl	800d740 <tcp_pcb_remove>
 800c2fc:	4b27      	ldr	r3, [pc, #156]	@ (800c39c <tcp_abandon+0x178>)
 800c2fe:	2201      	movs	r2, #1
 800c300:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c306:	2b00      	cmp	r3, #0
 800c308:	d004      	beq.n	800c314 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 fed8 	bl	800d0c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d004      	beq.n	800c326 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fecf 	bl	800d0c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d004      	beq.n	800c338 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c332:	4618      	mov	r0, r3
 800c334:	f000 fec6 	bl	800d0c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00e      	beq.n	800c35c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3304      	adds	r3, #4
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	8b12      	ldrh	r2, [r2, #24]
 800c348:	9202      	str	r2, [sp, #8]
 800c34a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c34c:	9201      	str	r2, [sp, #4]
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	460b      	mov	r3, r1
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	69b9      	ldr	r1, [r7, #24]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f005 fbbc 	bl	8011ad4 <tcp_rst>
    }
    last_state = pcb->state;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	7d1b      	ldrb	r3, [r3, #20]
 800c360:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7ff fd34 	bl	800bdd0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d004      	beq.n	800c378 <tcp_abandon+0x154>
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	f06f 010c 	mvn.w	r1, #12
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	4798      	blx	r3
  }
}
 800c378:	3728      	adds	r7, #40	@ 0x28
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	0801a9f8 	.word	0x0801a9f8
 800c384:	0801ab3c 	.word	0x0801ab3c
 800c388:	0801aa3c 	.word	0x0801aa3c
 800c38c:	0801ab58 	.word	0x0801ab58
 800c390:	20008fb8 	.word	0x20008fb8
 800c394:	20008fac 	.word	0x20008fac
 800c398:	20008fb4 	.word	0x20008fb4
 800c39c:	20008fbc 	.word	0x20008fbc

0800c3a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7ff ff3a 	bl	800c224 <tcp_abandon>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b088      	sub	sp, #32
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c3c6:	2304      	movs	r3, #4
 800c3c8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c3d0:	4b3e      	ldr	r3, [pc, #248]	@ (800c4cc <tcp_bind+0x114>)
 800c3d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d109      	bne.n	800c3ee <tcp_bind+0x36>
 800c3da:	4b3d      	ldr	r3, [pc, #244]	@ (800c4d0 <tcp_bind+0x118>)
 800c3dc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800c3e0:	493c      	ldr	r1, [pc, #240]	@ (800c4d4 <tcp_bind+0x11c>)
 800c3e2:	483d      	ldr	r0, [pc, #244]	@ (800c4d8 <tcp_bind+0x120>)
 800c3e4:	f00b fa0c 	bl	8017800 <iprintf>
 800c3e8:	f06f 030f 	mvn.w	r3, #15
 800c3ec:	e06a      	b.n	800c4c4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	7d1b      	ldrb	r3, [r3, #20]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d009      	beq.n	800c40a <tcp_bind+0x52>
 800c3f6:	4b36      	ldr	r3, [pc, #216]	@ (800c4d0 <tcp_bind+0x118>)
 800c3f8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c3fc:	4937      	ldr	r1, [pc, #220]	@ (800c4dc <tcp_bind+0x124>)
 800c3fe:	4836      	ldr	r0, [pc, #216]	@ (800c4d8 <tcp_bind+0x120>)
 800c400:	f00b f9fe 	bl	8017800 <iprintf>
 800c404:	f06f 0305 	mvn.w	r3, #5
 800c408:	e05c      	b.n	800c4c4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c40a:	88fb      	ldrh	r3, [r7, #6]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d109      	bne.n	800c424 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c410:	f000 f9f0 	bl	800c7f4 <tcp_new_port>
 800c414:	4603      	mov	r3, r0
 800c416:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c418:	88fb      	ldrh	r3, [r7, #6]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d135      	bne.n	800c48a <tcp_bind+0xd2>
      return ERR_BUF;
 800c41e:	f06f 0301 	mvn.w	r3, #1
 800c422:	e04f      	b.n	800c4c4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c424:	2300      	movs	r3, #0
 800c426:	61fb      	str	r3, [r7, #28]
 800c428:	e02b      	b.n	800c482 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c42a:	4a2d      	ldr	r2, [pc, #180]	@ (800c4e0 <tcp_bind+0x128>)
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	61bb      	str	r3, [r7, #24]
 800c436:	e01e      	b.n	800c476 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	8adb      	ldrh	r3, [r3, #22]
 800c43c:	88fa      	ldrh	r2, [r7, #6]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d116      	bne.n	800c470 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c442:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c444:	2b00      	cmp	r3, #0
 800c446:	d010      	beq.n	800c46a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00c      	beq.n	800c46a <tcp_bind+0xb2>
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d009      	beq.n	800c46a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d005      	beq.n	800c46a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c466:	429a      	cmp	r2, r3
 800c468:	d102      	bne.n	800c470 <tcp_bind+0xb8>
              return ERR_USE;
 800c46a:	f06f 0307 	mvn.w	r3, #7
 800c46e:	e029      	b.n	800c4c4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	61bb      	str	r3, [r7, #24]
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1dd      	bne.n	800c438 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	3301      	adds	r3, #1
 800c480:	61fb      	str	r3, [r7, #28]
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	429a      	cmp	r2, r3
 800c488:	dbcf      	blt.n	800c42a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00c      	beq.n	800c4aa <tcp_bind+0xf2>
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d008      	beq.n	800c4aa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <tcp_bind+0xec>
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	e000      	b.n	800c4a6 <tcp_bind+0xee>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	88fa      	ldrh	r2, [r7, #6]
 800c4ae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e4 <tcp_bind+0x12c>)
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	60da      	str	r2, [r3, #12]
 800c4b8:	4a0a      	ldr	r2, [pc, #40]	@ (800c4e4 <tcp_bind+0x12c>)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6013      	str	r3, [r2, #0]
 800c4be:	f005 fccb 	bl	8011e58 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	0802047c 	.word	0x0802047c
 800c4d0:	0801a9f8 	.word	0x0801a9f8
 800c4d4:	0801ab8c 	.word	0x0801ab8c
 800c4d8:	0801aa3c 	.word	0x0801aa3c
 800c4dc:	0801aba4 	.word	0x0801aba4
 800c4e0:	08020444 	.word	0x08020444
 800c4e4:	20008fac 	.word	0x20008fac

0800c4e8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d106      	bne.n	800c50a <tcp_accept_null+0x22>
 800c4fc:	4b07      	ldr	r3, [pc, #28]	@ (800c51c <tcp_accept_null+0x34>)
 800c4fe:	f240 320f 	movw	r2, #783	@ 0x30f
 800c502:	4907      	ldr	r1, [pc, #28]	@ (800c520 <tcp_accept_null+0x38>)
 800c504:	4807      	ldr	r0, [pc, #28]	@ (800c524 <tcp_accept_null+0x3c>)
 800c506:	f00b f97b 	bl	8017800 <iprintf>

  tcp_abort(pcb);
 800c50a:	68b8      	ldr	r0, [r7, #8]
 800c50c:	f7ff ff48 	bl	800c3a0 <tcp_abort>

  return ERR_ABRT;
 800c510:	f06f 030c 	mvn.w	r3, #12
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	0801a9f8 	.word	0x0801a9f8
 800c520:	0801abcc 	.word	0x0801abcc
 800c524:	0801aa3c 	.word	0x0801aa3c

0800c528 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	2200      	movs	r2, #0
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 f806 	bl	800c54c <tcp_listen_with_backlog_and_err>
 800c540:	4603      	mov	r3, r0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	460b      	mov	r3, r1
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d109      	bne.n	800c578 <tcp_listen_with_backlog_and_err+0x2c>
 800c564:	4b47      	ldr	r3, [pc, #284]	@ (800c684 <tcp_listen_with_backlog_and_err+0x138>)
 800c566:	f240 3259 	movw	r2, #857	@ 0x359
 800c56a:	4947      	ldr	r1, [pc, #284]	@ (800c688 <tcp_listen_with_backlog_and_err+0x13c>)
 800c56c:	4847      	ldr	r0, [pc, #284]	@ (800c68c <tcp_listen_with_backlog_and_err+0x140>)
 800c56e:	f00b f947 	bl	8017800 <iprintf>
 800c572:	23f0      	movs	r3, #240	@ 0xf0
 800c574:	76fb      	strb	r3, [r7, #27]
 800c576:	e079      	b.n	800c66c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	7d1b      	ldrb	r3, [r3, #20]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d009      	beq.n	800c594 <tcp_listen_with_backlog_and_err+0x48>
 800c580:	4b40      	ldr	r3, [pc, #256]	@ (800c684 <tcp_listen_with_backlog_and_err+0x138>)
 800c582:	f240 325a 	movw	r2, #858	@ 0x35a
 800c586:	4942      	ldr	r1, [pc, #264]	@ (800c690 <tcp_listen_with_backlog_and_err+0x144>)
 800c588:	4840      	ldr	r0, [pc, #256]	@ (800c68c <tcp_listen_with_backlog_and_err+0x140>)
 800c58a:	f00b f939 	bl	8017800 <iprintf>
 800c58e:	23f1      	movs	r3, #241	@ 0xf1
 800c590:	76fb      	strb	r3, [r7, #27]
 800c592:	e06b      	b.n	800c66c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	7d1b      	ldrb	r3, [r3, #20]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d104      	bne.n	800c5a6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c5a0:	23f7      	movs	r3, #247	@ 0xf7
 800c5a2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c5a4:	e062      	b.n	800c66c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c5a6:	2002      	movs	r0, #2
 800c5a8:	f7fe fa70 	bl	800aa8c <memp_malloc>
 800c5ac:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d102      	bne.n	800c5ba <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c5b4:	23ff      	movs	r3, #255	@ 0xff
 800c5b6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c5b8:	e058      	b.n	800c66c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	691a      	ldr	r2, [r3, #16]
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	8ada      	ldrh	r2, [r3, #22]
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	7d5a      	ldrb	r2, [r3, #21]
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	7a5a      	ldrb	r2, [r3, #9]
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	7ada      	ldrb	r2, [r3, #11]
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	7a9a      	ldrb	r2, [r3, #10]
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	8adb      	ldrh	r3, [r3, #22]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d021      	beq.n	800c64a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c606:	4b23      	ldr	r3, [pc, #140]	@ (800c694 <tcp_listen_with_backlog_and_err+0x148>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d105      	bne.n	800c61c <tcp_listen_with_backlog_and_err+0xd0>
 800c610:	4b20      	ldr	r3, [pc, #128]	@ (800c694 <tcp_listen_with_backlog_and_err+0x148>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	4a1f      	ldr	r2, [pc, #124]	@ (800c694 <tcp_listen_with_backlog_and_err+0x148>)
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	e013      	b.n	800c644 <tcp_listen_with_backlog_and_err+0xf8>
 800c61c:	4b1d      	ldr	r3, [pc, #116]	@ (800c694 <tcp_listen_with_backlog_and_err+0x148>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	617b      	str	r3, [r7, #20]
 800c622:	e00c      	b.n	800c63e <tcp_listen_with_backlog_and_err+0xf2>
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d104      	bne.n	800c638 <tcp_listen_with_backlog_and_err+0xec>
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	68da      	ldr	r2, [r3, #12]
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	60da      	str	r2, [r3, #12]
 800c636:	e005      	b.n	800c644 <tcp_listen_with_backlog_and_err+0xf8>
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	617b      	str	r3, [r7, #20]
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1ef      	bne.n	800c624 <tcp_listen_with_backlog_and_err+0xd8>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7ff fbc0 	bl	800bdd0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	4a11      	ldr	r2, [pc, #68]	@ (800c698 <tcp_listen_with_backlog_and_err+0x14c>)
 800c654:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c656:	4b11      	ldr	r3, [pc, #68]	@ (800c69c <tcp_listen_with_backlog_and_err+0x150>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	60da      	str	r2, [r3, #12]
 800c65e:	4a0f      	ldr	r2, [pc, #60]	@ (800c69c <tcp_listen_with_backlog_and_err+0x150>)
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	f005 fbf8 	bl	8011e58 <tcp_timer_needed>
  res = ERR_OK;
 800c668:	2300      	movs	r3, #0
 800c66a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d002      	beq.n	800c678 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	7efa      	ldrb	r2, [r7, #27]
 800c676:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c678:	69fb      	ldr	r3, [r7, #28]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3720      	adds	r7, #32
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	0801a9f8 	.word	0x0801a9f8
 800c688:	0801abec 	.word	0x0801abec
 800c68c:	0801aa3c 	.word	0x0801aa3c
 800c690:	0801ac1c 	.word	0x0801ac1c
 800c694:	20008fac 	.word	0x20008fac
 800c698:	0800c4e9 	.word	0x0800c4e9
 800c69c:	20008fb0 	.word	0x20008fb0

0800c6a0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d106      	bne.n	800c6bc <tcp_update_rcv_ann_wnd+0x1c>
 800c6ae:	4b25      	ldr	r3, [pc, #148]	@ (800c744 <tcp_update_rcv_ann_wnd+0xa4>)
 800c6b0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c6b4:	4924      	ldr	r1, [pc, #144]	@ (800c748 <tcp_update_rcv_ann_wnd+0xa8>)
 800c6b6:	4825      	ldr	r0, [pc, #148]	@ (800c74c <tcp_update_rcv_ann_wnd+0xac>)
 800c6b8:	f00b f8a2 	bl	8017800 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c6c4:	4413      	add	r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c6d0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c6d4:	bf28      	it	cs
 800c6d6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c6da:	b292      	uxth	r2, r2
 800c6dc:	4413      	add	r3, r2
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	db08      	blt.n	800c6f8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	e020      	b.n	800c73a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	2b00      	cmp	r3, #0
 800c704:	dd03      	ble.n	800c70e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c70c:	e014      	b.n	800c738 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c720:	d306      	bcc.n	800c730 <tcp_update_rcv_ann_wnd+0x90>
 800c722:	4b08      	ldr	r3, [pc, #32]	@ (800c744 <tcp_update_rcv_ann_wnd+0xa4>)
 800c724:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c728:	4909      	ldr	r1, [pc, #36]	@ (800c750 <tcp_update_rcv_ann_wnd+0xb0>)
 800c72a:	4808      	ldr	r0, [pc, #32]	@ (800c74c <tcp_update_rcv_ann_wnd+0xac>)
 800c72c:	f00b f868 	bl	8017800 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	b29a      	uxth	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c738:	2300      	movs	r3, #0
  }
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	0801a9f8 	.word	0x0801a9f8
 800c748:	0801ac54 	.word	0x0801ac54
 800c74c:	0801aa3c 	.word	0x0801aa3c
 800c750:	0801ac78 	.word	0x0801ac78

0800c754 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d107      	bne.n	800c776 <tcp_recved+0x22>
 800c766:	4b1f      	ldr	r3, [pc, #124]	@ (800c7e4 <tcp_recved+0x90>)
 800c768:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c76c:	491e      	ldr	r1, [pc, #120]	@ (800c7e8 <tcp_recved+0x94>)
 800c76e:	481f      	ldr	r0, [pc, #124]	@ (800c7ec <tcp_recved+0x98>)
 800c770:	f00b f846 	bl	8017800 <iprintf>
 800c774:	e032      	b.n	800c7dc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7d1b      	ldrb	r3, [r3, #20]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d106      	bne.n	800c78c <tcp_recved+0x38>
 800c77e:	4b19      	ldr	r3, [pc, #100]	@ (800c7e4 <tcp_recved+0x90>)
 800c780:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c784:	491a      	ldr	r1, [pc, #104]	@ (800c7f0 <tcp_recved+0x9c>)
 800c786:	4819      	ldr	r0, [pc, #100]	@ (800c7ec <tcp_recved+0x98>)
 800c788:	f00b f83a 	bl	8017800 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c790:	887b      	ldrh	r3, [r7, #2]
 800c792:	4413      	add	r3, r2
 800c794:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c796:	89fb      	ldrh	r3, [r7, #14]
 800c798:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c79c:	d804      	bhi.n	800c7a8 <tcp_recved+0x54>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7a2:	89fa      	ldrh	r2, [r7, #14]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d204      	bcs.n	800c7b2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c7ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c7b0:	e002      	b.n	800c7b8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	89fa      	ldrh	r2, [r7, #14]
 800c7b6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ff71 	bl	800c6a0 <tcp_update_rcv_ann_wnd>
 800c7be:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c7c6:	d309      	bcc.n	800c7dc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	8b5b      	ldrh	r3, [r3, #26]
 800c7cc:	f043 0302 	orr.w	r3, r3, #2
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f004 fbc8 	bl	8010f6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	0801a9f8 	.word	0x0801a9f8
 800c7e8:	0801ac94 	.word	0x0801ac94
 800c7ec:	0801aa3c 	.word	0x0801aa3c
 800c7f0:	0801acac 	.word	0x0801acac

0800c7f4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c7fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c878 <tcp_new_port+0x84>)
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	3301      	adds	r3, #1
 800c804:	b29a      	uxth	r2, r3
 800c806:	4b1c      	ldr	r3, [pc, #112]	@ (800c878 <tcp_new_port+0x84>)
 800c808:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c80a:	4b1b      	ldr	r3, [pc, #108]	@ (800c878 <tcp_new_port+0x84>)
 800c80c:	881b      	ldrh	r3, [r3, #0]
 800c80e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c812:	4293      	cmp	r3, r2
 800c814:	d103      	bne.n	800c81e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c816:	4b18      	ldr	r3, [pc, #96]	@ (800c878 <tcp_new_port+0x84>)
 800c818:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c81c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c81e:	2300      	movs	r3, #0
 800c820:	71fb      	strb	r3, [r7, #7]
 800c822:	e01e      	b.n	800c862 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	4a15      	ldr	r2, [pc, #84]	@ (800c87c <tcp_new_port+0x88>)
 800c828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	603b      	str	r3, [r7, #0]
 800c830:	e011      	b.n	800c856 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	8ada      	ldrh	r2, [r3, #22]
 800c836:	4b10      	ldr	r3, [pc, #64]	@ (800c878 <tcp_new_port+0x84>)
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d108      	bne.n	800c850 <tcp_new_port+0x5c>
        n++;
 800c83e:	88bb      	ldrh	r3, [r7, #4]
 800c840:	3301      	adds	r3, #1
 800c842:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c844:	88bb      	ldrh	r3, [r7, #4]
 800c846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c84a:	d3d8      	bcc.n	800c7fe <tcp_new_port+0xa>
          return 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	e00d      	b.n	800c86c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	603b      	str	r3, [r7, #0]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1ea      	bne.n	800c832 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c85c:	79fb      	ldrb	r3, [r7, #7]
 800c85e:	3301      	adds	r3, #1
 800c860:	71fb      	strb	r3, [r7, #7]
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	2b03      	cmp	r3, #3
 800c866:	d9dd      	bls.n	800c824 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c868:	4b03      	ldr	r3, [pc, #12]	@ (800c878 <tcp_new_port+0x84>)
 800c86a:	881b      	ldrh	r3, [r3, #0]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	2000002c 	.word	0x2000002c
 800c87c:	08020444 	.word	0x08020444

0800c880 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c880:	b5b0      	push	{r4, r5, r7, lr}
 800c882:	b090      	sub	sp, #64	@ 0x40
 800c884:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c88c:	4b95      	ldr	r3, [pc, #596]	@ (800cae4 <tcp_slowtmr+0x264>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3301      	adds	r3, #1
 800c892:	4a94      	ldr	r2, [pc, #592]	@ (800cae4 <tcp_slowtmr+0x264>)
 800c894:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c896:	4b94      	ldr	r3, [pc, #592]	@ (800cae8 <tcp_slowtmr+0x268>)
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	3301      	adds	r3, #1
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	4b92      	ldr	r3, [pc, #584]	@ (800cae8 <tcp_slowtmr+0x268>)
 800c8a0:	701a      	strb	r2, [r3, #0]
 800c8a2:	e000      	b.n	800c8a6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c8a4:	bf00      	nop
  prev = NULL;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c8aa:	4b90      	ldr	r3, [pc, #576]	@ (800caec <tcp_slowtmr+0x26c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c8b0:	e29d      	b.n	800cdee <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b4:	7d1b      	ldrb	r3, [r3, #20]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d106      	bne.n	800c8c8 <tcp_slowtmr+0x48>
 800c8ba:	4b8d      	ldr	r3, [pc, #564]	@ (800caf0 <tcp_slowtmr+0x270>)
 800c8bc:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c8c0:	498c      	ldr	r1, [pc, #560]	@ (800caf4 <tcp_slowtmr+0x274>)
 800c8c2:	488d      	ldr	r0, [pc, #564]	@ (800caf8 <tcp_slowtmr+0x278>)
 800c8c4:	f00a ff9c 	bl	8017800 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ca:	7d1b      	ldrb	r3, [r3, #20]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d106      	bne.n	800c8de <tcp_slowtmr+0x5e>
 800c8d0:	4b87      	ldr	r3, [pc, #540]	@ (800caf0 <tcp_slowtmr+0x270>)
 800c8d2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c8d6:	4989      	ldr	r1, [pc, #548]	@ (800cafc <tcp_slowtmr+0x27c>)
 800c8d8:	4887      	ldr	r0, [pc, #540]	@ (800caf8 <tcp_slowtmr+0x278>)
 800c8da:	f00a ff91 	bl	8017800 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e0:	7d1b      	ldrb	r3, [r3, #20]
 800c8e2:	2b0a      	cmp	r3, #10
 800c8e4:	d106      	bne.n	800c8f4 <tcp_slowtmr+0x74>
 800c8e6:	4b82      	ldr	r3, [pc, #520]	@ (800caf0 <tcp_slowtmr+0x270>)
 800c8e8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c8ec:	4984      	ldr	r1, [pc, #528]	@ (800cb00 <tcp_slowtmr+0x280>)
 800c8ee:	4882      	ldr	r0, [pc, #520]	@ (800caf8 <tcp_slowtmr+0x278>)
 800c8f0:	f00a ff86 	bl	8017800 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f6:	7f9a      	ldrb	r2, [r3, #30]
 800c8f8:	4b7b      	ldr	r3, [pc, #492]	@ (800cae8 <tcp_slowtmr+0x268>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d105      	bne.n	800c90c <tcp_slowtmr+0x8c>
      prev = pcb;
 800c900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c902:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c90a:	e270      	b.n	800cdee <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800c90c:	4b76      	ldr	r3, [pc, #472]	@ (800cae8 <tcp_slowtmr+0x268>)
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c912:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c914:	2300      	movs	r3, #0
 800c916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c922:	7d1b      	ldrb	r3, [r3, #20]
 800c924:	2b02      	cmp	r3, #2
 800c926:	d10a      	bne.n	800c93e <tcp_slowtmr+0xbe>
 800c928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c92e:	2b05      	cmp	r3, #5
 800c930:	d905      	bls.n	800c93e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c936:	3301      	adds	r3, #1
 800c938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c93c:	e11e      	b.n	800cb7c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c940:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c944:	2b0b      	cmp	r3, #11
 800c946:	d905      	bls.n	800c954 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c94c:	3301      	adds	r3, #1
 800c94e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c952:	e113      	b.n	800cb7c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c956:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d075      	beq.n	800ca4a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <tcp_slowtmr+0xf4>
 800c966:	4b62      	ldr	r3, [pc, #392]	@ (800caf0 <tcp_slowtmr+0x270>)
 800c968:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c96c:	4965      	ldr	r1, [pc, #404]	@ (800cb04 <tcp_slowtmr+0x284>)
 800c96e:	4862      	ldr	r0, [pc, #392]	@ (800caf8 <tcp_slowtmr+0x278>)
 800c970:	f00a ff46 	bl	8017800 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d106      	bne.n	800c98a <tcp_slowtmr+0x10a>
 800c97c:	4b5c      	ldr	r3, [pc, #368]	@ (800caf0 <tcp_slowtmr+0x270>)
 800c97e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c982:	4961      	ldr	r1, [pc, #388]	@ (800cb08 <tcp_slowtmr+0x288>)
 800c984:	485c      	ldr	r0, [pc, #368]	@ (800caf8 <tcp_slowtmr+0x278>)
 800c986:	f00a ff3b 	bl	8017800 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c990:	2b0b      	cmp	r3, #11
 800c992:	d905      	bls.n	800c9a0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c998:	3301      	adds	r3, #1
 800c99a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c99e:	e0ed      	b.n	800cb7c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	4a58      	ldr	r2, [pc, #352]	@ (800cb0c <tcp_slowtmr+0x28c>)
 800c9aa:	5cd3      	ldrb	r3, [r2, r3]
 800c9ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9b4:	7c7a      	ldrb	r2, [r7, #17]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d907      	bls.n	800c9ca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9d0:	7c7a      	ldrb	r2, [r7, #17]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	f200 80d2 	bhi.w	800cb7c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c9d8:	2301      	movs	r3, #1
 800c9da:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d108      	bne.n	800c9f8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c9e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9e8:	f005 f968 	bl	8011cbc <tcp_zero_window_probe>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d014      	beq.n	800ca1c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	623b      	str	r3, [r7, #32]
 800c9f6:	e011      	b.n	800ca1c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c9fe:	4619      	mov	r1, r3
 800ca00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca02:	f004 f82d 	bl	8010a60 <tcp_split_unsent_seg>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d107      	bne.n	800ca1c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ca0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca0e:	f004 faad 	bl	8010f6c <tcp_output>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d101      	bne.n	800ca1c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ca1c:	6a3b      	ldr	r3, [r7, #32]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 80ac 	beq.w	800cb7c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ca24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ca2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ca32:	2b06      	cmp	r3, #6
 800ca34:	f200 80a2 	bhi.w	800cb7c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ca38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ca3e:	3301      	adds	r3, #1
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca44:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ca48:	e098      	b.n	800cb7c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ca4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	db0f      	blt.n	800ca74 <tcp_slowtmr+0x1f4>
 800ca54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca5a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d008      	beq.n	800ca74 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ca62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	b21a      	sxth	r2, r3
 800ca70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca72:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ca74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca76:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ca7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ca80:	429a      	cmp	r2, r3
 800ca82:	db7b      	blt.n	800cb7c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ca84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca86:	f004 fd65 	bl	8011554 <tcp_rexmit_rto_prepare>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d007      	beq.n	800caa0 <tcp_slowtmr+0x220>
 800ca90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d171      	bne.n	800cb7c <tcp_slowtmr+0x2fc>
 800ca98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d06d      	beq.n	800cb7c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800caa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa2:	7d1b      	ldrb	r3, [r3, #20]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d03a      	beq.n	800cb1e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800caa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800caae:	2b0c      	cmp	r3, #12
 800cab0:	bf28      	it	cs
 800cab2:	230c      	movcs	r3, #12
 800cab4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800cabc:	10db      	asrs	r3, r3, #3
 800cabe:	b21b      	sxth	r3, r3
 800cac0:	461a      	mov	r2, r3
 800cac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800cac8:	4413      	add	r3, r2
 800caca:	7efa      	ldrb	r2, [r7, #27]
 800cacc:	4910      	ldr	r1, [pc, #64]	@ (800cb10 <tcp_slowtmr+0x290>)
 800cace:	5c8a      	ldrb	r2, [r1, r2]
 800cad0:	4093      	lsls	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800cada:	4293      	cmp	r3, r2
 800cadc:	dc1a      	bgt.n	800cb14 <tcp_slowtmr+0x294>
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	b21a      	sxth	r2, r3
 800cae2:	e019      	b.n	800cb18 <tcp_slowtmr+0x298>
 800cae4:	20008fa8 	.word	0x20008fa8
 800cae8:	20008fbe 	.word	0x20008fbe
 800caec:	20008fb4 	.word	0x20008fb4
 800caf0:	0801a9f8 	.word	0x0801a9f8
 800caf4:	0801ad3c 	.word	0x0801ad3c
 800caf8:	0801aa3c 	.word	0x0801aa3c
 800cafc:	0801ad68 	.word	0x0801ad68
 800cb00:	0801ad94 	.word	0x0801ad94
 800cb04:	0801adc4 	.word	0x0801adc4
 800cb08:	0801adf8 	.word	0x0801adf8
 800cb0c:	0802043c 	.word	0x0802043c
 800cb10:	0802042c 	.word	0x0802042c
 800cb14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800cb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb20:	2200      	movs	r2, #0
 800cb22:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cb30:	4293      	cmp	r3, r2
 800cb32:	bf28      	it	cs
 800cb34:	4613      	movcs	r3, r2
 800cb36:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cb38:	8a7b      	ldrh	r3, [r7, #18]
 800cb3a:	085b      	lsrs	r3, r3, #1
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb40:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cb4e:	005b      	lsls	r3, r3, #1
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d206      	bcs.n	800cb64 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb60:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800cb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb66:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800cb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800cb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb70:	2200      	movs	r2, #0
 800cb72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800cb76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb78:	f004 fd5c 	bl	8011634 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800cb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7e:	7d1b      	ldrb	r3, [r3, #20]
 800cb80:	2b06      	cmp	r3, #6
 800cb82:	d111      	bne.n	800cba8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800cb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb86:	8b5b      	ldrh	r3, [r3, #26]
 800cb88:	f003 0310 	and.w	r3, r3, #16
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00b      	beq.n	800cba8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb90:	4b9c      	ldr	r3, [pc, #624]	@ (800ce04 <tcp_slowtmr+0x584>)
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb96:	6a1b      	ldr	r3, [r3, #32]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	2b28      	cmp	r3, #40	@ 0x28
 800cb9c:	d904      	bls.n	800cba8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800cb9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cba2:	3301      	adds	r3, #1
 800cba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbaa:	7a5b      	ldrb	r3, [r3, #9]
 800cbac:	f003 0308 	and.w	r3, r3, #8
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d04a      	beq.n	800cc4a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	d003      	beq.n	800cbc4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800cbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cbc0:	2b07      	cmp	r3, #7
 800cbc2:	d142      	bne.n	800cc4a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbc4:	4b8f      	ldr	r3, [pc, #572]	@ (800ce04 <tcp_slowtmr+0x584>)
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbca:	6a1b      	ldr	r3, [r3, #32]
 800cbcc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cbd4:	4b8c      	ldr	r3, [pc, #560]	@ (800ce08 <tcp_slowtmr+0x588>)
 800cbd6:	440b      	add	r3, r1
 800cbd8:	498c      	ldr	r1, [pc, #560]	@ (800ce0c <tcp_slowtmr+0x58c>)
 800cbda:	fba1 1303 	umull	r1, r3, r1, r3
 800cbde:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d90a      	bls.n	800cbfa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800cbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbe8:	3301      	adds	r3, #1
 800cbea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800cbee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cbf8:	e027      	b.n	800cc4a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbfa:	4b82      	ldr	r3, [pc, #520]	@ (800ce04 <tcp_slowtmr+0x584>)
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc06:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cc10:	4618      	mov	r0, r3
 800cc12:	4b7f      	ldr	r3, [pc, #508]	@ (800ce10 <tcp_slowtmr+0x590>)
 800cc14:	fb00 f303 	mul.w	r3, r0, r3
 800cc18:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cc1a:	497c      	ldr	r1, [pc, #496]	@ (800ce0c <tcp_slowtmr+0x58c>)
 800cc1c:	fba1 1303 	umull	r1, r3, r1, r3
 800cc20:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d911      	bls.n	800cc4a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cc26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc28:	f005 f808 	bl	8011c3c <tcp_keepalive>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cc32:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d107      	bne.n	800cc4a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cc40:	3301      	adds	r3, #1
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc46:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d011      	beq.n	800cc76 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cc52:	4b6c      	ldr	r3, [pc, #432]	@ (800ce04 <tcp_slowtmr+0x584>)
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	1ad2      	subs	r2, r2, r3
 800cc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cc62:	4619      	mov	r1, r3
 800cc64:	460b      	mov	r3, r1
 800cc66:	005b      	lsls	r3, r3, #1
 800cc68:	440b      	add	r3, r1
 800cc6a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d302      	bcc.n	800cc76 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800cc70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc72:	f000 fec9 	bl	800da08 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc78:	7d1b      	ldrb	r3, [r3, #20]
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d10b      	bne.n	800cc96 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc7e:	4b61      	ldr	r3, [pc, #388]	@ (800ce04 <tcp_slowtmr+0x584>)
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc84:	6a1b      	ldr	r3, [r3, #32]
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	2b28      	cmp	r3, #40	@ 0x28
 800cc8a:	d904      	bls.n	800cc96 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800cc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc90:	3301      	adds	r3, #1
 800cc92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc98:	7d1b      	ldrb	r3, [r3, #20]
 800cc9a:	2b09      	cmp	r3, #9
 800cc9c:	d10b      	bne.n	800ccb6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc9e:	4b59      	ldr	r3, [pc, #356]	@ (800ce04 <tcp_slowtmr+0x584>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca4:	6a1b      	ldr	r3, [r3, #32]
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	2bf0      	cmp	r3, #240	@ 0xf0
 800ccaa:	d904      	bls.n	800ccb6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800ccb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d060      	beq.n	800cd80 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800ccbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccc4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800ccc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccc8:	f000 fcea 	bl	800d6a0 <tcp_pcb_purge>
      if (prev != NULL) {
 800cccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d010      	beq.n	800ccf4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ccd2:	4b50      	ldr	r3, [pc, #320]	@ (800ce14 <tcp_slowtmr+0x594>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d106      	bne.n	800ccea <tcp_slowtmr+0x46a>
 800ccdc:	4b4e      	ldr	r3, [pc, #312]	@ (800ce18 <tcp_slowtmr+0x598>)
 800ccde:	f240 526d 	movw	r2, #1389	@ 0x56d
 800cce2:	494e      	ldr	r1, [pc, #312]	@ (800ce1c <tcp_slowtmr+0x59c>)
 800cce4:	484e      	ldr	r0, [pc, #312]	@ (800ce20 <tcp_slowtmr+0x5a0>)
 800cce6:	f00a fd8b 	bl	8017800 <iprintf>
        prev->next = pcb->next;
 800ccea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccec:	68da      	ldr	r2, [r3, #12]
 800ccee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf0:	60da      	str	r2, [r3, #12]
 800ccf2:	e00f      	b.n	800cd14 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ccf4:	4b47      	ldr	r3, [pc, #284]	@ (800ce14 <tcp_slowtmr+0x594>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d006      	beq.n	800cd0c <tcp_slowtmr+0x48c>
 800ccfe:	4b46      	ldr	r3, [pc, #280]	@ (800ce18 <tcp_slowtmr+0x598>)
 800cd00:	f240 5271 	movw	r2, #1393	@ 0x571
 800cd04:	4947      	ldr	r1, [pc, #284]	@ (800ce24 <tcp_slowtmr+0x5a4>)
 800cd06:	4846      	ldr	r0, [pc, #280]	@ (800ce20 <tcp_slowtmr+0x5a0>)
 800cd08:	f00a fd7a 	bl	8017800 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	4a40      	ldr	r2, [pc, #256]	@ (800ce14 <tcp_slowtmr+0x594>)
 800cd12:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cd14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d013      	beq.n	800cd44 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cd24:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800cd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd28:	3304      	adds	r3, #4
 800cd2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd2c:	8ad2      	ldrh	r2, [r2, #22]
 800cd2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd30:	8b09      	ldrh	r1, [r1, #24]
 800cd32:	9102      	str	r1, [sp, #8]
 800cd34:	9201      	str	r2, [sp, #4]
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	462b      	mov	r3, r5
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	4601      	mov	r1, r0
 800cd3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd40:	f004 fec8 	bl	8011ad4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800cd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4c:	7d1b      	ldrb	r3, [r3, #20]
 800cd4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cd5a:	6838      	ldr	r0, [r7, #0]
 800cd5c:	f7ff f838 	bl	800bdd0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800cd60:	4b31      	ldr	r3, [pc, #196]	@ (800ce28 <tcp_slowtmr+0x5a8>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d004      	beq.n	800cd76 <tcp_slowtmr+0x4f6>
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f06f 010c 	mvn.w	r1, #12
 800cd72:	68b8      	ldr	r0, [r7, #8]
 800cd74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cd76:	4b2c      	ldr	r3, [pc, #176]	@ (800ce28 <tcp_slowtmr+0x5a8>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d037      	beq.n	800cdee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cd7e:	e592      	b.n	800c8a6 <tcp_slowtmr+0x26>
      prev = pcb;
 800cd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd82:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800cd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8c:	7f1b      	ldrb	r3, [r3, #28]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd94:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd98:	7f1a      	ldrb	r2, [r3, #28]
 800cd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9c:	7f5b      	ldrb	r3, [r3, #29]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d325      	bcc.n	800cdee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda4:	2200      	movs	r2, #0
 800cda6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800cda8:	4b1f      	ldr	r3, [pc, #124]	@ (800ce28 <tcp_slowtmr+0x5a8>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00b      	beq.n	800cdd0 <tcp_slowtmr+0x550>
 800cdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdc0:	6912      	ldr	r2, [r2, #16]
 800cdc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	4798      	blx	r3
 800cdc8:	4603      	mov	r3, r0
 800cdca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cdce:	e002      	b.n	800cdd6 <tcp_slowtmr+0x556>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800cdd6:	4b14      	ldr	r3, [pc, #80]	@ (800ce28 <tcp_slowtmr+0x5a8>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f47f ad62 	bne.w	800c8a4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cde0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cde8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdea:	f004 f8bf 	bl	8010f6c <tcp_output>
  while (pcb != NULL) {
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f47f ad5e 	bne.w	800c8b2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800cdfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ce2c <tcp_slowtmr+0x5ac>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ce00:	e069      	b.n	800ced6 <tcp_slowtmr+0x656>
 800ce02:	bf00      	nop
 800ce04:	20008fa8 	.word	0x20008fa8
 800ce08:	000a4cb8 	.word	0x000a4cb8
 800ce0c:	10624dd3 	.word	0x10624dd3
 800ce10:	000124f8 	.word	0x000124f8
 800ce14:	20008fb4 	.word	0x20008fb4
 800ce18:	0801a9f8 	.word	0x0801a9f8
 800ce1c:	0801ae30 	.word	0x0801ae30
 800ce20:	0801aa3c 	.word	0x0801aa3c
 800ce24:	0801ae5c 	.word	0x0801ae5c
 800ce28:	20008fbc 	.word	0x20008fbc
 800ce2c:	20008fb8 	.word	0x20008fb8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce32:	7d1b      	ldrb	r3, [r3, #20]
 800ce34:	2b0a      	cmp	r3, #10
 800ce36:	d006      	beq.n	800ce46 <tcp_slowtmr+0x5c6>
 800ce38:	4b2b      	ldr	r3, [pc, #172]	@ (800cee8 <tcp_slowtmr+0x668>)
 800ce3a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ce3e:	492b      	ldr	r1, [pc, #172]	@ (800ceec <tcp_slowtmr+0x66c>)
 800ce40:	482b      	ldr	r0, [pc, #172]	@ (800cef0 <tcp_slowtmr+0x670>)
 800ce42:	f00a fcdd 	bl	8017800 <iprintf>
    pcb_remove = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ce4c:	4b29      	ldr	r3, [pc, #164]	@ (800cef4 <tcp_slowtmr+0x674>)
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	1ad3      	subs	r3, r2, r3
 800ce56:	2bf0      	cmp	r3, #240	@ 0xf0
 800ce58:	d904      	bls.n	800ce64 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ce5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce5e:	3301      	adds	r3, #1
 800ce60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d02f      	beq.n	800cecc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ce6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce6e:	f000 fc17 	bl	800d6a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ce72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d010      	beq.n	800ce9a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ce78:	4b1f      	ldr	r3, [pc, #124]	@ (800cef8 <tcp_slowtmr+0x678>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d106      	bne.n	800ce90 <tcp_slowtmr+0x610>
 800ce82:	4b19      	ldr	r3, [pc, #100]	@ (800cee8 <tcp_slowtmr+0x668>)
 800ce84:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ce88:	491c      	ldr	r1, [pc, #112]	@ (800cefc <tcp_slowtmr+0x67c>)
 800ce8a:	4819      	ldr	r0, [pc, #100]	@ (800cef0 <tcp_slowtmr+0x670>)
 800ce8c:	f00a fcb8 	bl	8017800 <iprintf>
        prev->next = pcb->next;
 800ce90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce92:	68da      	ldr	r2, [r3, #12]
 800ce94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce96:	60da      	str	r2, [r3, #12]
 800ce98:	e00f      	b.n	800ceba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ce9a:	4b17      	ldr	r3, [pc, #92]	@ (800cef8 <tcp_slowtmr+0x678>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d006      	beq.n	800ceb2 <tcp_slowtmr+0x632>
 800cea4:	4b10      	ldr	r3, [pc, #64]	@ (800cee8 <tcp_slowtmr+0x668>)
 800cea6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ceaa:	4915      	ldr	r1, [pc, #84]	@ (800cf00 <tcp_slowtmr+0x680>)
 800ceac:	4810      	ldr	r0, [pc, #64]	@ (800cef0 <tcp_slowtmr+0x670>)
 800ceae:	f00a fca7 	bl	8017800 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	4a10      	ldr	r2, [pc, #64]	@ (800cef8 <tcp_slowtmr+0x678>)
 800ceb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ceba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cec4:	69f8      	ldr	r0, [r7, #28]
 800cec6:	f7fe ff83 	bl	800bdd0 <tcp_free>
 800ceca:	e004      	b.n	800ced6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800cecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cece:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ced0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ced6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1a9      	bne.n	800ce30 <tcp_slowtmr+0x5b0>
    }
  }
}
 800cedc:	bf00      	nop
 800cede:	bf00      	nop
 800cee0:	3730      	adds	r7, #48	@ 0x30
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bdb0      	pop	{r4, r5, r7, pc}
 800cee6:	bf00      	nop
 800cee8:	0801a9f8 	.word	0x0801a9f8
 800ceec:	0801ae88 	.word	0x0801ae88
 800cef0:	0801aa3c 	.word	0x0801aa3c
 800cef4:	20008fa8 	.word	0x20008fa8
 800cef8:	20008fb8 	.word	0x20008fb8
 800cefc:	0801aeb8 	.word	0x0801aeb8
 800cf00:	0801aee0 	.word	0x0801aee0

0800cf04 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cf0a:	4b2d      	ldr	r3, [pc, #180]	@ (800cfc0 <tcp_fasttmr+0xbc>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	4b2b      	ldr	r3, [pc, #172]	@ (800cfc0 <tcp_fasttmr+0xbc>)
 800cf14:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cf16:	4b2b      	ldr	r3, [pc, #172]	@ (800cfc4 <tcp_fasttmr+0xc0>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cf1c:	e048      	b.n	800cfb0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	7f9a      	ldrb	r2, [r3, #30]
 800cf22:	4b27      	ldr	r3, [pc, #156]	@ (800cfc0 <tcp_fasttmr+0xbc>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d03f      	beq.n	800cfaa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cf2a:	4b25      	ldr	r3, [pc, #148]	@ (800cfc0 <tcp_fasttmr+0xbc>)
 800cf2c:	781a      	ldrb	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	8b5b      	ldrh	r3, [r3, #26]
 800cf36:	f003 0301 	and.w	r3, r3, #1
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d010      	beq.n	800cf60 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	8b5b      	ldrh	r3, [r3, #26]
 800cf42:	f043 0302 	orr.w	r3, r3, #2
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f004 f80d 	bl	8010f6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	8b5b      	ldrh	r3, [r3, #26]
 800cf56:	f023 0303 	bic.w	r3, r3, #3
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	8b5b      	ldrh	r3, [r3, #26]
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d009      	beq.n	800cf80 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	8b5b      	ldrh	r3, [r3, #26]
 800cf70:	f023 0308 	bic.w	r3, r3, #8
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7ff f8bc 	bl	800c0f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00a      	beq.n	800cfa4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cf8e:	4b0e      	ldr	r3, [pc, #56]	@ (800cfc8 <tcp_fasttmr+0xc4>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f819 	bl	800cfcc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc8 <tcp_fasttmr+0xc4>)
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d000      	beq.n	800cfa4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cfa2:	e7b8      	b.n	800cf16 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	607b      	str	r3, [r7, #4]
 800cfa8:	e002      	b.n	800cfb0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1b3      	bne.n	800cf1e <tcp_fasttmr+0x1a>
    }
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	bf00      	nop
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20008fbe 	.word	0x20008fbe
 800cfc4:	20008fb4 	.word	0x20008fb4
 800cfc8:	20008fbc 	.word	0x20008fbc

0800cfcc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d109      	bne.n	800cfee <tcp_process_refused_data+0x22>
 800cfda:	4b37      	ldr	r3, [pc, #220]	@ (800d0b8 <tcp_process_refused_data+0xec>)
 800cfdc:	f240 6209 	movw	r2, #1545	@ 0x609
 800cfe0:	4936      	ldr	r1, [pc, #216]	@ (800d0bc <tcp_process_refused_data+0xf0>)
 800cfe2:	4837      	ldr	r0, [pc, #220]	@ (800d0c0 <tcp_process_refused_data+0xf4>)
 800cfe4:	f00a fc0c 	bl	8017800 <iprintf>
 800cfe8:	f06f 030f 	mvn.w	r3, #15
 800cfec:	e060      	b.n	800d0b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cff2:	7b5b      	ldrb	r3, [r3, #13]
 800cff4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cffa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00b      	beq.n	800d024 <tcp_process_refused_data+0x58>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6918      	ldr	r0, [r3, #16]
 800d016:	2300      	movs	r3, #0
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	47a0      	blx	r4
 800d01e:	4603      	mov	r3, r0
 800d020:	73fb      	strb	r3, [r7, #15]
 800d022:	e007      	b.n	800d034 <tcp_process_refused_data+0x68>
 800d024:	2300      	movs	r3, #0
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	6879      	ldr	r1, [r7, #4]
 800d02a:	2000      	movs	r0, #0
 800d02c:	f000 f8c2 	bl	800d1b4 <tcp_recv_null>
 800d030:	4603      	mov	r3, r0
 800d032:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d12a      	bne.n	800d092 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d03c:	7bbb      	ldrb	r3, [r7, #14]
 800d03e:	f003 0320 	and.w	r3, r3, #32
 800d042:	2b00      	cmp	r3, #0
 800d044:	d033      	beq.n	800d0ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d04a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d04e:	d005      	beq.n	800d05c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d054:	3301      	adds	r3, #1
 800d056:	b29a      	uxth	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00b      	beq.n	800d07e <tcp_process_refused_data+0xb2>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6918      	ldr	r0, [r3, #16]
 800d070:	2300      	movs	r3, #0
 800d072:	2200      	movs	r2, #0
 800d074:	6879      	ldr	r1, [r7, #4]
 800d076:	47a0      	blx	r4
 800d078:	4603      	mov	r3, r0
 800d07a:	73fb      	strb	r3, [r7, #15]
 800d07c:	e001      	b.n	800d082 <tcp_process_refused_data+0xb6>
 800d07e:	2300      	movs	r3, #0
 800d080:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d086:	f113 0f0d 	cmn.w	r3, #13
 800d08a:	d110      	bne.n	800d0ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d08c:	f06f 030c 	mvn.w	r3, #12
 800d090:	e00e      	b.n	800d0b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d096:	f113 0f0d 	cmn.w	r3, #13
 800d09a:	d102      	bne.n	800d0a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d09c:	f06f 030c 	mvn.w	r3, #12
 800d0a0:	e006      	b.n	800d0b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d0a8:	f06f 0304 	mvn.w	r3, #4
 800d0ac:	e000      	b.n	800d0b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd90      	pop	{r4, r7, pc}
 800d0b8:	0801a9f8 	.word	0x0801a9f8
 800d0bc:	0801af08 	.word	0x0801af08
 800d0c0:	0801aa3c 	.word	0x0801aa3c

0800d0c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d0cc:	e007      	b.n	800d0de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f80a 	bl	800d0ee <tcp_seg_free>
    seg = next;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1f4      	bne.n	800d0ce <tcp_segs_free+0xa>
  }
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b082      	sub	sp, #8
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00c      	beq.n	800d116 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d004      	beq.n	800d10e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fe fbb1 	bl	800b870 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d10e:	6879      	ldr	r1, [r7, #4]
 800d110:	2003      	movs	r0, #3
 800d112:	f7fd fd2b 	bl	800ab6c <memp_free>
  }
}
 800d116:	bf00      	nop
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	460b      	mov	r3, r1
 800d12a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d107      	bne.n	800d142 <tcp_setprio+0x22>
 800d132:	4b07      	ldr	r3, [pc, #28]	@ (800d150 <tcp_setprio+0x30>)
 800d134:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800d138:	4906      	ldr	r1, [pc, #24]	@ (800d154 <tcp_setprio+0x34>)
 800d13a:	4807      	ldr	r0, [pc, #28]	@ (800d158 <tcp_setprio+0x38>)
 800d13c:	f00a fb60 	bl	8017800 <iprintf>
 800d140:	e002      	b.n	800d148 <tcp_setprio+0x28>

  pcb->prio = prio;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	78fa      	ldrb	r2, [r7, #3]
 800d146:	755a      	strb	r2, [r3, #21]
}
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	0801a9f8 	.word	0x0801a9f8
 800d154:	0801af30 	.word	0x0801af30
 800d158:	0801aa3c 	.word	0x0801aa3c

0800d15c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d106      	bne.n	800d178 <tcp_seg_copy+0x1c>
 800d16a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1a8 <tcp_seg_copy+0x4c>)
 800d16c:	f240 6282 	movw	r2, #1666	@ 0x682
 800d170:	490e      	ldr	r1, [pc, #56]	@ (800d1ac <tcp_seg_copy+0x50>)
 800d172:	480f      	ldr	r0, [pc, #60]	@ (800d1b0 <tcp_seg_copy+0x54>)
 800d174:	f00a fb44 	bl	8017800 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d178:	2003      	movs	r0, #3
 800d17a:	f7fd fc87 	bl	800aa8c <memp_malloc>
 800d17e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <tcp_seg_copy+0x2e>
    return NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	e00a      	b.n	800d1a0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d18a:	2210      	movs	r2, #16
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f00a fc6d 	bl	8017a6e <memcpy>
  pbuf_ref(cseg->p);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fc09 	bl	800b9b0 <pbuf_ref>
  return cseg;
 800d19e:	68fb      	ldr	r3, [r7, #12]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	0801a9f8 	.word	0x0801a9f8
 800d1ac:	0801af4c 	.word	0x0801af4c
 800d1b0:	0801aa3c 	.word	0x0801aa3c

0800d1b4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d109      	bne.n	800d1dc <tcp_recv_null+0x28>
 800d1c8:	4b12      	ldr	r3, [pc, #72]	@ (800d214 <tcp_recv_null+0x60>)
 800d1ca:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d1ce:	4912      	ldr	r1, [pc, #72]	@ (800d218 <tcp_recv_null+0x64>)
 800d1d0:	4812      	ldr	r0, [pc, #72]	@ (800d21c <tcp_recv_null+0x68>)
 800d1d2:	f00a fb15 	bl	8017800 <iprintf>
 800d1d6:	f06f 030f 	mvn.w	r3, #15
 800d1da:	e016      	b.n	800d20a <tcp_recv_null+0x56>

  if (p != NULL) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d009      	beq.n	800d1f6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	891b      	ldrh	r3, [r3, #8]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	68b8      	ldr	r0, [r7, #8]
 800d1ea:	f7ff fab3 	bl	800c754 <tcp_recved>
    pbuf_free(p);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7fe fb3e 	bl	800b870 <pbuf_free>
 800d1f4:	e008      	b.n	800d208 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d1f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d104      	bne.n	800d208 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d1fe:	68b8      	ldr	r0, [r7, #8]
 800d200:	f7fe ffe4 	bl	800c1cc <tcp_close>
 800d204:	4603      	mov	r3, r0
 800d206:	e000      	b.n	800d20a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	0801a9f8 	.word	0x0801a9f8
 800d218:	0801af68 	.word	0x0801af68
 800d21c:	0801aa3c 	.word	0x0801aa3c

0800d220 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	4603      	mov	r3, r0
 800d228:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d22a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	db01      	blt.n	800d236 <tcp_kill_prio+0x16>
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	e000      	b.n	800d238 <tcp_kill_prio+0x18>
 800d236:	237f      	movs	r3, #127	@ 0x7f
 800d238:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d23a:	7afb      	ldrb	r3, [r7, #11]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d034      	beq.n	800d2aa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d240:	7afb      	ldrb	r3, [r7, #11]
 800d242:	3b01      	subs	r3, #1
 800d244:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d24e:	4b19      	ldr	r3, [pc, #100]	@ (800d2b4 <tcp_kill_prio+0x94>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	617b      	str	r3, [r7, #20]
 800d254:	e01f      	b.n	800d296 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	7d5b      	ldrb	r3, [r3, #21]
 800d25a:	7afa      	ldrb	r2, [r7, #11]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d80c      	bhi.n	800d27a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d264:	7afa      	ldrb	r2, [r7, #11]
 800d266:	429a      	cmp	r2, r3
 800d268:	d112      	bne.n	800d290 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d26a:	4b13      	ldr	r3, [pc, #76]	@ (800d2b8 <tcp_kill_prio+0x98>)
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	1ad3      	subs	r3, r2, r3
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	429a      	cmp	r2, r3
 800d278:	d80a      	bhi.n	800d290 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d27a:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b8 <tcp_kill_prio+0x98>)
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	7d5b      	ldrb	r3, [r3, #21]
 800d28e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	617b      	str	r3, [r7, #20]
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1dc      	bne.n	800d256 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d004      	beq.n	800d2ac <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d2a2:	6938      	ldr	r0, [r7, #16]
 800d2a4:	f7ff f87c 	bl	800c3a0 <tcp_abort>
 800d2a8:	e000      	b.n	800d2ac <tcp_kill_prio+0x8c>
    return;
 800d2aa:	bf00      	nop
  }
}
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20008fb4 	.word	0x20008fb4
 800d2b8:	20008fa8 	.word	0x20008fa8

0800d2bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d2c6:	79fb      	ldrb	r3, [r7, #7]
 800d2c8:	2b08      	cmp	r3, #8
 800d2ca:	d009      	beq.n	800d2e0 <tcp_kill_state+0x24>
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	2b09      	cmp	r3, #9
 800d2d0:	d006      	beq.n	800d2e0 <tcp_kill_state+0x24>
 800d2d2:	4b1a      	ldr	r3, [pc, #104]	@ (800d33c <tcp_kill_state+0x80>)
 800d2d4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d2d8:	4919      	ldr	r1, [pc, #100]	@ (800d340 <tcp_kill_state+0x84>)
 800d2da:	481a      	ldr	r0, [pc, #104]	@ (800d344 <tcp_kill_state+0x88>)
 800d2dc:	f00a fa90 	bl	8017800 <iprintf>

  inactivity = 0;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2e8:	4b17      	ldr	r3, [pc, #92]	@ (800d348 <tcp_kill_state+0x8c>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	617b      	str	r3, [r7, #20]
 800d2ee:	e017      	b.n	800d320 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	7d1b      	ldrb	r3, [r3, #20]
 800d2f4:	79fa      	ldrb	r2, [r7, #7]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d10f      	bne.n	800d31a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d2fa:	4b14      	ldr	r3, [pc, #80]	@ (800d34c <tcp_kill_state+0x90>)
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	6a1b      	ldr	r3, [r3, #32]
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	429a      	cmp	r2, r3
 800d308:	d807      	bhi.n	800d31a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d30a:	4b10      	ldr	r3, [pc, #64]	@ (800d34c <tcp_kill_state+0x90>)
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	617b      	str	r3, [r7, #20]
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1e4      	bne.n	800d2f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d003      	beq.n	800d334 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d32c:	2100      	movs	r1, #0
 800d32e:	6938      	ldr	r0, [r7, #16]
 800d330:	f7fe ff78 	bl	800c224 <tcp_abandon>
  }
}
 800d334:	bf00      	nop
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	0801a9f8 	.word	0x0801a9f8
 800d340:	0801af84 	.word	0x0801af84
 800d344:	0801aa3c 	.word	0x0801aa3c
 800d348:	20008fb4 	.word	0x20008fb4
 800d34c:	20008fa8 	.word	0x20008fa8

0800d350 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d35e:	4b12      	ldr	r3, [pc, #72]	@ (800d3a8 <tcp_kill_timewait+0x58>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	60fb      	str	r3, [r7, #12]
 800d364:	e012      	b.n	800d38c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d366:	4b11      	ldr	r3, [pc, #68]	@ (800d3ac <tcp_kill_timewait+0x5c>)
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6a1b      	ldr	r3, [r3, #32]
 800d36e:	1ad3      	subs	r3, r2, r3
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	429a      	cmp	r2, r3
 800d374:	d807      	bhi.n	800d386 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d376:	4b0d      	ldr	r3, [pc, #52]	@ (800d3ac <tcp_kill_timewait+0x5c>)
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d1e9      	bne.n	800d366 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d398:	68b8      	ldr	r0, [r7, #8]
 800d39a:	f7ff f801 	bl	800c3a0 <tcp_abort>
  }
}
 800d39e:	bf00      	nop
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20008fb8 	.word	0x20008fb8
 800d3ac:	20008fa8 	.word	0x20008fa8

0800d3b0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d3b6:	4b10      	ldr	r3, [pc, #64]	@ (800d3f8 <tcp_handle_closepend+0x48>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d3bc:	e014      	b.n	800d3e8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	8b5b      	ldrh	r3, [r3, #26]
 800d3c8:	f003 0308 	and.w	r3, r3, #8
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d009      	beq.n	800d3e4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	8b5b      	ldrh	r3, [r3, #26]
 800d3d4:	f023 0308 	bic.w	r3, r3, #8
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7fe fe8a 	bl	800c0f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1e7      	bne.n	800d3be <tcp_handle_closepend+0xe>
  }
}
 800d3ee:	bf00      	nop
 800d3f0:	bf00      	nop
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	20008fb4 	.word	0x20008fb4

0800d3fc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	4603      	mov	r3, r0
 800d404:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d406:	2001      	movs	r0, #1
 800d408:	f7fd fb40 	bl	800aa8c <memp_malloc>
 800d40c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d126      	bne.n	800d462 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d414:	f7ff ffcc 	bl	800d3b0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d418:	f7ff ff9a 	bl	800d350 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d41c:	2001      	movs	r0, #1
 800d41e:	f7fd fb35 	bl	800aa8c <memp_malloc>
 800d422:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d11b      	bne.n	800d462 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d42a:	2009      	movs	r0, #9
 800d42c:	f7ff ff46 	bl	800d2bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d430:	2001      	movs	r0, #1
 800d432:	f7fd fb2b 	bl	800aa8c <memp_malloc>
 800d436:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d111      	bne.n	800d462 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d43e:	2008      	movs	r0, #8
 800d440:	f7ff ff3c 	bl	800d2bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d444:	2001      	movs	r0, #1
 800d446:	f7fd fb21 	bl	800aa8c <memp_malloc>
 800d44a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d107      	bne.n	800d462 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff fee3 	bl	800d220 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d45a:	2001      	movs	r0, #1
 800d45c:	f7fd fb16 	bl	800aa8c <memp_malloc>
 800d460:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d03f      	beq.n	800d4e8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d468:	229c      	movs	r2, #156	@ 0x9c
 800d46a:	2100      	movs	r1, #0
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f00a fa66 	bl	801793e <memset>
    pcb->prio = prio;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	79fa      	ldrb	r2, [r7, #7]
 800d476:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d47e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d488:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	22ff      	movs	r2, #255	@ 0xff
 800d496:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d49e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2206      	movs	r2, #6
 800d4a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2206      	movs	r2, #6
 800d4ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4b4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d4be:	4b0d      	ldr	r3, [pc, #52]	@ (800d4f4 <tcp_alloc+0xf8>)
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d4f8 <tcp_alloc+0xfc>)
 800d4c8:	781a      	ldrb	r2, [r3, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d4d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	4a08      	ldr	r2, [pc, #32]	@ (800d4fc <tcp_alloc+0x100>)
 800d4dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	4a07      	ldr	r2, [pc, #28]	@ (800d500 <tcp_alloc+0x104>)
 800d4e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20008fa8 	.word	0x20008fa8
 800d4f8:	20008fbe 	.word	0x20008fbe
 800d4fc:	0800d1b5 	.word	0x0800d1b5
 800d500:	006ddd00 	.word	0x006ddd00

0800d504 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	4603      	mov	r3, r0
 800d50c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d50e:	2040      	movs	r0, #64	@ 0x40
 800d510:	f7ff ff74 	bl	800d3fc <tcp_alloc>
 800d514:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d516:	68fb      	ldr	r3, [r7, #12]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	611a      	str	r2, [r3, #16]
  }
}
 800d536:	bf00      	nop
 800d538:	370c      	adds	r7, #12
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
	...

0800d544 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00e      	beq.n	800d572 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	7d1b      	ldrb	r3, [r3, #20]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d106      	bne.n	800d56a <tcp_recv+0x26>
 800d55c:	4b07      	ldr	r3, [pc, #28]	@ (800d57c <tcp_recv+0x38>)
 800d55e:	f240 72df 	movw	r2, #2015	@ 0x7df
 800d562:	4907      	ldr	r1, [pc, #28]	@ (800d580 <tcp_recv+0x3c>)
 800d564:	4807      	ldr	r0, [pc, #28]	@ (800d584 <tcp_recv+0x40>)
 800d566:	f00a f94b 	bl	8017800 <iprintf>
    pcb->recv = recv;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800d572:	bf00      	nop
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	0801a9f8 	.word	0x0801a9f8
 800d580:	0801af94 	.word	0x0801af94
 800d584:	0801aa3c 	.word	0x0801aa3c

0800d588 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00e      	beq.n	800d5b6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7d1b      	ldrb	r3, [r3, #20]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d106      	bne.n	800d5ae <tcp_sent+0x26>
 800d5a0:	4b07      	ldr	r3, [pc, #28]	@ (800d5c0 <tcp_sent+0x38>)
 800d5a2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800d5a6:	4907      	ldr	r1, [pc, #28]	@ (800d5c4 <tcp_sent+0x3c>)
 800d5a8:	4807      	ldr	r0, [pc, #28]	@ (800d5c8 <tcp_sent+0x40>)
 800d5aa:	f00a f929 	bl	8017800 <iprintf>
    pcb->sent = sent;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	683a      	ldr	r2, [r7, #0]
 800d5b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	0801a9f8 	.word	0x0801a9f8
 800d5c4:	0801afbc 	.word	0x0801afbc
 800d5c8:	0801aa3c 	.word	0x0801aa3c

0800d5cc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00e      	beq.n	800d5fa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	7d1b      	ldrb	r3, [r3, #20]
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d106      	bne.n	800d5f2 <tcp_err+0x26>
 800d5e4:	4b07      	ldr	r3, [pc, #28]	@ (800d604 <tcp_err+0x38>)
 800d5e6:	f640 020d 	movw	r2, #2061	@ 0x80d
 800d5ea:	4907      	ldr	r1, [pc, #28]	@ (800d608 <tcp_err+0x3c>)
 800d5ec:	4807      	ldr	r0, [pc, #28]	@ (800d60c <tcp_err+0x40>)
 800d5ee:	f00a f907 	bl	8017800 <iprintf>
    pcb->errf = err;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	0801a9f8 	.word	0x0801a9f8
 800d608:	0801afe4 	.word	0x0801afe4
 800d60c:	0801aa3c 	.word	0x0801aa3c

0800d610 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d008      	beq.n	800d632 <tcp_accept+0x22>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	7d1b      	ldrb	r3, [r3, #20]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d104      	bne.n	800d632 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	619a      	str	r2, [r3, #24]
  }
}
 800d632:	bf00      	nop
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
	...

0800d640 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	4613      	mov	r3, r2
 800d64c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d107      	bne.n	800d664 <tcp_poll+0x24>
 800d654:	4b0e      	ldr	r3, [pc, #56]	@ (800d690 <tcp_poll+0x50>)
 800d656:	f640 023d 	movw	r2, #2109	@ 0x83d
 800d65a:	490e      	ldr	r1, [pc, #56]	@ (800d694 <tcp_poll+0x54>)
 800d65c:	480e      	ldr	r0, [pc, #56]	@ (800d698 <tcp_poll+0x58>)
 800d65e:	f00a f8cf 	bl	8017800 <iprintf>
 800d662:	e011      	b.n	800d688 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	7d1b      	ldrb	r3, [r3, #20]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d106      	bne.n	800d67a <tcp_poll+0x3a>
 800d66c:	4b08      	ldr	r3, [pc, #32]	@ (800d690 <tcp_poll+0x50>)
 800d66e:	f640 023e 	movw	r2, #2110	@ 0x83e
 800d672:	490a      	ldr	r1, [pc, #40]	@ (800d69c <tcp_poll+0x5c>)
 800d674:	4808      	ldr	r0, [pc, #32]	@ (800d698 <tcp_poll+0x58>)
 800d676:	f00a f8c3 	bl	8017800 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	79fa      	ldrb	r2, [r7, #7]
 800d686:	775a      	strb	r2, [r3, #29]
}
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	0801a9f8 	.word	0x0801a9f8
 800d694:	0801b00c 	.word	0x0801b00c
 800d698:	0801aa3c 	.word	0x0801aa3c
 800d69c:	0801b024 	.word	0x0801b024

0800d6a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d107      	bne.n	800d6be <tcp_pcb_purge+0x1e>
 800d6ae:	4b21      	ldr	r3, [pc, #132]	@ (800d734 <tcp_pcb_purge+0x94>)
 800d6b0:	f640 0251 	movw	r2, #2129	@ 0x851
 800d6b4:	4920      	ldr	r1, [pc, #128]	@ (800d738 <tcp_pcb_purge+0x98>)
 800d6b6:	4821      	ldr	r0, [pc, #132]	@ (800d73c <tcp_pcb_purge+0x9c>)
 800d6b8:	f00a f8a2 	bl	8017800 <iprintf>
 800d6bc:	e037      	b.n	800d72e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	7d1b      	ldrb	r3, [r3, #20]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d033      	beq.n	800d72e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d6ca:	2b0a      	cmp	r3, #10
 800d6cc:	d02f      	beq.n	800d72e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d02b      	beq.n	800d72e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d007      	beq.n	800d6ee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe f8c4 	bl	800b870 <pbuf_free>
      pcb->refused_data = NULL;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d002      	beq.n	800d6fc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f986 	bl	800da08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d702:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fcdb 	bl	800d0c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff fcd6 	bl	800d0c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	0801a9f8 	.word	0x0801a9f8
 800d738:	0801b044 	.word	0x0801b044
 800d73c:	0801aa3c 	.word	0x0801aa3c

0800d740 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d106      	bne.n	800d75e <tcp_pcb_remove+0x1e>
 800d750:	4b3e      	ldr	r3, [pc, #248]	@ (800d84c <tcp_pcb_remove+0x10c>)
 800d752:	f640 0283 	movw	r2, #2179	@ 0x883
 800d756:	493e      	ldr	r1, [pc, #248]	@ (800d850 <tcp_pcb_remove+0x110>)
 800d758:	483e      	ldr	r0, [pc, #248]	@ (800d854 <tcp_pcb_remove+0x114>)
 800d75a:	f00a f851 	bl	8017800 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <tcp_pcb_remove+0x32>
 800d764:	4b39      	ldr	r3, [pc, #228]	@ (800d84c <tcp_pcb_remove+0x10c>)
 800d766:	f640 0284 	movw	r2, #2180	@ 0x884
 800d76a:	493b      	ldr	r1, [pc, #236]	@ (800d858 <tcp_pcb_remove+0x118>)
 800d76c:	4839      	ldr	r0, [pc, #228]	@ (800d854 <tcp_pcb_remove+0x114>)
 800d76e:	f00a f847 	bl	8017800 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d105      	bne.n	800d788 <tcp_pcb_remove+0x48>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68da      	ldr	r2, [r3, #12]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	e013      	b.n	800d7b0 <tcp_pcb_remove+0x70>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	60fb      	str	r3, [r7, #12]
 800d78e:	e00c      	b.n	800d7aa <tcp_pcb_remove+0x6a>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	683a      	ldr	r2, [r7, #0]
 800d796:	429a      	cmp	r2, r3
 800d798:	d104      	bne.n	800d7a4 <tcp_pcb_remove+0x64>
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	68da      	ldr	r2, [r3, #12]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	60da      	str	r2, [r3, #12]
 800d7a2:	e005      	b.n	800d7b0 <tcp_pcb_remove+0x70>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	60fb      	str	r3, [r7, #12]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1ef      	bne.n	800d790 <tcp_pcb_remove+0x50>
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d7b6:	6838      	ldr	r0, [r7, #0]
 800d7b8:	f7ff ff72 	bl	800d6a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	7d1b      	ldrb	r3, [r3, #20]
 800d7c0:	2b0a      	cmp	r3, #10
 800d7c2:	d013      	beq.n	800d7ec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d00f      	beq.n	800d7ec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	8b5b      	ldrh	r3, [r3, #26]
 800d7d0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d009      	beq.n	800d7ec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	8b5b      	ldrh	r3, [r3, #26]
 800d7dc:	f043 0302 	orr.w	r3, r3, #2
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d7e6:	6838      	ldr	r0, [r7, #0]
 800d7e8:	f003 fbc0 	bl	8010f6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	7d1b      	ldrb	r3, [r3, #20]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d020      	beq.n	800d836 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d006      	beq.n	800d80a <tcp_pcb_remove+0xca>
 800d7fc:	4b13      	ldr	r3, [pc, #76]	@ (800d84c <tcp_pcb_remove+0x10c>)
 800d7fe:	f640 0293 	movw	r2, #2195	@ 0x893
 800d802:	4916      	ldr	r1, [pc, #88]	@ (800d85c <tcp_pcb_remove+0x11c>)
 800d804:	4813      	ldr	r0, [pc, #76]	@ (800d854 <tcp_pcb_remove+0x114>)
 800d806:	f009 fffb 	bl	8017800 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d006      	beq.n	800d820 <tcp_pcb_remove+0xe0>
 800d812:	4b0e      	ldr	r3, [pc, #56]	@ (800d84c <tcp_pcb_remove+0x10c>)
 800d814:	f640 0294 	movw	r2, #2196	@ 0x894
 800d818:	4911      	ldr	r1, [pc, #68]	@ (800d860 <tcp_pcb_remove+0x120>)
 800d81a:	480e      	ldr	r0, [pc, #56]	@ (800d854 <tcp_pcb_remove+0x114>)
 800d81c:	f009 fff0 	bl	8017800 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d824:	2b00      	cmp	r3, #0
 800d826:	d006      	beq.n	800d836 <tcp_pcb_remove+0xf6>
 800d828:	4b08      	ldr	r3, [pc, #32]	@ (800d84c <tcp_pcb_remove+0x10c>)
 800d82a:	f640 0296 	movw	r2, #2198	@ 0x896
 800d82e:	490d      	ldr	r1, [pc, #52]	@ (800d864 <tcp_pcb_remove+0x124>)
 800d830:	4808      	ldr	r0, [pc, #32]	@ (800d854 <tcp_pcb_remove+0x114>)
 800d832:	f009 ffe5 	bl	8017800 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	2200      	movs	r2, #0
 800d83a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	2200      	movs	r2, #0
 800d840:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d842:	bf00      	nop
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	0801a9f8 	.word	0x0801a9f8
 800d850:	0801b060 	.word	0x0801b060
 800d854:	0801aa3c 	.word	0x0801aa3c
 800d858:	0801b07c 	.word	0x0801b07c
 800d85c:	0801b09c 	.word	0x0801b09c
 800d860:	0801b0b4 	.word	0x0801b0b4
 800d864:	0801b0d0 	.word	0x0801b0d0

0800d868 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d106      	bne.n	800d884 <tcp_next_iss+0x1c>
 800d876:	4b0a      	ldr	r3, [pc, #40]	@ (800d8a0 <tcp_next_iss+0x38>)
 800d878:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d87c:	4909      	ldr	r1, [pc, #36]	@ (800d8a4 <tcp_next_iss+0x3c>)
 800d87e:	480a      	ldr	r0, [pc, #40]	@ (800d8a8 <tcp_next_iss+0x40>)
 800d880:	f009 ffbe 	bl	8017800 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d884:	4b09      	ldr	r3, [pc, #36]	@ (800d8ac <tcp_next_iss+0x44>)
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	4b09      	ldr	r3, [pc, #36]	@ (800d8b0 <tcp_next_iss+0x48>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4413      	add	r3, r2
 800d88e:	4a07      	ldr	r2, [pc, #28]	@ (800d8ac <tcp_next_iss+0x44>)
 800d890:	6013      	str	r3, [r2, #0]
  return iss;
 800d892:	4b06      	ldr	r3, [pc, #24]	@ (800d8ac <tcp_next_iss+0x44>)
 800d894:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d896:	4618      	mov	r0, r3
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	0801a9f8 	.word	0x0801a9f8
 800d8a4:	0801b0e8 	.word	0x0801b0e8
 800d8a8:	0801aa3c 	.word	0x0801aa3c
 800d8ac:	20000030 	.word	0x20000030
 800d8b0:	20008fa8 	.word	0x20008fa8

0800d8b4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d106      	bne.n	800d8d6 <tcp_eff_send_mss_netif+0x22>
 800d8c8:	4b14      	ldr	r3, [pc, #80]	@ (800d91c <tcp_eff_send_mss_netif+0x68>)
 800d8ca:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d8ce:	4914      	ldr	r1, [pc, #80]	@ (800d920 <tcp_eff_send_mss_netif+0x6c>)
 800d8d0:	4814      	ldr	r0, [pc, #80]	@ (800d924 <tcp_eff_send_mss_netif+0x70>)
 800d8d2:	f009 ff95 	bl	8017800 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d8dc:	89fb      	ldrh	r3, [r7, #14]
 800d8de:	e019      	b.n	800d914 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8e4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d8e6:	8afb      	ldrh	r3, [r7, #22]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d012      	beq.n	800d912 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d8ec:	2328      	movs	r3, #40	@ 0x28
 800d8ee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d8f0:	8afa      	ldrh	r2, [r7, #22]
 800d8f2:	8abb      	ldrh	r3, [r7, #20]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d904      	bls.n	800d902 <tcp_eff_send_mss_netif+0x4e>
 800d8f8:	8afa      	ldrh	r2, [r7, #22]
 800d8fa:	8abb      	ldrh	r3, [r7, #20]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	e000      	b.n	800d904 <tcp_eff_send_mss_netif+0x50>
 800d902:	2300      	movs	r3, #0
 800d904:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d906:	8a7a      	ldrh	r2, [r7, #18]
 800d908:	89fb      	ldrh	r3, [r7, #14]
 800d90a:	4293      	cmp	r3, r2
 800d90c:	bf28      	it	cs
 800d90e:	4613      	movcs	r3, r2
 800d910:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d912:	89fb      	ldrh	r3, [r7, #14]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3718      	adds	r7, #24
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	0801a9f8 	.word	0x0801a9f8
 800d920:	0801b104 	.word	0x0801b104
 800d924:	0801aa3c 	.word	0x0801aa3c

0800d928 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d119      	bne.n	800d970 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d93c:	4b10      	ldr	r3, [pc, #64]	@ (800d980 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d93e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d942:	4910      	ldr	r1, [pc, #64]	@ (800d984 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d944:	4810      	ldr	r0, [pc, #64]	@ (800d988 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d946:	f009 ff5b 	bl	8017800 <iprintf>

  while (pcb != NULL) {
 800d94a:	e011      	b.n	800d970 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	429a      	cmp	r2, r3
 800d956:	d108      	bne.n	800d96a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7fe fd1e 	bl	800c3a0 <tcp_abort>
      pcb = next;
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	e002      	b.n	800d970 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1ea      	bne.n	800d94c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d976:	bf00      	nop
 800d978:	bf00      	nop
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	0801a9f8 	.word	0x0801a9f8
 800d984:	0801b12c 	.word	0x0801b12c
 800d988:	0801aa3c 	.word	0x0801aa3c

0800d98c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d02a      	beq.n	800d9f2 <tcp_netif_ip_addr_changed+0x66>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d026      	beq.n	800d9f2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d9a4:	4b15      	ldr	r3, [pc, #84]	@ (800d9fc <tcp_netif_ip_addr_changed+0x70>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff ffbc 	bl	800d928 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d9b0:	4b13      	ldr	r3, [pc, #76]	@ (800da00 <tcp_netif_ip_addr_changed+0x74>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7ff ffb6 	bl	800d928 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d017      	beq.n	800d9f2 <tcp_netif_ip_addr_changed+0x66>
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d013      	beq.n	800d9f2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800da04 <tcp_netif_ip_addr_changed+0x78>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	60fb      	str	r3, [r7, #12]
 800d9d0:	e00c      	b.n	800d9ec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d103      	bne.n	800d9e6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1ef      	bne.n	800d9d2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d9f2:	bf00      	nop
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	20008fb4 	.word	0x20008fb4
 800da00:	20008fac 	.word	0x20008fac
 800da04:	20008fb0 	.word	0x20008fb0

0800da08 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da14:	2b00      	cmp	r3, #0
 800da16:	d007      	beq.n	800da28 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7ff fb51 	bl	800d0c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800da28:	bf00      	nop
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800da30:	b590      	push	{r4, r7, lr}
 800da32:	b08d      	sub	sp, #52	@ 0x34
 800da34:	af04      	add	r7, sp, #16
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d105      	bne.n	800da4c <tcp_input+0x1c>
 800da40:	4b9b      	ldr	r3, [pc, #620]	@ (800dcb0 <tcp_input+0x280>)
 800da42:	2283      	movs	r2, #131	@ 0x83
 800da44:	499b      	ldr	r1, [pc, #620]	@ (800dcb4 <tcp_input+0x284>)
 800da46:	489c      	ldr	r0, [pc, #624]	@ (800dcb8 <tcp_input+0x288>)
 800da48:	f009 feda 	bl	8017800 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	4a9a      	ldr	r2, [pc, #616]	@ (800dcbc <tcp_input+0x28c>)
 800da52:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	895b      	ldrh	r3, [r3, #10]
 800da58:	2b13      	cmp	r3, #19
 800da5a:	f240 83d1 	bls.w	800e200 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800da5e:	4b98      	ldr	r3, [pc, #608]	@ (800dcc0 <tcp_input+0x290>)
 800da60:	695b      	ldr	r3, [r3, #20]
 800da62:	4a97      	ldr	r2, [pc, #604]	@ (800dcc0 <tcp_input+0x290>)
 800da64:	6812      	ldr	r2, [r2, #0]
 800da66:	4611      	mov	r1, r2
 800da68:	4618      	mov	r0, r3
 800da6a:	f008 fa1b 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	f040 83c7 	bne.w	800e204 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800da76:	4b92      	ldr	r3, [pc, #584]	@ (800dcc0 <tcp_input+0x290>)
 800da78:	695b      	ldr	r3, [r3, #20]
 800da7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800da7e:	2be0      	cmp	r3, #224	@ 0xe0
 800da80:	f000 83c0 	beq.w	800e204 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800da84:	4b8d      	ldr	r3, [pc, #564]	@ (800dcbc <tcp_input+0x28c>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	899b      	ldrh	r3, [r3, #12]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fc fb1b 	bl	800a0c8 <lwip_htons>
 800da92:	4603      	mov	r3, r0
 800da94:	0b1b      	lsrs	r3, r3, #12
 800da96:	b29b      	uxth	r3, r3
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800da9e:	7cbb      	ldrb	r3, [r7, #18]
 800daa0:	2b13      	cmp	r3, #19
 800daa2:	f240 83b1 	bls.w	800e208 <tcp_input+0x7d8>
 800daa6:	7cbb      	ldrb	r3, [r7, #18]
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	891b      	ldrh	r3, [r3, #8]
 800daae:	429a      	cmp	r2, r3
 800dab0:	f200 83aa 	bhi.w	800e208 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dab4:	7cbb      	ldrb	r3, [r7, #18]
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	3b14      	subs	r3, #20
 800daba:	b29a      	uxth	r2, r3
 800dabc:	4b81      	ldr	r3, [pc, #516]	@ (800dcc4 <tcp_input+0x294>)
 800dabe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dac0:	4b81      	ldr	r3, [pc, #516]	@ (800dcc8 <tcp_input+0x298>)
 800dac2:	2200      	movs	r2, #0
 800dac4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	895a      	ldrh	r2, [r3, #10]
 800daca:	7cbb      	ldrb	r3, [r7, #18]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	429a      	cmp	r2, r3
 800dad0:	d309      	bcc.n	800dae6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dad2:	4b7c      	ldr	r3, [pc, #496]	@ (800dcc4 <tcp_input+0x294>)
 800dad4:	881a      	ldrh	r2, [r3, #0]
 800dad6:	4b7d      	ldr	r3, [pc, #500]	@ (800dccc <tcp_input+0x29c>)
 800dad8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dada:	7cbb      	ldrb	r3, [r7, #18]
 800dadc:	4619      	mov	r1, r3
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7fd fe40 	bl	800b764 <pbuf_remove_header>
 800dae4:	e04e      	b.n	800db84 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d105      	bne.n	800dafa <tcp_input+0xca>
 800daee:	4b70      	ldr	r3, [pc, #448]	@ (800dcb0 <tcp_input+0x280>)
 800daf0:	22c2      	movs	r2, #194	@ 0xc2
 800daf2:	4977      	ldr	r1, [pc, #476]	@ (800dcd0 <tcp_input+0x2a0>)
 800daf4:	4870      	ldr	r0, [pc, #448]	@ (800dcb8 <tcp_input+0x288>)
 800daf6:	f009 fe83 	bl	8017800 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dafa:	2114      	movs	r1, #20
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7fd fe31 	bl	800b764 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	895a      	ldrh	r2, [r3, #10]
 800db06:	4b71      	ldr	r3, [pc, #452]	@ (800dccc <tcp_input+0x29c>)
 800db08:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800db0a:	4b6e      	ldr	r3, [pc, #440]	@ (800dcc4 <tcp_input+0x294>)
 800db0c:	881a      	ldrh	r2, [r3, #0]
 800db0e:	4b6f      	ldr	r3, [pc, #444]	@ (800dccc <tcp_input+0x29c>)
 800db10:	881b      	ldrh	r3, [r3, #0]
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800db16:	4b6d      	ldr	r3, [pc, #436]	@ (800dccc <tcp_input+0x29c>)
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7fd fe21 	bl	800b764 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	895b      	ldrh	r3, [r3, #10]
 800db28:	8a3a      	ldrh	r2, [r7, #16]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	f200 836e 	bhi.w	800e20c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	4a64      	ldr	r2, [pc, #400]	@ (800dcc8 <tcp_input+0x298>)
 800db38:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	8a3a      	ldrh	r2, [r7, #16]
 800db40:	4611      	mov	r1, r2
 800db42:	4618      	mov	r0, r3
 800db44:	f7fd fe0e 	bl	800b764 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	891a      	ldrh	r2, [r3, #8]
 800db4c:	8a3b      	ldrh	r3, [r7, #16]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	b29a      	uxth	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	895b      	ldrh	r3, [r3, #10]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d005      	beq.n	800db6a <tcp_input+0x13a>
 800db5e:	4b54      	ldr	r3, [pc, #336]	@ (800dcb0 <tcp_input+0x280>)
 800db60:	22df      	movs	r2, #223	@ 0xdf
 800db62:	495c      	ldr	r1, [pc, #368]	@ (800dcd4 <tcp_input+0x2a4>)
 800db64:	4854      	ldr	r0, [pc, #336]	@ (800dcb8 <tcp_input+0x288>)
 800db66:	f009 fe4b 	bl	8017800 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	891a      	ldrh	r2, [r3, #8]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	891b      	ldrh	r3, [r3, #8]
 800db74:	429a      	cmp	r2, r3
 800db76:	d005      	beq.n	800db84 <tcp_input+0x154>
 800db78:	4b4d      	ldr	r3, [pc, #308]	@ (800dcb0 <tcp_input+0x280>)
 800db7a:	22e0      	movs	r2, #224	@ 0xe0
 800db7c:	4956      	ldr	r1, [pc, #344]	@ (800dcd8 <tcp_input+0x2a8>)
 800db7e:	484e      	ldr	r0, [pc, #312]	@ (800dcb8 <tcp_input+0x288>)
 800db80:	f009 fe3e 	bl	8017800 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800db84:	4b4d      	ldr	r3, [pc, #308]	@ (800dcbc <tcp_input+0x28c>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	4a4b      	ldr	r2, [pc, #300]	@ (800dcbc <tcp_input+0x28c>)
 800db8e:	6814      	ldr	r4, [r2, #0]
 800db90:	4618      	mov	r0, r3
 800db92:	f7fc fa99 	bl	800a0c8 <lwip_htons>
 800db96:	4603      	mov	r3, r0
 800db98:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800db9a:	4b48      	ldr	r3, [pc, #288]	@ (800dcbc <tcp_input+0x28c>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	885b      	ldrh	r3, [r3, #2]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	4a46      	ldr	r2, [pc, #280]	@ (800dcbc <tcp_input+0x28c>)
 800dba4:	6814      	ldr	r4, [r2, #0]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fc fa8e 	bl	800a0c8 <lwip_htons>
 800dbac:	4603      	mov	r3, r0
 800dbae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dbb0:	4b42      	ldr	r3, [pc, #264]	@ (800dcbc <tcp_input+0x28c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	4a41      	ldr	r2, [pc, #260]	@ (800dcbc <tcp_input+0x28c>)
 800dbb8:	6814      	ldr	r4, [r2, #0]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fc fa99 	bl	800a0f2 <lwip_htonl>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	6063      	str	r3, [r4, #4]
 800dbc4:	6863      	ldr	r3, [r4, #4]
 800dbc6:	4a45      	ldr	r2, [pc, #276]	@ (800dcdc <tcp_input+0x2ac>)
 800dbc8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dbca:	4b3c      	ldr	r3, [pc, #240]	@ (800dcbc <tcp_input+0x28c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	4a3a      	ldr	r2, [pc, #232]	@ (800dcbc <tcp_input+0x28c>)
 800dbd2:	6814      	ldr	r4, [r2, #0]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fc fa8c 	bl	800a0f2 <lwip_htonl>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	60a3      	str	r3, [r4, #8]
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	4a3f      	ldr	r2, [pc, #252]	@ (800dce0 <tcp_input+0x2b0>)
 800dbe2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dbe4:	4b35      	ldr	r3, [pc, #212]	@ (800dcbc <tcp_input+0x28c>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	89db      	ldrh	r3, [r3, #14]
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	4a33      	ldr	r2, [pc, #204]	@ (800dcbc <tcp_input+0x28c>)
 800dbee:	6814      	ldr	r4, [r2, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fc fa69 	bl	800a0c8 <lwip_htons>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dbfa:	4b30      	ldr	r3, [pc, #192]	@ (800dcbc <tcp_input+0x28c>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	899b      	ldrh	r3, [r3, #12]
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fc fa60 	bl	800a0c8 <lwip_htons>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	4b34      	ldr	r3, [pc, #208]	@ (800dce4 <tcp_input+0x2b4>)
 800dc14:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	891a      	ldrh	r2, [r3, #8]
 800dc1a:	4b33      	ldr	r3, [pc, #204]	@ (800dce8 <tcp_input+0x2b8>)
 800dc1c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dc1e:	4b31      	ldr	r3, [pc, #196]	@ (800dce4 <tcp_input+0x2b4>)
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	f003 0303 	and.w	r3, r3, #3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00c      	beq.n	800dc44 <tcp_input+0x214>
    tcplen++;
 800dc2a:	4b2f      	ldr	r3, [pc, #188]	@ (800dce8 <tcp_input+0x2b8>)
 800dc2c:	881b      	ldrh	r3, [r3, #0]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	b29a      	uxth	r2, r3
 800dc32:	4b2d      	ldr	r3, [pc, #180]	@ (800dce8 <tcp_input+0x2b8>)
 800dc34:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	891a      	ldrh	r2, [r3, #8]
 800dc3a:	4b2b      	ldr	r3, [pc, #172]	@ (800dce8 <tcp_input+0x2b8>)
 800dc3c:	881b      	ldrh	r3, [r3, #0]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	f200 82e6 	bhi.w	800e210 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dc44:	2300      	movs	r3, #0
 800dc46:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc48:	4b28      	ldr	r3, [pc, #160]	@ (800dcec <tcp_input+0x2bc>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	61fb      	str	r3, [r7, #28]
 800dc4e:	e09d      	b.n	800dd8c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	7d1b      	ldrb	r3, [r3, #20]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d105      	bne.n	800dc64 <tcp_input+0x234>
 800dc58:	4b15      	ldr	r3, [pc, #84]	@ (800dcb0 <tcp_input+0x280>)
 800dc5a:	22fb      	movs	r2, #251	@ 0xfb
 800dc5c:	4924      	ldr	r1, [pc, #144]	@ (800dcf0 <tcp_input+0x2c0>)
 800dc5e:	4816      	ldr	r0, [pc, #88]	@ (800dcb8 <tcp_input+0x288>)
 800dc60:	f009 fdce 	bl	8017800 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	7d1b      	ldrb	r3, [r3, #20]
 800dc68:	2b0a      	cmp	r3, #10
 800dc6a:	d105      	bne.n	800dc78 <tcp_input+0x248>
 800dc6c:	4b10      	ldr	r3, [pc, #64]	@ (800dcb0 <tcp_input+0x280>)
 800dc6e:	22fc      	movs	r2, #252	@ 0xfc
 800dc70:	4920      	ldr	r1, [pc, #128]	@ (800dcf4 <tcp_input+0x2c4>)
 800dc72:	4811      	ldr	r0, [pc, #68]	@ (800dcb8 <tcp_input+0x288>)
 800dc74:	f009 fdc4 	bl	8017800 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	7d1b      	ldrb	r3, [r3, #20]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d105      	bne.n	800dc8c <tcp_input+0x25c>
 800dc80:	4b0b      	ldr	r3, [pc, #44]	@ (800dcb0 <tcp_input+0x280>)
 800dc82:	22fd      	movs	r2, #253	@ 0xfd
 800dc84:	491c      	ldr	r1, [pc, #112]	@ (800dcf8 <tcp_input+0x2c8>)
 800dc86:	480c      	ldr	r0, [pc, #48]	@ (800dcb8 <tcp_input+0x288>)
 800dc88:	f009 fdba 	bl	8017800 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	7a1b      	ldrb	r3, [r3, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d033      	beq.n	800dcfc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	7a1a      	ldrb	r2, [r3, #8]
 800dc98:	4b09      	ldr	r3, [pc, #36]	@ (800dcc0 <tcp_input+0x290>)
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dca0:	3301      	adds	r3, #1
 800dca2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d029      	beq.n	800dcfc <tcp_input+0x2cc>
      prev = pcb;
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	61bb      	str	r3, [r7, #24]
      continue;
 800dcac:	e06b      	b.n	800dd86 <tcp_input+0x356>
 800dcae:	bf00      	nop
 800dcb0:	0801b160 	.word	0x0801b160
 800dcb4:	0801b194 	.word	0x0801b194
 800dcb8:	0801b1ac 	.word	0x0801b1ac
 800dcbc:	20008fd0 	.word	0x20008fd0
 800dcc0:	20005a18 	.word	0x20005a18
 800dcc4:	20008fd4 	.word	0x20008fd4
 800dcc8:	20008fd8 	.word	0x20008fd8
 800dccc:	20008fd6 	.word	0x20008fd6
 800dcd0:	0801b1d4 	.word	0x0801b1d4
 800dcd4:	0801b1e4 	.word	0x0801b1e4
 800dcd8:	0801b1f0 	.word	0x0801b1f0
 800dcdc:	20008fe0 	.word	0x20008fe0
 800dce0:	20008fe4 	.word	0x20008fe4
 800dce4:	20008fec 	.word	0x20008fec
 800dce8:	20008fea 	.word	0x20008fea
 800dcec:	20008fb4 	.word	0x20008fb4
 800dcf0:	0801b210 	.word	0x0801b210
 800dcf4:	0801b238 	.word	0x0801b238
 800dcf8:	0801b264 	.word	0x0801b264
    }

    if (pcb->remote_port == tcphdr->src &&
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	8b1a      	ldrh	r2, [r3, #24]
 800dd00:	4b72      	ldr	r3, [pc, #456]	@ (800decc <tcp_input+0x49c>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d13a      	bne.n	800dd82 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	8ada      	ldrh	r2, [r3, #22]
 800dd10:	4b6e      	ldr	r3, [pc, #440]	@ (800decc <tcp_input+0x49c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	885b      	ldrh	r3, [r3, #2]
 800dd16:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d132      	bne.n	800dd82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	4b6b      	ldr	r3, [pc, #428]	@ (800ded0 <tcp_input+0x4a0>)
 800dd22:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d12c      	bne.n	800dd82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	4b68      	ldr	r3, [pc, #416]	@ (800ded0 <tcp_input+0x4a0>)
 800dd2e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d126      	bne.n	800dd82 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	69fa      	ldr	r2, [r7, #28]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d106      	bne.n	800dd4c <tcp_input+0x31c>
 800dd3e:	4b65      	ldr	r3, [pc, #404]	@ (800ded4 <tcp_input+0x4a4>)
 800dd40:	f240 120d 	movw	r2, #269	@ 0x10d
 800dd44:	4964      	ldr	r1, [pc, #400]	@ (800ded8 <tcp_input+0x4a8>)
 800dd46:	4865      	ldr	r0, [pc, #404]	@ (800dedc <tcp_input+0x4ac>)
 800dd48:	f009 fd5a 	bl	8017800 <iprintf>
      if (prev != NULL) {
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00a      	beq.n	800dd68 <tcp_input+0x338>
        prev->next = pcb->next;
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	68da      	ldr	r2, [r3, #12]
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dd5a:	4b61      	ldr	r3, [pc, #388]	@ (800dee0 <tcp_input+0x4b0>)
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dd62:	4a5f      	ldr	r2, [pc, #380]	@ (800dee0 <tcp_input+0x4b0>)
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	69fa      	ldr	r2, [r7, #28]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d111      	bne.n	800dd96 <tcp_input+0x366>
 800dd72:	4b58      	ldr	r3, [pc, #352]	@ (800ded4 <tcp_input+0x4a4>)
 800dd74:	f240 1215 	movw	r2, #277	@ 0x115
 800dd78:	495a      	ldr	r1, [pc, #360]	@ (800dee4 <tcp_input+0x4b4>)
 800dd7a:	4858      	ldr	r0, [pc, #352]	@ (800dedc <tcp_input+0x4ac>)
 800dd7c:	f009 fd40 	bl	8017800 <iprintf>
      break;
 800dd80:	e009      	b.n	800dd96 <tcp_input+0x366>
    }
    prev = pcb;
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	61fb      	str	r3, [r7, #28]
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	f47f af5e 	bne.w	800dc50 <tcp_input+0x220>
 800dd94:	e000      	b.n	800dd98 <tcp_input+0x368>
      break;
 800dd96:	bf00      	nop
  }

  if (pcb == NULL) {
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f040 80aa 	bne.w	800def4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dda0:	4b51      	ldr	r3, [pc, #324]	@ (800dee8 <tcp_input+0x4b8>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	61fb      	str	r3, [r7, #28]
 800dda6:	e03f      	b.n	800de28 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	7d1b      	ldrb	r3, [r3, #20]
 800ddac:	2b0a      	cmp	r3, #10
 800ddae:	d006      	beq.n	800ddbe <tcp_input+0x38e>
 800ddb0:	4b48      	ldr	r3, [pc, #288]	@ (800ded4 <tcp_input+0x4a4>)
 800ddb2:	f240 121f 	movw	r2, #287	@ 0x11f
 800ddb6:	494d      	ldr	r1, [pc, #308]	@ (800deec <tcp_input+0x4bc>)
 800ddb8:	4848      	ldr	r0, [pc, #288]	@ (800dedc <tcp_input+0x4ac>)
 800ddba:	f009 fd21 	bl	8017800 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	7a1b      	ldrb	r3, [r3, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d009      	beq.n	800ddda <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	7a1a      	ldrb	r2, [r3, #8]
 800ddca:	4b41      	ldr	r3, [pc, #260]	@ (800ded0 <tcp_input+0x4a0>)
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d122      	bne.n	800de20 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	8b1a      	ldrh	r2, [r3, #24]
 800ddde:	4b3b      	ldr	r3, [pc, #236]	@ (800decc <tcp_input+0x49c>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d11b      	bne.n	800de22 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	8ada      	ldrh	r2, [r3, #22]
 800ddee:	4b37      	ldr	r3, [pc, #220]	@ (800decc <tcp_input+0x49c>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	885b      	ldrh	r3, [r3, #2]
 800ddf4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d113      	bne.n	800de22 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	685a      	ldr	r2, [r3, #4]
 800ddfe:	4b34      	ldr	r3, [pc, #208]	@ (800ded0 <tcp_input+0x4a0>)
 800de00:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800de02:	429a      	cmp	r2, r3
 800de04:	d10d      	bne.n	800de22 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	4b31      	ldr	r3, [pc, #196]	@ (800ded0 <tcp_input+0x4a0>)
 800de0c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de0e:	429a      	cmp	r2, r3
 800de10:	d107      	bne.n	800de22 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800de12:	69f8      	ldr	r0, [r7, #28]
 800de14:	f000 fb56 	bl	800e4c4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7fd fd29 	bl	800b870 <pbuf_free>
        return;
 800de1e:	e1fd      	b.n	800e21c <tcp_input+0x7ec>
        continue;
 800de20:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	61fb      	str	r3, [r7, #28]
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1bc      	bne.n	800dda8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800de2e:	2300      	movs	r3, #0
 800de30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de32:	4b2f      	ldr	r3, [pc, #188]	@ (800def0 <tcp_input+0x4c0>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	617b      	str	r3, [r7, #20]
 800de38:	e02a      	b.n	800de90 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	7a1b      	ldrb	r3, [r3, #8]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00c      	beq.n	800de5c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	7a1a      	ldrb	r2, [r3, #8]
 800de46:	4b22      	ldr	r3, [pc, #136]	@ (800ded0 <tcp_input+0x4a0>)
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800de4e:	3301      	adds	r3, #1
 800de50:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de52:	429a      	cmp	r2, r3
 800de54:	d002      	beq.n	800de5c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	61bb      	str	r3, [r7, #24]
        continue;
 800de5a:	e016      	b.n	800de8a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	8ada      	ldrh	r2, [r3, #22]
 800de60:	4b1a      	ldr	r3, [pc, #104]	@ (800decc <tcp_input+0x49c>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	885b      	ldrh	r3, [r3, #2]
 800de66:	b29b      	uxth	r3, r3
 800de68:	429a      	cmp	r2, r3
 800de6a:	d10c      	bne.n	800de86 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	4b17      	ldr	r3, [pc, #92]	@ (800ded0 <tcp_input+0x4a0>)
 800de72:	695b      	ldr	r3, [r3, #20]
 800de74:	429a      	cmp	r2, r3
 800de76:	d00f      	beq.n	800de98 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00d      	beq.n	800de9a <tcp_input+0x46a>
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d009      	beq.n	800de9a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1d1      	bne.n	800de3a <tcp_input+0x40a>
 800de96:	e000      	b.n	800de9a <tcp_input+0x46a>
            break;
 800de98:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d029      	beq.n	800def4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00a      	beq.n	800debc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	68da      	ldr	r2, [r3, #12]
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800deae:	4b10      	ldr	r3, [pc, #64]	@ (800def0 <tcp_input+0x4c0>)
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800deb6:	4a0e      	ldr	r2, [pc, #56]	@ (800def0 <tcp_input+0x4c0>)
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800debc:	6978      	ldr	r0, [r7, #20]
 800debe:	f000 fa03 	bl	800e2c8 <tcp_listen_input>
      }
      pbuf_free(p);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7fd fcd4 	bl	800b870 <pbuf_free>
      return;
 800dec8:	e1a8      	b.n	800e21c <tcp_input+0x7ec>
 800deca:	bf00      	nop
 800decc:	20008fd0 	.word	0x20008fd0
 800ded0:	20005a18 	.word	0x20005a18
 800ded4:	0801b160 	.word	0x0801b160
 800ded8:	0801b28c 	.word	0x0801b28c
 800dedc:	0801b1ac 	.word	0x0801b1ac
 800dee0:	20008fb4 	.word	0x20008fb4
 800dee4:	0801b2b8 	.word	0x0801b2b8
 800dee8:	20008fb8 	.word	0x20008fb8
 800deec:	0801b2e4 	.word	0x0801b2e4
 800def0:	20008fb0 	.word	0x20008fb0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	2b00      	cmp	r3, #0
 800def8:	f000 8158 	beq.w	800e1ac <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800defc:	4b95      	ldr	r3, [pc, #596]	@ (800e154 <tcp_input+0x724>)
 800defe:	2200      	movs	r2, #0
 800df00:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	891a      	ldrh	r2, [r3, #8]
 800df06:	4b93      	ldr	r3, [pc, #588]	@ (800e154 <tcp_input+0x724>)
 800df08:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800df0a:	4a92      	ldr	r2, [pc, #584]	@ (800e154 <tcp_input+0x724>)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800df10:	4b91      	ldr	r3, [pc, #580]	@ (800e158 <tcp_input+0x728>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a8f      	ldr	r2, [pc, #572]	@ (800e154 <tcp_input+0x724>)
 800df16:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800df18:	4b90      	ldr	r3, [pc, #576]	@ (800e15c <tcp_input+0x72c>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800df1e:	4b90      	ldr	r3, [pc, #576]	@ (800e160 <tcp_input+0x730>)
 800df20:	2200      	movs	r2, #0
 800df22:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800df24:	4b8f      	ldr	r3, [pc, #572]	@ (800e164 <tcp_input+0x734>)
 800df26:	2200      	movs	r2, #0
 800df28:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800df2a:	4b8f      	ldr	r3, [pc, #572]	@ (800e168 <tcp_input+0x738>)
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	f003 0308 	and.w	r3, r3, #8
 800df32:	2b00      	cmp	r3, #0
 800df34:	d006      	beq.n	800df44 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	7b5b      	ldrb	r3, [r3, #13]
 800df3a:	f043 0301 	orr.w	r3, r3, #1
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d017      	beq.n	800df7c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800df4c:	69f8      	ldr	r0, [r7, #28]
 800df4e:	f7ff f83d 	bl	800cfcc <tcp_process_refused_data>
 800df52:	4603      	mov	r3, r0
 800df54:	f113 0f0d 	cmn.w	r3, #13
 800df58:	d007      	beq.n	800df6a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00c      	beq.n	800df7c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800df62:	4b82      	ldr	r3, [pc, #520]	@ (800e16c <tcp_input+0x73c>)
 800df64:	881b      	ldrh	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d008      	beq.n	800df7c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df6e:	2b00      	cmp	r3, #0
 800df70:	f040 80e3 	bne.w	800e13a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800df74:	69f8      	ldr	r0, [r7, #28]
 800df76:	f003 fdff 	bl	8011b78 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800df7a:	e0de      	b.n	800e13a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800df7c:	4a7c      	ldr	r2, [pc, #496]	@ (800e170 <tcp_input+0x740>)
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800df82:	69f8      	ldr	r0, [r7, #28]
 800df84:	f000 fb18 	bl	800e5b8 <tcp_process>
 800df88:	4603      	mov	r3, r0
 800df8a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800df8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df90:	f113 0f0d 	cmn.w	r3, #13
 800df94:	f000 80d3 	beq.w	800e13e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800df98:	4b71      	ldr	r3, [pc, #452]	@ (800e160 <tcp_input+0x730>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	f003 0308 	and.w	r3, r3, #8
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d015      	beq.n	800dfd0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d008      	beq.n	800dfc0 <tcp_input+0x590>
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfb4:	69fa      	ldr	r2, [r7, #28]
 800dfb6:	6912      	ldr	r2, [r2, #16]
 800dfb8:	f06f 010d 	mvn.w	r1, #13
 800dfbc:	4610      	mov	r0, r2
 800dfbe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dfc0:	69f9      	ldr	r1, [r7, #28]
 800dfc2:	486c      	ldr	r0, [pc, #432]	@ (800e174 <tcp_input+0x744>)
 800dfc4:	f7ff fbbc 	bl	800d740 <tcp_pcb_remove>
        tcp_free(pcb);
 800dfc8:	69f8      	ldr	r0, [r7, #28]
 800dfca:	f7fd ff01 	bl	800bdd0 <tcp_free>
 800dfce:	e0da      	b.n	800e186 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dfd4:	4b63      	ldr	r3, [pc, #396]	@ (800e164 <tcp_input+0x734>)
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d01d      	beq.n	800e018 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dfdc:	4b61      	ldr	r3, [pc, #388]	@ (800e164 <tcp_input+0x734>)
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00a      	beq.n	800e002 <tcp_input+0x5d2>
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dff2:	69fa      	ldr	r2, [r7, #28]
 800dff4:	6910      	ldr	r0, [r2, #16]
 800dff6:	89fa      	ldrh	r2, [r7, #14]
 800dff8:	69f9      	ldr	r1, [r7, #28]
 800dffa:	4798      	blx	r3
 800dffc:	4603      	mov	r3, r0
 800dffe:	74fb      	strb	r3, [r7, #19]
 800e000:	e001      	b.n	800e006 <tcp_input+0x5d6>
 800e002:	2300      	movs	r3, #0
 800e004:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e006:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e00a:	f113 0f0d 	cmn.w	r3, #13
 800e00e:	f000 8098 	beq.w	800e142 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e012:	4b54      	ldr	r3, [pc, #336]	@ (800e164 <tcp_input+0x734>)
 800e014:	2200      	movs	r2, #0
 800e016:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e018:	69f8      	ldr	r0, [r7, #28]
 800e01a:	f000 f915 	bl	800e248 <tcp_input_delayed_close>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	f040 8090 	bne.w	800e146 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e026:	4b4d      	ldr	r3, [pc, #308]	@ (800e15c <tcp_input+0x72c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d041      	beq.n	800e0b2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e032:	2b00      	cmp	r3, #0
 800e034:	d006      	beq.n	800e044 <tcp_input+0x614>
 800e036:	4b50      	ldr	r3, [pc, #320]	@ (800e178 <tcp_input+0x748>)
 800e038:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e03c:	494f      	ldr	r1, [pc, #316]	@ (800e17c <tcp_input+0x74c>)
 800e03e:	4850      	ldr	r0, [pc, #320]	@ (800e180 <tcp_input+0x750>)
 800e040:	f009 fbde 	bl	8017800 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	8b5b      	ldrh	r3, [r3, #26]
 800e048:	f003 0310 	and.w	r3, r3, #16
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d008      	beq.n	800e062 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e050:	4b42      	ldr	r3, [pc, #264]	@ (800e15c <tcp_input+0x72c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4618      	mov	r0, r3
 800e056:	f7fd fc0b 	bl	800b870 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e05a:	69f8      	ldr	r0, [r7, #28]
 800e05c:	f7fe f9a0 	bl	800c3a0 <tcp_abort>
            goto aborted;
 800e060:	e091      	b.n	800e186 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00c      	beq.n	800e086 <tcp_input+0x656>
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	6918      	ldr	r0, [r3, #16]
 800e076:	4b39      	ldr	r3, [pc, #228]	@ (800e15c <tcp_input+0x72c>)
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	2300      	movs	r3, #0
 800e07c:	69f9      	ldr	r1, [r7, #28]
 800e07e:	47a0      	blx	r4
 800e080:	4603      	mov	r3, r0
 800e082:	74fb      	strb	r3, [r7, #19]
 800e084:	e008      	b.n	800e098 <tcp_input+0x668>
 800e086:	4b35      	ldr	r3, [pc, #212]	@ (800e15c <tcp_input+0x72c>)
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	2300      	movs	r3, #0
 800e08c:	69f9      	ldr	r1, [r7, #28]
 800e08e:	2000      	movs	r0, #0
 800e090:	f7ff f890 	bl	800d1b4 <tcp_recv_null>
 800e094:	4603      	mov	r3, r0
 800e096:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e098:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e09c:	f113 0f0d 	cmn.w	r3, #13
 800e0a0:	d053      	beq.n	800e14a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e0a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d003      	beq.n	800e0b2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e0aa:	4b2c      	ldr	r3, [pc, #176]	@ (800e15c <tcp_input+0x72c>)
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e0b2:	4b2b      	ldr	r3, [pc, #172]	@ (800e160 <tcp_input+0x730>)
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	f003 0320 	and.w	r3, r3, #32
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d030      	beq.n	800e120 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d009      	beq.n	800e0da <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0ca:	7b5a      	ldrb	r2, [r3, #13]
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0d0:	f042 0220 	orr.w	r2, r2, #32
 800e0d4:	b2d2      	uxtb	r2, r2
 800e0d6:	735a      	strb	r2, [r3, #13]
 800e0d8:	e022      	b.n	800e120 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0de:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e0e2:	d005      	beq.n	800e0f0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00b      	beq.n	800e112 <tcp_input+0x6e2>
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	6918      	ldr	r0, [r3, #16]
 800e104:	2300      	movs	r3, #0
 800e106:	2200      	movs	r2, #0
 800e108:	69f9      	ldr	r1, [r7, #28]
 800e10a:	47a0      	blx	r4
 800e10c:	4603      	mov	r3, r0
 800e10e:	74fb      	strb	r3, [r7, #19]
 800e110:	e001      	b.n	800e116 <tcp_input+0x6e6>
 800e112:	2300      	movs	r3, #0
 800e114:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e11a:	f113 0f0d 	cmn.w	r3, #13
 800e11e:	d016      	beq.n	800e14e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e120:	4b13      	ldr	r3, [pc, #76]	@ (800e170 <tcp_input+0x740>)
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e126:	69f8      	ldr	r0, [r7, #28]
 800e128:	f000 f88e 	bl	800e248 <tcp_input_delayed_close>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d128      	bne.n	800e184 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e132:	69f8      	ldr	r0, [r7, #28]
 800e134:	f002 ff1a 	bl	8010f6c <tcp_output>
 800e138:	e025      	b.n	800e186 <tcp_input+0x756>
        goto aborted;
 800e13a:	bf00      	nop
 800e13c:	e023      	b.n	800e186 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e13e:	bf00      	nop
 800e140:	e021      	b.n	800e186 <tcp_input+0x756>
              goto aborted;
 800e142:	bf00      	nop
 800e144:	e01f      	b.n	800e186 <tcp_input+0x756>
          goto aborted;
 800e146:	bf00      	nop
 800e148:	e01d      	b.n	800e186 <tcp_input+0x756>
            goto aborted;
 800e14a:	bf00      	nop
 800e14c:	e01b      	b.n	800e186 <tcp_input+0x756>
              goto aborted;
 800e14e:	bf00      	nop
 800e150:	e019      	b.n	800e186 <tcp_input+0x756>
 800e152:	bf00      	nop
 800e154:	20008fc0 	.word	0x20008fc0
 800e158:	20008fd0 	.word	0x20008fd0
 800e15c:	20008ff0 	.word	0x20008ff0
 800e160:	20008fed 	.word	0x20008fed
 800e164:	20008fe8 	.word	0x20008fe8
 800e168:	20008fec 	.word	0x20008fec
 800e16c:	20008fea 	.word	0x20008fea
 800e170:	20008ff4 	.word	0x20008ff4
 800e174:	20008fb4 	.word	0x20008fb4
 800e178:	0801b160 	.word	0x0801b160
 800e17c:	0801b314 	.word	0x0801b314
 800e180:	0801b1ac 	.word	0x0801b1ac
          goto aborted;
 800e184:	bf00      	nop
    tcp_input_pcb = NULL;
 800e186:	4b27      	ldr	r3, [pc, #156]	@ (800e224 <tcp_input+0x7f4>)
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e18c:	4b26      	ldr	r3, [pc, #152]	@ (800e228 <tcp_input+0x7f8>)
 800e18e:	2200      	movs	r2, #0
 800e190:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e192:	4b26      	ldr	r3, [pc, #152]	@ (800e22c <tcp_input+0x7fc>)
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d03f      	beq.n	800e21a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e19a:	4b24      	ldr	r3, [pc, #144]	@ (800e22c <tcp_input+0x7fc>)
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fd fb66 	bl	800b870 <pbuf_free>
      inseg.p = NULL;
 800e1a4:	4b21      	ldr	r3, [pc, #132]	@ (800e22c <tcp_input+0x7fc>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e1aa:	e036      	b.n	800e21a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e1ac:	4b20      	ldr	r3, [pc, #128]	@ (800e230 <tcp_input+0x800>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	899b      	ldrh	r3, [r3, #12]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fb ff87 	bl	800a0c8 <lwip_htons>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	f003 0304 	and.w	r3, r3, #4
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d118      	bne.n	800e1f8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1c6:	4b1b      	ldr	r3, [pc, #108]	@ (800e234 <tcp_input+0x804>)
 800e1c8:	6819      	ldr	r1, [r3, #0]
 800e1ca:	4b1b      	ldr	r3, [pc, #108]	@ (800e238 <tcp_input+0x808>)
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e23c <tcp_input+0x80c>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1d6:	4b16      	ldr	r3, [pc, #88]	@ (800e230 <tcp_input+0x800>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1da:	885b      	ldrh	r3, [r3, #2]
 800e1dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1de:	4a14      	ldr	r2, [pc, #80]	@ (800e230 <tcp_input+0x800>)
 800e1e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1e2:	8812      	ldrh	r2, [r2, #0]
 800e1e4:	b292      	uxth	r2, r2
 800e1e6:	9202      	str	r2, [sp, #8]
 800e1e8:	9301      	str	r3, [sp, #4]
 800e1ea:	4b15      	ldr	r3, [pc, #84]	@ (800e240 <tcp_input+0x810>)
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	4b15      	ldr	r3, [pc, #84]	@ (800e244 <tcp_input+0x814>)
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	2000      	movs	r0, #0
 800e1f4:	f003 fc6e 	bl	8011ad4 <tcp_rst>
    pbuf_free(p);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7fd fb39 	bl	800b870 <pbuf_free>
  return;
 800e1fe:	e00c      	b.n	800e21a <tcp_input+0x7ea>
    goto dropped;
 800e200:	bf00      	nop
 800e202:	e006      	b.n	800e212 <tcp_input+0x7e2>
    goto dropped;
 800e204:	bf00      	nop
 800e206:	e004      	b.n	800e212 <tcp_input+0x7e2>
    goto dropped;
 800e208:	bf00      	nop
 800e20a:	e002      	b.n	800e212 <tcp_input+0x7e2>
      goto dropped;
 800e20c:	bf00      	nop
 800e20e:	e000      	b.n	800e212 <tcp_input+0x7e2>
      goto dropped;
 800e210:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7fd fb2c 	bl	800b870 <pbuf_free>
 800e218:	e000      	b.n	800e21c <tcp_input+0x7ec>
  return;
 800e21a:	bf00      	nop
}
 800e21c:	3724      	adds	r7, #36	@ 0x24
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd90      	pop	{r4, r7, pc}
 800e222:	bf00      	nop
 800e224:	20008ff4 	.word	0x20008ff4
 800e228:	20008ff0 	.word	0x20008ff0
 800e22c:	20008fc0 	.word	0x20008fc0
 800e230:	20008fd0 	.word	0x20008fd0
 800e234:	20008fe4 	.word	0x20008fe4
 800e238:	20008fea 	.word	0x20008fea
 800e23c:	20008fe0 	.word	0x20008fe0
 800e240:	20005a28 	.word	0x20005a28
 800e244:	20005a2c 	.word	0x20005a2c

0800e248 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d106      	bne.n	800e264 <tcp_input_delayed_close+0x1c>
 800e256:	4b17      	ldr	r3, [pc, #92]	@ (800e2b4 <tcp_input_delayed_close+0x6c>)
 800e258:	f240 225a 	movw	r2, #602	@ 0x25a
 800e25c:	4916      	ldr	r1, [pc, #88]	@ (800e2b8 <tcp_input_delayed_close+0x70>)
 800e25e:	4817      	ldr	r0, [pc, #92]	@ (800e2bc <tcp_input_delayed_close+0x74>)
 800e260:	f009 face 	bl	8017800 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e264:	4b16      	ldr	r3, [pc, #88]	@ (800e2c0 <tcp_input_delayed_close+0x78>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	f003 0310 	and.w	r3, r3, #16
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01c      	beq.n	800e2aa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	8b5b      	ldrh	r3, [r3, #26]
 800e274:	f003 0310 	and.w	r3, r3, #16
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10d      	bne.n	800e298 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e282:	2b00      	cmp	r3, #0
 800e284:	d008      	beq.n	800e298 <tcp_input_delayed_close+0x50>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	6912      	ldr	r2, [r2, #16]
 800e290:	f06f 010e 	mvn.w	r1, #14
 800e294:	4610      	mov	r0, r2
 800e296:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e298:	6879      	ldr	r1, [r7, #4]
 800e29a:	480a      	ldr	r0, [pc, #40]	@ (800e2c4 <tcp_input_delayed_close+0x7c>)
 800e29c:	f7ff fa50 	bl	800d740 <tcp_pcb_remove>
    tcp_free(pcb);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7fd fd95 	bl	800bdd0 <tcp_free>
    return 1;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e000      	b.n	800e2ac <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	0801b160 	.word	0x0801b160
 800e2b8:	0801b330 	.word	0x0801b330
 800e2bc:	0801b1ac 	.word	0x0801b1ac
 800e2c0:	20008fed 	.word	0x20008fed
 800e2c4:	20008fb4 	.word	0x20008fb4

0800e2c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b08b      	sub	sp, #44	@ 0x2c
 800e2cc:	af04      	add	r7, sp, #16
 800e2ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e2d0:	4b6f      	ldr	r3, [pc, #444]	@ (800e490 <tcp_listen_input+0x1c8>)
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	f003 0304 	and.w	r3, r3, #4
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	f040 80d2 	bne.w	800e482 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d106      	bne.n	800e2f2 <tcp_listen_input+0x2a>
 800e2e4:	4b6b      	ldr	r3, [pc, #428]	@ (800e494 <tcp_listen_input+0x1cc>)
 800e2e6:	f240 2281 	movw	r2, #641	@ 0x281
 800e2ea:	496b      	ldr	r1, [pc, #428]	@ (800e498 <tcp_listen_input+0x1d0>)
 800e2ec:	486b      	ldr	r0, [pc, #428]	@ (800e49c <tcp_listen_input+0x1d4>)
 800e2ee:	f009 fa87 	bl	8017800 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e2f2:	4b67      	ldr	r3, [pc, #412]	@ (800e490 <tcp_listen_input+0x1c8>)
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	f003 0310 	and.w	r3, r3, #16
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d019      	beq.n	800e332 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2fe:	4b68      	ldr	r3, [pc, #416]	@ (800e4a0 <tcp_listen_input+0x1d8>)
 800e300:	6819      	ldr	r1, [r3, #0]
 800e302:	4b68      	ldr	r3, [pc, #416]	@ (800e4a4 <tcp_listen_input+0x1dc>)
 800e304:	881b      	ldrh	r3, [r3, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	4b67      	ldr	r3, [pc, #412]	@ (800e4a8 <tcp_listen_input+0x1e0>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e30e:	4b67      	ldr	r3, [pc, #412]	@ (800e4ac <tcp_listen_input+0x1e4>)
 800e310:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e312:	885b      	ldrh	r3, [r3, #2]
 800e314:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e316:	4a65      	ldr	r2, [pc, #404]	@ (800e4ac <tcp_listen_input+0x1e4>)
 800e318:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e31a:	8812      	ldrh	r2, [r2, #0]
 800e31c:	b292      	uxth	r2, r2
 800e31e:	9202      	str	r2, [sp, #8]
 800e320:	9301      	str	r3, [sp, #4]
 800e322:	4b63      	ldr	r3, [pc, #396]	@ (800e4b0 <tcp_listen_input+0x1e8>)
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	4b63      	ldr	r3, [pc, #396]	@ (800e4b4 <tcp_listen_input+0x1ec>)
 800e328:	4602      	mov	r2, r0
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f003 fbd2 	bl	8011ad4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e330:	e0a9      	b.n	800e486 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e332:	4b57      	ldr	r3, [pc, #348]	@ (800e490 <tcp_listen_input+0x1c8>)
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	f003 0302 	and.w	r3, r3, #2
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f000 80a3 	beq.w	800e486 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	7d5b      	ldrb	r3, [r3, #21]
 800e344:	4618      	mov	r0, r3
 800e346:	f7ff f859 	bl	800d3fc <tcp_alloc>
 800e34a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d111      	bne.n	800e376 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	699b      	ldr	r3, [r3, #24]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00a      	beq.n	800e370 <tcp_listen_input+0xa8>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	699b      	ldr	r3, [r3, #24]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	6910      	ldr	r0, [r2, #16]
 800e362:	f04f 32ff 	mov.w	r2, #4294967295
 800e366:	2100      	movs	r1, #0
 800e368:	4798      	blx	r3
 800e36a:	4603      	mov	r3, r0
 800e36c:	73bb      	strb	r3, [r7, #14]
      return;
 800e36e:	e08b      	b.n	800e488 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e370:	23f0      	movs	r3, #240	@ 0xf0
 800e372:	73bb      	strb	r3, [r7, #14]
      return;
 800e374:	e088      	b.n	800e488 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e376:	4b50      	ldr	r3, [pc, #320]	@ (800e4b8 <tcp_listen_input+0x1f0>)
 800e378:	695a      	ldr	r2, [r3, #20]
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e37e:	4b4e      	ldr	r3, [pc, #312]	@ (800e4b8 <tcp_listen_input+0x1f0>)
 800e380:	691a      	ldr	r2, [r3, #16]
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	8ada      	ldrh	r2, [r3, #22]
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e38e:	4b47      	ldr	r3, [pc, #284]	@ (800e4ac <tcp_listen_input+0x1e4>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	881b      	ldrh	r3, [r3, #0]
 800e394:	b29a      	uxth	r2, r3
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	2203      	movs	r2, #3
 800e39e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e3a0:	4b41      	ldr	r3, [pc, #260]	@ (800e4a8 <tcp_listen_input+0x1e0>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	1c5a      	adds	r2, r3, #1
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e3b2:	6978      	ldr	r0, [r7, #20]
 800e3b4:	f7ff fa58 	bl	800d868 <tcp_next_iss>
 800e3b8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	693a      	ldr	r2, [r7, #16]
 800e3be:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	693a      	ldr	r2, [r7, #16]
 800e3c4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	693a      	ldr	r2, [r7, #16]
 800e3ca:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e3d2:	4b35      	ldr	r3, [pc, #212]	@ (800e4a8 <tcp_listen_input+0x1e0>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	1e5a      	subs	r2, r3, #1
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	691a      	ldr	r2, [r3, #16]
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	7a5b      	ldrb	r3, [r3, #9]
 800e3ee:	f003 030c 	and.w	r3, r3, #12
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	7a1a      	ldrb	r2, [r3, #8]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e400:	4b2e      	ldr	r3, [pc, #184]	@ (800e4bc <tcp_listen_input+0x1f4>)
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	60da      	str	r2, [r3, #12]
 800e408:	4a2c      	ldr	r2, [pc, #176]	@ (800e4bc <tcp_listen_input+0x1f4>)
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	6013      	str	r3, [r2, #0]
 800e40e:	f003 fd23 	bl	8011e58 <tcp_timer_needed>
 800e412:	4b2b      	ldr	r3, [pc, #172]	@ (800e4c0 <tcp_listen_input+0x1f8>)
 800e414:	2201      	movs	r2, #1
 800e416:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e418:	6978      	ldr	r0, [r7, #20]
 800e41a:	f001 fd8b 	bl	800ff34 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e41e:	4b23      	ldr	r3, [pc, #140]	@ (800e4ac <tcp_listen_input+0x1e4>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	89db      	ldrh	r3, [r3, #14]
 800e424:	b29a      	uxth	r2, r3
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	3304      	adds	r3, #4
 800e440:	4618      	mov	r0, r3
 800e442:	f007 fa7b 	bl	801593c <ip4_route>
 800e446:	4601      	mov	r1, r0
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	3304      	adds	r3, #4
 800e44c:	461a      	mov	r2, r3
 800e44e:	4620      	mov	r0, r4
 800e450:	f7ff fa30 	bl	800d8b4 <tcp_eff_send_mss_netif>
 800e454:	4603      	mov	r3, r0
 800e456:	461a      	mov	r2, r3
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e45c:	2112      	movs	r1, #18
 800e45e:	6978      	ldr	r0, [r7, #20]
 800e460:	f002 fc96 	bl	8010d90 <tcp_enqueue_flags>
 800e464:	4603      	mov	r3, r0
 800e466:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e470:	2100      	movs	r1, #0
 800e472:	6978      	ldr	r0, [r7, #20]
 800e474:	f7fd fed6 	bl	800c224 <tcp_abandon>
      return;
 800e478:	e006      	b.n	800e488 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e47a:	6978      	ldr	r0, [r7, #20]
 800e47c:	f002 fd76 	bl	8010f6c <tcp_output>
  return;
 800e480:	e001      	b.n	800e486 <tcp_listen_input+0x1be>
    return;
 800e482:	bf00      	nop
 800e484:	e000      	b.n	800e488 <tcp_listen_input+0x1c0>
  return;
 800e486:	bf00      	nop
}
 800e488:	371c      	adds	r7, #28
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd90      	pop	{r4, r7, pc}
 800e48e:	bf00      	nop
 800e490:	20008fec 	.word	0x20008fec
 800e494:	0801b160 	.word	0x0801b160
 800e498:	0801b358 	.word	0x0801b358
 800e49c:	0801b1ac 	.word	0x0801b1ac
 800e4a0:	20008fe4 	.word	0x20008fe4
 800e4a4:	20008fea 	.word	0x20008fea
 800e4a8:	20008fe0 	.word	0x20008fe0
 800e4ac:	20008fd0 	.word	0x20008fd0
 800e4b0:	20005a28 	.word	0x20005a28
 800e4b4:	20005a2c 	.word	0x20005a2c
 800e4b8:	20005a18 	.word	0x20005a18
 800e4bc:	20008fb4 	.word	0x20008fb4
 800e4c0:	20008fbc 	.word	0x20008fbc

0800e4c4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af04      	add	r7, sp, #16
 800e4ca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e4cc:	4b2f      	ldr	r3, [pc, #188]	@ (800e58c <tcp_timewait_input+0xc8>)
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	f003 0304 	and.w	r3, r3, #4
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d153      	bne.n	800e580 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d106      	bne.n	800e4ec <tcp_timewait_input+0x28>
 800e4de:	4b2c      	ldr	r3, [pc, #176]	@ (800e590 <tcp_timewait_input+0xcc>)
 800e4e0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e4e4:	492b      	ldr	r1, [pc, #172]	@ (800e594 <tcp_timewait_input+0xd0>)
 800e4e6:	482c      	ldr	r0, [pc, #176]	@ (800e598 <tcp_timewait_input+0xd4>)
 800e4e8:	f009 f98a 	bl	8017800 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e4ec:	4b27      	ldr	r3, [pc, #156]	@ (800e58c <tcp_timewait_input+0xc8>)
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	f003 0302 	and.w	r3, r3, #2
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d02a      	beq.n	800e54e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e4f8:	4b28      	ldr	r3, [pc, #160]	@ (800e59c <tcp_timewait_input+0xd8>)
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	2b00      	cmp	r3, #0
 800e504:	db2d      	blt.n	800e562 <tcp_timewait_input+0x9e>
 800e506:	4b25      	ldr	r3, [pc, #148]	@ (800e59c <tcp_timewait_input+0xd8>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e50e:	6879      	ldr	r1, [r7, #4]
 800e510:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e512:	440b      	add	r3, r1
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	dc23      	bgt.n	800e562 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e51a:	4b21      	ldr	r3, [pc, #132]	@ (800e5a0 <tcp_timewait_input+0xdc>)
 800e51c:	6819      	ldr	r1, [r3, #0]
 800e51e:	4b21      	ldr	r3, [pc, #132]	@ (800e5a4 <tcp_timewait_input+0xe0>)
 800e520:	881b      	ldrh	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	4b1d      	ldr	r3, [pc, #116]	@ (800e59c <tcp_timewait_input+0xd8>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e52a:	4b1f      	ldr	r3, [pc, #124]	@ (800e5a8 <tcp_timewait_input+0xe4>)
 800e52c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e52e:	885b      	ldrh	r3, [r3, #2]
 800e530:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e532:	4a1d      	ldr	r2, [pc, #116]	@ (800e5a8 <tcp_timewait_input+0xe4>)
 800e534:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e536:	8812      	ldrh	r2, [r2, #0]
 800e538:	b292      	uxth	r2, r2
 800e53a:	9202      	str	r2, [sp, #8]
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	4b1b      	ldr	r3, [pc, #108]	@ (800e5ac <tcp_timewait_input+0xe8>)
 800e540:	9300      	str	r3, [sp, #0]
 800e542:	4b1b      	ldr	r3, [pc, #108]	@ (800e5b0 <tcp_timewait_input+0xec>)
 800e544:	4602      	mov	r2, r0
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f003 fac4 	bl	8011ad4 <tcp_rst>
      return;
 800e54c:	e01b      	b.n	800e586 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e54e:	4b0f      	ldr	r3, [pc, #60]	@ (800e58c <tcp_timewait_input+0xc8>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	f003 0301 	and.w	r3, r3, #1
 800e556:	2b00      	cmp	r3, #0
 800e558:	d003      	beq.n	800e562 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e55a:	4b16      	ldr	r3, [pc, #88]	@ (800e5b4 <tcp_timewait_input+0xf0>)
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e562:	4b10      	ldr	r3, [pc, #64]	@ (800e5a4 <tcp_timewait_input+0xe0>)
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00c      	beq.n	800e584 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	8b5b      	ldrh	r3, [r3, #26]
 800e56e:	f043 0302 	orr.w	r3, r3, #2
 800e572:	b29a      	uxth	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f002 fcf7 	bl	8010f6c <tcp_output>
  }
  return;
 800e57e:	e001      	b.n	800e584 <tcp_timewait_input+0xc0>
    return;
 800e580:	bf00      	nop
 800e582:	e000      	b.n	800e586 <tcp_timewait_input+0xc2>
  return;
 800e584:	bf00      	nop
}
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20008fec 	.word	0x20008fec
 800e590:	0801b160 	.word	0x0801b160
 800e594:	0801b378 	.word	0x0801b378
 800e598:	0801b1ac 	.word	0x0801b1ac
 800e59c:	20008fe0 	.word	0x20008fe0
 800e5a0:	20008fe4 	.word	0x20008fe4
 800e5a4:	20008fea 	.word	0x20008fea
 800e5a8:	20008fd0 	.word	0x20008fd0
 800e5ac:	20005a28 	.word	0x20005a28
 800e5b0:	20005a2c 	.word	0x20005a2c
 800e5b4:	20008fa8 	.word	0x20008fa8

0800e5b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e5b8:	b590      	push	{r4, r7, lr}
 800e5ba:	b08d      	sub	sp, #52	@ 0x34
 800e5bc:	af04      	add	r7, sp, #16
 800e5be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d106      	bne.n	800e5dc <tcp_process+0x24>
 800e5ce:	4b9d      	ldr	r3, [pc, #628]	@ (800e844 <tcp_process+0x28c>)
 800e5d0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e5d4:	499c      	ldr	r1, [pc, #624]	@ (800e848 <tcp_process+0x290>)
 800e5d6:	489d      	ldr	r0, [pc, #628]	@ (800e84c <tcp_process+0x294>)
 800e5d8:	f009 f912 	bl	8017800 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e5dc:	4b9c      	ldr	r3, [pc, #624]	@ (800e850 <tcp_process+0x298>)
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	f003 0304 	and.w	r3, r3, #4
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d04e      	beq.n	800e686 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	7d1b      	ldrb	r3, [r3, #20]
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	d108      	bne.n	800e602 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5f4:	4b97      	ldr	r3, [pc, #604]	@ (800e854 <tcp_process+0x29c>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d123      	bne.n	800e644 <tcp_process+0x8c>
        acceptable = 1;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	76fb      	strb	r3, [r7, #27]
 800e600:	e020      	b.n	800e644 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e606:	4b94      	ldr	r3, [pc, #592]	@ (800e858 <tcp_process+0x2a0>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d102      	bne.n	800e614 <tcp_process+0x5c>
        acceptable = 1;
 800e60e:	2301      	movs	r3, #1
 800e610:	76fb      	strb	r3, [r7, #27]
 800e612:	e017      	b.n	800e644 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e614:	4b90      	ldr	r3, [pc, #576]	@ (800e858 <tcp_process+0x2a0>)
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	db10      	blt.n	800e644 <tcp_process+0x8c>
 800e622:	4b8d      	ldr	r3, [pc, #564]	@ (800e858 <tcp_process+0x2a0>)
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e62a:	6879      	ldr	r1, [r7, #4]
 800e62c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e62e:	440b      	add	r3, r1
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	2b00      	cmp	r3, #0
 800e634:	dc06      	bgt.n	800e644 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	8b5b      	ldrh	r3, [r3, #26]
 800e63a:	f043 0302 	orr.w	r3, r3, #2
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e644:	7efb      	ldrb	r3, [r7, #27]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d01b      	beq.n	800e682 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	7d1b      	ldrb	r3, [r3, #20]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d106      	bne.n	800e660 <tcp_process+0xa8>
 800e652:	4b7c      	ldr	r3, [pc, #496]	@ (800e844 <tcp_process+0x28c>)
 800e654:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e658:	4980      	ldr	r1, [pc, #512]	@ (800e85c <tcp_process+0x2a4>)
 800e65a:	487c      	ldr	r0, [pc, #496]	@ (800e84c <tcp_process+0x294>)
 800e65c:	f009 f8d0 	bl	8017800 <iprintf>
      recv_flags |= TF_RESET;
 800e660:	4b7f      	ldr	r3, [pc, #508]	@ (800e860 <tcp_process+0x2a8>)
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	f043 0308 	orr.w	r3, r3, #8
 800e668:	b2da      	uxtb	r2, r3
 800e66a:	4b7d      	ldr	r3, [pc, #500]	@ (800e860 <tcp_process+0x2a8>)
 800e66c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	8b5b      	ldrh	r3, [r3, #26]
 800e672:	f023 0301 	bic.w	r3, r3, #1
 800e676:	b29a      	uxth	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e67c:	f06f 030d 	mvn.w	r3, #13
 800e680:	e37a      	b.n	800ed78 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e682:	2300      	movs	r3, #0
 800e684:	e378      	b.n	800ed78 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e686:	4b72      	ldr	r3, [pc, #456]	@ (800e850 <tcp_process+0x298>)
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	f003 0302 	and.w	r3, r3, #2
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d010      	beq.n	800e6b4 <tcp_process+0xfc>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	7d1b      	ldrb	r3, [r3, #20]
 800e696:	2b02      	cmp	r3, #2
 800e698:	d00c      	beq.n	800e6b4 <tcp_process+0xfc>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	7d1b      	ldrb	r3, [r3, #20]
 800e69e:	2b03      	cmp	r3, #3
 800e6a0:	d008      	beq.n	800e6b4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	8b5b      	ldrh	r3, [r3, #26]
 800e6a6:	f043 0302 	orr.w	r3, r3, #2
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	e361      	b.n	800ed78 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	8b5b      	ldrh	r3, [r3, #26]
 800e6b8:	f003 0310 	and.w	r3, r3, #16
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d103      	bne.n	800e6c8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e6c0:	4b68      	ldr	r3, [pc, #416]	@ (800e864 <tcp_process+0x2ac>)
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f001 fc2b 	bl	800ff34 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	7d1b      	ldrb	r3, [r3, #20]
 800e6e2:	3b02      	subs	r3, #2
 800e6e4:	2b07      	cmp	r3, #7
 800e6e6:	f200 8337 	bhi.w	800ed58 <tcp_process+0x7a0>
 800e6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e6f0 <tcp_process+0x138>)
 800e6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f0:	0800e711 	.word	0x0800e711
 800e6f4:	0800e941 	.word	0x0800e941
 800e6f8:	0800eab9 	.word	0x0800eab9
 800e6fc:	0800eae3 	.word	0x0800eae3
 800e700:	0800ec07 	.word	0x0800ec07
 800e704:	0800eab9 	.word	0x0800eab9
 800e708:	0800ec93 	.word	0x0800ec93
 800e70c:	0800ed23 	.word	0x0800ed23
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e710:	4b4f      	ldr	r3, [pc, #316]	@ (800e850 <tcp_process+0x298>)
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	f003 0310 	and.w	r3, r3, #16
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 80e4 	beq.w	800e8e6 <tcp_process+0x32e>
 800e71e:	4b4c      	ldr	r3, [pc, #304]	@ (800e850 <tcp_process+0x298>)
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	f003 0302 	and.w	r3, r3, #2
 800e726:	2b00      	cmp	r3, #0
 800e728:	f000 80dd 	beq.w	800e8e6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	4b48      	ldr	r3, [pc, #288]	@ (800e854 <tcp_process+0x29c>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	429a      	cmp	r2, r3
 800e738:	f040 80d5 	bne.w	800e8e6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e73c:	4b46      	ldr	r3, [pc, #280]	@ (800e858 <tcp_process+0x2a0>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	1c5a      	adds	r2, r3, #1
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e74e:	4b41      	ldr	r3, [pc, #260]	@ (800e854 <tcp_process+0x29c>)
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e756:	4b44      	ldr	r3, [pc, #272]	@ (800e868 <tcp_process+0x2b0>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	89db      	ldrh	r3, [r3, #14]
 800e75c:	b29a      	uxth	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e770:	4b39      	ldr	r3, [pc, #228]	@ (800e858 <tcp_process+0x2a0>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	1e5a      	subs	r2, r3, #1
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2204      	movs	r2, #4
 800e77e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3304      	adds	r3, #4
 800e788:	4618      	mov	r0, r3
 800e78a:	f007 f8d7 	bl	801593c <ip4_route>
 800e78e:	4601      	mov	r1, r0
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	3304      	adds	r3, #4
 800e794:	461a      	mov	r2, r3
 800e796:	4620      	mov	r0, r4
 800e798:	f7ff f88c 	bl	800d8b4 <tcp_eff_send_mss_netif>
 800e79c:	4603      	mov	r3, r0
 800e79e:	461a      	mov	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7a8:	009a      	lsls	r2, r3, #2
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7ae:	005b      	lsls	r3, r3, #1
 800e7b0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e7b4:	428b      	cmp	r3, r1
 800e7b6:	bf38      	it	cc
 800e7b8:	460b      	movcc	r3, r1
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d204      	bcs.n	800e7c8 <tcp_process+0x210>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	e00d      	b.n	800e7e4 <tcp_process+0x22c>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7cc:	005b      	lsls	r3, r3, #1
 800e7ce:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d904      	bls.n	800e7e0 <tcp_process+0x228>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7da:	005b      	lsls	r3, r3, #1
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	e001      	b.n	800e7e4 <tcp_process+0x22c>
 800e7e0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d106      	bne.n	800e802 <tcp_process+0x24a>
 800e7f4:	4b13      	ldr	r3, [pc, #76]	@ (800e844 <tcp_process+0x28c>)
 800e7f6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e7fa:	491c      	ldr	r1, [pc, #112]	@ (800e86c <tcp_process+0x2b4>)
 800e7fc:	4813      	ldr	r0, [pc, #76]	@ (800e84c <tcp_process+0x294>)
 800e7fe:	f008 ffff 	bl	8017800 <iprintf>
        --pcb->snd_queuelen;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e808:	3b01      	subs	r3, #1
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e816:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d12a      	bne.n	800e874 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e822:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d106      	bne.n	800e838 <tcp_process+0x280>
 800e82a:	4b06      	ldr	r3, [pc, #24]	@ (800e844 <tcp_process+0x28c>)
 800e82c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e830:	490f      	ldr	r1, [pc, #60]	@ (800e870 <tcp_process+0x2b8>)
 800e832:	4806      	ldr	r0, [pc, #24]	@ (800e84c <tcp_process+0x294>)
 800e834:	f008 ffe4 	bl	8017800 <iprintf>
          pcb->unsent = rseg->next;
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e840:	e01c      	b.n	800e87c <tcp_process+0x2c4>
 800e842:	bf00      	nop
 800e844:	0801b160 	.word	0x0801b160
 800e848:	0801b398 	.word	0x0801b398
 800e84c:	0801b1ac 	.word	0x0801b1ac
 800e850:	20008fec 	.word	0x20008fec
 800e854:	20008fe4 	.word	0x20008fe4
 800e858:	20008fe0 	.word	0x20008fe0
 800e85c:	0801b3b4 	.word	0x0801b3b4
 800e860:	20008fed 	.word	0x20008fed
 800e864:	20008fa8 	.word	0x20008fa8
 800e868:	20008fd0 	.word	0x20008fd0
 800e86c:	0801b3d4 	.word	0x0801b3d4
 800e870:	0801b3ec 	.word	0x0801b3ec
        } else {
          pcb->unacked = rseg->next;
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e87c:	69f8      	ldr	r0, [r7, #28]
 800e87e:	f7fe fc36 	bl	800d0ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e886:	2b00      	cmp	r3, #0
 800e888:	d104      	bne.n	800e894 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e890:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e892:	e006      	b.n	800e8a2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00a      	beq.n	800e8c2 <tcp_process+0x30a>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	6910      	ldr	r0, [r2, #16]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	6879      	ldr	r1, [r7, #4]
 800e8ba:	4798      	blx	r3
 800e8bc:	4603      	mov	r3, r0
 800e8be:	76bb      	strb	r3, [r7, #26]
 800e8c0:	e001      	b.n	800e8c6 <tcp_process+0x30e>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e8c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e8ca:	f113 0f0d 	cmn.w	r3, #13
 800e8ce:	d102      	bne.n	800e8d6 <tcp_process+0x31e>
          return ERR_ABRT;
 800e8d0:	f06f 030c 	mvn.w	r3, #12
 800e8d4:	e250      	b.n	800ed78 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	8b5b      	ldrh	r3, [r3, #26]
 800e8da:	f043 0302 	orr.w	r3, r3, #2
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e8e4:	e23a      	b.n	800ed5c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e8e6:	4b98      	ldr	r3, [pc, #608]	@ (800eb48 <tcp_process+0x590>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	f003 0310 	and.w	r3, r3, #16
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f000 8234 	beq.w	800ed5c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8f4:	4b95      	ldr	r3, [pc, #596]	@ (800eb4c <tcp_process+0x594>)
 800e8f6:	6819      	ldr	r1, [r3, #0]
 800e8f8:	4b95      	ldr	r3, [pc, #596]	@ (800eb50 <tcp_process+0x598>)
 800e8fa:	881b      	ldrh	r3, [r3, #0]
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	4b95      	ldr	r3, [pc, #596]	@ (800eb54 <tcp_process+0x59c>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e904:	4b94      	ldr	r3, [pc, #592]	@ (800eb58 <tcp_process+0x5a0>)
 800e906:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e908:	885b      	ldrh	r3, [r3, #2]
 800e90a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e90c:	4a92      	ldr	r2, [pc, #584]	@ (800eb58 <tcp_process+0x5a0>)
 800e90e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e910:	8812      	ldrh	r2, [r2, #0]
 800e912:	b292      	uxth	r2, r2
 800e914:	9202      	str	r2, [sp, #8]
 800e916:	9301      	str	r3, [sp, #4]
 800e918:	4b90      	ldr	r3, [pc, #576]	@ (800eb5c <tcp_process+0x5a4>)
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	4b90      	ldr	r3, [pc, #576]	@ (800eb60 <tcp_process+0x5a8>)
 800e91e:	4602      	mov	r2, r0
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f003 f8d7 	bl	8011ad4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e92c:	2b05      	cmp	r3, #5
 800e92e:	f200 8215 	bhi.w	800ed5c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2200      	movs	r2, #0
 800e936:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f002 fea3 	bl	8011684 <tcp_rexmit_rto>
      break;
 800e93e:	e20d      	b.n	800ed5c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e940:	4b81      	ldr	r3, [pc, #516]	@ (800eb48 <tcp_process+0x590>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	f003 0310 	and.w	r3, r3, #16
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f000 80a1 	beq.w	800ea90 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e94e:	4b7f      	ldr	r3, [pc, #508]	@ (800eb4c <tcp_process+0x594>)
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	3b01      	subs	r3, #1
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	db7e      	blt.n	800ea5c <tcp_process+0x4a4>
 800e95e:	4b7b      	ldr	r3, [pc, #492]	@ (800eb4c <tcp_process+0x594>)
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	2b00      	cmp	r3, #0
 800e96a:	dc77      	bgt.n	800ea5c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2204      	movs	r2, #4
 800e970:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d102      	bne.n	800e980 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e97a:	23fa      	movs	r3, #250	@ 0xfa
 800e97c:	76bb      	strb	r3, [r7, #26]
 800e97e:	e01d      	b.n	800e9bc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e984:	699b      	ldr	r3, [r3, #24]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <tcp_process+0x3e0>
 800e98a:	4b76      	ldr	r3, [pc, #472]	@ (800eb64 <tcp_process+0x5ac>)
 800e98c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e990:	4975      	ldr	r1, [pc, #468]	@ (800eb68 <tcp_process+0x5b0>)
 800e992:	4876      	ldr	r0, [pc, #472]	@ (800eb6c <tcp_process+0x5b4>)
 800e994:	f008 ff34 	bl	8017800 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d00a      	beq.n	800e9b8 <tcp_process+0x400>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	6910      	ldr	r0, [r2, #16]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	6879      	ldr	r1, [r7, #4]
 800e9b0:	4798      	blx	r3
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	76bb      	strb	r3, [r7, #26]
 800e9b6:	e001      	b.n	800e9bc <tcp_process+0x404>
 800e9b8:	23f0      	movs	r3, #240	@ 0xf0
 800e9ba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e9bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00a      	beq.n	800e9da <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e9c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e9c8:	f113 0f0d 	cmn.w	r3, #13
 800e9cc:	d002      	beq.n	800e9d4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f7fd fce6 	bl	800c3a0 <tcp_abort>
            }
            return ERR_ABRT;
 800e9d4:	f06f 030c 	mvn.w	r3, #12
 800e9d8:	e1ce      	b.n	800ed78 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fae0 	bl	800efa0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e9e0:	4b63      	ldr	r3, [pc, #396]	@ (800eb70 <tcp_process+0x5b8>)
 800e9e2:	881b      	ldrh	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d005      	beq.n	800e9f4 <tcp_process+0x43c>
            recv_acked--;
 800e9e8:	4b61      	ldr	r3, [pc, #388]	@ (800eb70 <tcp_process+0x5b8>)
 800e9ea:	881b      	ldrh	r3, [r3, #0]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	b29a      	uxth	r2, r3
 800e9f0:	4b5f      	ldr	r3, [pc, #380]	@ (800eb70 <tcp_process+0x5b8>)
 800e9f2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e9f8:	009a      	lsls	r2, r3, #2
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e9fe:	005b      	lsls	r3, r3, #1
 800ea00:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ea04:	428b      	cmp	r3, r1
 800ea06:	bf38      	it	cc
 800ea08:	460b      	movcc	r3, r1
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d204      	bcs.n	800ea18 <tcp_process+0x460>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	e00d      	b.n	800ea34 <tcp_process+0x47c>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d904      	bls.n	800ea30 <tcp_process+0x478>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ea2a:	005b      	lsls	r3, r3, #1
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	e001      	b.n	800ea34 <tcp_process+0x47c>
 800ea30:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ea3a:	4b4e      	ldr	r3, [pc, #312]	@ (800eb74 <tcp_process+0x5bc>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	f003 0320 	and.w	r3, r3, #32
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d037      	beq.n	800eab6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	8b5b      	ldrh	r3, [r3, #26]
 800ea4a:	f043 0302 	orr.w	r3, r3, #2
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2207      	movs	r2, #7
 800ea58:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ea5a:	e02c      	b.n	800eab6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea5c:	4b3b      	ldr	r3, [pc, #236]	@ (800eb4c <tcp_process+0x594>)
 800ea5e:	6819      	ldr	r1, [r3, #0]
 800ea60:	4b3b      	ldr	r3, [pc, #236]	@ (800eb50 <tcp_process+0x598>)
 800ea62:	881b      	ldrh	r3, [r3, #0]
 800ea64:	461a      	mov	r2, r3
 800ea66:	4b3b      	ldr	r3, [pc, #236]	@ (800eb54 <tcp_process+0x59c>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea6c:	4b3a      	ldr	r3, [pc, #232]	@ (800eb58 <tcp_process+0x5a0>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea70:	885b      	ldrh	r3, [r3, #2]
 800ea72:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea74:	4a38      	ldr	r2, [pc, #224]	@ (800eb58 <tcp_process+0x5a0>)
 800ea76:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea78:	8812      	ldrh	r2, [r2, #0]
 800ea7a:	b292      	uxth	r2, r2
 800ea7c:	9202      	str	r2, [sp, #8]
 800ea7e:	9301      	str	r3, [sp, #4]
 800ea80:	4b36      	ldr	r3, [pc, #216]	@ (800eb5c <tcp_process+0x5a4>)
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	4b36      	ldr	r3, [pc, #216]	@ (800eb60 <tcp_process+0x5a8>)
 800ea86:	4602      	mov	r2, r0
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f003 f823 	bl	8011ad4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ea8e:	e167      	b.n	800ed60 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ea90:	4b2d      	ldr	r3, [pc, #180]	@ (800eb48 <tcp_process+0x590>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f003 0302 	and.w	r3, r3, #2
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f000 8161 	beq.w	800ed60 <tcp_process+0x7a8>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaa2:	1e5a      	subs	r2, r3, #1
 800eaa4:	4b2b      	ldr	r3, [pc, #172]	@ (800eb54 <tcp_process+0x59c>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	f040 8159 	bne.w	800ed60 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f002 fe0a 	bl	80116c8 <tcp_rexmit>
      break;
 800eab4:	e154      	b.n	800ed60 <tcp_process+0x7a8>
 800eab6:	e153      	b.n	800ed60 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 fa71 	bl	800efa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eabe:	4b2d      	ldr	r3, [pc, #180]	@ (800eb74 <tcp_process+0x5bc>)
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	f003 0320 	and.w	r3, r3, #32
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f000 814c 	beq.w	800ed64 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	8b5b      	ldrh	r3, [r3, #26]
 800ead0:	f043 0302 	orr.w	r3, r3, #2
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2207      	movs	r2, #7
 800eade:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eae0:	e140      	b.n	800ed64 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 fa5c 	bl	800efa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eae8:	4b22      	ldr	r3, [pc, #136]	@ (800eb74 <tcp_process+0x5bc>)
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	f003 0320 	and.w	r3, r3, #32
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d071      	beq.n	800ebd8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eaf4:	4b14      	ldr	r3, [pc, #80]	@ (800eb48 <tcp_process+0x590>)
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	f003 0310 	and.w	r3, r3, #16
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d060      	beq.n	800ebc2 <tcp_process+0x60a>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb04:	4b11      	ldr	r3, [pc, #68]	@ (800eb4c <tcp_process+0x594>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d15a      	bne.n	800ebc2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d156      	bne.n	800ebc2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	8b5b      	ldrh	r3, [r3, #26]
 800eb18:	f043 0302 	orr.w	r3, r3, #2
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7fe fdbc 	bl	800d6a0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eb28:	4b13      	ldr	r3, [pc, #76]	@ (800eb78 <tcp_process+0x5c0>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d105      	bne.n	800eb3e <tcp_process+0x586>
 800eb32:	4b11      	ldr	r3, [pc, #68]	@ (800eb78 <tcp_process+0x5c0>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	4a0f      	ldr	r2, [pc, #60]	@ (800eb78 <tcp_process+0x5c0>)
 800eb3a:	6013      	str	r3, [r2, #0]
 800eb3c:	e02e      	b.n	800eb9c <tcp_process+0x5e4>
 800eb3e:	4b0e      	ldr	r3, [pc, #56]	@ (800eb78 <tcp_process+0x5c0>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	617b      	str	r3, [r7, #20]
 800eb44:	e027      	b.n	800eb96 <tcp_process+0x5de>
 800eb46:	bf00      	nop
 800eb48:	20008fec 	.word	0x20008fec
 800eb4c:	20008fe4 	.word	0x20008fe4
 800eb50:	20008fea 	.word	0x20008fea
 800eb54:	20008fe0 	.word	0x20008fe0
 800eb58:	20008fd0 	.word	0x20008fd0
 800eb5c:	20005a28 	.word	0x20005a28
 800eb60:	20005a2c 	.word	0x20005a2c
 800eb64:	0801b160 	.word	0x0801b160
 800eb68:	0801b400 	.word	0x0801b400
 800eb6c:	0801b1ac 	.word	0x0801b1ac
 800eb70:	20008fe8 	.word	0x20008fe8
 800eb74:	20008fed 	.word	0x20008fed
 800eb78:	20008fb4 	.word	0x20008fb4
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d104      	bne.n	800eb90 <tcp_process+0x5d8>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	68da      	ldr	r2, [r3, #12]
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	60da      	str	r2, [r3, #12]
 800eb8e:	e005      	b.n	800eb9c <tcp_process+0x5e4>
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	617b      	str	r3, [r7, #20]
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d1ef      	bne.n	800eb7c <tcp_process+0x5c4>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	60da      	str	r2, [r3, #12]
 800eba2:	4b77      	ldr	r3, [pc, #476]	@ (800ed80 <tcp_process+0x7c8>)
 800eba4:	2201      	movs	r2, #1
 800eba6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	220a      	movs	r2, #10
 800ebac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ebae:	4b75      	ldr	r3, [pc, #468]	@ (800ed84 <tcp_process+0x7cc>)
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	60da      	str	r2, [r3, #12]
 800ebb6:	4a73      	ldr	r2, [pc, #460]	@ (800ed84 <tcp_process+0x7cc>)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6013      	str	r3, [r2, #0]
 800ebbc:	f003 f94c 	bl	8011e58 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ebc0:	e0d2      	b.n	800ed68 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	8b5b      	ldrh	r3, [r3, #26]
 800ebc6:	f043 0302 	orr.w	r3, r3, #2
 800ebca:	b29a      	uxth	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2208      	movs	r2, #8
 800ebd4:	751a      	strb	r2, [r3, #20]
      break;
 800ebd6:	e0c7      	b.n	800ed68 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebd8:	4b6b      	ldr	r3, [pc, #428]	@ (800ed88 <tcp_process+0x7d0>)
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	f003 0310 	and.w	r3, r3, #16
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 80c1 	beq.w	800ed68 <tcp_process+0x7b0>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebea:	4b68      	ldr	r3, [pc, #416]	@ (800ed8c <tcp_process+0x7d4>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	f040 80ba 	bne.w	800ed68 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f040 80b5 	bne.w	800ed68 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2206      	movs	r2, #6
 800ec02:	751a      	strb	r2, [r3, #20]
      break;
 800ec04:	e0b0      	b.n	800ed68 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 f9ca 	bl	800efa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ec0c:	4b60      	ldr	r3, [pc, #384]	@ (800ed90 <tcp_process+0x7d8>)
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	f003 0320 	and.w	r3, r3, #32
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f000 80a9 	beq.w	800ed6c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	8b5b      	ldrh	r3, [r3, #26]
 800ec1e:	f043 0302 	orr.w	r3, r3, #2
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7fe fd39 	bl	800d6a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec2e:	4b59      	ldr	r3, [pc, #356]	@ (800ed94 <tcp_process+0x7dc>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d105      	bne.n	800ec44 <tcp_process+0x68c>
 800ec38:	4b56      	ldr	r3, [pc, #344]	@ (800ed94 <tcp_process+0x7dc>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	4a55      	ldr	r2, [pc, #340]	@ (800ed94 <tcp_process+0x7dc>)
 800ec40:	6013      	str	r3, [r2, #0]
 800ec42:	e013      	b.n	800ec6c <tcp_process+0x6b4>
 800ec44:	4b53      	ldr	r3, [pc, #332]	@ (800ed94 <tcp_process+0x7dc>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	613b      	str	r3, [r7, #16]
 800ec4a:	e00c      	b.n	800ec66 <tcp_process+0x6ae>
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d104      	bne.n	800ec60 <tcp_process+0x6a8>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	68da      	ldr	r2, [r3, #12]
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	60da      	str	r2, [r3, #12]
 800ec5e:	e005      	b.n	800ec6c <tcp_process+0x6b4>
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	613b      	str	r3, [r7, #16]
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1ef      	bne.n	800ec4c <tcp_process+0x694>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	60da      	str	r2, [r3, #12]
 800ec72:	4b43      	ldr	r3, [pc, #268]	@ (800ed80 <tcp_process+0x7c8>)
 800ec74:	2201      	movs	r2, #1
 800ec76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	220a      	movs	r2, #10
 800ec7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec7e:	4b41      	ldr	r3, [pc, #260]	@ (800ed84 <tcp_process+0x7cc>)
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	60da      	str	r2, [r3, #12]
 800ec86:	4a3f      	ldr	r2, [pc, #252]	@ (800ed84 <tcp_process+0x7cc>)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6013      	str	r3, [r2, #0]
 800ec8c:	f003 f8e4 	bl	8011e58 <tcp_timer_needed>
      }
      break;
 800ec90:	e06c      	b.n	800ed6c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 f984 	bl	800efa0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec98:	4b3b      	ldr	r3, [pc, #236]	@ (800ed88 <tcp_process+0x7d0>)
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	f003 0310 	and.w	r3, r3, #16
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d065      	beq.n	800ed70 <tcp_process+0x7b8>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eca8:	4b38      	ldr	r3, [pc, #224]	@ (800ed8c <tcp_process+0x7d4>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d15f      	bne.n	800ed70 <tcp_process+0x7b8>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d15b      	bne.n	800ed70 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7fe fcf1 	bl	800d6a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ecbe:	4b35      	ldr	r3, [pc, #212]	@ (800ed94 <tcp_process+0x7dc>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d105      	bne.n	800ecd4 <tcp_process+0x71c>
 800ecc8:	4b32      	ldr	r3, [pc, #200]	@ (800ed94 <tcp_process+0x7dc>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	68db      	ldr	r3, [r3, #12]
 800ecce:	4a31      	ldr	r2, [pc, #196]	@ (800ed94 <tcp_process+0x7dc>)
 800ecd0:	6013      	str	r3, [r2, #0]
 800ecd2:	e013      	b.n	800ecfc <tcp_process+0x744>
 800ecd4:	4b2f      	ldr	r3, [pc, #188]	@ (800ed94 <tcp_process+0x7dc>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	60fb      	str	r3, [r7, #12]
 800ecda:	e00c      	b.n	800ecf6 <tcp_process+0x73e>
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d104      	bne.n	800ecf0 <tcp_process+0x738>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	68da      	ldr	r2, [r3, #12]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	60da      	str	r2, [r3, #12]
 800ecee:	e005      	b.n	800ecfc <tcp_process+0x744>
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	60fb      	str	r3, [r7, #12]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1ef      	bne.n	800ecdc <tcp_process+0x724>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	60da      	str	r2, [r3, #12]
 800ed02:	4b1f      	ldr	r3, [pc, #124]	@ (800ed80 <tcp_process+0x7c8>)
 800ed04:	2201      	movs	r2, #1
 800ed06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	220a      	movs	r2, #10
 800ed0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ed0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ed84 <tcp_process+0x7cc>)
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	60da      	str	r2, [r3, #12]
 800ed16:	4a1b      	ldr	r2, [pc, #108]	@ (800ed84 <tcp_process+0x7cc>)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6013      	str	r3, [r2, #0]
 800ed1c:	f003 f89c 	bl	8011e58 <tcp_timer_needed>
      }
      break;
 800ed20:	e026      	b.n	800ed70 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 f93c 	bl	800efa0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed28:	4b17      	ldr	r3, [pc, #92]	@ (800ed88 <tcp_process+0x7d0>)
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	f003 0310 	and.w	r3, r3, #16
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d01f      	beq.n	800ed74 <tcp_process+0x7bc>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed38:	4b14      	ldr	r3, [pc, #80]	@ (800ed8c <tcp_process+0x7d4>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d119      	bne.n	800ed74 <tcp_process+0x7bc>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d115      	bne.n	800ed74 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ed48:	4b11      	ldr	r3, [pc, #68]	@ (800ed90 <tcp_process+0x7d8>)
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	f043 0310 	orr.w	r3, r3, #16
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	4b0f      	ldr	r3, [pc, #60]	@ (800ed90 <tcp_process+0x7d8>)
 800ed54:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ed56:	e00d      	b.n	800ed74 <tcp_process+0x7bc>
    default:
      break;
 800ed58:	bf00      	nop
 800ed5a:	e00c      	b.n	800ed76 <tcp_process+0x7be>
      break;
 800ed5c:	bf00      	nop
 800ed5e:	e00a      	b.n	800ed76 <tcp_process+0x7be>
      break;
 800ed60:	bf00      	nop
 800ed62:	e008      	b.n	800ed76 <tcp_process+0x7be>
      break;
 800ed64:	bf00      	nop
 800ed66:	e006      	b.n	800ed76 <tcp_process+0x7be>
      break;
 800ed68:	bf00      	nop
 800ed6a:	e004      	b.n	800ed76 <tcp_process+0x7be>
      break;
 800ed6c:	bf00      	nop
 800ed6e:	e002      	b.n	800ed76 <tcp_process+0x7be>
      break;
 800ed70:	bf00      	nop
 800ed72:	e000      	b.n	800ed76 <tcp_process+0x7be>
      break;
 800ed74:	bf00      	nop
  }
  return ERR_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3724      	adds	r7, #36	@ 0x24
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd90      	pop	{r4, r7, pc}
 800ed80:	20008fbc 	.word	0x20008fbc
 800ed84:	20008fb8 	.word	0x20008fb8
 800ed88:	20008fec 	.word	0x20008fec
 800ed8c:	20008fe4 	.word	0x20008fe4
 800ed90:	20008fed 	.word	0x20008fed
 800ed94:	20008fb4 	.word	0x20008fb4

0800ed98 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ed98:	b590      	push	{r4, r7, lr}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d106      	bne.n	800edb6 <tcp_oos_insert_segment+0x1e>
 800eda8:	4b3b      	ldr	r3, [pc, #236]	@ (800ee98 <tcp_oos_insert_segment+0x100>)
 800edaa:	f240 421f 	movw	r2, #1055	@ 0x41f
 800edae:	493b      	ldr	r1, [pc, #236]	@ (800ee9c <tcp_oos_insert_segment+0x104>)
 800edb0:	483b      	ldr	r0, [pc, #236]	@ (800eea0 <tcp_oos_insert_segment+0x108>)
 800edb2:	f008 fd25 	bl	8017800 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	899b      	ldrh	r3, [r3, #12]
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fb f982 	bl	800a0c8 <lwip_htons>
 800edc4:	4603      	mov	r3, r0
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	f003 0301 	and.w	r3, r3, #1
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d028      	beq.n	800ee22 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800edd0:	6838      	ldr	r0, [r7, #0]
 800edd2:	f7fe f977 	bl	800d0c4 <tcp_segs_free>
    next = NULL;
 800edd6:	2300      	movs	r3, #0
 800edd8:	603b      	str	r3, [r7, #0]
 800edda:	e056      	b.n	800ee8a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	899b      	ldrh	r3, [r3, #12]
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7fb f96f 	bl	800a0c8 <lwip_htons>
 800edea:	4603      	mov	r3, r0
 800edec:	b2db      	uxtb	r3, r3
 800edee:	f003 0301 	and.w	r3, r3, #1
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00d      	beq.n	800ee12 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	899b      	ldrh	r3, [r3, #12]
 800edfc:	b29c      	uxth	r4, r3
 800edfe:	2001      	movs	r0, #1
 800ee00:	f7fb f962 	bl	800a0c8 <lwip_htons>
 800ee04:	4603      	mov	r3, r0
 800ee06:	461a      	mov	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	4322      	orrs	r2, r4
 800ee0e:	b292      	uxth	r2, r2
 800ee10:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f7fe f966 	bl	800d0ee <tcp_seg_free>
    while (next &&
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00e      	beq.n	800ee46 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	891b      	ldrh	r3, [r3, #8]
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	4b1d      	ldr	r3, [pc, #116]	@ (800eea4 <tcp_oos_insert_segment+0x10c>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	441a      	add	r2, r3
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	6839      	ldr	r1, [r7, #0]
 800ee3c:	8909      	ldrh	r1, [r1, #8]
 800ee3e:	440b      	add	r3, r1
 800ee40:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	daca      	bge.n	800eddc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d01e      	beq.n	800ee8a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	891b      	ldrh	r3, [r3, #8]
 800ee50:	461a      	mov	r2, r3
 800ee52:	4b14      	ldr	r3, [pc, #80]	@ (800eea4 <tcp_oos_insert_segment+0x10c>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	441a      	add	r2, r3
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	dd12      	ble.n	800ee8a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	4b0d      	ldr	r3, [pc, #52]	@ (800eea4 <tcp_oos_insert_segment+0x10c>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	891b      	ldrh	r3, [r3, #8]
 800ee82:	4619      	mov	r1, r3
 800ee84:	4610      	mov	r0, r2
 800ee86:	f7fc fb6d 	bl	800b564 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	683a      	ldr	r2, [r7, #0]
 800ee8e:	601a      	str	r2, [r3, #0]
}
 800ee90:	bf00      	nop
 800ee92:	3714      	adds	r7, #20
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd90      	pop	{r4, r7, pc}
 800ee98:	0801b160 	.word	0x0801b160
 800ee9c:	0801b420 	.word	0x0801b420
 800eea0:	0801b1ac 	.word	0x0801b1ac
 800eea4:	20008fe0 	.word	0x20008fe0

0800eea8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eea8:	b5b0      	push	{r4, r5, r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
 800eeb4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eeb6:	e03e      	b.n	800ef36 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fc fd5a 	bl	800b980 <pbuf_clen>
 800eecc:	4603      	mov	r3, r0
 800eece:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eed6:	8a7a      	ldrh	r2, [r7, #18]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d906      	bls.n	800eeea <tcp_free_acked_segments+0x42>
 800eedc:	4b2a      	ldr	r3, [pc, #168]	@ (800ef88 <tcp_free_acked_segments+0xe0>)
 800eede:	f240 4257 	movw	r2, #1111	@ 0x457
 800eee2:	492a      	ldr	r1, [pc, #168]	@ (800ef8c <tcp_free_acked_segments+0xe4>)
 800eee4:	482a      	ldr	r0, [pc, #168]	@ (800ef90 <tcp_free_acked_segments+0xe8>)
 800eee6:	f008 fc8b 	bl	8017800 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800eef0:	8a7b      	ldrh	r3, [r7, #18]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	891a      	ldrh	r2, [r3, #8]
 800ef00:	4b24      	ldr	r3, [pc, #144]	@ (800ef94 <tcp_free_acked_segments+0xec>)
 800ef02:	881b      	ldrh	r3, [r3, #0]
 800ef04:	4413      	add	r3, r2
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	4b22      	ldr	r3, [pc, #136]	@ (800ef94 <tcp_free_acked_segments+0xec>)
 800ef0a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ef0c:	6978      	ldr	r0, [r7, #20]
 800ef0e:	f7fe f8ee 	bl	800d0ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00c      	beq.n	800ef36 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d109      	bne.n	800ef36 <tcp_free_acked_segments+0x8e>
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d106      	bne.n	800ef36 <tcp_free_acked_segments+0x8e>
 800ef28:	4b17      	ldr	r3, [pc, #92]	@ (800ef88 <tcp_free_acked_segments+0xe0>)
 800ef2a:	f240 4261 	movw	r2, #1121	@ 0x461
 800ef2e:	491a      	ldr	r1, [pc, #104]	@ (800ef98 <tcp_free_acked_segments+0xf0>)
 800ef30:	4817      	ldr	r0, [pc, #92]	@ (800ef90 <tcp_free_acked_segments+0xe8>)
 800ef32:	f008 fc65 	bl	8017800 <iprintf>
  while (seg_list != NULL &&
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d020      	beq.n	800ef7e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fb f8d5 	bl	800a0f2 <lwip_htonl>
 800ef48:	4604      	mov	r4, r0
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	891b      	ldrh	r3, [r3, #8]
 800ef4e:	461d      	mov	r5, r3
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	899b      	ldrh	r3, [r3, #12]
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fb f8b5 	bl	800a0c8 <lwip_htons>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	f003 0303 	and.w	r3, r3, #3
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d001      	beq.n	800ef6e <tcp_free_acked_segments+0xc6>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e000      	b.n	800ef70 <tcp_free_acked_segments+0xc8>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	442b      	add	r3, r5
 800ef72:	18e2      	adds	r2, r4, r3
 800ef74:	4b09      	ldr	r3, [pc, #36]	@ (800ef9c <tcp_free_acked_segments+0xf4>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	dd9c      	ble.n	800eeb8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ef7e:	68bb      	ldr	r3, [r7, #8]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3718      	adds	r7, #24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bdb0      	pop	{r4, r5, r7, pc}
 800ef88:	0801b160 	.word	0x0801b160
 800ef8c:	0801b448 	.word	0x0801b448
 800ef90:	0801b1ac 	.word	0x0801b1ac
 800ef94:	20008fe8 	.word	0x20008fe8
 800ef98:	0801b470 	.word	0x0801b470
 800ef9c:	20008fe4 	.word	0x20008fe4

0800efa0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800efa0:	b5b0      	push	{r4, r5, r7, lr}
 800efa2:	b094      	sub	sp, #80	@ 0x50
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800efa8:	2300      	movs	r3, #0
 800efaa:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d106      	bne.n	800efc0 <tcp_receive+0x20>
 800efb2:	4b91      	ldr	r3, [pc, #580]	@ (800f1f8 <tcp_receive+0x258>)
 800efb4:	f240 427b 	movw	r2, #1147	@ 0x47b
 800efb8:	4990      	ldr	r1, [pc, #576]	@ (800f1fc <tcp_receive+0x25c>)
 800efba:	4891      	ldr	r0, [pc, #580]	@ (800f200 <tcp_receive+0x260>)
 800efbc:	f008 fc20 	bl	8017800 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	7d1b      	ldrb	r3, [r3, #20]
 800efc4:	2b03      	cmp	r3, #3
 800efc6:	d806      	bhi.n	800efd6 <tcp_receive+0x36>
 800efc8:	4b8b      	ldr	r3, [pc, #556]	@ (800f1f8 <tcp_receive+0x258>)
 800efca:	f240 427c 	movw	r2, #1148	@ 0x47c
 800efce:	498d      	ldr	r1, [pc, #564]	@ (800f204 <tcp_receive+0x264>)
 800efd0:	488b      	ldr	r0, [pc, #556]	@ (800f200 <tcp_receive+0x260>)
 800efd2:	f008 fc15 	bl	8017800 <iprintf>

  if (flags & TCP_ACK) {
 800efd6:	4b8c      	ldr	r3, [pc, #560]	@ (800f208 <tcp_receive+0x268>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f003 0310 	and.w	r3, r3, #16
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f000 8264 	beq.w	800f4ac <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800efea:	461a      	mov	r2, r3
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eff0:	4413      	add	r3, r2
 800eff2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eff8:	4b84      	ldr	r3, [pc, #528]	@ (800f20c <tcp_receive+0x26c>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	db1b      	blt.n	800f03a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f006:	4b81      	ldr	r3, [pc, #516]	@ (800f20c <tcp_receive+0x26c>)
 800f008:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d106      	bne.n	800f01c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f012:	4b7f      	ldr	r3, [pc, #508]	@ (800f210 <tcp_receive+0x270>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	2b00      	cmp	r3, #0
 800f01a:	db0e      	blt.n	800f03a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f020:	4b7b      	ldr	r3, [pc, #492]	@ (800f210 <tcp_receive+0x270>)
 800f022:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f024:	429a      	cmp	r2, r3
 800f026:	d125      	bne.n	800f074 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f028:	4b7a      	ldr	r3, [pc, #488]	@ (800f214 <tcp_receive+0x274>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	89db      	ldrh	r3, [r3, #14]
 800f02e:	b29a      	uxth	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f036:	429a      	cmp	r2, r3
 800f038:	d91c      	bls.n	800f074 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f03a:	4b76      	ldr	r3, [pc, #472]	@ (800f214 <tcp_receive+0x274>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	89db      	ldrh	r3, [r3, #14]
 800f040:	b29a      	uxth	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f054:	429a      	cmp	r2, r3
 800f056:	d205      	bcs.n	800f064 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f064:	4b69      	ldr	r3, [pc, #420]	@ (800f20c <tcp_receive+0x26c>)
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f06c:	4b68      	ldr	r3, [pc, #416]	@ (800f210 <tcp_receive+0x270>)
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f074:	4b66      	ldr	r3, [pc, #408]	@ (800f210 <tcp_receive+0x270>)
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	dc58      	bgt.n	800f134 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f082:	4b65      	ldr	r3, [pc, #404]	@ (800f218 <tcp_receive+0x278>)
 800f084:	881b      	ldrh	r3, [r3, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d14b      	bne.n	800f122 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f094:	4413      	add	r3, r2
 800f096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f098:	429a      	cmp	r2, r3
 800f09a:	d142      	bne.n	800f122 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	db3d      	blt.n	800f122 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0aa:	4b59      	ldr	r3, [pc, #356]	@ (800f210 <tcp_receive+0x270>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d137      	bne.n	800f122 <tcp_receive+0x182>
              found_dupack = 1;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f0bc:	2bff      	cmp	r3, #255	@ 0xff
 800f0be:	d007      	beq.n	800f0d0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	b2da      	uxtb	r2, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f0d6:	2b03      	cmp	r3, #3
 800f0d8:	d91b      	bls.n	800f112 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0e4:	4413      	add	r3, r2
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d30a      	bcc.n	800f108 <tcp_receive+0x168>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0fc:	4413      	add	r3, r2
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f106:	e004      	b.n	800f112 <tcp_receive+0x172>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f10e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f118:	2b02      	cmp	r3, #2
 800f11a:	d902      	bls.n	800f122 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f002 fb3f 	bl	80117a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f124:	2b00      	cmp	r3, #0
 800f126:	f040 8161 	bne.w	800f3ec <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f132:	e15b      	b.n	800f3ec <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f134:	4b36      	ldr	r3, [pc, #216]	@ (800f210 <tcp_receive+0x270>)
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	3b01      	subs	r3, #1
 800f140:	2b00      	cmp	r3, #0
 800f142:	f2c0 814e 	blt.w	800f3e2 <tcp_receive+0x442>
 800f146:	4b32      	ldr	r3, [pc, #200]	@ (800f210 <tcp_receive+0x270>)
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	f300 8146 	bgt.w	800f3e2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	8b5b      	ldrh	r3, [r3, #26]
 800f15a:	f003 0304 	and.w	r3, r3, #4
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d010      	beq.n	800f184 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	8b5b      	ldrh	r3, [r3, #26]
 800f166:	f023 0304 	bic.w	r3, r3, #4
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f192:	10db      	asrs	r3, r3, #3
 800f194:	b21b      	sxth	r3, r3
 800f196:	b29a      	uxth	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	4413      	add	r3, r2
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	b21a      	sxth	r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f1ac:	4b18      	ldr	r3, [pc, #96]	@ (800f210 <tcp_receive+0x270>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f1c4:	4b12      	ldr	r3, [pc, #72]	@ (800f210 <tcp_receive+0x270>)
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	7d1b      	ldrb	r3, [r3, #20]
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	f240 8097 	bls.w	800f304 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d245      	bcs.n	800f272 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	8b5b      	ldrh	r3, [r3, #26]
 800f1ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d014      	beq.n	800f21c <tcp_receive+0x27c>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e013      	b.n	800f21e <tcp_receive+0x27e>
 800f1f6:	bf00      	nop
 800f1f8:	0801b160 	.word	0x0801b160
 800f1fc:	0801b490 	.word	0x0801b490
 800f200:	0801b1ac 	.word	0x0801b1ac
 800f204:	0801b4ac 	.word	0x0801b4ac
 800f208:	20008fec 	.word	0x20008fec
 800f20c:	20008fe0 	.word	0x20008fe0
 800f210:	20008fe4 	.word	0x20008fe4
 800f214:	20008fd0 	.word	0x20008fd0
 800f218:	20008fea 	.word	0x20008fea
 800f21c:	2302      	movs	r3, #2
 800f21e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f222:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f226:	b29a      	uxth	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f22c:	fb12 f303 	smulbb	r3, r2, r3
 800f230:	b29b      	uxth	r3, r3
 800f232:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f234:	4293      	cmp	r3, r2
 800f236:	bf28      	it	cs
 800f238:	4613      	movcs	r3, r2
 800f23a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f242:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f244:	4413      	add	r3, r2
 800f246:	b29a      	uxth	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f24e:	429a      	cmp	r2, r3
 800f250:	d309      	bcc.n	800f266 <tcp_receive+0x2c6>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f258:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f25a:	4413      	add	r3, r2
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f264:	e04e      	b.n	800f304 <tcp_receive+0x364>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f26c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f270:	e048      	b.n	800f304 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f278:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f27a:	4413      	add	r3, r2
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f284:	429a      	cmp	r2, r3
 800f286:	d309      	bcc.n	800f29c <tcp_receive+0x2fc>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f28e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f290:	4413      	add	r3, r2
 800f292:	b29a      	uxth	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f29a:	e004      	b.n	800f2a6 <tcp_receive+0x306>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d326      	bcc.n	800f304 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f2d6:	4413      	add	r3, r2
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d30a      	bcc.n	800f2fa <tcp_receive+0x35a>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f2ee:	4413      	add	r3, r2
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f2f8:	e004      	b.n	800f304 <tcp_receive+0x364>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f300:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f30c:	4a98      	ldr	r2, [pc, #608]	@ (800f570 <tcp_receive+0x5d0>)
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f7ff fdca 	bl	800eea8 <tcp_free_acked_segments>
 800f314:	4602      	mov	r2, r0
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f322:	4a94      	ldr	r2, [pc, #592]	@ (800f574 <tcp_receive+0x5d4>)
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7ff fdbf 	bl	800eea8 <tcp_free_acked_segments>
 800f32a:	4602      	mov	r2, r0
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f334:	2b00      	cmp	r3, #0
 800f336:	d104      	bne.n	800f342 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f33e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f340:	e002      	b.n	800f348 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2200      	movs	r2, #0
 800f346:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f352:	2b00      	cmp	r3, #0
 800f354:	d103      	bne.n	800f35e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f364:	4b84      	ldr	r3, [pc, #528]	@ (800f578 <tcp_receive+0x5d8>)
 800f366:	881b      	ldrh	r3, [r3, #0]
 800f368:	4413      	add	r3, r2
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	8b5b      	ldrh	r3, [r3, #26]
 800f376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d035      	beq.n	800f3ea <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f382:	2b00      	cmp	r3, #0
 800f384:	d118      	bne.n	800f3b8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00c      	beq.n	800f3a8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fa fea9 	bl	800a0f2 <lwip_htonl>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	dc20      	bgt.n	800f3ea <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	8b5b      	ldrh	r3, [r3, #26]
 800f3ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3b6:	e018      	b.n	800f3ea <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fa fe94 	bl	800a0f2 <lwip_htonl>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	1ae3      	subs	r3, r4, r3
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	dc0b      	bgt.n	800f3ea <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	8b5b      	ldrh	r3, [r3, #26]
 800f3d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3e0:	e003      	b.n	800f3ea <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f002 fbc8 	bl	8011b78 <tcp_send_empty_ack>
 800f3e8:	e000      	b.n	800f3ec <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3ea:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d05b      	beq.n	800f4ac <tcp_receive+0x50c>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3f8:	4b60      	ldr	r3, [pc, #384]	@ (800f57c <tcp_receive+0x5dc>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	da54      	bge.n	800f4ac <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f402:	4b5f      	ldr	r3, [pc, #380]	@ (800f580 <tcp_receive+0x5e0>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	b29a      	uxth	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	b29b      	uxth	r3, r3
 800f412:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f416:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f420:	10db      	asrs	r3, r3, #3
 800f422:	b21b      	sxth	r3, r3
 800f424:	b29b      	uxth	r3, r3
 800f426:	1ad3      	subs	r3, r2, r3
 800f428:	b29b      	uxth	r3, r3
 800f42a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f434:	b29a      	uxth	r2, r3
 800f436:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f43a:	4413      	add	r3, r2
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	b21a      	sxth	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f444:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f448:	2b00      	cmp	r3, #0
 800f44a:	da05      	bge.n	800f458 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f44c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f450:	425b      	negs	r3, r3
 800f452:	b29b      	uxth	r3, r3
 800f454:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f458:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f462:	109b      	asrs	r3, r3, #2
 800f464:	b21b      	sxth	r3, r3
 800f466:	b29b      	uxth	r3, r3
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f476:	b29a      	uxth	r2, r3
 800f478:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f47c:	4413      	add	r3, r2
 800f47e:	b29b      	uxth	r3, r3
 800f480:	b21a      	sxth	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f48c:	10db      	asrs	r3, r3, #3
 800f48e:	b21b      	sxth	r3, r3
 800f490:	b29a      	uxth	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f498:	b29b      	uxth	r3, r3
 800f49a:	4413      	add	r3, r2
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	b21a      	sxth	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f4ac:	4b35      	ldr	r3, [pc, #212]	@ (800f584 <tcp_receive+0x5e4>)
 800f4ae:	881b      	ldrh	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f000 84df 	beq.w	800fe74 <tcp_receive+0xed4>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	7d1b      	ldrb	r3, [r3, #20]
 800f4ba:	2b06      	cmp	r3, #6
 800f4bc:	f200 84da 	bhi.w	800fe74 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4c4:	4b30      	ldr	r3, [pc, #192]	@ (800f588 <tcp_receive+0x5e8>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f2c0 808f 	blt.w	800f5f0 <tcp_receive+0x650>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4d6:	4b2b      	ldr	r3, [pc, #172]	@ (800f584 <tcp_receive+0x5e4>)
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	4619      	mov	r1, r3
 800f4dc:	4b2a      	ldr	r3, [pc, #168]	@ (800f588 <tcp_receive+0x5e8>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	440b      	add	r3, r1
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f300 8082 	bgt.w	800f5f0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f4ec:	4b27      	ldr	r3, [pc, #156]	@ (800f58c <tcp_receive+0x5ec>)
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4f6:	4b24      	ldr	r3, [pc, #144]	@ (800f588 <tcp_receive+0x5e8>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	1ad3      	subs	r3, r2, r3
 800f4fc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f4fe:	4b23      	ldr	r3, [pc, #140]	@ (800f58c <tcp_receive+0x5ec>)
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d106      	bne.n	800f514 <tcp_receive+0x574>
 800f506:	4b22      	ldr	r3, [pc, #136]	@ (800f590 <tcp_receive+0x5f0>)
 800f508:	f240 5294 	movw	r2, #1428	@ 0x594
 800f50c:	4921      	ldr	r1, [pc, #132]	@ (800f594 <tcp_receive+0x5f4>)
 800f50e:	4822      	ldr	r0, [pc, #136]	@ (800f598 <tcp_receive+0x5f8>)
 800f510:	f008 f976 	bl	8017800 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f516:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d906      	bls.n	800f52c <tcp_receive+0x58c>
 800f51e:	4b1c      	ldr	r3, [pc, #112]	@ (800f590 <tcp_receive+0x5f0>)
 800f520:	f240 5295 	movw	r2, #1429	@ 0x595
 800f524:	491d      	ldr	r1, [pc, #116]	@ (800f59c <tcp_receive+0x5fc>)
 800f526:	481c      	ldr	r0, [pc, #112]	@ (800f598 <tcp_receive+0x5f8>)
 800f528:	f008 f96a 	bl	8017800 <iprintf>
      off = (u16_t)off32;
 800f52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f52e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f532:	4b16      	ldr	r3, [pc, #88]	@ (800f58c <tcp_receive+0x5ec>)
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	891b      	ldrh	r3, [r3, #8]
 800f538:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d906      	bls.n	800f54e <tcp_receive+0x5ae>
 800f540:	4b13      	ldr	r3, [pc, #76]	@ (800f590 <tcp_receive+0x5f0>)
 800f542:	f240 5297 	movw	r2, #1431	@ 0x597
 800f546:	4916      	ldr	r1, [pc, #88]	@ (800f5a0 <tcp_receive+0x600>)
 800f548:	4813      	ldr	r0, [pc, #76]	@ (800f598 <tcp_receive+0x5f8>)
 800f54a:	f008 f959 	bl	8017800 <iprintf>
      inseg.len -= off;
 800f54e:	4b0f      	ldr	r3, [pc, #60]	@ (800f58c <tcp_receive+0x5ec>)
 800f550:	891a      	ldrh	r2, [r3, #8]
 800f552:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	b29a      	uxth	r2, r3
 800f55a:	4b0c      	ldr	r3, [pc, #48]	@ (800f58c <tcp_receive+0x5ec>)
 800f55c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f55e:	4b0b      	ldr	r3, [pc, #44]	@ (800f58c <tcp_receive+0x5ec>)
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	891a      	ldrh	r2, [r3, #8]
 800f564:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f568:	1ad3      	subs	r3, r2, r3
 800f56a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f56c:	e02a      	b.n	800f5c4 <tcp_receive+0x624>
 800f56e:	bf00      	nop
 800f570:	0801b4c8 	.word	0x0801b4c8
 800f574:	0801b4d0 	.word	0x0801b4d0
 800f578:	20008fe8 	.word	0x20008fe8
 800f57c:	20008fe4 	.word	0x20008fe4
 800f580:	20008fa8 	.word	0x20008fa8
 800f584:	20008fea 	.word	0x20008fea
 800f588:	20008fe0 	.word	0x20008fe0
 800f58c:	20008fc0 	.word	0x20008fc0
 800f590:	0801b160 	.word	0x0801b160
 800f594:	0801b4d8 	.word	0x0801b4d8
 800f598:	0801b1ac 	.word	0x0801b1ac
 800f59c:	0801b4e8 	.word	0x0801b4e8
 800f5a0:	0801b4f8 	.word	0x0801b4f8
        off -= p->len;
 800f5a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5a6:	895b      	ldrh	r3, [r3, #10]
 800f5a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f5b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5b4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f5b6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f5b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f5be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f5c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5c6:	895b      	ldrh	r3, [r3, #10]
 800f5c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d8e9      	bhi.n	800f5a4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f5d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f5d8:	f7fc f8c4 	bl	800b764 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5e0:	4a90      	ldr	r2, [pc, #576]	@ (800f824 <tcp_receive+0x884>)
 800f5e2:	6013      	str	r3, [r2, #0]
 800f5e4:	4b90      	ldr	r3, [pc, #576]	@ (800f828 <tcp_receive+0x888>)
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	4a8e      	ldr	r2, [pc, #568]	@ (800f824 <tcp_receive+0x884>)
 800f5ea:	6812      	ldr	r2, [r2, #0]
 800f5ec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f5ee:	e00d      	b.n	800f60c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f5f0:	4b8c      	ldr	r3, [pc, #560]	@ (800f824 <tcp_receive+0x884>)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	da06      	bge.n	800f60c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	8b5b      	ldrh	r3, [r3, #26]
 800f602:	f043 0302 	orr.w	r3, r3, #2
 800f606:	b29a      	uxth	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f60c:	4b85      	ldr	r3, [pc, #532]	@ (800f824 <tcp_receive+0x884>)
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	f2c0 8427 	blt.w	800fe6a <tcp_receive+0xeca>
 800f61c:	4b81      	ldr	r3, [pc, #516]	@ (800f824 <tcp_receive+0x884>)
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f624:	6879      	ldr	r1, [r7, #4]
 800f626:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f628:	440b      	add	r3, r1
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	3301      	adds	r3, #1
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f300 841b 	bgt.w	800fe6a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f638:	4b7a      	ldr	r3, [pc, #488]	@ (800f824 <tcp_receive+0x884>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	f040 8298 	bne.w	800fb72 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f642:	4b79      	ldr	r3, [pc, #484]	@ (800f828 <tcp_receive+0x888>)
 800f644:	891c      	ldrh	r4, [r3, #8]
 800f646:	4b78      	ldr	r3, [pc, #480]	@ (800f828 <tcp_receive+0x888>)
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	899b      	ldrh	r3, [r3, #12]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fa fd3a 	bl	800a0c8 <lwip_htons>
 800f654:	4603      	mov	r3, r0
 800f656:	b2db      	uxtb	r3, r3
 800f658:	f003 0303 	and.w	r3, r3, #3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <tcp_receive+0x6c4>
 800f660:	2301      	movs	r3, #1
 800f662:	e000      	b.n	800f666 <tcp_receive+0x6c6>
 800f664:	2300      	movs	r3, #0
 800f666:	4423      	add	r3, r4
 800f668:	b29a      	uxth	r2, r3
 800f66a:	4b70      	ldr	r3, [pc, #448]	@ (800f82c <tcp_receive+0x88c>)
 800f66c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f672:	4b6e      	ldr	r3, [pc, #440]	@ (800f82c <tcp_receive+0x88c>)
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	429a      	cmp	r2, r3
 800f678:	d274      	bcs.n	800f764 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f67a:	4b6b      	ldr	r3, [pc, #428]	@ (800f828 <tcp_receive+0x888>)
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	899b      	ldrh	r3, [r3, #12]
 800f680:	b29b      	uxth	r3, r3
 800f682:	4618      	mov	r0, r3
 800f684:	f7fa fd20 	bl	800a0c8 <lwip_htons>
 800f688:	4603      	mov	r3, r0
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	f003 0301 	and.w	r3, r3, #1
 800f690:	2b00      	cmp	r3, #0
 800f692:	d01e      	beq.n	800f6d2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f694:	4b64      	ldr	r3, [pc, #400]	@ (800f828 <tcp_receive+0x888>)
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	899b      	ldrh	r3, [r3, #12]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	b21b      	sxth	r3, r3
 800f69e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f6a2:	b21c      	sxth	r4, r3
 800f6a4:	4b60      	ldr	r3, [pc, #384]	@ (800f828 <tcp_receive+0x888>)
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	899b      	ldrh	r3, [r3, #12]
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fa fd0b 	bl	800a0c8 <lwip_htons>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fa fd03 	bl	800a0c8 <lwip_htons>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	b21b      	sxth	r3, r3
 800f6c6:	4323      	orrs	r3, r4
 800f6c8:	b21a      	sxth	r2, r3
 800f6ca:	4b57      	ldr	r3, [pc, #348]	@ (800f828 <tcp_receive+0x888>)
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	b292      	uxth	r2, r2
 800f6d0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f6d6:	4b54      	ldr	r3, [pc, #336]	@ (800f828 <tcp_receive+0x888>)
 800f6d8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f6da:	4b53      	ldr	r3, [pc, #332]	@ (800f828 <tcp_receive+0x888>)
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	899b      	ldrh	r3, [r3, #12]
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fa fcf0 	bl	800a0c8 <lwip_htons>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	f003 0302 	and.w	r3, r3, #2
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d005      	beq.n	800f700 <tcp_receive+0x760>
            inseg.len -= 1;
 800f6f4:	4b4c      	ldr	r3, [pc, #304]	@ (800f828 <tcp_receive+0x888>)
 800f6f6:	891b      	ldrh	r3, [r3, #8]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	4b4a      	ldr	r3, [pc, #296]	@ (800f828 <tcp_receive+0x888>)
 800f6fe:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f700:	4b49      	ldr	r3, [pc, #292]	@ (800f828 <tcp_receive+0x888>)
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	4a48      	ldr	r2, [pc, #288]	@ (800f828 <tcp_receive+0x888>)
 800f706:	8912      	ldrh	r2, [r2, #8]
 800f708:	4611      	mov	r1, r2
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fb ff2a 	bl	800b564 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f710:	4b45      	ldr	r3, [pc, #276]	@ (800f828 <tcp_receive+0x888>)
 800f712:	891c      	ldrh	r4, [r3, #8]
 800f714:	4b44      	ldr	r3, [pc, #272]	@ (800f828 <tcp_receive+0x888>)
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	899b      	ldrh	r3, [r3, #12]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7fa fcd3 	bl	800a0c8 <lwip_htons>
 800f722:	4603      	mov	r3, r0
 800f724:	b2db      	uxtb	r3, r3
 800f726:	f003 0303 	and.w	r3, r3, #3
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d001      	beq.n	800f732 <tcp_receive+0x792>
 800f72e:	2301      	movs	r3, #1
 800f730:	e000      	b.n	800f734 <tcp_receive+0x794>
 800f732:	2300      	movs	r3, #0
 800f734:	4423      	add	r3, r4
 800f736:	b29a      	uxth	r2, r3
 800f738:	4b3c      	ldr	r3, [pc, #240]	@ (800f82c <tcp_receive+0x88c>)
 800f73a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f73c:	4b3b      	ldr	r3, [pc, #236]	@ (800f82c <tcp_receive+0x88c>)
 800f73e:	881b      	ldrh	r3, [r3, #0]
 800f740:	461a      	mov	r2, r3
 800f742:	4b38      	ldr	r3, [pc, #224]	@ (800f824 <tcp_receive+0x884>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	441a      	add	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f74c:	6879      	ldr	r1, [r7, #4]
 800f74e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f750:	440b      	add	r3, r1
 800f752:	429a      	cmp	r2, r3
 800f754:	d006      	beq.n	800f764 <tcp_receive+0x7c4>
 800f756:	4b36      	ldr	r3, [pc, #216]	@ (800f830 <tcp_receive+0x890>)
 800f758:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f75c:	4935      	ldr	r1, [pc, #212]	@ (800f834 <tcp_receive+0x894>)
 800f75e:	4836      	ldr	r0, [pc, #216]	@ (800f838 <tcp_receive+0x898>)
 800f760:	f008 f84e 	bl	8017800 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 80e6 	beq.w	800f93a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f76e:	4b2e      	ldr	r3, [pc, #184]	@ (800f828 <tcp_receive+0x888>)
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	899b      	ldrh	r3, [r3, #12]
 800f774:	b29b      	uxth	r3, r3
 800f776:	4618      	mov	r0, r3
 800f778:	f7fa fca6 	bl	800a0c8 <lwip_htons>
 800f77c:	4603      	mov	r3, r0
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	f003 0301 	and.w	r3, r3, #1
 800f784:	2b00      	cmp	r3, #0
 800f786:	d010      	beq.n	800f7aa <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f788:	e00a      	b.n	800f7a0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f78e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f7fd fca7 	bl	800d0ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1f0      	bne.n	800f78a <tcp_receive+0x7ea>
 800f7a8:	e0c7      	b.n	800f93a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f7b0:	e051      	b.n	800f856 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	899b      	ldrh	r3, [r3, #12]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fa fc84 	bl	800a0c8 <lwip_htons>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	f003 0301 	and.w	r3, r3, #1
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d03c      	beq.n	800f846 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f7cc:	4b16      	ldr	r3, [pc, #88]	@ (800f828 <tcp_receive+0x888>)
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	899b      	ldrh	r3, [r3, #12]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fa fc77 	bl	800a0c8 <lwip_htons>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d12f      	bne.n	800f846 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f7e6:	4b10      	ldr	r3, [pc, #64]	@ (800f828 <tcp_receive+0x888>)
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	899b      	ldrh	r3, [r3, #12]
 800f7ec:	b29c      	uxth	r4, r3
 800f7ee:	2001      	movs	r0, #1
 800f7f0:	f7fa fc6a 	bl	800a0c8 <lwip_htons>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	4b0b      	ldr	r3, [pc, #44]	@ (800f828 <tcp_receive+0x888>)
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	4322      	orrs	r2, r4
 800f7fe:	b292      	uxth	r2, r2
 800f800:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f802:	4b09      	ldr	r3, [pc, #36]	@ (800f828 <tcp_receive+0x888>)
 800f804:	891c      	ldrh	r4, [r3, #8]
 800f806:	4b08      	ldr	r3, [pc, #32]	@ (800f828 <tcp_receive+0x888>)
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	899b      	ldrh	r3, [r3, #12]
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fa fc5a 	bl	800a0c8 <lwip_htons>
 800f814:	4603      	mov	r3, r0
 800f816:	b2db      	uxtb	r3, r3
 800f818:	f003 0303 	and.w	r3, r3, #3
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00d      	beq.n	800f83c <tcp_receive+0x89c>
 800f820:	2301      	movs	r3, #1
 800f822:	e00c      	b.n	800f83e <tcp_receive+0x89e>
 800f824:	20008fe0 	.word	0x20008fe0
 800f828:	20008fc0 	.word	0x20008fc0
 800f82c:	20008fea 	.word	0x20008fea
 800f830:	0801b160 	.word	0x0801b160
 800f834:	0801b508 	.word	0x0801b508
 800f838:	0801b1ac 	.word	0x0801b1ac
 800f83c:	2300      	movs	r3, #0
 800f83e:	4423      	add	r3, r4
 800f840:	b29a      	uxth	r2, r3
 800f842:	4b98      	ldr	r3, [pc, #608]	@ (800faa4 <tcp_receive+0xb04>)
 800f844:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f848:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f850:	6938      	ldr	r0, [r7, #16]
 800f852:	f7fd fc4c 	bl	800d0ee <tcp_seg_free>
            while (next &&
 800f856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d00e      	beq.n	800f87a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f85c:	4b91      	ldr	r3, [pc, #580]	@ (800faa4 <tcp_receive+0xb04>)
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	461a      	mov	r2, r3
 800f862:	4b91      	ldr	r3, [pc, #580]	@ (800faa8 <tcp_receive+0xb08>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	441a      	add	r2, r3
 800f868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f870:	8909      	ldrh	r1, [r1, #8]
 800f872:	440b      	add	r3, r1
 800f874:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f876:	2b00      	cmp	r3, #0
 800f878:	da9b      	bge.n	800f7b2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f87a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d059      	beq.n	800f934 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f880:	4b88      	ldr	r3, [pc, #544]	@ (800faa4 <tcp_receive+0xb04>)
 800f882:	881b      	ldrh	r3, [r3, #0]
 800f884:	461a      	mov	r2, r3
 800f886:	4b88      	ldr	r3, [pc, #544]	@ (800faa8 <tcp_receive+0xb08>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	441a      	add	r2, r3
 800f88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f894:	2b00      	cmp	r3, #0
 800f896:	dd4d      	ble.n	800f934 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	4b81      	ldr	r3, [pc, #516]	@ (800faa8 <tcp_receive+0xb08>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	1ad3      	subs	r3, r2, r3
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	4b80      	ldr	r3, [pc, #512]	@ (800faac <tcp_receive+0xb0c>)
 800f8ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f8ae:	4b7f      	ldr	r3, [pc, #508]	@ (800faac <tcp_receive+0xb0c>)
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	899b      	ldrh	r3, [r3, #12]
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fa fc06 	bl	800a0c8 <lwip_htons>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	f003 0302 	and.w	r3, r3, #2
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d005      	beq.n	800f8d4 <tcp_receive+0x934>
                inseg.len -= 1;
 800f8c8:	4b78      	ldr	r3, [pc, #480]	@ (800faac <tcp_receive+0xb0c>)
 800f8ca:	891b      	ldrh	r3, [r3, #8]
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	4b76      	ldr	r3, [pc, #472]	@ (800faac <tcp_receive+0xb0c>)
 800f8d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f8d4:	4b75      	ldr	r3, [pc, #468]	@ (800faac <tcp_receive+0xb0c>)
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	4a74      	ldr	r2, [pc, #464]	@ (800faac <tcp_receive+0xb0c>)
 800f8da:	8912      	ldrh	r2, [r2, #8]
 800f8dc:	4611      	mov	r1, r2
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fb fe40 	bl	800b564 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f8e4:	4b71      	ldr	r3, [pc, #452]	@ (800faac <tcp_receive+0xb0c>)
 800f8e6:	891c      	ldrh	r4, [r3, #8]
 800f8e8:	4b70      	ldr	r3, [pc, #448]	@ (800faac <tcp_receive+0xb0c>)
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	899b      	ldrh	r3, [r3, #12]
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fa fbe9 	bl	800a0c8 <lwip_htons>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	f003 0303 	and.w	r3, r3, #3
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <tcp_receive+0x966>
 800f902:	2301      	movs	r3, #1
 800f904:	e000      	b.n	800f908 <tcp_receive+0x968>
 800f906:	2300      	movs	r3, #0
 800f908:	4423      	add	r3, r4
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	4b65      	ldr	r3, [pc, #404]	@ (800faa4 <tcp_receive+0xb04>)
 800f90e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f910:	4b64      	ldr	r3, [pc, #400]	@ (800faa4 <tcp_receive+0xb04>)
 800f912:	881b      	ldrh	r3, [r3, #0]
 800f914:	461a      	mov	r2, r3
 800f916:	4b64      	ldr	r3, [pc, #400]	@ (800faa8 <tcp_receive+0xb08>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	441a      	add	r2, r3
 800f91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	429a      	cmp	r2, r3
 800f924:	d006      	beq.n	800f934 <tcp_receive+0x994>
 800f926:	4b62      	ldr	r3, [pc, #392]	@ (800fab0 <tcp_receive+0xb10>)
 800f928:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f92c:	4961      	ldr	r1, [pc, #388]	@ (800fab4 <tcp_receive+0xb14>)
 800f92e:	4862      	ldr	r0, [pc, #392]	@ (800fab8 <tcp_receive+0xb18>)
 800f930:	f007 ff66 	bl	8017800 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f938:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f93a:	4b5a      	ldr	r3, [pc, #360]	@ (800faa4 <tcp_receive+0xb04>)
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	4b59      	ldr	r3, [pc, #356]	@ (800faa8 <tcp_receive+0xb08>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	441a      	add	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f94e:	4b55      	ldr	r3, [pc, #340]	@ (800faa4 <tcp_receive+0xb04>)
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	429a      	cmp	r2, r3
 800f954:	d206      	bcs.n	800f964 <tcp_receive+0x9c4>
 800f956:	4b56      	ldr	r3, [pc, #344]	@ (800fab0 <tcp_receive+0xb10>)
 800f958:	f240 6207 	movw	r2, #1543	@ 0x607
 800f95c:	4957      	ldr	r1, [pc, #348]	@ (800fabc <tcp_receive+0xb1c>)
 800f95e:	4856      	ldr	r0, [pc, #344]	@ (800fab8 <tcp_receive+0xb18>)
 800f960:	f007 ff4e 	bl	8017800 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f968:	4b4e      	ldr	r3, [pc, #312]	@ (800faa4 <tcp_receive+0xb04>)
 800f96a:	881b      	ldrh	r3, [r3, #0]
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	b29a      	uxth	r2, r3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7fc fe93 	bl	800c6a0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f97a:	4b4c      	ldr	r3, [pc, #304]	@ (800faac <tcp_receive+0xb0c>)
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	891b      	ldrh	r3, [r3, #8]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d006      	beq.n	800f992 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f984:	4b49      	ldr	r3, [pc, #292]	@ (800faac <tcp_receive+0xb0c>)
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	4a4d      	ldr	r2, [pc, #308]	@ (800fac0 <tcp_receive+0xb20>)
 800f98a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f98c:	4b47      	ldr	r3, [pc, #284]	@ (800faac <tcp_receive+0xb0c>)
 800f98e:	2200      	movs	r2, #0
 800f990:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f992:	4b46      	ldr	r3, [pc, #280]	@ (800faac <tcp_receive+0xb0c>)
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	899b      	ldrh	r3, [r3, #12]
 800f998:	b29b      	uxth	r3, r3
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fa fb94 	bl	800a0c8 <lwip_htons>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	f003 0301 	and.w	r3, r3, #1
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 80b8 	beq.w	800fb1e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f9ae:	4b45      	ldr	r3, [pc, #276]	@ (800fac4 <tcp_receive+0xb24>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	f043 0320 	orr.w	r3, r3, #32
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	4b42      	ldr	r3, [pc, #264]	@ (800fac4 <tcp_receive+0xb24>)
 800f9ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f9bc:	e0af      	b.n	800fb1e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	4a36      	ldr	r2, [pc, #216]	@ (800faa8 <tcp_receive+0xb08>)
 800f9ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	891b      	ldrh	r3, [r3, #8]
 800f9d4:	461c      	mov	r4, r3
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	899b      	ldrh	r3, [r3, #12]
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fa fb72 	bl	800a0c8 <lwip_htons>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	f003 0303 	and.w	r3, r3, #3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <tcp_receive+0xa54>
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e000      	b.n	800f9f6 <tcp_receive+0xa56>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	191a      	adds	r2, r3, r4
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9fc:	441a      	add	r2, r3
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa06:	461c      	mov	r4, r3
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	891b      	ldrh	r3, [r3, #8]
 800fa0c:	461d      	mov	r5, r3
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	899b      	ldrh	r3, [r3, #12]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fa fb56 	bl	800a0c8 <lwip_htons>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	f003 0303 	and.w	r3, r3, #3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d001      	beq.n	800fa2c <tcp_receive+0xa8c>
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e000      	b.n	800fa2e <tcp_receive+0xa8e>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	442b      	add	r3, r5
 800fa30:	429c      	cmp	r4, r3
 800fa32:	d206      	bcs.n	800fa42 <tcp_receive+0xaa2>
 800fa34:	4b1e      	ldr	r3, [pc, #120]	@ (800fab0 <tcp_receive+0xb10>)
 800fa36:	f240 622b 	movw	r2, #1579	@ 0x62b
 800fa3a:	4923      	ldr	r1, [pc, #140]	@ (800fac8 <tcp_receive+0xb28>)
 800fa3c:	481e      	ldr	r0, [pc, #120]	@ (800fab8 <tcp_receive+0xb18>)
 800fa3e:	f007 fedf 	bl	8017800 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	891b      	ldrh	r3, [r3, #8]
 800fa46:	461c      	mov	r4, r3
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	899b      	ldrh	r3, [r3, #12]
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7fa fb39 	bl	800a0c8 <lwip_htons>
 800fa56:	4603      	mov	r3, r0
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	f003 0303 	and.w	r3, r3, #3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d001      	beq.n	800fa66 <tcp_receive+0xac6>
 800fa62:	2301      	movs	r3, #1
 800fa64:	e000      	b.n	800fa68 <tcp_receive+0xac8>
 800fa66:	2300      	movs	r3, #0
 800fa68:	1919      	adds	r1, r3, r4
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fa6e:	b28b      	uxth	r3, r1
 800fa70:	1ad3      	subs	r3, r2, r3
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7fc fe11 	bl	800c6a0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	891b      	ldrh	r3, [r3, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d028      	beq.n	800fada <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fa88:	4b0d      	ldr	r3, [pc, #52]	@ (800fac0 <tcp_receive+0xb20>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d01d      	beq.n	800facc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fa90:	4b0b      	ldr	r3, [pc, #44]	@ (800fac0 <tcp_receive+0xb20>)
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	4619      	mov	r1, r3
 800fa9a:	4610      	mov	r0, r2
 800fa9c:	f7fb ffaa 	bl	800b9f4 <pbuf_cat>
 800faa0:	e018      	b.n	800fad4 <tcp_receive+0xb34>
 800faa2:	bf00      	nop
 800faa4:	20008fea 	.word	0x20008fea
 800faa8:	20008fe0 	.word	0x20008fe0
 800faac:	20008fc0 	.word	0x20008fc0
 800fab0:	0801b160 	.word	0x0801b160
 800fab4:	0801b540 	.word	0x0801b540
 800fab8:	0801b1ac 	.word	0x0801b1ac
 800fabc:	0801b57c 	.word	0x0801b57c
 800fac0:	20008ff0 	.word	0x20008ff0
 800fac4:	20008fed 	.word	0x20008fed
 800fac8:	0801b59c 	.word	0x0801b59c
            } else {
              recv_data = cseg->p;
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	4a70      	ldr	r2, [pc, #448]	@ (800fc94 <tcp_receive+0xcf4>)
 800fad2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	2200      	movs	r2, #0
 800fad8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	899b      	ldrh	r3, [r3, #12]
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fa faf0 	bl	800a0c8 <lwip_htons>
 800fae8:	4603      	mov	r3, r0
 800faea:	b2db      	uxtb	r3, r3
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00d      	beq.n	800fb10 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800faf4:	4b68      	ldr	r3, [pc, #416]	@ (800fc98 <tcp_receive+0xcf8>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	f043 0320 	orr.w	r3, r3, #32
 800fafc:	b2da      	uxtb	r2, r3
 800fafe:	4b66      	ldr	r3, [pc, #408]	@ (800fc98 <tcp_receive+0xcf8>)
 800fb00:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	7d1b      	ldrb	r3, [r3, #20]
 800fb06:	2b04      	cmp	r3, #4
 800fb08:	d102      	bne.n	800fb10 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2207      	movs	r2, #7
 800fb0e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800fb18:	68b8      	ldr	r0, [r7, #8]
 800fb1a:	f7fd fae8 	bl	800d0ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d008      	beq.n	800fb38 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800fb32:	429a      	cmp	r2, r3
 800fb34:	f43f af43 	beq.w	800f9be <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	8b5b      	ldrh	r3, [r3, #26]
 800fb3c:	f003 0301 	and.w	r3, r3, #1
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00e      	beq.n	800fb62 <tcp_receive+0xbc2>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	8b5b      	ldrh	r3, [r3, #26]
 800fb48:	f023 0301 	bic.w	r3, r3, #1
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	835a      	strh	r2, [r3, #26]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	8b5b      	ldrh	r3, [r3, #26]
 800fb56:	f043 0302 	orr.w	r3, r3, #2
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb60:	e187      	b.n	800fe72 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	8b5b      	ldrh	r3, [r3, #26]
 800fb66:	f043 0301 	orr.w	r3, r3, #1
 800fb6a:	b29a      	uxth	r2, r3
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb70:	e17f      	b.n	800fe72 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d106      	bne.n	800fb88 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fb7a:	4848      	ldr	r0, [pc, #288]	@ (800fc9c <tcp_receive+0xcfc>)
 800fb7c:	f7fd faee 	bl	800d15c <tcp_seg_copy>
 800fb80:	4602      	mov	r2, r0
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	675a      	str	r2, [r3, #116]	@ 0x74
 800fb86:	e16c      	b.n	800fe62 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb90:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fb92:	e156      	b.n	800fe42 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800fb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	685a      	ldr	r2, [r3, #4]
 800fb9a:	4b41      	ldr	r3, [pc, #260]	@ (800fca0 <tcp_receive+0xd00>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d11d      	bne.n	800fbde <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fba2:	4b3e      	ldr	r3, [pc, #248]	@ (800fc9c <tcp_receive+0xcfc>)
 800fba4:	891a      	ldrh	r2, [r3, #8]
 800fba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba8:	891b      	ldrh	r3, [r3, #8]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	f240 814e 	bls.w	800fe4c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fbb0:	483a      	ldr	r0, [pc, #232]	@ (800fc9c <tcp_receive+0xcfc>)
 800fbb2:	f7fd fad3 	bl	800d15c <tcp_seg_copy>
 800fbb6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f000 8148 	beq.w	800fe50 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800fbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d003      	beq.n	800fbce <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fbc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbc8:	697a      	ldr	r2, [r7, #20]
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	e002      	b.n	800fbd4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	697a      	ldr	r2, [r7, #20]
 800fbd2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fbd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fbd6:	6978      	ldr	r0, [r7, #20]
 800fbd8:	f7ff f8de 	bl	800ed98 <tcp_oos_insert_segment>
                }
                break;
 800fbdc:	e138      	b.n	800fe50 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fbde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d117      	bne.n	800fc14 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fbe4:	4b2e      	ldr	r3, [pc, #184]	@ (800fca0 <tcp_receive+0xd00>)
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	da57      	bge.n	800fca4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fbf4:	4829      	ldr	r0, [pc, #164]	@ (800fc9c <tcp_receive+0xcfc>)
 800fbf6:	f7fd fab1 	bl	800d15c <tcp_seg_copy>
 800fbfa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 8128 	beq.w	800fe54 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	69ba      	ldr	r2, [r7, #24]
 800fc08:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fc0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fc0c:	69b8      	ldr	r0, [r7, #24]
 800fc0e:	f7ff f8c3 	bl	800ed98 <tcp_oos_insert_segment>
                  }
                  break;
 800fc12:	e11f      	b.n	800fe54 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fc14:	4b22      	ldr	r3, [pc, #136]	@ (800fca0 <tcp_receive+0xd00>)
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	3b01      	subs	r3, #1
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	db3e      	blt.n	800fca4 <tcp_receive+0xd04>
 800fc26:	4b1e      	ldr	r3, [pc, #120]	@ (800fca0 <tcp_receive+0xd00>)
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	3301      	adds	r3, #1
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	dc35      	bgt.n	800fca4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc38:	4818      	ldr	r0, [pc, #96]	@ (800fc9c <tcp_receive+0xcfc>)
 800fc3a:	f7fd fa8f 	bl	800d15c <tcp_seg_copy>
 800fc3e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f000 8108 	beq.w	800fe58 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc50:	8912      	ldrh	r2, [r2, #8]
 800fc52:	441a      	add	r2, r3
 800fc54:	4b12      	ldr	r3, [pc, #72]	@ (800fca0 <tcp_receive+0xd00>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	dd12      	ble.n	800fc84 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fc5e:	4b10      	ldr	r3, [pc, #64]	@ (800fca0 <tcp_receive+0xd00>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	1ad3      	subs	r3, r2, r3
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc72:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fc74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc76:	685a      	ldr	r2, [r3, #4]
 800fc78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc7a:	891b      	ldrh	r3, [r3, #8]
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	4610      	mov	r0, r2
 800fc80:	f7fb fc70 	bl	800b564 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fc84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc86:	69fa      	ldr	r2, [r7, #28]
 800fc88:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fc8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fc8c:	69f8      	ldr	r0, [r7, #28]
 800fc8e:	f7ff f883 	bl	800ed98 <tcp_oos_insert_segment>
                  }
                  break;
 800fc92:	e0e1      	b.n	800fe58 <tcp_receive+0xeb8>
 800fc94:	20008ff0 	.word	0x20008ff0
 800fc98:	20008fed 	.word	0x20008fed
 800fc9c:	20008fc0 	.word	0x20008fc0
 800fca0:	20008fe0 	.word	0x20008fe0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f040 80c5 	bne.w	800fe3c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fcb2:	4b7f      	ldr	r3, [pc, #508]	@ (800feb0 <tcp_receive+0xf10>)
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	f340 80bc 	ble.w	800fe3c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	899b      	ldrh	r3, [r3, #12]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fa f9fb 	bl	800a0c8 <lwip_htons>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	f003 0301 	and.w	r3, r3, #1
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f040 80be 	bne.w	800fe5c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fce0:	4874      	ldr	r0, [pc, #464]	@ (800feb4 <tcp_receive+0xf14>)
 800fce2:	f7fd fa3b 	bl	800d15c <tcp_seg_copy>
 800fce6:	4602      	mov	r2, r0
 800fce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f000 80b5 	beq.w	800fe60 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fcf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcfe:	8912      	ldrh	r2, [r2, #8]
 800fd00:	441a      	add	r2, r3
 800fd02:	4b6b      	ldr	r3, [pc, #428]	@ (800feb0 <tcp_receive+0xf10>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	dd12      	ble.n	800fd32 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fd0c:	4b68      	ldr	r3, [pc, #416]	@ (800feb0 <tcp_receive+0xf10>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd24:	685a      	ldr	r2, [r3, #4]
 800fd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd28:	891b      	ldrh	r3, [r3, #8]
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	4610      	mov	r0, r2
 800fd2e:	f7fb fc19 	bl	800b564 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fd32:	4b61      	ldr	r3, [pc, #388]	@ (800feb8 <tcp_receive+0xf18>)
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	461a      	mov	r2, r3
 800fd38:	4b5d      	ldr	r3, [pc, #372]	@ (800feb0 <tcp_receive+0xf10>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	441a      	add	r2, r3
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd42:	6879      	ldr	r1, [r7, #4]
 800fd44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fd46:	440b      	add	r3, r1
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f340 8088 	ble.w	800fe60 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	899b      	ldrh	r3, [r3, #12]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fa f9b4 	bl	800a0c8 <lwip_htons>
 800fd60:	4603      	mov	r3, r0
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	f003 0301 	and.w	r3, r3, #1
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d021      	beq.n	800fdb0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	899b      	ldrh	r3, [r3, #12]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	b21b      	sxth	r3, r3
 800fd78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fd7c:	b21c      	sxth	r4, r3
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	899b      	ldrh	r3, [r3, #12]
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7fa f99d 	bl	800a0c8 <lwip_htons>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fa f995 	bl	800a0c8 <lwip_htons>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	b21b      	sxth	r3, r3
 800fda2:	4323      	orrs	r3, r4
 800fda4:	b21a      	sxth	r2, r3
 800fda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	b292      	uxth	r2, r2
 800fdae:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdba:	4413      	add	r3, r2
 800fdbc:	b299      	uxth	r1, r3
 800fdbe:	4b3c      	ldr	r3, [pc, #240]	@ (800feb0 <tcp_receive+0xf10>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	b29a      	uxth	r2, r3
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	1a8a      	subs	r2, r1, r2
 800fdca:	b292      	uxth	r2, r2
 800fdcc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	685a      	ldr	r2, [r3, #4]
 800fdd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	891b      	ldrh	r3, [r3, #8]
 800fdda:	4619      	mov	r1, r3
 800fddc:	4610      	mov	r0, r2
 800fdde:	f7fb fbc1 	bl	800b564 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	891c      	ldrh	r4, [r3, #8]
 800fde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	899b      	ldrh	r3, [r3, #12]
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fa f968 	bl	800a0c8 <lwip_htons>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	f003 0303 	and.w	r3, r3, #3
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <tcp_receive+0xe68>
 800fe04:	2301      	movs	r3, #1
 800fe06:	e000      	b.n	800fe0a <tcp_receive+0xe6a>
 800fe08:	2300      	movs	r3, #0
 800fe0a:	4423      	add	r3, r4
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	4b2a      	ldr	r3, [pc, #168]	@ (800feb8 <tcp_receive+0xf18>)
 800fe10:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fe12:	4b29      	ldr	r3, [pc, #164]	@ (800feb8 <tcp_receive+0xf18>)
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	461a      	mov	r2, r3
 800fe18:	4b25      	ldr	r3, [pc, #148]	@ (800feb0 <tcp_receive+0xf10>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	441a      	add	r2, r3
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fe26:	440b      	add	r3, r1
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d019      	beq.n	800fe60 <tcp_receive+0xec0>
 800fe2c:	4b23      	ldr	r3, [pc, #140]	@ (800febc <tcp_receive+0xf1c>)
 800fe2e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800fe32:	4923      	ldr	r1, [pc, #140]	@ (800fec0 <tcp_receive+0xf20>)
 800fe34:	4823      	ldr	r0, [pc, #140]	@ (800fec4 <tcp_receive+0xf24>)
 800fe36:	f007 fce3 	bl	8017800 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fe3a:	e011      	b.n	800fe60 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fe42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f47f aea5 	bne.w	800fb94 <tcp_receive+0xbf4>
 800fe4a:	e00a      	b.n	800fe62 <tcp_receive+0xec2>
                break;
 800fe4c:	bf00      	nop
 800fe4e:	e008      	b.n	800fe62 <tcp_receive+0xec2>
                break;
 800fe50:	bf00      	nop
 800fe52:	e006      	b.n	800fe62 <tcp_receive+0xec2>
                  break;
 800fe54:	bf00      	nop
 800fe56:	e004      	b.n	800fe62 <tcp_receive+0xec2>
                  break;
 800fe58:	bf00      	nop
 800fe5a:	e002      	b.n	800fe62 <tcp_receive+0xec2>
                  break;
 800fe5c:	bf00      	nop
 800fe5e:	e000      	b.n	800fe62 <tcp_receive+0xec2>
                break;
 800fe60:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f001 fe88 	bl	8011b78 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fe68:	e003      	b.n	800fe72 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f001 fe84 	bl	8011b78 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe70:	e01a      	b.n	800fea8 <tcp_receive+0xf08>
 800fe72:	e019      	b.n	800fea8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fe74:	4b0e      	ldr	r3, [pc, #56]	@ (800feb0 <tcp_receive+0xf10>)
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	db0a      	blt.n	800fe98 <tcp_receive+0xef8>
 800fe82:	4b0b      	ldr	r3, [pc, #44]	@ (800feb0 <tcp_receive+0xf10>)
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe8a:	6879      	ldr	r1, [r7, #4]
 800fe8c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fe8e:	440b      	add	r3, r1
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	3301      	adds	r3, #1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	dd07      	ble.n	800fea8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	8b5b      	ldrh	r3, [r3, #26]
 800fe9c:	f043 0302 	orr.w	r3, r3, #2
 800fea0:	b29a      	uxth	r2, r3
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fea6:	e7ff      	b.n	800fea8 <tcp_receive+0xf08>
 800fea8:	bf00      	nop
 800feaa:	3750      	adds	r7, #80	@ 0x50
 800feac:	46bd      	mov	sp, r7
 800feae:	bdb0      	pop	{r4, r5, r7, pc}
 800feb0:	20008fe0 	.word	0x20008fe0
 800feb4:	20008fc0 	.word	0x20008fc0
 800feb8:	20008fea 	.word	0x20008fea
 800febc:	0801b160 	.word	0x0801b160
 800fec0:	0801b508 	.word	0x0801b508
 800fec4:	0801b1ac 	.word	0x0801b1ac

0800fec8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fece:	4b15      	ldr	r3, [pc, #84]	@ (800ff24 <tcp_get_next_optbyte+0x5c>)
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	1c5a      	adds	r2, r3, #1
 800fed4:	b291      	uxth	r1, r2
 800fed6:	4a13      	ldr	r2, [pc, #76]	@ (800ff24 <tcp_get_next_optbyte+0x5c>)
 800fed8:	8011      	strh	r1, [r2, #0]
 800feda:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fedc:	4b12      	ldr	r3, [pc, #72]	@ (800ff28 <tcp_get_next_optbyte+0x60>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d004      	beq.n	800feee <tcp_get_next_optbyte+0x26>
 800fee4:	4b11      	ldr	r3, [pc, #68]	@ (800ff2c <tcp_get_next_optbyte+0x64>)
 800fee6:	881b      	ldrh	r3, [r3, #0]
 800fee8:	88fa      	ldrh	r2, [r7, #6]
 800feea:	429a      	cmp	r2, r3
 800feec:	d208      	bcs.n	800ff00 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800feee:	4b10      	ldr	r3, [pc, #64]	@ (800ff30 <tcp_get_next_optbyte+0x68>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	3314      	adds	r3, #20
 800fef4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fef6:	88fb      	ldrh	r3, [r7, #6]
 800fef8:	683a      	ldr	r2, [r7, #0]
 800fefa:	4413      	add	r3, r2
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	e00b      	b.n	800ff18 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ff00:	88fb      	ldrh	r3, [r7, #6]
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	4b09      	ldr	r3, [pc, #36]	@ (800ff2c <tcp_get_next_optbyte+0x64>)
 800ff06:	881b      	ldrh	r3, [r3, #0]
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ff0e:	4b06      	ldr	r3, [pc, #24]	@ (800ff28 <tcp_get_next_optbyte+0x60>)
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	797b      	ldrb	r3, [r7, #5]
 800ff14:	4413      	add	r3, r2
 800ff16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	20008fdc 	.word	0x20008fdc
 800ff28:	20008fd8 	.word	0x20008fd8
 800ff2c:	20008fd6 	.word	0x20008fd6
 800ff30:	20008fd0 	.word	0x20008fd0

0800ff34 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d106      	bne.n	800ff50 <tcp_parseopt+0x1c>
 800ff42:	4b32      	ldr	r3, [pc, #200]	@ (801000c <tcp_parseopt+0xd8>)
 800ff44:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ff48:	4931      	ldr	r1, [pc, #196]	@ (8010010 <tcp_parseopt+0xdc>)
 800ff4a:	4832      	ldr	r0, [pc, #200]	@ (8010014 <tcp_parseopt+0xe0>)
 800ff4c:	f007 fc58 	bl	8017800 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ff50:	4b31      	ldr	r3, [pc, #196]	@ (8010018 <tcp_parseopt+0xe4>)
 800ff52:	881b      	ldrh	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d056      	beq.n	8010006 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ff58:	4b30      	ldr	r3, [pc, #192]	@ (801001c <tcp_parseopt+0xe8>)
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	801a      	strh	r2, [r3, #0]
 800ff5e:	e046      	b.n	800ffee <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800ff60:	f7ff ffb2 	bl	800fec8 <tcp_get_next_optbyte>
 800ff64:	4603      	mov	r3, r0
 800ff66:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	2b02      	cmp	r3, #2
 800ff6c:	d006      	beq.n	800ff7c <tcp_parseopt+0x48>
 800ff6e:	2b02      	cmp	r3, #2
 800ff70:	dc2a      	bgt.n	800ffc8 <tcp_parseopt+0x94>
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d042      	beq.n	800fffc <tcp_parseopt+0xc8>
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d038      	beq.n	800ffec <tcp_parseopt+0xb8>
 800ff7a:	e025      	b.n	800ffc8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ff7c:	f7ff ffa4 	bl	800fec8 <tcp_get_next_optbyte>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b04      	cmp	r3, #4
 800ff84:	d13c      	bne.n	8010000 <tcp_parseopt+0xcc>
 800ff86:	4b25      	ldr	r3, [pc, #148]	@ (801001c <tcp_parseopt+0xe8>)
 800ff88:	881b      	ldrh	r3, [r3, #0]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	4a22      	ldr	r2, [pc, #136]	@ (8010018 <tcp_parseopt+0xe4>)
 800ff8e:	8812      	ldrh	r2, [r2, #0]
 800ff90:	4293      	cmp	r3, r2
 800ff92:	da35      	bge.n	8010000 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ff94:	f7ff ff98 	bl	800fec8 <tcp_get_next_optbyte>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	021b      	lsls	r3, r3, #8
 800ff9c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ff9e:	f7ff ff93 	bl	800fec8 <tcp_get_next_optbyte>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	89bb      	ldrh	r3, [r7, #12]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ffac:	89bb      	ldrh	r3, [r7, #12]
 800ffae:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ffb2:	d804      	bhi.n	800ffbe <tcp_parseopt+0x8a>
 800ffb4:	89bb      	ldrh	r3, [r7, #12]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d001      	beq.n	800ffbe <tcp_parseopt+0x8a>
 800ffba:	89ba      	ldrh	r2, [r7, #12]
 800ffbc:	e001      	b.n	800ffc2 <tcp_parseopt+0x8e>
 800ffbe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800ffc6:	e012      	b.n	800ffee <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ffc8:	f7ff ff7e 	bl	800fec8 <tcp_get_next_optbyte>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ffd0:	7afb      	ldrb	r3, [r7, #11]
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d916      	bls.n	8010004 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ffd6:	7afb      	ldrb	r3, [r7, #11]
 800ffd8:	b29a      	uxth	r2, r3
 800ffda:	4b10      	ldr	r3, [pc, #64]	@ (801001c <tcp_parseopt+0xe8>)
 800ffdc:	881b      	ldrh	r3, [r3, #0]
 800ffde:	4413      	add	r3, r2
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	3b02      	subs	r3, #2
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	4b0d      	ldr	r3, [pc, #52]	@ (801001c <tcp_parseopt+0xe8>)
 800ffe8:	801a      	strh	r2, [r3, #0]
 800ffea:	e000      	b.n	800ffee <tcp_parseopt+0xba>
          break;
 800ffec:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ffee:	4b0b      	ldr	r3, [pc, #44]	@ (801001c <tcp_parseopt+0xe8>)
 800fff0:	881a      	ldrh	r2, [r3, #0]
 800fff2:	4b09      	ldr	r3, [pc, #36]	@ (8010018 <tcp_parseopt+0xe4>)
 800fff4:	881b      	ldrh	r3, [r3, #0]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d3b2      	bcc.n	800ff60 <tcp_parseopt+0x2c>
 800fffa:	e004      	b.n	8010006 <tcp_parseopt+0xd2>
          return;
 800fffc:	bf00      	nop
 800fffe:	e002      	b.n	8010006 <tcp_parseopt+0xd2>
            return;
 8010000:	bf00      	nop
 8010002:	e000      	b.n	8010006 <tcp_parseopt+0xd2>
            return;
 8010004:	bf00      	nop
      }
    }
  }
}
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	0801b160 	.word	0x0801b160
 8010010:	0801b5c4 	.word	0x0801b5c4
 8010014:	0801b1ac 	.word	0x0801b1ac
 8010018:	20008fd4 	.word	0x20008fd4
 801001c:	20008fdc 	.word	0x20008fdc

08010020 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010020:	b480      	push	{r7}
 8010022:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010024:	4b05      	ldr	r3, [pc, #20]	@ (801003c <tcp_trigger_input_pcb_close+0x1c>)
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	f043 0310 	orr.w	r3, r3, #16
 801002c:	b2da      	uxtb	r2, r3
 801002e:	4b03      	ldr	r3, [pc, #12]	@ (801003c <tcp_trigger_input_pcb_close+0x1c>)
 8010030:	701a      	strb	r2, [r3, #0]
}
 8010032:	bf00      	nop
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	20008fed 	.word	0x20008fed

08010040 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00a      	beq.n	8010068 <tcp_route+0x28>
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	7a1b      	ldrb	r3, [r3, #8]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d006      	beq.n	8010068 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	7a1b      	ldrb	r3, [r3, #8]
 801005e:	4618      	mov	r0, r3
 8010060:	f7fb f8a6 	bl	800b1b0 <netif_get_by_index>
 8010064:	4603      	mov	r3, r0
 8010066:	e003      	b.n	8010070 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f005 fc67 	bl	801593c <ip4_route>
 801006e:	4603      	mov	r3, r0
  }
}
 8010070:	4618      	mov	r0, r3
 8010072:	3710      	adds	r7, #16
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010078:	b590      	push	{r4, r7, lr}
 801007a:	b087      	sub	sp, #28
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	603b      	str	r3, [r7, #0]
 8010084:	4613      	mov	r3, r2
 8010086:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d105      	bne.n	801009a <tcp_create_segment+0x22>
 801008e:	4b43      	ldr	r3, [pc, #268]	@ (801019c <tcp_create_segment+0x124>)
 8010090:	22a3      	movs	r2, #163	@ 0xa3
 8010092:	4943      	ldr	r1, [pc, #268]	@ (80101a0 <tcp_create_segment+0x128>)
 8010094:	4843      	ldr	r0, [pc, #268]	@ (80101a4 <tcp_create_segment+0x12c>)
 8010096:	f007 fbb3 	bl	8017800 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d105      	bne.n	80100ac <tcp_create_segment+0x34>
 80100a0:	4b3e      	ldr	r3, [pc, #248]	@ (801019c <tcp_create_segment+0x124>)
 80100a2:	22a4      	movs	r2, #164	@ 0xa4
 80100a4:	4940      	ldr	r1, [pc, #256]	@ (80101a8 <tcp_create_segment+0x130>)
 80100a6:	483f      	ldr	r0, [pc, #252]	@ (80101a4 <tcp_create_segment+0x12c>)
 80100a8:	f007 fbaa 	bl	8017800 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80100ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	f003 0304 	and.w	r3, r3, #4
 80100b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80100ba:	2003      	movs	r0, #3
 80100bc:	f7fa fce6 	bl	800aa8c <memp_malloc>
 80100c0:	6138      	str	r0, [r7, #16]
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d104      	bne.n	80100d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80100c8:	68b8      	ldr	r0, [r7, #8]
 80100ca:	f7fb fbd1 	bl	800b870 <pbuf_free>
    return NULL;
 80100ce:	2300      	movs	r3, #0
 80100d0:	e060      	b.n	8010194 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80100d8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	2200      	movs	r2, #0
 80100de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	68ba      	ldr	r2, [r7, #8]
 80100e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	891a      	ldrh	r2, [r3, #8]
 80100ea:	7dfb      	ldrb	r3, [r7, #23]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d205      	bcs.n	80100fe <tcp_create_segment+0x86>
 80100f2:	4b2a      	ldr	r3, [pc, #168]	@ (801019c <tcp_create_segment+0x124>)
 80100f4:	22b0      	movs	r2, #176	@ 0xb0
 80100f6:	492d      	ldr	r1, [pc, #180]	@ (80101ac <tcp_create_segment+0x134>)
 80100f8:	482a      	ldr	r0, [pc, #168]	@ (80101a4 <tcp_create_segment+0x12c>)
 80100fa:	f007 fb81 	bl	8017800 <iprintf>
  seg->len = p->tot_len - optlen;
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	891a      	ldrh	r2, [r3, #8]
 8010102:	7dfb      	ldrb	r3, [r7, #23]
 8010104:	b29b      	uxth	r3, r3
 8010106:	1ad3      	subs	r3, r2, r3
 8010108:	b29a      	uxth	r2, r3
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801010e:	2114      	movs	r1, #20
 8010110:	68b8      	ldr	r0, [r7, #8]
 8010112:	f7fb fb17 	bl	800b744 <pbuf_add_header>
 8010116:	4603      	mov	r3, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d004      	beq.n	8010126 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801011c:	6938      	ldr	r0, [r7, #16]
 801011e:	f7fc ffe6 	bl	800d0ee <tcp_seg_free>
    return NULL;
 8010122:	2300      	movs	r3, #0
 8010124:	e036      	b.n	8010194 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	685a      	ldr	r2, [r3, #4]
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	8ada      	ldrh	r2, [r3, #22]
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	68dc      	ldr	r4, [r3, #12]
 8010138:	4610      	mov	r0, r2
 801013a:	f7f9 ffc5 	bl	800a0c8 <lwip_htons>
 801013e:	4603      	mov	r3, r0
 8010140:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	8b1a      	ldrh	r2, [r3, #24]
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	68dc      	ldr	r4, [r3, #12]
 801014a:	4610      	mov	r0, r2
 801014c:	f7f9 ffbc 	bl	800a0c8 <lwip_htons>
 8010150:	4603      	mov	r3, r0
 8010152:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	68dc      	ldr	r4, [r3, #12]
 8010158:	6838      	ldr	r0, [r7, #0]
 801015a:	f7f9 ffca 	bl	800a0f2 <lwip_htonl>
 801015e:	4603      	mov	r3, r0
 8010160:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	089b      	lsrs	r3, r3, #2
 8010166:	b2db      	uxtb	r3, r3
 8010168:	3305      	adds	r3, #5
 801016a:	b29b      	uxth	r3, r3
 801016c:	031b      	lsls	r3, r3, #12
 801016e:	b29a      	uxth	r2, r3
 8010170:	79fb      	ldrb	r3, [r7, #7]
 8010172:	b29b      	uxth	r3, r3
 8010174:	4313      	orrs	r3, r2
 8010176:	b29a      	uxth	r2, r3
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	68dc      	ldr	r4, [r3, #12]
 801017c:	4610      	mov	r0, r2
 801017e:	f7f9 ffa3 	bl	800a0c8 <lwip_htons>
 8010182:	4603      	mov	r3, r0
 8010184:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	2200      	movs	r2, #0
 801018c:	749a      	strb	r2, [r3, #18]
 801018e:	2200      	movs	r2, #0
 8010190:	74da      	strb	r2, [r3, #19]
  return seg;
 8010192:	693b      	ldr	r3, [r7, #16]
}
 8010194:	4618      	mov	r0, r3
 8010196:	371c      	adds	r7, #28
 8010198:	46bd      	mov	sp, r7
 801019a:	bd90      	pop	{r4, r7, pc}
 801019c:	0801b5e0 	.word	0x0801b5e0
 80101a0:	0801b614 	.word	0x0801b614
 80101a4:	0801b634 	.word	0x0801b634
 80101a8:	0801b65c 	.word	0x0801b65c
 80101ac:	0801b680 	.word	0x0801b680

080101b0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	607b      	str	r3, [r7, #4]
 80101b8:	4603      	mov	r3, r0
 80101ba:	73fb      	strb	r3, [r7, #15]
 80101bc:	460b      	mov	r3, r1
 80101be:	81bb      	strh	r3, [r7, #12]
 80101c0:	4613      	mov	r3, r2
 80101c2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80101c4:	89bb      	ldrh	r3, [r7, #12]
 80101c6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d105      	bne.n	80101da <tcp_pbuf_prealloc+0x2a>
 80101ce:	4b30      	ldr	r3, [pc, #192]	@ (8010290 <tcp_pbuf_prealloc+0xe0>)
 80101d0:	22e8      	movs	r2, #232	@ 0xe8
 80101d2:	4930      	ldr	r1, [pc, #192]	@ (8010294 <tcp_pbuf_prealloc+0xe4>)
 80101d4:	4830      	ldr	r0, [pc, #192]	@ (8010298 <tcp_pbuf_prealloc+0xe8>)
 80101d6:	f007 fb13 	bl	8017800 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80101da:	6a3b      	ldr	r3, [r7, #32]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d105      	bne.n	80101ec <tcp_pbuf_prealloc+0x3c>
 80101e0:	4b2b      	ldr	r3, [pc, #172]	@ (8010290 <tcp_pbuf_prealloc+0xe0>)
 80101e2:	22e9      	movs	r2, #233	@ 0xe9
 80101e4:	492d      	ldr	r1, [pc, #180]	@ (801029c <tcp_pbuf_prealloc+0xec>)
 80101e6:	482c      	ldr	r0, [pc, #176]	@ (8010298 <tcp_pbuf_prealloc+0xe8>)
 80101e8:	f007 fb0a 	bl	8017800 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80101ec:	89ba      	ldrh	r2, [r7, #12]
 80101ee:	897b      	ldrh	r3, [r7, #10]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d221      	bcs.n	8010238 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80101f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80101f8:	f003 0302 	and.w	r3, r3, #2
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d111      	bne.n	8010224 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010200:	6a3b      	ldr	r3, [r7, #32]
 8010202:	8b5b      	ldrh	r3, [r3, #26]
 8010204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010208:	2b00      	cmp	r3, #0
 801020a:	d115      	bne.n	8010238 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801020c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010210:	2b00      	cmp	r3, #0
 8010212:	d007      	beq.n	8010224 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010214:	6a3b      	ldr	r3, [r7, #32]
 8010216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8010218:	2b00      	cmp	r3, #0
 801021a:	d103      	bne.n	8010224 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8010220:	2b00      	cmp	r3, #0
 8010222:	d009      	beq.n	8010238 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010224:	89bb      	ldrh	r3, [r7, #12]
 8010226:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801022a:	f023 0203 	bic.w	r2, r3, #3
 801022e:	897b      	ldrh	r3, [r7, #10]
 8010230:	4293      	cmp	r3, r2
 8010232:	bf28      	it	cs
 8010234:	4613      	movcs	r3, r2
 8010236:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010238:	8af9      	ldrh	r1, [r7, #22]
 801023a:	7bfb      	ldrb	r3, [r7, #15]
 801023c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010240:	4618      	mov	r0, r3
 8010242:	f7fb f831 	bl	800b2a8 <pbuf_alloc>
 8010246:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d101      	bne.n	8010252 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801024e:	2300      	movs	r3, #0
 8010250:	e019      	b.n	8010286 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d006      	beq.n	8010268 <tcp_pbuf_prealloc+0xb8>
 801025a:	4b0d      	ldr	r3, [pc, #52]	@ (8010290 <tcp_pbuf_prealloc+0xe0>)
 801025c:	f240 120b 	movw	r2, #267	@ 0x10b
 8010260:	490f      	ldr	r1, [pc, #60]	@ (80102a0 <tcp_pbuf_prealloc+0xf0>)
 8010262:	480d      	ldr	r0, [pc, #52]	@ (8010298 <tcp_pbuf_prealloc+0xe8>)
 8010264:	f007 facc 	bl	8017800 <iprintf>
  *oversize = p->len - length;
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	895a      	ldrh	r2, [r3, #10]
 801026c:	89bb      	ldrh	r3, [r7, #12]
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	b29a      	uxth	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	89ba      	ldrh	r2, [r7, #12]
 801027a:	811a      	strh	r2, [r3, #8]
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	891a      	ldrh	r2, [r3, #8]
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	815a      	strh	r2, [r3, #10]
  return p;
 8010284:	693b      	ldr	r3, [r7, #16]
}
 8010286:	4618      	mov	r0, r3
 8010288:	3718      	adds	r7, #24
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	0801b5e0 	.word	0x0801b5e0
 8010294:	0801b698 	.word	0x0801b698
 8010298:	0801b634 	.word	0x0801b634
 801029c:	0801b6bc 	.word	0x0801b6bc
 80102a0:	0801b6dc 	.word	0x0801b6dc

080102a4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	460b      	mov	r3, r1
 80102ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d106      	bne.n	80102c4 <tcp_write_checks+0x20>
 80102b6:	4b33      	ldr	r3, [pc, #204]	@ (8010384 <tcp_write_checks+0xe0>)
 80102b8:	f240 1233 	movw	r2, #307	@ 0x133
 80102bc:	4932      	ldr	r1, [pc, #200]	@ (8010388 <tcp_write_checks+0xe4>)
 80102be:	4833      	ldr	r0, [pc, #204]	@ (801038c <tcp_write_checks+0xe8>)
 80102c0:	f007 fa9e 	bl	8017800 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	7d1b      	ldrb	r3, [r3, #20]
 80102c8:	2b04      	cmp	r3, #4
 80102ca:	d00e      	beq.n	80102ea <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80102d0:	2b07      	cmp	r3, #7
 80102d2:	d00a      	beq.n	80102ea <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80102d8:	2b02      	cmp	r3, #2
 80102da:	d006      	beq.n	80102ea <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d002      	beq.n	80102ea <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80102e4:	f06f 030a 	mvn.w	r3, #10
 80102e8:	e048      	b.n	801037c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80102ea:	887b      	ldrh	r3, [r7, #2]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d101      	bne.n	80102f4 <tcp_write_checks+0x50>
    return ERR_OK;
 80102f0:	2300      	movs	r3, #0
 80102f2:	e043      	b.n	801037c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80102fa:	887a      	ldrh	r2, [r7, #2]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d909      	bls.n	8010314 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	8b5b      	ldrh	r3, [r3, #26]
 8010304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010308:	b29a      	uxth	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801030e:	f04f 33ff 	mov.w	r3, #4294967295
 8010312:	e033      	b.n	801037c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801031a:	2b08      	cmp	r3, #8
 801031c:	d909      	bls.n	8010332 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	8b5b      	ldrh	r3, [r3, #26]
 8010322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010326:	b29a      	uxth	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801032c:	f04f 33ff 	mov.w	r3, #4294967295
 8010330:	e024      	b.n	801037c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010338:	2b00      	cmp	r3, #0
 801033a:	d00f      	beq.n	801035c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010340:	2b00      	cmp	r3, #0
 8010342:	d11a      	bne.n	801037a <tcp_write_checks+0xd6>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010348:	2b00      	cmp	r3, #0
 801034a:	d116      	bne.n	801037a <tcp_write_checks+0xd6>
 801034c:	4b0d      	ldr	r3, [pc, #52]	@ (8010384 <tcp_write_checks+0xe0>)
 801034e:	f240 1255 	movw	r2, #341	@ 0x155
 8010352:	490f      	ldr	r1, [pc, #60]	@ (8010390 <tcp_write_checks+0xec>)
 8010354:	480d      	ldr	r0, [pc, #52]	@ (801038c <tcp_write_checks+0xe8>)
 8010356:	f007 fa53 	bl	8017800 <iprintf>
 801035a:	e00e      	b.n	801037a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010360:	2b00      	cmp	r3, #0
 8010362:	d103      	bne.n	801036c <tcp_write_checks+0xc8>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010368:	2b00      	cmp	r3, #0
 801036a:	d006      	beq.n	801037a <tcp_write_checks+0xd6>
 801036c:	4b05      	ldr	r3, [pc, #20]	@ (8010384 <tcp_write_checks+0xe0>)
 801036e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8010372:	4908      	ldr	r1, [pc, #32]	@ (8010394 <tcp_write_checks+0xf0>)
 8010374:	4805      	ldr	r0, [pc, #20]	@ (801038c <tcp_write_checks+0xe8>)
 8010376:	f007 fa43 	bl	8017800 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801037a:	2300      	movs	r3, #0
}
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	0801b5e0 	.word	0x0801b5e0
 8010388:	0801b6f0 	.word	0x0801b6f0
 801038c:	0801b634 	.word	0x0801b634
 8010390:	0801b710 	.word	0x0801b710
 8010394:	0801b74c 	.word	0x0801b74c

08010398 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010398:	b590      	push	{r4, r7, lr}
 801039a:	b09b      	sub	sp, #108	@ 0x6c
 801039c:	af04      	add	r7, sp, #16
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	4611      	mov	r1, r2
 80103a4:	461a      	mov	r2, r3
 80103a6:	460b      	mov	r3, r1
 80103a8:	80fb      	strh	r3, [r7, #6]
 80103aa:	4613      	mov	r3, r2
 80103ac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80103b2:	2300      	movs	r3, #0
 80103b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80103b6:	2300      	movs	r3, #0
 80103b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103ba:	2300      	movs	r3, #0
 80103bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80103be:	2300      	movs	r3, #0
 80103c0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80103c2:	2300      	movs	r3, #0
 80103c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80103c8:	2300      	movs	r3, #0
 80103ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80103d2:	2300      	movs	r3, #0
 80103d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80103d6:	2300      	movs	r3, #0
 80103d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d109      	bne.n	80103f4 <tcp_write+0x5c>
 80103e0:	4ba4      	ldr	r3, [pc, #656]	@ (8010674 <tcp_write+0x2dc>)
 80103e2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80103e6:	49a4      	ldr	r1, [pc, #656]	@ (8010678 <tcp_write+0x2e0>)
 80103e8:	48a4      	ldr	r0, [pc, #656]	@ (801067c <tcp_write+0x2e4>)
 80103ea:	f007 fa09 	bl	8017800 <iprintf>
 80103ee:	f06f 030f 	mvn.w	r3, #15
 80103f2:	e32a      	b.n	8010a4a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80103fa:	085b      	lsrs	r3, r3, #1
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010402:	4293      	cmp	r3, r2
 8010404:	bf28      	it	cs
 8010406:	4613      	movcs	r3, r2
 8010408:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801040a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801040c:	2b00      	cmp	r3, #0
 801040e:	d102      	bne.n	8010416 <tcp_write+0x7e>
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010414:	e000      	b.n	8010418 <tcp_write+0x80>
 8010416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010418:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d109      	bne.n	8010434 <tcp_write+0x9c>
 8010420:	4b94      	ldr	r3, [pc, #592]	@ (8010674 <tcp_write+0x2dc>)
 8010422:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8010426:	4996      	ldr	r1, [pc, #600]	@ (8010680 <tcp_write+0x2e8>)
 8010428:	4894      	ldr	r0, [pc, #592]	@ (801067c <tcp_write+0x2e4>)
 801042a:	f007 f9e9 	bl	8017800 <iprintf>
 801042e:	f06f 030f 	mvn.w	r3, #15
 8010432:	e30a      	b.n	8010a4a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010434:	88fb      	ldrh	r3, [r7, #6]
 8010436:	4619      	mov	r1, r3
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f7ff ff33 	bl	80102a4 <tcp_write_checks>
 801043e:	4603      	mov	r3, r0
 8010440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8010444:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010448:	2b00      	cmp	r3, #0
 801044a:	d002      	beq.n	8010452 <tcp_write+0xba>
    return err;
 801044c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010450:	e2fb      	b.n	8010a4a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010458:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801045c:	2300      	movs	r3, #0
 801045e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 80f6 	beq.w	8010658 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010470:	653b      	str	r3, [r7, #80]	@ 0x50
 8010472:	e002      	b.n	801047a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801047a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d1f8      	bne.n	8010474 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010484:	7a9b      	ldrb	r3, [r3, #10]
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	b29b      	uxth	r3, r3
 801048a:	f003 0304 	and.w	r3, r3, #4
 801048e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010490:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010494:	891b      	ldrh	r3, [r3, #8]
 8010496:	4619      	mov	r1, r3
 8010498:	8c3b      	ldrh	r3, [r7, #32]
 801049a:	440b      	add	r3, r1
 801049c:	429a      	cmp	r2, r3
 801049e:	da06      	bge.n	80104ae <tcp_write+0x116>
 80104a0:	4b74      	ldr	r3, [pc, #464]	@ (8010674 <tcp_write+0x2dc>)
 80104a2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80104a6:	4977      	ldr	r1, [pc, #476]	@ (8010684 <tcp_write+0x2ec>)
 80104a8:	4874      	ldr	r0, [pc, #464]	@ (801067c <tcp_write+0x2e4>)
 80104aa:	f007 f9a9 	bl	8017800 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80104ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104b0:	891a      	ldrh	r2, [r3, #8]
 80104b2:	8c3b      	ldrh	r3, [r7, #32]
 80104b4:	4413      	add	r3, r2
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80104c4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80104c6:	8a7b      	ldrh	r3, [r7, #18]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d026      	beq.n	801051a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80104cc:	8a7b      	ldrh	r3, [r7, #18]
 80104ce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d206      	bcs.n	80104e2 <tcp_write+0x14a>
 80104d4:	4b67      	ldr	r3, [pc, #412]	@ (8010674 <tcp_write+0x2dc>)
 80104d6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80104da:	496b      	ldr	r1, [pc, #428]	@ (8010688 <tcp_write+0x2f0>)
 80104dc:	4867      	ldr	r0, [pc, #412]	@ (801067c <tcp_write+0x2e4>)
 80104de:	f007 f98f 	bl	8017800 <iprintf>
      seg = last_unsent;
 80104e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80104e6:	8a7b      	ldrh	r3, [r7, #18]
 80104e8:	88fa      	ldrh	r2, [r7, #6]
 80104ea:	4293      	cmp	r3, r2
 80104ec:	bf28      	it	cs
 80104ee:	4613      	movcs	r3, r2
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80104f4:	4293      	cmp	r3, r2
 80104f6:	bf28      	it	cs
 80104f8:	4613      	movcs	r3, r2
 80104fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80104fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010500:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010502:	4413      	add	r3, r2
 8010504:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8010508:	8a7a      	ldrh	r2, [r7, #18]
 801050a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	b29b      	uxth	r3, r3
 8010510:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010512:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010514:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801051a:	8a7b      	ldrh	r3, [r7, #18]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00b      	beq.n	8010538 <tcp_write+0x1a0>
 8010520:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010524:	88fb      	ldrh	r3, [r7, #6]
 8010526:	429a      	cmp	r2, r3
 8010528:	d006      	beq.n	8010538 <tcp_write+0x1a0>
 801052a:	4b52      	ldr	r3, [pc, #328]	@ (8010674 <tcp_write+0x2dc>)
 801052c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010530:	4956      	ldr	r1, [pc, #344]	@ (801068c <tcp_write+0x2f4>)
 8010532:	4852      	ldr	r0, [pc, #328]	@ (801067c <tcp_write+0x2e4>)
 8010534:	f007 f964 	bl	8017800 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010538:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801053c:	88fb      	ldrh	r3, [r7, #6]
 801053e:	429a      	cmp	r2, r3
 8010540:	f080 8167 	bcs.w	8010812 <tcp_write+0x47a>
 8010544:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 8163 	beq.w	8010812 <tcp_write+0x47a>
 801054c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801054e:	891b      	ldrh	r3, [r3, #8]
 8010550:	2b00      	cmp	r3, #0
 8010552:	f000 815e 	beq.w	8010812 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010556:	88fa      	ldrh	r2, [r7, #6]
 8010558:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801055c:	1ad2      	subs	r2, r2, r3
 801055e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010560:	4293      	cmp	r3, r2
 8010562:	bfa8      	it	ge
 8010564:	4613      	movge	r3, r2
 8010566:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801056a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801056c:	797b      	ldrb	r3, [r7, #5]
 801056e:	f003 0301 	and.w	r3, r3, #1
 8010572:	2b00      	cmp	r3, #0
 8010574:	d027      	beq.n	80105c6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010576:	f107 0012 	add.w	r0, r7, #18
 801057a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801057c:	8bf9      	ldrh	r1, [r7, #30]
 801057e:	2301      	movs	r3, #1
 8010580:	9302      	str	r3, [sp, #8]
 8010582:	797b      	ldrb	r3, [r7, #5]
 8010584:	9301      	str	r3, [sp, #4]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	4603      	mov	r3, r0
 801058c:	2000      	movs	r0, #0
 801058e:	f7ff fe0f 	bl	80101b0 <tcp_pbuf_prealloc>
 8010592:	6578      	str	r0, [r7, #84]	@ 0x54
 8010594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 8225 	beq.w	80109e6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801059c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801059e:	6858      	ldr	r0, [r3, #4]
 80105a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105a4:	68ba      	ldr	r2, [r7, #8]
 80105a6:	4413      	add	r3, r2
 80105a8:	8bfa      	ldrh	r2, [r7, #30]
 80105aa:	4619      	mov	r1, r3
 80105ac:	f007 fa5f 	bl	8017a6e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80105b0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80105b2:	f7fb f9e5 	bl	800b980 <pbuf_clen>
 80105b6:	4603      	mov	r3, r0
 80105b8:	461a      	mov	r2, r3
 80105ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80105be:	4413      	add	r3, r2
 80105c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80105c4:	e041      	b.n	801064a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80105c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80105cc:	e002      	b.n	80105d4 <tcp_write+0x23c>
 80105ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80105d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d1f8      	bne.n	80105ce <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80105dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105de:	7b1b      	ldrb	r3, [r3, #12]
 80105e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d115      	bne.n	8010614 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80105e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105ee:	8952      	ldrh	r2, [r2, #10]
 80105f0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80105f2:	68ba      	ldr	r2, [r7, #8]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d10d      	bne.n	8010614 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80105f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d006      	beq.n	801060e <tcp_write+0x276>
 8010600:	4b1c      	ldr	r3, [pc, #112]	@ (8010674 <tcp_write+0x2dc>)
 8010602:	f240 2231 	movw	r2, #561	@ 0x231
 8010606:	4922      	ldr	r1, [pc, #136]	@ (8010690 <tcp_write+0x2f8>)
 8010608:	481c      	ldr	r0, [pc, #112]	@ (801067c <tcp_write+0x2e4>)
 801060a:	f007 f8f9 	bl	8017800 <iprintf>
          extendlen = seglen;
 801060e:	8bfb      	ldrh	r3, [r7, #30]
 8010610:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8010612:	e01a      	b.n	801064a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010614:	8bfb      	ldrh	r3, [r7, #30]
 8010616:	2201      	movs	r2, #1
 8010618:	4619      	mov	r1, r3
 801061a:	2000      	movs	r0, #0
 801061c:	f7fa fe44 	bl	800b2a8 <pbuf_alloc>
 8010620:	6578      	str	r0, [r7, #84]	@ 0x54
 8010622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010624:	2b00      	cmp	r3, #0
 8010626:	f000 81e0 	beq.w	80109ea <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801062a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	441a      	add	r2, r3
 8010632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010634:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010636:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010638:	f7fb f9a2 	bl	800b980 <pbuf_clen>
 801063c:	4603      	mov	r3, r0
 801063e:	461a      	mov	r2, r3
 8010640:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010644:	4413      	add	r3, r2
 8010646:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801064a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801064e:	8bfb      	ldrh	r3, [r7, #30]
 8010650:	4413      	add	r3, r2
 8010652:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8010656:	e0dc      	b.n	8010812 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801065e:	2b00      	cmp	r3, #0
 8010660:	f000 80d7 	beq.w	8010812 <tcp_write+0x47a>
 8010664:	4b03      	ldr	r3, [pc, #12]	@ (8010674 <tcp_write+0x2dc>)
 8010666:	f240 224a 	movw	r2, #586	@ 0x24a
 801066a:	490a      	ldr	r1, [pc, #40]	@ (8010694 <tcp_write+0x2fc>)
 801066c:	4803      	ldr	r0, [pc, #12]	@ (801067c <tcp_write+0x2e4>)
 801066e:	f007 f8c7 	bl	8017800 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010672:	e0ce      	b.n	8010812 <tcp_write+0x47a>
 8010674:	0801b5e0 	.word	0x0801b5e0
 8010678:	0801b780 	.word	0x0801b780
 801067c:	0801b634 	.word	0x0801b634
 8010680:	0801b798 	.word	0x0801b798
 8010684:	0801b7cc 	.word	0x0801b7cc
 8010688:	0801b7e4 	.word	0x0801b7e4
 801068c:	0801b804 	.word	0x0801b804
 8010690:	0801b824 	.word	0x0801b824
 8010694:	0801b850 	.word	0x0801b850
    struct pbuf *p;
    u16_t left = len - pos;
 8010698:	88fa      	ldrh	r2, [r7, #6]
 801069a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80106a2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80106ae:	8b7a      	ldrh	r2, [r7, #26]
 80106b0:	8bbb      	ldrh	r3, [r7, #28]
 80106b2:	4293      	cmp	r3, r2
 80106b4:	bf28      	it	cs
 80106b6:	4613      	movcs	r3, r2
 80106b8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80106ba:	797b      	ldrb	r3, [r7, #5]
 80106bc:	f003 0301 	and.w	r3, r3, #1
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d036      	beq.n	8010732 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80106c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	8b3b      	ldrh	r3, [r7, #24]
 80106cc:	4413      	add	r3, r2
 80106ce:	b299      	uxth	r1, r3
 80106d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	bf0c      	ite	eq
 80106d6:	2301      	moveq	r3, #1
 80106d8:	2300      	movne	r3, #0
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	f107 0012 	add.w	r0, r7, #18
 80106e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106e2:	9302      	str	r3, [sp, #8]
 80106e4:	797b      	ldrb	r3, [r7, #5]
 80106e6:	9301      	str	r3, [sp, #4]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	9300      	str	r3, [sp, #0]
 80106ec:	4603      	mov	r3, r0
 80106ee:	2036      	movs	r0, #54	@ 0x36
 80106f0:	f7ff fd5e 	bl	80101b0 <tcp_pbuf_prealloc>
 80106f4:	6338      	str	r0, [r7, #48]	@ 0x30
 80106f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f000 8178 	beq.w	80109ee <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80106fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010700:	895b      	ldrh	r3, [r3, #10]
 8010702:	8b3a      	ldrh	r2, [r7, #24]
 8010704:	429a      	cmp	r2, r3
 8010706:	d906      	bls.n	8010716 <tcp_write+0x37e>
 8010708:	4b8c      	ldr	r3, [pc, #560]	@ (801093c <tcp_write+0x5a4>)
 801070a:	f240 2266 	movw	r2, #614	@ 0x266
 801070e:	498c      	ldr	r1, [pc, #560]	@ (8010940 <tcp_write+0x5a8>)
 8010710:	488c      	ldr	r0, [pc, #560]	@ (8010944 <tcp_write+0x5ac>)
 8010712:	f007 f875 	bl	8017800 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801071e:	18d0      	adds	r0, r2, r3
 8010720:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	4413      	add	r3, r2
 8010728:	8b3a      	ldrh	r2, [r7, #24]
 801072a:	4619      	mov	r1, r3
 801072c:	f007 f99f 	bl	8017a6e <memcpy>
 8010730:	e02f      	b.n	8010792 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010732:	8a7b      	ldrh	r3, [r7, #18]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d006      	beq.n	8010746 <tcp_write+0x3ae>
 8010738:	4b80      	ldr	r3, [pc, #512]	@ (801093c <tcp_write+0x5a4>)
 801073a:	f240 2271 	movw	r2, #625	@ 0x271
 801073e:	4982      	ldr	r1, [pc, #520]	@ (8010948 <tcp_write+0x5b0>)
 8010740:	4880      	ldr	r0, [pc, #512]	@ (8010944 <tcp_write+0x5ac>)
 8010742:	f007 f85d 	bl	8017800 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010746:	8b3b      	ldrh	r3, [r7, #24]
 8010748:	2201      	movs	r2, #1
 801074a:	4619      	mov	r1, r3
 801074c:	2036      	movs	r0, #54	@ 0x36
 801074e:	f7fa fdab 	bl	800b2a8 <pbuf_alloc>
 8010752:	6178      	str	r0, [r7, #20]
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	2b00      	cmp	r3, #0
 8010758:	f000 814b 	beq.w	80109f2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801075c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	441a      	add	r2, r3
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010768:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801076c:	b29b      	uxth	r3, r3
 801076e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010772:	4619      	mov	r1, r3
 8010774:	2036      	movs	r0, #54	@ 0x36
 8010776:	f7fa fd97 	bl	800b2a8 <pbuf_alloc>
 801077a:	6338      	str	r0, [r7, #48]	@ 0x30
 801077c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801077e:	2b00      	cmp	r3, #0
 8010780:	d103      	bne.n	801078a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010782:	6978      	ldr	r0, [r7, #20]
 8010784:	f7fb f874 	bl	800b870 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010788:	e136      	b.n	80109f8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801078a:	6979      	ldr	r1, [r7, #20]
 801078c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801078e:	f7fb f931 	bl	800b9f4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010792:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010794:	f7fb f8f4 	bl	800b980 <pbuf_clen>
 8010798:	4603      	mov	r3, r0
 801079a:	461a      	mov	r2, r3
 801079c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80107a0:	4413      	add	r3, r2
 80107a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80107a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80107aa:	2b09      	cmp	r3, #9
 80107ac:	d903      	bls.n	80107b6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80107ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80107b0:	f7fb f85e 	bl	800b870 <pbuf_free>
      goto memerr;
 80107b4:	e120      	b.n	80109f8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80107be:	441a      	add	r2, r3
 80107c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	4613      	mov	r3, r2
 80107c8:	2200      	movs	r2, #0
 80107ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80107cc:	68f8      	ldr	r0, [r7, #12]
 80107ce:	f7ff fc53 	bl	8010078 <tcp_create_segment>
 80107d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80107d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f000 810d 	beq.w	80109f6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80107dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d102      	bne.n	80107e8 <tcp_write+0x450>
      queue = seg;
 80107e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80107e6:	e00c      	b.n	8010802 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80107e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d106      	bne.n	80107fc <tcp_write+0x464>
 80107ee:	4b53      	ldr	r3, [pc, #332]	@ (801093c <tcp_write+0x5a4>)
 80107f0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80107f4:	4955      	ldr	r1, [pc, #340]	@ (801094c <tcp_write+0x5b4>)
 80107f6:	4853      	ldr	r0, [pc, #332]	@ (8010944 <tcp_write+0x5ac>)
 80107f8:	f007 f802 	bl	8017800 <iprintf>
      prev_seg->next = seg;
 80107fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010800:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010804:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010806:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801080a:	8b3b      	ldrh	r3, [r7, #24]
 801080c:	4413      	add	r3, r2
 801080e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8010812:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010816:	88fb      	ldrh	r3, [r7, #6]
 8010818:	429a      	cmp	r2, r3
 801081a:	f4ff af3d 	bcc.w	8010698 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801081e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010820:	2b00      	cmp	r3, #0
 8010822:	d02c      	beq.n	801087e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801082a:	e01e      	b.n	801086a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801082c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082e:	891a      	ldrh	r2, [r3, #8]
 8010830:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010832:	4413      	add	r3, r2
 8010834:	b29a      	uxth	r2, r3
 8010836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010838:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801083a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d110      	bne.n	8010864 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010848:	8952      	ldrh	r2, [r2, #10]
 801084a:	4413      	add	r3, r2
 801084c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801084e:	68b9      	ldr	r1, [r7, #8]
 8010850:	4618      	mov	r0, r3
 8010852:	f007 f90c 	bl	8017a6e <memcpy>
        p->len += oversize_used;
 8010856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010858:	895a      	ldrh	r2, [r3, #10]
 801085a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801085c:	4413      	add	r3, r2
 801085e:	b29a      	uxth	r2, r3
 8010860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010862:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801086a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801086c:	2b00      	cmp	r3, #0
 801086e:	d1dd      	bne.n	801082c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010872:	891a      	ldrh	r2, [r3, #8]
 8010874:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010876:	4413      	add	r3, r2
 8010878:	b29a      	uxth	r2, r3
 801087a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801087c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801087e:	8a7a      	ldrh	r2, [r7, #18]
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010888:	2b00      	cmp	r3, #0
 801088a:	d018      	beq.n	80108be <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801088c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801088e:	2b00      	cmp	r3, #0
 8010890:	d106      	bne.n	80108a0 <tcp_write+0x508>
 8010892:	4b2a      	ldr	r3, [pc, #168]	@ (801093c <tcp_write+0x5a4>)
 8010894:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8010898:	492d      	ldr	r1, [pc, #180]	@ (8010950 <tcp_write+0x5b8>)
 801089a:	482a      	ldr	r0, [pc, #168]	@ (8010944 <tcp_write+0x5ac>)
 801089c:	f006 ffb0 	bl	8017800 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80108a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fb f8a4 	bl	800b9f4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80108ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ae:	891a      	ldrh	r2, [r3, #8]
 80108b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108b2:	891b      	ldrh	r3, [r3, #8]
 80108b4:	4413      	add	r3, r2
 80108b6:	b29a      	uxth	r2, r3
 80108b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ba:	811a      	strh	r2, [r3, #8]
 80108bc:	e037      	b.n	801092e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80108be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d034      	beq.n	801092e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80108c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d003      	beq.n	80108d2 <tcp_write+0x53a>
 80108ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d106      	bne.n	80108e0 <tcp_write+0x548>
 80108d2:	4b1a      	ldr	r3, [pc, #104]	@ (801093c <tcp_write+0x5a4>)
 80108d4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80108d8:	491e      	ldr	r1, [pc, #120]	@ (8010954 <tcp_write+0x5bc>)
 80108da:	481a      	ldr	r0, [pc, #104]	@ (8010944 <tcp_write+0x5ac>)
 80108dc:	f006 ff90 	bl	8017800 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108e6:	e009      	b.n	80108fc <tcp_write+0x564>
      p->tot_len += extendlen;
 80108e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ea:	891a      	ldrh	r2, [r3, #8]
 80108ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108ee:	4413      	add	r3, r2
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d1f1      	bne.n	80108e8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010906:	891a      	ldrh	r2, [r3, #8]
 8010908:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801090a:	4413      	add	r3, r2
 801090c:	b29a      	uxth	r2, r3
 801090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010910:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010914:	895a      	ldrh	r2, [r3, #10]
 8010916:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010918:	4413      	add	r3, r2
 801091a:	b29a      	uxth	r2, r3
 801091c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801091e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010922:	891a      	ldrh	r2, [r3, #8]
 8010924:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010926:	4413      	add	r3, r2
 8010928:	b29a      	uxth	r2, r3
 801092a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801092c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801092e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010930:	2b00      	cmp	r3, #0
 8010932:	d111      	bne.n	8010958 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010938:	66da      	str	r2, [r3, #108]	@ 0x6c
 801093a:	e010      	b.n	801095e <tcp_write+0x5c6>
 801093c:	0801b5e0 	.word	0x0801b5e0
 8010940:	0801b880 	.word	0x0801b880
 8010944:	0801b634 	.word	0x0801b634
 8010948:	0801b8c0 	.word	0x0801b8c0
 801094c:	0801b8d0 	.word	0x0801b8d0
 8010950:	0801b8e4 	.word	0x0801b8e4
 8010954:	0801b91c 	.word	0x0801b91c
  } else {
    last_unsent->next = queue;
 8010958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801095a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801095c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010962:	88fb      	ldrh	r3, [r7, #6]
 8010964:	441a      	add	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010970:	88fb      	ldrh	r3, [r7, #6]
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	b29a      	uxth	r2, r3
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010982:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00e      	beq.n	80109ae <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010994:	2b00      	cmp	r3, #0
 8010996:	d10a      	bne.n	80109ae <tcp_write+0x616>
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801099c:	2b00      	cmp	r3, #0
 801099e:	d106      	bne.n	80109ae <tcp_write+0x616>
 80109a0:	4b2c      	ldr	r3, [pc, #176]	@ (8010a54 <tcp_write+0x6bc>)
 80109a2:	f240 3212 	movw	r2, #786	@ 0x312
 80109a6:	492c      	ldr	r1, [pc, #176]	@ (8010a58 <tcp_write+0x6c0>)
 80109a8:	482c      	ldr	r0, [pc, #176]	@ (8010a5c <tcp_write+0x6c4>)
 80109aa:	f006 ff29 	bl	8017800 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80109ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d016      	beq.n	80109e2 <tcp_write+0x64a>
 80109b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d012      	beq.n	80109e2 <tcp_write+0x64a>
 80109bc:	797b      	ldrb	r3, [r7, #5]
 80109be:	f003 0302 	and.w	r3, r3, #2
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d10d      	bne.n	80109e2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80109c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	899b      	ldrh	r3, [r3, #12]
 80109cc:	b29c      	uxth	r4, r3
 80109ce:	2008      	movs	r0, #8
 80109d0:	f7f9 fb7a 	bl	800a0c8 <lwip_htons>
 80109d4:	4603      	mov	r3, r0
 80109d6:	461a      	mov	r2, r3
 80109d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	4322      	orrs	r2, r4
 80109de:	b292      	uxth	r2, r2
 80109e0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80109e2:	2300      	movs	r3, #0
 80109e4:	e031      	b.n	8010a4a <tcp_write+0x6b2>
          goto memerr;
 80109e6:	bf00      	nop
 80109e8:	e006      	b.n	80109f8 <tcp_write+0x660>
            goto memerr;
 80109ea:	bf00      	nop
 80109ec:	e004      	b.n	80109f8 <tcp_write+0x660>
        goto memerr;
 80109ee:	bf00      	nop
 80109f0:	e002      	b.n	80109f8 <tcp_write+0x660>
        goto memerr;
 80109f2:	bf00      	nop
 80109f4:	e000      	b.n	80109f8 <tcp_write+0x660>
      goto memerr;
 80109f6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	8b5b      	ldrh	r3, [r3, #26]
 80109fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d002      	beq.n	8010a12 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010a0c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010a0e:	f7fa ff2f 	bl	800b870 <pbuf_free>
  }
  if (queue != NULL) {
 8010a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d002      	beq.n	8010a1e <tcp_write+0x686>
    tcp_segs_free(queue);
 8010a18:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010a1a:	f7fc fb53 	bl	800d0c4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d00e      	beq.n	8010a46 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10a      	bne.n	8010a46 <tcp_write+0x6ae>
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d106      	bne.n	8010a46 <tcp_write+0x6ae>
 8010a38:	4b06      	ldr	r3, [pc, #24]	@ (8010a54 <tcp_write+0x6bc>)
 8010a3a:	f240 3227 	movw	r2, #807	@ 0x327
 8010a3e:	4906      	ldr	r1, [pc, #24]	@ (8010a58 <tcp_write+0x6c0>)
 8010a40:	4806      	ldr	r0, [pc, #24]	@ (8010a5c <tcp_write+0x6c4>)
 8010a42:	f006 fedd 	bl	8017800 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	375c      	adds	r7, #92	@ 0x5c
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd90      	pop	{r4, r7, pc}
 8010a52:	bf00      	nop
 8010a54:	0801b5e0 	.word	0x0801b5e0
 8010a58:	0801b954 	.word	0x0801b954
 8010a5c:	0801b634 	.word	0x0801b634

08010a60 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010a60:	b590      	push	{r4, r7, lr}
 8010a62:	b08b      	sub	sp, #44	@ 0x2c
 8010a64:	af02      	add	r7, sp, #8
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	460b      	mov	r3, r1
 8010a6a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	61fb      	str	r3, [r7, #28]
 8010a70:	2300      	movs	r3, #0
 8010a72:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d106      	bne.n	8010a8c <tcp_split_unsent_seg+0x2c>
 8010a7e:	4b95      	ldr	r3, [pc, #596]	@ (8010cd4 <tcp_split_unsent_seg+0x274>)
 8010a80:	f240 324b 	movw	r2, #843	@ 0x34b
 8010a84:	4994      	ldr	r1, [pc, #592]	@ (8010cd8 <tcp_split_unsent_seg+0x278>)
 8010a86:	4895      	ldr	r0, [pc, #596]	@ (8010cdc <tcp_split_unsent_seg+0x27c>)
 8010a88:	f006 feba 	bl	8017800 <iprintf>

  useg = pcb->unsent;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a90:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d102      	bne.n	8010a9e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010a98:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9c:	e116      	b.n	8010ccc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010a9e:	887b      	ldrh	r3, [r7, #2]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d109      	bne.n	8010ab8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010aa4:	4b8b      	ldr	r3, [pc, #556]	@ (8010cd4 <tcp_split_unsent_seg+0x274>)
 8010aa6:	f240 3253 	movw	r2, #851	@ 0x353
 8010aaa:	498d      	ldr	r1, [pc, #564]	@ (8010ce0 <tcp_split_unsent_seg+0x280>)
 8010aac:	488b      	ldr	r0, [pc, #556]	@ (8010cdc <tcp_split_unsent_seg+0x27c>)
 8010aae:	f006 fea7 	bl	8017800 <iprintf>
    return ERR_VAL;
 8010ab2:	f06f 0305 	mvn.w	r3, #5
 8010ab6:	e109      	b.n	8010ccc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	891b      	ldrh	r3, [r3, #8]
 8010abc:	887a      	ldrh	r2, [r7, #2]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d301      	bcc.n	8010ac6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	e102      	b.n	8010ccc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010aca:	887a      	ldrh	r2, [r7, #2]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d906      	bls.n	8010ade <tcp_split_unsent_seg+0x7e>
 8010ad0:	4b80      	ldr	r3, [pc, #512]	@ (8010cd4 <tcp_split_unsent_seg+0x274>)
 8010ad2:	f240 325b 	movw	r2, #859	@ 0x35b
 8010ad6:	4983      	ldr	r1, [pc, #524]	@ (8010ce4 <tcp_split_unsent_seg+0x284>)
 8010ad8:	4880      	ldr	r0, [pc, #512]	@ (8010cdc <tcp_split_unsent_seg+0x27c>)
 8010ada:	f006 fe91 	bl	8017800 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	891b      	ldrh	r3, [r3, #8]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d106      	bne.n	8010af4 <tcp_split_unsent_seg+0x94>
 8010ae6:	4b7b      	ldr	r3, [pc, #492]	@ (8010cd4 <tcp_split_unsent_seg+0x274>)
 8010ae8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010aec:	497e      	ldr	r1, [pc, #504]	@ (8010ce8 <tcp_split_unsent_seg+0x288>)
 8010aee:	487b      	ldr	r0, [pc, #492]	@ (8010cdc <tcp_split_unsent_seg+0x27c>)
 8010af0:	f006 fe86 	bl	8017800 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	7a9b      	ldrb	r3, [r3, #10]
 8010af8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010afa:	7bfb      	ldrb	r3, [r7, #15]
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	f003 0304 	and.w	r3, r3, #4
 8010b04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	891a      	ldrh	r2, [r3, #8]
 8010b0a:	887b      	ldrh	r3, [r7, #2]
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010b10:	7bbb      	ldrb	r3, [r7, #14]
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	89bb      	ldrh	r3, [r7, #12]
 8010b16:	4413      	add	r3, r2
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010b1e:	4619      	mov	r1, r3
 8010b20:	2036      	movs	r0, #54	@ 0x36
 8010b22:	f7fa fbc1 	bl	800b2a8 <pbuf_alloc>
 8010b26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f000 80b7 	beq.w	8010c9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	891a      	ldrh	r2, [r3, #8]
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	891b      	ldrh	r3, [r3, #8]
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	887b      	ldrh	r3, [r7, #2]
 8010b40:	4413      	add	r3, r2
 8010b42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	6858      	ldr	r0, [r3, #4]
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	685a      	ldr	r2, [r3, #4]
 8010b4c:	7bbb      	ldrb	r3, [r7, #14]
 8010b4e:	18d1      	adds	r1, r2, r3
 8010b50:	897b      	ldrh	r3, [r7, #10]
 8010b52:	89ba      	ldrh	r2, [r7, #12]
 8010b54:	f7fb f886 	bl	800bc64 <pbuf_copy_partial>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	89bb      	ldrh	r3, [r7, #12]
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	f040 809f 	bne.w	8010ca2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	899b      	ldrh	r3, [r3, #12]
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7f9 faab 	bl	800a0c8 <lwip_htons>
 8010b72:	4603      	mov	r3, r0
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b7a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010b80:	7efb      	ldrb	r3, [r7, #27]
 8010b82:	f003 0308 	and.w	r3, r3, #8
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d007      	beq.n	8010b9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010b8a:	7efb      	ldrb	r3, [r7, #27]
 8010b8c:	f023 0308 	bic.w	r3, r3, #8
 8010b90:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010b92:	7ebb      	ldrb	r3, [r7, #26]
 8010b94:	f043 0308 	orr.w	r3, r3, #8
 8010b98:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010b9a:	7efb      	ldrb	r3, [r7, #27]
 8010b9c:	f003 0301 	and.w	r3, r3, #1
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d007      	beq.n	8010bb4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010ba4:	7efb      	ldrb	r3, [r7, #27]
 8010ba6:	f023 0301 	bic.w	r3, r3, #1
 8010baa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010bac:	7ebb      	ldrb	r3, [r7, #26]
 8010bae:	f043 0301 	orr.w	r3, r3, #1
 8010bb2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7f9 fa99 	bl	800a0f2 <lwip_htonl>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	887b      	ldrh	r3, [r7, #2]
 8010bc4:	18d1      	adds	r1, r2, r3
 8010bc6:	7eba      	ldrb	r2, [r7, #26]
 8010bc8:	7bfb      	ldrb	r3, [r7, #15]
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	460b      	mov	r3, r1
 8010bce:	6939      	ldr	r1, [r7, #16]
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7ff fa51 	bl	8010078 <tcp_create_segment>
 8010bd6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d063      	beq.n	8010ca6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fa fecc 	bl	800b980 <pbuf_clen>
 8010be8:	4603      	mov	r3, r0
 8010bea:	461a      	mov	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010bf2:	1a9b      	subs	r3, r3, r2
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	6858      	ldr	r0, [r3, #4]
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	891a      	ldrh	r2, [r3, #8]
 8010c06:	89bb      	ldrh	r3, [r7, #12]
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	f7fa fca9 	bl	800b564 <pbuf_realloc>
  useg->len -= remainder;
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	891a      	ldrh	r2, [r3, #8]
 8010c16:	89bb      	ldrh	r3, [r7, #12]
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	899b      	ldrh	r3, [r3, #12]
 8010c26:	b29c      	uxth	r4, r3
 8010c28:	7efb      	ldrb	r3, [r7, #27]
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7f9 fa4b 	bl	800a0c8 <lwip_htons>
 8010c32:	4603      	mov	r3, r0
 8010c34:	461a      	mov	r2, r3
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	4322      	orrs	r2, r4
 8010c3c:	b292      	uxth	r2, r2
 8010c3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7fa fe9b 	bl	800b980 <pbuf_clen>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c54:	4413      	add	r3, r2
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c5e:	69fb      	ldr	r3, [r7, #28]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fa fe8c 	bl	800b980 <pbuf_clen>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c72:	4413      	add	r3, r2
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	681a      	ldr	r2, [r3, #0]
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	69fa      	ldr	r2, [r7, #28]
 8010c88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d103      	bne.n	8010c9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2200      	movs	r2, #0
 8010c96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	e016      	b.n	8010ccc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010c9e:	bf00      	nop
 8010ca0:	e002      	b.n	8010ca8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010ca2:	bf00      	nop
 8010ca4:	e000      	b.n	8010ca8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010ca6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d006      	beq.n	8010cbc <tcp_split_unsent_seg+0x25c>
 8010cae:	4b09      	ldr	r3, [pc, #36]	@ (8010cd4 <tcp_split_unsent_seg+0x274>)
 8010cb0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010cb4:	490d      	ldr	r1, [pc, #52]	@ (8010cec <tcp_split_unsent_seg+0x28c>)
 8010cb6:	4809      	ldr	r0, [pc, #36]	@ (8010cdc <tcp_split_unsent_seg+0x27c>)
 8010cb8:	f006 fda2 	bl	8017800 <iprintf>
  if (p != NULL) {
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d002      	beq.n	8010cc8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010cc2:	6938      	ldr	r0, [r7, #16]
 8010cc4:	f7fa fdd4 	bl	800b870 <pbuf_free>
  }

  return ERR_MEM;
 8010cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3724      	adds	r7, #36	@ 0x24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd90      	pop	{r4, r7, pc}
 8010cd4:	0801b5e0 	.word	0x0801b5e0
 8010cd8:	0801b974 	.word	0x0801b974
 8010cdc:	0801b634 	.word	0x0801b634
 8010ce0:	0801b998 	.word	0x0801b998
 8010ce4:	0801b9bc 	.word	0x0801b9bc
 8010ce8:	0801b9cc 	.word	0x0801b9cc
 8010cec:	0801b9dc 	.word	0x0801b9dc

08010cf0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b085      	sub	sp, #20
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d106      	bne.n	8010d0c <tcp_send_fin+0x1c>
 8010cfe:	4b21      	ldr	r3, [pc, #132]	@ (8010d84 <tcp_send_fin+0x94>)
 8010d00:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010d04:	4920      	ldr	r1, [pc, #128]	@ (8010d88 <tcp_send_fin+0x98>)
 8010d06:	4821      	ldr	r0, [pc, #132]	@ (8010d8c <tcp_send_fin+0x9c>)
 8010d08:	f006 fd7a 	bl	8017800 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d02e      	beq.n	8010d72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d18:	60fb      	str	r3, [r7, #12]
 8010d1a:	e002      	b.n	8010d22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1f8      	bne.n	8010d1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	899b      	ldrh	r3, [r3, #12]
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7f9 f9c8 	bl	800a0c8 <lwip_htons>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	f003 0307 	and.w	r3, r3, #7
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d116      	bne.n	8010d72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	899b      	ldrh	r3, [r3, #12]
 8010d4a:	b29c      	uxth	r4, r3
 8010d4c:	2001      	movs	r0, #1
 8010d4e:	f7f9 f9bb 	bl	800a0c8 <lwip_htons>
 8010d52:	4603      	mov	r3, r0
 8010d54:	461a      	mov	r2, r3
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	4322      	orrs	r2, r4
 8010d5c:	b292      	uxth	r2, r2
 8010d5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	8b5b      	ldrh	r3, [r3, #26]
 8010d64:	f043 0320 	orr.w	r3, r3, #32
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	e004      	b.n	8010d7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010d72:	2101      	movs	r1, #1
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 f80b 	bl	8010d90 <tcp_enqueue_flags>
 8010d7a:	4603      	mov	r3, r0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3714      	adds	r7, #20
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd90      	pop	{r4, r7, pc}
 8010d84:	0801b5e0 	.word	0x0801b5e0
 8010d88:	0801b9e8 	.word	0x0801b9e8
 8010d8c:	0801b634 	.word	0x0801b634

08010d90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b08a      	sub	sp, #40	@ 0x28
 8010d94:	af02      	add	r7, sp, #8
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010da0:	2300      	movs	r3, #0
 8010da2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010da4:	78fb      	ldrb	r3, [r7, #3]
 8010da6:	f003 0303 	and.w	r3, r3, #3
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d106      	bne.n	8010dbc <tcp_enqueue_flags+0x2c>
 8010dae:	4b67      	ldr	r3, [pc, #412]	@ (8010f4c <tcp_enqueue_flags+0x1bc>)
 8010db0:	f240 4211 	movw	r2, #1041	@ 0x411
 8010db4:	4966      	ldr	r1, [pc, #408]	@ (8010f50 <tcp_enqueue_flags+0x1c0>)
 8010db6:	4867      	ldr	r0, [pc, #412]	@ (8010f54 <tcp_enqueue_flags+0x1c4>)
 8010db8:	f006 fd22 	bl	8017800 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d106      	bne.n	8010dd0 <tcp_enqueue_flags+0x40>
 8010dc2:	4b62      	ldr	r3, [pc, #392]	@ (8010f4c <tcp_enqueue_flags+0x1bc>)
 8010dc4:	f240 4213 	movw	r2, #1043	@ 0x413
 8010dc8:	4963      	ldr	r1, [pc, #396]	@ (8010f58 <tcp_enqueue_flags+0x1c8>)
 8010dca:	4862      	ldr	r0, [pc, #392]	@ (8010f54 <tcp_enqueue_flags+0x1c4>)
 8010dcc:	f006 fd18 	bl	8017800 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010dd0:	78fb      	ldrb	r3, [r7, #3]
 8010dd2:	f003 0302 	and.w	r3, r3, #2
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d001      	beq.n	8010dde <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010dda:	2301      	movs	r3, #1
 8010ddc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010dde:	7ffb      	ldrb	r3, [r7, #31]
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	f003 0304 	and.w	r3, r3, #4
 8010de8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010dea:	7dfb      	ldrb	r3, [r7, #23]
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010df2:	4619      	mov	r1, r3
 8010df4:	2036      	movs	r0, #54	@ 0x36
 8010df6:	f7fa fa57 	bl	800b2a8 <pbuf_alloc>
 8010dfa:	6138      	str	r0, [r7, #16]
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d109      	bne.n	8010e16 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8b5b      	ldrh	r3, [r3, #26]
 8010e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e10:	f04f 33ff 	mov.w	r3, #4294967295
 8010e14:	e095      	b.n	8010f42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	895a      	ldrh	r2, [r3, #10]
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d206      	bcs.n	8010e30 <tcp_enqueue_flags+0xa0>
 8010e22:	4b4a      	ldr	r3, [pc, #296]	@ (8010f4c <tcp_enqueue_flags+0x1bc>)
 8010e24:	f240 4239 	movw	r2, #1081	@ 0x439
 8010e28:	494c      	ldr	r1, [pc, #304]	@ (8010f5c <tcp_enqueue_flags+0x1cc>)
 8010e2a:	484a      	ldr	r0, [pc, #296]	@ (8010f54 <tcp_enqueue_flags+0x1c4>)
 8010e2c:	f006 fce8 	bl	8017800 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010e34:	78fa      	ldrb	r2, [r7, #3]
 8010e36:	7ffb      	ldrb	r3, [r7, #31]
 8010e38:	9300      	str	r3, [sp, #0]
 8010e3a:	460b      	mov	r3, r1
 8010e3c:	6939      	ldr	r1, [r7, #16]
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f7ff f91a 	bl	8010078 <tcp_create_segment>
 8010e44:	60f8      	str	r0, [r7, #12]
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d109      	bne.n	8010e60 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	8b5b      	ldrh	r3, [r3, #26]
 8010e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8010e5e:	e070      	b.n	8010f42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	f003 0303 	and.w	r3, r3, #3
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d006      	beq.n	8010e7a <tcp_enqueue_flags+0xea>
 8010e6c:	4b37      	ldr	r3, [pc, #220]	@ (8010f4c <tcp_enqueue_flags+0x1bc>)
 8010e6e:	f240 4242 	movw	r2, #1090	@ 0x442
 8010e72:	493b      	ldr	r1, [pc, #236]	@ (8010f60 <tcp_enqueue_flags+0x1d0>)
 8010e74:	4837      	ldr	r0, [pc, #220]	@ (8010f54 <tcp_enqueue_flags+0x1c4>)
 8010e76:	f006 fcc3 	bl	8017800 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	891b      	ldrh	r3, [r3, #8]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d006      	beq.n	8010e90 <tcp_enqueue_flags+0x100>
 8010e82:	4b32      	ldr	r3, [pc, #200]	@ (8010f4c <tcp_enqueue_flags+0x1bc>)
 8010e84:	f240 4243 	movw	r2, #1091	@ 0x443
 8010e88:	4936      	ldr	r1, [pc, #216]	@ (8010f64 <tcp_enqueue_flags+0x1d4>)
 8010e8a:	4832      	ldr	r0, [pc, #200]	@ (8010f54 <tcp_enqueue_flags+0x1c4>)
 8010e8c:	f006 fcb8 	bl	8017800 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d103      	bne.n	8010ea0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	68fa      	ldr	r2, [r7, #12]
 8010e9c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010e9e:	e00d      	b.n	8010ebc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ea4:	61bb      	str	r3, [r7, #24]
 8010ea6:	e002      	b.n	8010eae <tcp_enqueue_flags+0x11e>
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	61bb      	str	r3, [r7, #24]
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d1f8      	bne.n	8010ea8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010ec4:	78fb      	ldrb	r3, [r7, #3]
 8010ec6:	f003 0302 	and.w	r3, r3, #2
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d104      	bne.n	8010ed8 <tcp_enqueue_flags+0x148>
 8010ece:	78fb      	ldrb	r3, [r7, #3]
 8010ed0:	f003 0301 	and.w	r3, r3, #1
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d004      	beq.n	8010ee2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010ee2:	78fb      	ldrb	r3, [r7, #3]
 8010ee4:	f003 0301 	and.w	r3, r3, #1
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d006      	beq.n	8010efa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	8b5b      	ldrh	r3, [r3, #26]
 8010ef0:	f043 0320 	orr.w	r3, r3, #32
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fa fd3e 	bl	800b980 <pbuf_clen>
 8010f04:	4603      	mov	r3, r0
 8010f06:	461a      	mov	r2, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f0e:	4413      	add	r3, r2
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00e      	beq.n	8010f40 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d10a      	bne.n	8010f40 <tcp_enqueue_flags+0x1b0>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d106      	bne.n	8010f40 <tcp_enqueue_flags+0x1b0>
 8010f32:	4b06      	ldr	r3, [pc, #24]	@ (8010f4c <tcp_enqueue_flags+0x1bc>)
 8010f34:	f240 4265 	movw	r2, #1125	@ 0x465
 8010f38:	490b      	ldr	r1, [pc, #44]	@ (8010f68 <tcp_enqueue_flags+0x1d8>)
 8010f3a:	4806      	ldr	r0, [pc, #24]	@ (8010f54 <tcp_enqueue_flags+0x1c4>)
 8010f3c:	f006 fc60 	bl	8017800 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010f40:	2300      	movs	r3, #0
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3720      	adds	r7, #32
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	0801b5e0 	.word	0x0801b5e0
 8010f50:	0801ba04 	.word	0x0801ba04
 8010f54:	0801b634 	.word	0x0801b634
 8010f58:	0801ba5c 	.word	0x0801ba5c
 8010f5c:	0801ba7c 	.word	0x0801ba7c
 8010f60:	0801bab8 	.word	0x0801bab8
 8010f64:	0801bad0 	.word	0x0801bad0
 8010f68:	0801bafc 	.word	0x0801bafc

08010f6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010f6c:	b5b0      	push	{r4, r5, r7, lr}
 8010f6e:	b08a      	sub	sp, #40	@ 0x28
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d106      	bne.n	8010f88 <tcp_output+0x1c>
 8010f7a:	4b8a      	ldr	r3, [pc, #552]	@ (80111a4 <tcp_output+0x238>)
 8010f7c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010f80:	4989      	ldr	r1, [pc, #548]	@ (80111a8 <tcp_output+0x23c>)
 8010f82:	488a      	ldr	r0, [pc, #552]	@ (80111ac <tcp_output+0x240>)
 8010f84:	f006 fc3c 	bl	8017800 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	7d1b      	ldrb	r3, [r3, #20]
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d106      	bne.n	8010f9e <tcp_output+0x32>
 8010f90:	4b84      	ldr	r3, [pc, #528]	@ (80111a4 <tcp_output+0x238>)
 8010f92:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010f96:	4986      	ldr	r1, [pc, #536]	@ (80111b0 <tcp_output+0x244>)
 8010f98:	4884      	ldr	r0, [pc, #528]	@ (80111ac <tcp_output+0x240>)
 8010f9a:	f006 fc31 	bl	8017800 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010f9e:	4b85      	ldr	r3, [pc, #532]	@ (80111b4 <tcp_output+0x248>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d101      	bne.n	8010fac <tcp_output+0x40>
    return ERR_OK;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	e1ce      	b.n	801134a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	bf28      	it	cs
 8010fbc:	4613      	movcs	r3, r2
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fc6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d10b      	bne.n	8010fe6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	8b5b      	ldrh	r3, [r3, #26]
 8010fd2:	f003 0302 	and.w	r3, r3, #2
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	f000 81aa 	beq.w	8011330 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 fdcb 	bl	8011b78 <tcp_send_empty_ack>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	e1b1      	b.n	801134a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010fe6:	6879      	ldr	r1, [r7, #4]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3304      	adds	r3, #4
 8010fec:	461a      	mov	r2, r3
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7ff f826 	bl	8010040 <tcp_route>
 8010ff4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d102      	bne.n	8011002 <tcp_output+0x96>
    return ERR_RTE;
 8010ffc:	f06f 0303 	mvn.w	r3, #3
 8011000:	e1a3      	b.n	801134a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d003      	beq.n	8011010 <tcp_output+0xa4>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d111      	bne.n	8011034 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d002      	beq.n	801101c <tcp_output+0xb0>
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	3304      	adds	r3, #4
 801101a:	e000      	b.n	801101e <tcp_output+0xb2>
 801101c:	2300      	movs	r3, #0
 801101e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d102      	bne.n	801102c <tcp_output+0xc0>
      return ERR_RTE;
 8011026:	f06f 0303 	mvn.w	r3, #3
 801102a:	e18e      	b.n	801134a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	4618      	mov	r0, r3
 801103c:	f7f9 f859 	bl	800a0f2 <lwip_htonl>
 8011040:	4602      	mov	r2, r0
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011046:	1ad3      	subs	r3, r2, r3
 8011048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801104a:	8912      	ldrh	r2, [r2, #8]
 801104c:	4413      	add	r3, r2
 801104e:	69ba      	ldr	r2, [r7, #24]
 8011050:	429a      	cmp	r2, r3
 8011052:	d227      	bcs.n	80110a4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801105a:	461a      	mov	r2, r3
 801105c:	69bb      	ldr	r3, [r7, #24]
 801105e:	4293      	cmp	r3, r2
 8011060:	d114      	bne.n	801108c <tcp_output+0x120>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011066:	2b00      	cmp	r3, #0
 8011068:	d110      	bne.n	801108c <tcp_output+0x120>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011070:	2b00      	cmp	r3, #0
 8011072:	d10b      	bne.n	801108c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2200      	movs	r2, #0
 8011078:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2201      	movs	r2, #1
 8011080:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2200      	movs	r2, #0
 8011088:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	8b5b      	ldrh	r3, [r3, #26]
 8011090:	f003 0302 	and.w	r3, r3, #2
 8011094:	2b00      	cmp	r3, #0
 8011096:	f000 814d 	beq.w	8011334 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 fd6c 	bl	8011b78 <tcp_send_empty_ack>
 80110a0:	4603      	mov	r3, r0
 80110a2:	e152      	b.n	801134a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80110b2:	6a3b      	ldr	r3, [r7, #32]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	f000 811c 	beq.w	80112f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80110ba:	e002      	b.n	80110c2 <tcp_output+0x156>
 80110bc:	6a3b      	ldr	r3, [r7, #32]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	623b      	str	r3, [r7, #32]
 80110c2:	6a3b      	ldr	r3, [r7, #32]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1f8      	bne.n	80110bc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80110ca:	e112      	b.n	80112f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80110cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	899b      	ldrh	r3, [r3, #12]
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7f8 fff7 	bl	800a0c8 <lwip_htons>
 80110da:	4603      	mov	r3, r0
 80110dc:	b2db      	uxtb	r3, r3
 80110de:	f003 0304 	and.w	r3, r3, #4
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d006      	beq.n	80110f4 <tcp_output+0x188>
 80110e6:	4b2f      	ldr	r3, [pc, #188]	@ (80111a4 <tcp_output+0x238>)
 80110e8:	f240 5236 	movw	r2, #1334	@ 0x536
 80110ec:	4932      	ldr	r1, [pc, #200]	@ (80111b8 <tcp_output+0x24c>)
 80110ee:	482f      	ldr	r0, [pc, #188]	@ (80111ac <tcp_output+0x240>)
 80110f0:	f006 fb86 	bl	8017800 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d01f      	beq.n	801113c <tcp_output+0x1d0>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	8b5b      	ldrh	r3, [r3, #26]
 8011100:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011104:	2b00      	cmp	r3, #0
 8011106:	d119      	bne.n	801113c <tcp_output+0x1d0>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801110c:	2b00      	cmp	r3, #0
 801110e:	d00b      	beq.n	8011128 <tcp_output+0x1bc>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d110      	bne.n	801113c <tcp_output+0x1d0>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801111e:	891a      	ldrh	r2, [r3, #8]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011124:	429a      	cmp	r2, r3
 8011126:	d209      	bcs.n	801113c <tcp_output+0x1d0>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801112e:	2b00      	cmp	r3, #0
 8011130:	d004      	beq.n	801113c <tcp_output+0x1d0>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011138:	2b08      	cmp	r3, #8
 801113a:	d901      	bls.n	8011140 <tcp_output+0x1d4>
 801113c:	2301      	movs	r3, #1
 801113e:	e000      	b.n	8011142 <tcp_output+0x1d6>
 8011140:	2300      	movs	r3, #0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d106      	bne.n	8011154 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	8b5b      	ldrh	r3, [r3, #26]
 801114a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801114e:	2b00      	cmp	r3, #0
 8011150:	f000 80e4 	beq.w	801131c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	7d1b      	ldrb	r3, [r3, #20]
 8011158:	2b02      	cmp	r3, #2
 801115a:	d00d      	beq.n	8011178 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	899b      	ldrh	r3, [r3, #12]
 8011162:	b29c      	uxth	r4, r3
 8011164:	2010      	movs	r0, #16
 8011166:	f7f8 ffaf 	bl	800a0c8 <lwip_htons>
 801116a:	4603      	mov	r3, r0
 801116c:	461a      	mov	r2, r3
 801116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	4322      	orrs	r2, r4
 8011174:	b292      	uxth	r2, r2
 8011176:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011178:	697a      	ldr	r2, [r7, #20]
 801117a:	6879      	ldr	r1, [r7, #4]
 801117c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801117e:	f000 f909 	bl	8011394 <tcp_output_segment>
 8011182:	4603      	mov	r3, r0
 8011184:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d016      	beq.n	80111bc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	8b5b      	ldrh	r3, [r3, #26]
 8011192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011196:	b29a      	uxth	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	835a      	strh	r2, [r3, #26]
      return err;
 801119c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111a0:	e0d3      	b.n	801134a <tcp_output+0x3de>
 80111a2:	bf00      	nop
 80111a4:	0801b5e0 	.word	0x0801b5e0
 80111a8:	0801bb24 	.word	0x0801bb24
 80111ac:	0801b634 	.word	0x0801b634
 80111b0:	0801bb3c 	.word	0x0801bb3c
 80111b4:	20008ff4 	.word	0x20008ff4
 80111b8:	0801bb64 	.word	0x0801bb64
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80111bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	7d1b      	ldrb	r3, [r3, #20]
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d006      	beq.n	80111da <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	8b5b      	ldrh	r3, [r3, #26]
 80111d0:	f023 0303 	bic.w	r3, r3, #3
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80111da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7f8 ff86 	bl	800a0f2 <lwip_htonl>
 80111e6:	4604      	mov	r4, r0
 80111e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ea:	891b      	ldrh	r3, [r3, #8]
 80111ec:	461d      	mov	r5, r3
 80111ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	899b      	ldrh	r3, [r3, #12]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7f8 ff66 	bl	800a0c8 <lwip_htons>
 80111fc:	4603      	mov	r3, r0
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	f003 0303 	and.w	r3, r3, #3
 8011204:	2b00      	cmp	r3, #0
 8011206:	d001      	beq.n	801120c <tcp_output+0x2a0>
 8011208:	2301      	movs	r3, #1
 801120a:	e000      	b.n	801120e <tcp_output+0x2a2>
 801120c:	2300      	movs	r3, #0
 801120e:	442b      	add	r3, r5
 8011210:	4423      	add	r3, r4
 8011212:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	1ad3      	subs	r3, r2, r3
 801121c:	2b00      	cmp	r3, #0
 801121e:	da02      	bge.n	8011226 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	68ba      	ldr	r2, [r7, #8]
 8011224:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011228:	891b      	ldrh	r3, [r3, #8]
 801122a:	461c      	mov	r4, r3
 801122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	899b      	ldrh	r3, [r3, #12]
 8011232:	b29b      	uxth	r3, r3
 8011234:	4618      	mov	r0, r3
 8011236:	f7f8 ff47 	bl	800a0c8 <lwip_htons>
 801123a:	4603      	mov	r3, r0
 801123c:	b2db      	uxtb	r3, r3
 801123e:	f003 0303 	and.w	r3, r3, #3
 8011242:	2b00      	cmp	r3, #0
 8011244:	d001      	beq.n	801124a <tcp_output+0x2de>
 8011246:	2301      	movs	r3, #1
 8011248:	e000      	b.n	801124c <tcp_output+0x2e0>
 801124a:	2300      	movs	r3, #0
 801124c:	4423      	add	r3, r4
 801124e:	2b00      	cmp	r3, #0
 8011250:	d049      	beq.n	80112e6 <tcp_output+0x37a>
      seg->next = NULL;
 8011252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011254:	2200      	movs	r2, #0
 8011256:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801125c:	2b00      	cmp	r3, #0
 801125e:	d105      	bne.n	801126c <tcp_output+0x300>
        pcb->unacked = seg;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011264:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011268:	623b      	str	r3, [r7, #32]
 801126a:	e03f      	b.n	80112ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	4618      	mov	r0, r3
 8011274:	f7f8 ff3d 	bl	800a0f2 <lwip_htonl>
 8011278:	4604      	mov	r4, r0
 801127a:	6a3b      	ldr	r3, [r7, #32]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	4618      	mov	r0, r3
 8011282:	f7f8 ff36 	bl	800a0f2 <lwip_htonl>
 8011286:	4603      	mov	r3, r0
 8011288:	1ae3      	subs	r3, r4, r3
 801128a:	2b00      	cmp	r3, #0
 801128c:	da24      	bge.n	80112d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	3370      	adds	r3, #112	@ 0x70
 8011292:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011294:	e002      	b.n	801129c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011296:	69fb      	ldr	r3, [r7, #28]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d011      	beq.n	80112c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7f8 ff20 	bl	800a0f2 <lwip_htonl>
 80112b2:	4604      	mov	r4, r0
 80112b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7f8 ff19 	bl	800a0f2 <lwip_htonl>
 80112c0:	4603      	mov	r3, r0
 80112c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	dbe6      	blt.n	8011296 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80112c8:	69fb      	ldr	r3, [r7, #28]
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	e009      	b.n	80112ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80112d8:	6a3b      	ldr	r3, [r7, #32]
 80112da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	623b      	str	r3, [r7, #32]
 80112e4:	e002      	b.n	80112ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80112e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112e8:	f7fb ff01 	bl	800d0ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80112f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d012      	beq.n	801131e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80112f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	4618      	mov	r0, r3
 8011300:	f7f8 fef7 	bl	800a0f2 <lwip_htonl>
 8011304:	4602      	mov	r2, r0
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801130e:	8912      	ldrh	r2, [r2, #8]
 8011310:	4413      	add	r3, r2
  while (seg != NULL &&
 8011312:	69ba      	ldr	r2, [r7, #24]
 8011314:	429a      	cmp	r2, r3
 8011316:	f4bf aed9 	bcs.w	80110cc <tcp_output+0x160>
 801131a:	e000      	b.n	801131e <tcp_output+0x3b2>
      break;
 801131c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011322:	2b00      	cmp	r3, #0
 8011324:	d108      	bne.n	8011338 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801132e:	e004      	b.n	801133a <tcp_output+0x3ce>
    goto output_done;
 8011330:	bf00      	nop
 8011332:	e002      	b.n	801133a <tcp_output+0x3ce>
    goto output_done;
 8011334:	bf00      	nop
 8011336:	e000      	b.n	801133a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011338:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	8b5b      	ldrh	r3, [r3, #26]
 801133e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011342:	b29a      	uxth	r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011348:	2300      	movs	r3, #0
}
 801134a:	4618      	mov	r0, r3
 801134c:	3728      	adds	r7, #40	@ 0x28
 801134e:	46bd      	mov	sp, r7
 8011350:	bdb0      	pop	{r4, r5, r7, pc}
 8011352:	bf00      	nop

08011354 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d106      	bne.n	8011370 <tcp_output_segment_busy+0x1c>
 8011362:	4b09      	ldr	r3, [pc, #36]	@ (8011388 <tcp_output_segment_busy+0x34>)
 8011364:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011368:	4908      	ldr	r1, [pc, #32]	@ (801138c <tcp_output_segment_busy+0x38>)
 801136a:	4809      	ldr	r0, [pc, #36]	@ (8011390 <tcp_output_segment_busy+0x3c>)
 801136c:	f006 fa48 	bl	8017800 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	7b9b      	ldrb	r3, [r3, #14]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d001      	beq.n	801137e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801137a:	2301      	movs	r3, #1
 801137c:	e000      	b.n	8011380 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801137e:	2300      	movs	r3, #0
}
 8011380:	4618      	mov	r0, r3
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	0801b5e0 	.word	0x0801b5e0
 801138c:	0801bb7c 	.word	0x0801bb7c
 8011390:	0801b634 	.word	0x0801b634

08011394 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011394:	b5b0      	push	{r4, r5, r7, lr}
 8011396:	b08c      	sub	sp, #48	@ 0x30
 8011398:	af04      	add	r7, sp, #16
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d106      	bne.n	80113b4 <tcp_output_segment+0x20>
 80113a6:	4b64      	ldr	r3, [pc, #400]	@ (8011538 <tcp_output_segment+0x1a4>)
 80113a8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80113ac:	4963      	ldr	r1, [pc, #396]	@ (801153c <tcp_output_segment+0x1a8>)
 80113ae:	4864      	ldr	r0, [pc, #400]	@ (8011540 <tcp_output_segment+0x1ac>)
 80113b0:	f006 fa26 	bl	8017800 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <tcp_output_segment+0x34>
 80113ba:	4b5f      	ldr	r3, [pc, #380]	@ (8011538 <tcp_output_segment+0x1a4>)
 80113bc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80113c0:	4960      	ldr	r1, [pc, #384]	@ (8011544 <tcp_output_segment+0x1b0>)
 80113c2:	485f      	ldr	r0, [pc, #380]	@ (8011540 <tcp_output_segment+0x1ac>)
 80113c4:	f006 fa1c 	bl	8017800 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d106      	bne.n	80113dc <tcp_output_segment+0x48>
 80113ce:	4b5a      	ldr	r3, [pc, #360]	@ (8011538 <tcp_output_segment+0x1a4>)
 80113d0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80113d4:	495c      	ldr	r1, [pc, #368]	@ (8011548 <tcp_output_segment+0x1b4>)
 80113d6:	485a      	ldr	r0, [pc, #360]	@ (8011540 <tcp_output_segment+0x1ac>)
 80113d8:	f006 fa12 	bl	8017800 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f7ff ffb9 	bl	8011354 <tcp_output_segment_busy>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d001      	beq.n	80113ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	e0a1      	b.n	8011530 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	68dc      	ldr	r4, [r3, #12]
 80113f4:	4610      	mov	r0, r2
 80113f6:	f7f8 fe7c 	bl	800a0f2 <lwip_htonl>
 80113fa:	4603      	mov	r3, r0
 80113fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	68dc      	ldr	r4, [r3, #12]
 8011406:	4610      	mov	r0, r2
 8011408:	f7f8 fe5e 	bl	800a0c8 <lwip_htons>
 801140c:	4603      	mov	r3, r0
 801140e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011414:	68ba      	ldr	r2, [r7, #8]
 8011416:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011418:	441a      	add	r2, r3
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	3314      	adds	r3, #20
 8011424:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	7a9b      	ldrb	r3, [r3, #10]
 801142a:	f003 0301 	and.w	r3, r3, #1
 801142e:	2b00      	cmp	r3, #0
 8011430:	d015      	beq.n	801145e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	3304      	adds	r3, #4
 8011436:	461a      	mov	r2, r3
 8011438:	6879      	ldr	r1, [r7, #4]
 801143a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801143e:	f7fc fa39 	bl	800d8b4 <tcp_eff_send_mss_netif>
 8011442:	4603      	mov	r3, r0
 8011444:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011446:	8b7b      	ldrh	r3, [r7, #26]
 8011448:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801144c:	4618      	mov	r0, r3
 801144e:	f7f8 fe50 	bl	800a0f2 <lwip_htonl>
 8011452:	4602      	mov	r2, r0
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	3304      	adds	r3, #4
 801145c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011464:	2b00      	cmp	r3, #0
 8011466:	da02      	bge.n	801146e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	2200      	movs	r2, #0
 801146c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011472:	2b00      	cmp	r3, #0
 8011474:	d10c      	bne.n	8011490 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011476:	4b35      	ldr	r3, [pc, #212]	@ (801154c <tcp_output_segment+0x1b8>)
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	4618      	mov	r0, r3
 8011486:	f7f8 fe34 	bl	800a0f2 <lwip_htonl>
 801148a:	4602      	mov	r2, r0
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	68da      	ldr	r2, [r3, #12]
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	1ad3      	subs	r3, r2, r3
 801149c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	8959      	ldrh	r1, [r3, #10]
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	8b3a      	ldrh	r2, [r7, #24]
 80114aa:	1a8a      	subs	r2, r1, r2
 80114ac:	b292      	uxth	r2, r2
 80114ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	8919      	ldrh	r1, [r3, #8]
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	8b3a      	ldrh	r2, [r7, #24]
 80114bc:	1a8a      	subs	r2, r1, r2
 80114be:	b292      	uxth	r2, r2
 80114c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	68fa      	ldr	r2, [r7, #12]
 80114c8:	68d2      	ldr	r2, [r2, #12]
 80114ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	2200      	movs	r2, #0
 80114d2:	741a      	strb	r2, [r3, #16]
 80114d4:	2200      	movs	r2, #0
 80114d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	68da      	ldr	r2, [r3, #12]
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	7a9b      	ldrb	r3, [r3, #10]
 80114e0:	f003 0301 	and.w	r3, r3, #1
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d001      	beq.n	80114ec <tcp_output_segment+0x158>
 80114e8:	2318      	movs	r3, #24
 80114ea:	e000      	b.n	80114ee <tcp_output_segment+0x15a>
 80114ec:	2314      	movs	r3, #20
 80114ee:	4413      	add	r3, r2
 80114f0:	69fa      	ldr	r2, [r7, #28]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d006      	beq.n	8011504 <tcp_output_segment+0x170>
 80114f6:	4b10      	ldr	r3, [pc, #64]	@ (8011538 <tcp_output_segment+0x1a4>)
 80114f8:	f240 621c 	movw	r2, #1564	@ 0x61c
 80114fc:	4914      	ldr	r1, [pc, #80]	@ (8011550 <tcp_output_segment+0x1bc>)
 80114fe:	4810      	ldr	r0, [pc, #64]	@ (8011540 <tcp_output_segment+0x1ac>)
 8011500:	f006 f97e 	bl	8017800 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6858      	ldr	r0, [r3, #4]
 8011508:	68b9      	ldr	r1, [r7, #8]
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	1d1c      	adds	r4, r3, #4
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	7add      	ldrb	r5, [r3, #11]
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	7a9b      	ldrb	r3, [r3, #10]
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	9202      	str	r2, [sp, #8]
 801151a:	2206      	movs	r2, #6
 801151c:	9201      	str	r2, [sp, #4]
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	462b      	mov	r3, r5
 8011522:	4622      	mov	r2, r4
 8011524:	f004 fbe6 	bl	8015cf4 <ip4_output_if>
 8011528:	4603      	mov	r3, r0
 801152a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801152c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3720      	adds	r7, #32
 8011534:	46bd      	mov	sp, r7
 8011536:	bdb0      	pop	{r4, r5, r7, pc}
 8011538:	0801b5e0 	.word	0x0801b5e0
 801153c:	0801bba4 	.word	0x0801bba4
 8011540:	0801b634 	.word	0x0801b634
 8011544:	0801bbc4 	.word	0x0801bbc4
 8011548:	0801bbe4 	.word	0x0801bbe4
 801154c:	20008fa8 	.word	0x20008fa8
 8011550:	0801bc08 	.word	0x0801bc08

08011554 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011554:	b5b0      	push	{r4, r5, r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d106      	bne.n	8011570 <tcp_rexmit_rto_prepare+0x1c>
 8011562:	4b31      	ldr	r3, [pc, #196]	@ (8011628 <tcp_rexmit_rto_prepare+0xd4>)
 8011564:	f240 6263 	movw	r2, #1635	@ 0x663
 8011568:	4930      	ldr	r1, [pc, #192]	@ (801162c <tcp_rexmit_rto_prepare+0xd8>)
 801156a:	4831      	ldr	r0, [pc, #196]	@ (8011630 <tcp_rexmit_rto_prepare+0xdc>)
 801156c:	f006 f948 	bl	8017800 <iprintf>

  if (pcb->unacked == NULL) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011574:	2b00      	cmp	r3, #0
 8011576:	d102      	bne.n	801157e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011578:	f06f 0305 	mvn.w	r3, #5
 801157c:	e050      	b.n	8011620 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011582:	60fb      	str	r3, [r7, #12]
 8011584:	e00b      	b.n	801159e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	f7ff fee4 	bl	8011354 <tcp_output_segment_busy>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d002      	beq.n	8011598 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011592:	f06f 0305 	mvn.w	r3, #5
 8011596:	e043      	b.n	8011620 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	60fb      	str	r3, [r7, #12]
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d1ef      	bne.n	8011586 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f7ff fed4 	bl	8011354 <tcp_output_segment_busy>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d002      	beq.n	80115b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80115b2:	f06f 0305 	mvn.w	r3, #5
 80115b6:	e033      	b.n	8011620 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2200      	movs	r2, #0
 80115cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	8b5b      	ldrh	r3, [r3, #26]
 80115d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80115d6:	b29a      	uxth	r2, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7f8 fd85 	bl	800a0f2 <lwip_htonl>
 80115e8:	4604      	mov	r4, r0
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	891b      	ldrh	r3, [r3, #8]
 80115ee:	461d      	mov	r5, r3
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	899b      	ldrh	r3, [r3, #12]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7f8 fd65 	bl	800a0c8 <lwip_htons>
 80115fe:	4603      	mov	r3, r0
 8011600:	b2db      	uxtb	r3, r3
 8011602:	f003 0303 	and.w	r3, r3, #3
 8011606:	2b00      	cmp	r3, #0
 8011608:	d001      	beq.n	801160e <tcp_rexmit_rto_prepare+0xba>
 801160a:	2301      	movs	r3, #1
 801160c:	e000      	b.n	8011610 <tcp_rexmit_rto_prepare+0xbc>
 801160e:	2300      	movs	r3, #0
 8011610:	442b      	add	r3, r5
 8011612:	18e2      	adds	r2, r4, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801161e:	2300      	movs	r3, #0
}
 8011620:	4618      	mov	r0, r3
 8011622:	3710      	adds	r7, #16
 8011624:	46bd      	mov	sp, r7
 8011626:	bdb0      	pop	{r4, r5, r7, pc}
 8011628:	0801b5e0 	.word	0x0801b5e0
 801162c:	0801bc1c 	.word	0x0801bc1c
 8011630:	0801b634 	.word	0x0801b634

08011634 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d106      	bne.n	8011650 <tcp_rexmit_rto_commit+0x1c>
 8011642:	4b0d      	ldr	r3, [pc, #52]	@ (8011678 <tcp_rexmit_rto_commit+0x44>)
 8011644:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011648:	490c      	ldr	r1, [pc, #48]	@ (801167c <tcp_rexmit_rto_commit+0x48>)
 801164a:	480d      	ldr	r0, [pc, #52]	@ (8011680 <tcp_rexmit_rto_commit+0x4c>)
 801164c:	f006 f8d8 	bl	8017800 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011656:	2bff      	cmp	r3, #255	@ 0xff
 8011658:	d007      	beq.n	801166a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011660:	3301      	adds	r3, #1
 8011662:	b2da      	uxtb	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f7ff fc7e 	bl	8010f6c <tcp_output>
}
 8011670:	bf00      	nop
 8011672:	3708      	adds	r7, #8
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	0801b5e0 	.word	0x0801b5e0
 801167c:	0801bc40 	.word	0x0801bc40
 8011680:	0801b634 	.word	0x0801b634

08011684 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d106      	bne.n	80116a0 <tcp_rexmit_rto+0x1c>
 8011692:	4b0a      	ldr	r3, [pc, #40]	@ (80116bc <tcp_rexmit_rto+0x38>)
 8011694:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011698:	4909      	ldr	r1, [pc, #36]	@ (80116c0 <tcp_rexmit_rto+0x3c>)
 801169a:	480a      	ldr	r0, [pc, #40]	@ (80116c4 <tcp_rexmit_rto+0x40>)
 801169c:	f006 f8b0 	bl	8017800 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f7ff ff57 	bl	8011554 <tcp_rexmit_rto_prepare>
 80116a6:	4603      	mov	r3, r0
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d102      	bne.n	80116b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f7ff ffc1 	bl	8011634 <tcp_rexmit_rto_commit>
  }
}
 80116b2:	bf00      	nop
 80116b4:	3708      	adds	r7, #8
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	0801b5e0 	.word	0x0801b5e0
 80116c0:	0801bc64 	.word	0x0801bc64
 80116c4:	0801b634 	.word	0x0801b634

080116c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80116c8:	b590      	push	{r4, r7, lr}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d106      	bne.n	80116e4 <tcp_rexmit+0x1c>
 80116d6:	4b2f      	ldr	r3, [pc, #188]	@ (8011794 <tcp_rexmit+0xcc>)
 80116d8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80116dc:	492e      	ldr	r1, [pc, #184]	@ (8011798 <tcp_rexmit+0xd0>)
 80116de:	482f      	ldr	r0, [pc, #188]	@ (801179c <tcp_rexmit+0xd4>)
 80116e0:	f006 f88e 	bl	8017800 <iprintf>

  if (pcb->unacked == NULL) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d102      	bne.n	80116f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80116ec:	f06f 0305 	mvn.w	r3, #5
 80116f0:	e04c      	b.n	801178c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80116f8:	68b8      	ldr	r0, [r7, #8]
 80116fa:	f7ff fe2b 	bl	8011354 <tcp_output_segment_busy>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d002      	beq.n	801170a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011704:	f06f 0305 	mvn.w	r3, #5
 8011708:	e040      	b.n	801178c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	336c      	adds	r3, #108	@ 0x6c
 8011716:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011718:	e002      	b.n	8011720 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d011      	beq.n	801174c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	4618      	mov	r0, r3
 8011732:	f7f8 fcde 	bl	800a0f2 <lwip_htonl>
 8011736:	4604      	mov	r4, r0
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	4618      	mov	r0, r3
 8011740:	f7f8 fcd7 	bl	800a0f2 <lwip_htonl>
 8011744:	4603      	mov	r3, r0
 8011746:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011748:	2b00      	cmp	r3, #0
 801174a:	dbe6      	blt.n	801171a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	68ba      	ldr	r2, [r7, #8]
 8011758:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d103      	bne.n	801176a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2200      	movs	r2, #0
 8011766:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011770:	2bff      	cmp	r3, #255	@ 0xff
 8011772:	d007      	beq.n	8011784 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801177a:	3301      	adds	r3, #1
 801177c:	b2da      	uxtb	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801178a:	2300      	movs	r3, #0
}
 801178c:	4618      	mov	r0, r3
 801178e:	3714      	adds	r7, #20
 8011790:	46bd      	mov	sp, r7
 8011792:	bd90      	pop	{r4, r7, pc}
 8011794:	0801b5e0 	.word	0x0801b5e0
 8011798:	0801bc80 	.word	0x0801bc80
 801179c:	0801b634 	.word	0x0801b634

080117a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d106      	bne.n	80117bc <tcp_rexmit_fast+0x1c>
 80117ae:	4b2a      	ldr	r3, [pc, #168]	@ (8011858 <tcp_rexmit_fast+0xb8>)
 80117b0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80117b4:	4929      	ldr	r1, [pc, #164]	@ (801185c <tcp_rexmit_fast+0xbc>)
 80117b6:	482a      	ldr	r0, [pc, #168]	@ (8011860 <tcp_rexmit_fast+0xc0>)
 80117b8:	f006 f822 	bl	8017800 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d045      	beq.n	8011850 <tcp_rexmit_fast+0xb0>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	8b5b      	ldrh	r3, [r3, #26]
 80117c8:	f003 0304 	and.w	r3, r3, #4
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d13f      	bne.n	8011850 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f7ff ff79 	bl	80116c8 <tcp_rexmit>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d139      	bne.n	8011850 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80117e8:	4293      	cmp	r3, r2
 80117ea:	bf28      	it	cs
 80117ec:	4613      	movcs	r3, r2
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	da00      	bge.n	80117f6 <tcp_rexmit_fast+0x56>
 80117f4:	3301      	adds	r3, #1
 80117f6:	105b      	asrs	r3, r3, #1
 80117f8:	b29a      	uxth	r2, r3
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011806:	461a      	mov	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801180c:	005b      	lsls	r3, r3, #1
 801180e:	429a      	cmp	r2, r3
 8011810:	d206      	bcs.n	8011820 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	b29a      	uxth	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801182a:	4619      	mov	r1, r3
 801182c:	0049      	lsls	r1, r1, #1
 801182e:	440b      	add	r3, r1
 8011830:	b29b      	uxth	r3, r3
 8011832:	4413      	add	r3, r2
 8011834:	b29a      	uxth	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	8b5b      	ldrh	r3, [r3, #26]
 8011840:	f043 0304 	orr.w	r3, r3, #4
 8011844:	b29a      	uxth	r2, r3
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2200      	movs	r2, #0
 801184e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011850:	bf00      	nop
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	0801b5e0 	.word	0x0801b5e0
 801185c:	0801bc98 	.word	0x0801bc98
 8011860:	0801b634 	.word	0x0801b634

08011864 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	607b      	str	r3, [r7, #4]
 801186e:	460b      	mov	r3, r1
 8011870:	817b      	strh	r3, [r7, #10]
 8011872:	4613      	mov	r3, r2
 8011874:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011876:	897a      	ldrh	r2, [r7, #10]
 8011878:	893b      	ldrh	r3, [r7, #8]
 801187a:	4413      	add	r3, r2
 801187c:	b29b      	uxth	r3, r3
 801187e:	3314      	adds	r3, #20
 8011880:	b29b      	uxth	r3, r3
 8011882:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011886:	4619      	mov	r1, r3
 8011888:	2022      	movs	r0, #34	@ 0x22
 801188a:	f7f9 fd0d 	bl	800b2a8 <pbuf_alloc>
 801188e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d04d      	beq.n	8011932 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011896:	897b      	ldrh	r3, [r7, #10]
 8011898:	3313      	adds	r3, #19
 801189a:	697a      	ldr	r2, [r7, #20]
 801189c:	8952      	ldrh	r2, [r2, #10]
 801189e:	4293      	cmp	r3, r2
 80118a0:	db06      	blt.n	80118b0 <tcp_output_alloc_header_common+0x4c>
 80118a2:	4b26      	ldr	r3, [pc, #152]	@ (801193c <tcp_output_alloc_header_common+0xd8>)
 80118a4:	f240 7223 	movw	r2, #1827	@ 0x723
 80118a8:	4925      	ldr	r1, [pc, #148]	@ (8011940 <tcp_output_alloc_header_common+0xdc>)
 80118aa:	4826      	ldr	r0, [pc, #152]	@ (8011944 <tcp_output_alloc_header_common+0xe0>)
 80118ac:	f005 ffa8 	bl	8017800 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80118b6:	8c3b      	ldrh	r3, [r7, #32]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7f8 fc05 	bl	800a0c8 <lwip_htons>
 80118be:	4603      	mov	r3, r0
 80118c0:	461a      	mov	r2, r3
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80118c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7f8 fbfd 	bl	800a0c8 <lwip_htons>
 80118ce:	4603      	mov	r3, r0
 80118d0:	461a      	mov	r2, r3
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80118dc:	68f8      	ldr	r0, [r7, #12]
 80118de:	f7f8 fc08 	bl	800a0f2 <lwip_htonl>
 80118e2:	4602      	mov	r2, r0
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80118e8:	897b      	ldrh	r3, [r7, #10]
 80118ea:	089b      	lsrs	r3, r3, #2
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	3305      	adds	r3, #5
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	031b      	lsls	r3, r3, #12
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	4313      	orrs	r3, r2
 80118fe:	b29b      	uxth	r3, r3
 8011900:	4618      	mov	r0, r3
 8011902:	f7f8 fbe1 	bl	800a0c8 <lwip_htons>
 8011906:	4603      	mov	r3, r0
 8011908:	461a      	mov	r2, r3
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801190e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011910:	4618      	mov	r0, r3
 8011912:	f7f8 fbd9 	bl	800a0c8 <lwip_htons>
 8011916:	4603      	mov	r3, r0
 8011918:	461a      	mov	r2, r3
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	2200      	movs	r2, #0
 8011922:	741a      	strb	r2, [r3, #16]
 8011924:	2200      	movs	r2, #0
 8011926:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	2200      	movs	r2, #0
 801192c:	749a      	strb	r2, [r3, #18]
 801192e:	2200      	movs	r2, #0
 8011930:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011932:	697b      	ldr	r3, [r7, #20]
}
 8011934:	4618      	mov	r0, r3
 8011936:	3718      	adds	r7, #24
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	0801b5e0 	.word	0x0801b5e0
 8011940:	0801bcb8 	.word	0x0801bcb8
 8011944:	0801b634 	.word	0x0801b634

08011948 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011948:	b5b0      	push	{r4, r5, r7, lr}
 801194a:	b08a      	sub	sp, #40	@ 0x28
 801194c:	af04      	add	r7, sp, #16
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	607b      	str	r3, [r7, #4]
 8011952:	460b      	mov	r3, r1
 8011954:	817b      	strh	r3, [r7, #10]
 8011956:	4613      	mov	r3, r2
 8011958:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d106      	bne.n	801196e <tcp_output_alloc_header+0x26>
 8011960:	4b15      	ldr	r3, [pc, #84]	@ (80119b8 <tcp_output_alloc_header+0x70>)
 8011962:	f240 7242 	movw	r2, #1858	@ 0x742
 8011966:	4915      	ldr	r1, [pc, #84]	@ (80119bc <tcp_output_alloc_header+0x74>)
 8011968:	4815      	ldr	r0, [pc, #84]	@ (80119c0 <tcp_output_alloc_header+0x78>)
 801196a:	f005 ff49 	bl	8017800 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	8adb      	ldrh	r3, [r3, #22]
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	8b12      	ldrh	r2, [r2, #24]
 801197a:	68f9      	ldr	r1, [r7, #12]
 801197c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801197e:	893d      	ldrh	r5, [r7, #8]
 8011980:	897c      	ldrh	r4, [r7, #10]
 8011982:	9103      	str	r1, [sp, #12]
 8011984:	2110      	movs	r1, #16
 8011986:	9102      	str	r1, [sp, #8]
 8011988:	9201      	str	r2, [sp, #4]
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	462a      	mov	r2, r5
 8011990:	4621      	mov	r1, r4
 8011992:	f7ff ff67 	bl	8011864 <tcp_output_alloc_header_common>
 8011996:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d006      	beq.n	80119ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119a2:	68fa      	ldr	r2, [r7, #12]
 80119a4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80119a6:	441a      	add	r2, r3
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80119ac:	697b      	ldr	r3, [r7, #20]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3718      	adds	r7, #24
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bdb0      	pop	{r4, r5, r7, pc}
 80119b6:	bf00      	nop
 80119b8:	0801b5e0 	.word	0x0801b5e0
 80119bc:	0801bce8 	.word	0x0801bce8
 80119c0:	0801b634 	.word	0x0801b634

080119c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b088      	sub	sp, #32
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	60b9      	str	r1, [r7, #8]
 80119ce:	4611      	mov	r1, r2
 80119d0:	461a      	mov	r2, r3
 80119d2:	460b      	mov	r3, r1
 80119d4:	71fb      	strb	r3, [r7, #7]
 80119d6:	4613      	mov	r3, r2
 80119d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80119da:	2300      	movs	r3, #0
 80119dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d106      	bne.n	80119f2 <tcp_output_fill_options+0x2e>
 80119e4:	4b12      	ldr	r3, [pc, #72]	@ (8011a30 <tcp_output_fill_options+0x6c>)
 80119e6:	f240 7256 	movw	r2, #1878	@ 0x756
 80119ea:	4912      	ldr	r1, [pc, #72]	@ (8011a34 <tcp_output_fill_options+0x70>)
 80119ec:	4812      	ldr	r0, [pc, #72]	@ (8011a38 <tcp_output_fill_options+0x74>)
 80119ee:	f005 ff07 	bl	8017800 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	3314      	adds	r3, #20
 80119fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80119fe:	8bfb      	ldrh	r3, [r7, #30]
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	461a      	mov	r2, r3
 8011a04:	79fb      	ldrb	r3, [r7, #7]
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	f003 0304 	and.w	r3, r3, #4
 8011a0c:	4413      	add	r3, r2
 8011a0e:	3314      	adds	r3, #20
 8011a10:	69ba      	ldr	r2, [r7, #24]
 8011a12:	4413      	add	r3, r2
 8011a14:	697a      	ldr	r2, [r7, #20]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d006      	beq.n	8011a28 <tcp_output_fill_options+0x64>
 8011a1a:	4b05      	ldr	r3, [pc, #20]	@ (8011a30 <tcp_output_fill_options+0x6c>)
 8011a1c:	f240 7275 	movw	r2, #1909	@ 0x775
 8011a20:	4906      	ldr	r1, [pc, #24]	@ (8011a3c <tcp_output_fill_options+0x78>)
 8011a22:	4805      	ldr	r0, [pc, #20]	@ (8011a38 <tcp_output_fill_options+0x74>)
 8011a24:	f005 feec 	bl	8017800 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011a28:	bf00      	nop
 8011a2a:	3720      	adds	r7, #32
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	0801b5e0 	.word	0x0801b5e0
 8011a34:	0801bd10 	.word	0x0801bd10
 8011a38:	0801b634 	.word	0x0801b634
 8011a3c:	0801bc08 	.word	0x0801bc08

08011a40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b08a      	sub	sp, #40	@ 0x28
 8011a44:	af04      	add	r7, sp, #16
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	60b9      	str	r1, [r7, #8]
 8011a4a:	607a      	str	r2, [r7, #4]
 8011a4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d106      	bne.n	8011a62 <tcp_output_control_segment+0x22>
 8011a54:	4b1c      	ldr	r3, [pc, #112]	@ (8011ac8 <tcp_output_control_segment+0x88>)
 8011a56:	f240 7287 	movw	r2, #1927	@ 0x787
 8011a5a:	491c      	ldr	r1, [pc, #112]	@ (8011acc <tcp_output_control_segment+0x8c>)
 8011a5c:	481c      	ldr	r0, [pc, #112]	@ (8011ad0 <tcp_output_control_segment+0x90>)
 8011a5e:	f005 fecf 	bl	8017800 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011a62:	683a      	ldr	r2, [r7, #0]
 8011a64:	6879      	ldr	r1, [r7, #4]
 8011a66:	68f8      	ldr	r0, [r7, #12]
 8011a68:	f7fe faea 	bl	8010040 <tcp_route>
 8011a6c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d102      	bne.n	8011a7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011a74:	23fc      	movs	r3, #252	@ 0xfc
 8011a76:	75fb      	strb	r3, [r7, #23]
 8011a78:	e01c      	b.n	8011ab4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d006      	beq.n	8011a8e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	7adb      	ldrb	r3, [r3, #11]
 8011a84:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	7a9b      	ldrb	r3, [r3, #10]
 8011a8a:	757b      	strb	r3, [r7, #21]
 8011a8c:	e003      	b.n	8011a96 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011a8e:	23ff      	movs	r3, #255	@ 0xff
 8011a90:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011a92:	2300      	movs	r3, #0
 8011a94:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011a96:	7dba      	ldrb	r2, [r7, #22]
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	9302      	str	r3, [sp, #8]
 8011a9c:	2306      	movs	r3, #6
 8011a9e:	9301      	str	r3, [sp, #4]
 8011aa0:	7d7b      	ldrb	r3, [r7, #21]
 8011aa2:	9300      	str	r3, [sp, #0]
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	683a      	ldr	r2, [r7, #0]
 8011aa8:	6879      	ldr	r1, [r7, #4]
 8011aaa:	68b8      	ldr	r0, [r7, #8]
 8011aac:	f004 f922 	bl	8015cf4 <ip4_output_if>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011ab4:	68b8      	ldr	r0, [r7, #8]
 8011ab6:	f7f9 fedb 	bl	800b870 <pbuf_free>
  return err;
 8011aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3718      	adds	r7, #24
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	0801b5e0 	.word	0x0801b5e0
 8011acc:	0801bd38 	.word	0x0801bd38
 8011ad0:	0801b634 	.word	0x0801b634

08011ad4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011ad4:	b590      	push	{r4, r7, lr}
 8011ad6:	b08b      	sub	sp, #44	@ 0x2c
 8011ad8:	af04      	add	r7, sp, #16
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	60b9      	str	r1, [r7, #8]
 8011ade:	607a      	str	r2, [r7, #4]
 8011ae0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d106      	bne.n	8011af6 <tcp_rst+0x22>
 8011ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8011b68 <tcp_rst+0x94>)
 8011aea:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011aee:	491f      	ldr	r1, [pc, #124]	@ (8011b6c <tcp_rst+0x98>)
 8011af0:	481f      	ldr	r0, [pc, #124]	@ (8011b70 <tcp_rst+0x9c>)
 8011af2:	f005 fe85 	bl	8017800 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d106      	bne.n	8011b0a <tcp_rst+0x36>
 8011afc:	4b1a      	ldr	r3, [pc, #104]	@ (8011b68 <tcp_rst+0x94>)
 8011afe:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011b02:	491c      	ldr	r1, [pc, #112]	@ (8011b74 <tcp_rst+0xa0>)
 8011b04:	481a      	ldr	r0, [pc, #104]	@ (8011b70 <tcp_rst+0x9c>)
 8011b06:	f005 fe7b 	bl	8017800 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011b0e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011b12:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011b14:	7dfb      	ldrb	r3, [r7, #23]
 8011b16:	b29c      	uxth	r4, r3
 8011b18:	68b8      	ldr	r0, [r7, #8]
 8011b1a:	f7f8 faea 	bl	800a0f2 <lwip_htonl>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	8abb      	ldrh	r3, [r7, #20]
 8011b22:	9303      	str	r3, [sp, #12]
 8011b24:	2314      	movs	r3, #20
 8011b26:	9302      	str	r3, [sp, #8]
 8011b28:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011b2a:	9301      	str	r3, [sp, #4]
 8011b2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011b2e:	9300      	str	r3, [sp, #0]
 8011b30:	4613      	mov	r3, r2
 8011b32:	2200      	movs	r2, #0
 8011b34:	4621      	mov	r1, r4
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f7ff fe94 	bl	8011864 <tcp_output_alloc_header_common>
 8011b3c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00c      	beq.n	8011b5e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b44:	7dfb      	ldrb	r3, [r7, #23]
 8011b46:	2200      	movs	r2, #0
 8011b48:	6939      	ldr	r1, [r7, #16]
 8011b4a:	68f8      	ldr	r0, [r7, #12]
 8011b4c:	f7ff ff3a 	bl	80119c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b52:	683a      	ldr	r2, [r7, #0]
 8011b54:	6939      	ldr	r1, [r7, #16]
 8011b56:	68f8      	ldr	r0, [r7, #12]
 8011b58:	f7ff ff72 	bl	8011a40 <tcp_output_control_segment>
 8011b5c:	e000      	b.n	8011b60 <tcp_rst+0x8c>
    return;
 8011b5e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011b60:	371c      	adds	r7, #28
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd90      	pop	{r4, r7, pc}
 8011b66:	bf00      	nop
 8011b68:	0801b5e0 	.word	0x0801b5e0
 8011b6c:	0801bd64 	.word	0x0801bd64
 8011b70:	0801b634 	.word	0x0801b634
 8011b74:	0801bd80 	.word	0x0801bd80

08011b78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011b78:	b590      	push	{r4, r7, lr}
 8011b7a:	b087      	sub	sp, #28
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011b80:	2300      	movs	r3, #0
 8011b82:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011b84:	2300      	movs	r3, #0
 8011b86:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d106      	bne.n	8011b9c <tcp_send_empty_ack+0x24>
 8011b8e:	4b28      	ldr	r3, [pc, #160]	@ (8011c30 <tcp_send_empty_ack+0xb8>)
 8011b90:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011b94:	4927      	ldr	r1, [pc, #156]	@ (8011c34 <tcp_send_empty_ack+0xbc>)
 8011b96:	4828      	ldr	r0, [pc, #160]	@ (8011c38 <tcp_send_empty_ack+0xc0>)
 8011b98:	f005 fe32 	bl	8017800 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b9c:	7dfb      	ldrb	r3, [r7, #23]
 8011b9e:	009b      	lsls	r3, r3, #2
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	f003 0304 	and.w	r3, r3, #4
 8011ba6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011ba8:	7d7b      	ldrb	r3, [r7, #21]
 8011baa:	b29c      	uxth	r4, r3
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7f8 fa9e 	bl	800a0f2 <lwip_htonl>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2200      	movs	r2, #0
 8011bba:	4621      	mov	r1, r4
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f7ff fec3 	bl	8011948 <tcp_output_alloc_header>
 8011bc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d109      	bne.n	8011bde <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	8b5b      	ldrh	r3, [r3, #26]
 8011bce:	f043 0303 	orr.w	r3, r3, #3
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011bd8:	f06f 0301 	mvn.w	r3, #1
 8011bdc:	e023      	b.n	8011c26 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011bde:	7dbb      	ldrb	r3, [r7, #22]
 8011be0:	7dfa      	ldrb	r2, [r7, #23]
 8011be2:	6939      	ldr	r1, [r7, #16]
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f7ff feed 	bl	80119c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	6939      	ldr	r1, [r7, #16]
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f7ff ff24 	bl	8011a40 <tcp_output_control_segment>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d007      	beq.n	8011c14 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	8b5b      	ldrh	r3, [r3, #26]
 8011c08:	f043 0303 	orr.w	r3, r3, #3
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	835a      	strh	r2, [r3, #26]
 8011c12:	e006      	b.n	8011c22 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	8b5b      	ldrh	r3, [r3, #26]
 8011c18:	f023 0303 	bic.w	r3, r3, #3
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	371c      	adds	r7, #28
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd90      	pop	{r4, r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	0801b5e0 	.word	0x0801b5e0
 8011c34:	0801bd9c 	.word	0x0801bd9c
 8011c38:	0801b634 	.word	0x0801b634

08011c3c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011c3c:	b590      	push	{r4, r7, lr}
 8011c3e:	b087      	sub	sp, #28
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c44:	2300      	movs	r3, #0
 8011c46:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d106      	bne.n	8011c5c <tcp_keepalive+0x20>
 8011c4e:	4b18      	ldr	r3, [pc, #96]	@ (8011cb0 <tcp_keepalive+0x74>)
 8011c50:	f640 0224 	movw	r2, #2084	@ 0x824
 8011c54:	4917      	ldr	r1, [pc, #92]	@ (8011cb4 <tcp_keepalive+0x78>)
 8011c56:	4818      	ldr	r0, [pc, #96]	@ (8011cb8 <tcp_keepalive+0x7c>)
 8011c58:	f005 fdd2 	bl	8017800 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011c5c:	7dfb      	ldrb	r3, [r7, #23]
 8011c5e:	b29c      	uxth	r4, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c64:	3b01      	subs	r3, #1
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7f8 fa43 	bl	800a0f2 <lwip_htonl>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2200      	movs	r2, #0
 8011c70:	4621      	mov	r1, r4
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f7ff fe68 	bl	8011948 <tcp_output_alloc_header>
 8011c78:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d102      	bne.n	8011c86 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011c80:	f04f 33ff 	mov.w	r3, #4294967295
 8011c84:	e010      	b.n	8011ca8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c86:	7dfb      	ldrb	r3, [r7, #23]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	6939      	ldr	r1, [r7, #16]
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7ff fe99 	bl	80119c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	3304      	adds	r3, #4
 8011c98:	6939      	ldr	r1, [r7, #16]
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f7ff fed0 	bl	8011a40 <tcp_output_control_segment>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	371c      	adds	r7, #28
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd90      	pop	{r4, r7, pc}
 8011cb0:	0801b5e0 	.word	0x0801b5e0
 8011cb4:	0801bdbc 	.word	0x0801bdbc
 8011cb8:	0801b634 	.word	0x0801b634

08011cbc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011cbc:	b590      	push	{r4, r7, lr}
 8011cbe:	b08b      	sub	sp, #44	@ 0x2c
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d106      	bne.n	8011cde <tcp_zero_window_probe+0x22>
 8011cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8011e04 <tcp_zero_window_probe+0x148>)
 8011cd2:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011cd6:	494c      	ldr	r1, [pc, #304]	@ (8011e08 <tcp_zero_window_probe+0x14c>)
 8011cd8:	484c      	ldr	r0, [pc, #304]	@ (8011e0c <tcp_zero_window_probe+0x150>)
 8011cda:	f005 fd91 	bl	8017800 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ce2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011ce4:	6a3b      	ldr	r3, [r7, #32]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d101      	bne.n	8011cee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011cea:	2300      	movs	r3, #0
 8011cec:	e086      	b.n	8011dfc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011cf4:	2bff      	cmp	r3, #255	@ 0xff
 8011cf6:	d007      	beq.n	8011d08 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011cfe:	3301      	adds	r3, #1
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011d08:	6a3b      	ldr	r3, [r7, #32]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	899b      	ldrh	r3, [r3, #12]
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7f8 f9d9 	bl	800a0c8 <lwip_htons>
 8011d16:	4603      	mov	r3, r0
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	f003 0301 	and.w	r3, r3, #1
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d005      	beq.n	8011d2e <tcp_zero_window_probe+0x72>
 8011d22:	6a3b      	ldr	r3, [r7, #32]
 8011d24:	891b      	ldrh	r3, [r3, #8]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d101      	bne.n	8011d2e <tcp_zero_window_probe+0x72>
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e000      	b.n	8011d30 <tcp_zero_window_probe+0x74>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011d32:	7ffb      	ldrb	r3, [r7, #31]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	bf0c      	ite	eq
 8011d38:	2301      	moveq	r3, #1
 8011d3a:	2300      	movne	r3, #0
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d44:	b299      	uxth	r1, r3
 8011d46:	6a3b      	ldr	r3, [r7, #32]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	8bba      	ldrh	r2, [r7, #28]
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f7ff fdfa 	bl	8011948 <tcp_output_alloc_header>
 8011d54:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d102      	bne.n	8011d62 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d60:	e04c      	b.n	8011dfc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011d68:	7ffb      	ldrb	r3, [r7, #31]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d011      	beq.n	8011d92 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	899b      	ldrh	r3, [r3, #12]
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	b21b      	sxth	r3, r3
 8011d76:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011d7a:	b21c      	sxth	r4, r3
 8011d7c:	2011      	movs	r0, #17
 8011d7e:	f7f8 f9a3 	bl	800a0c8 <lwip_htons>
 8011d82:	4603      	mov	r3, r0
 8011d84:	b21b      	sxth	r3, r3
 8011d86:	4323      	orrs	r3, r4
 8011d88:	b21b      	sxth	r3, r3
 8011d8a:	b29a      	uxth	r2, r3
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	819a      	strh	r2, [r3, #12]
 8011d90:	e010      	b.n	8011db4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	3314      	adds	r3, #20
 8011d98:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011d9a:	6a3b      	ldr	r3, [r7, #32]
 8011d9c:	6858      	ldr	r0, [r3, #4]
 8011d9e:	6a3b      	ldr	r3, [r7, #32]
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	891a      	ldrh	r2, [r3, #8]
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	891b      	ldrh	r3, [r3, #8]
 8011da8:	1ad3      	subs	r3, r2, r3
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	2201      	movs	r2, #1
 8011dae:	6939      	ldr	r1, [r7, #16]
 8011db0:	f7f9 ff58 	bl	800bc64 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7f8 f999 	bl	800a0f2 <lwip_htonl>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	1ad3      	subs	r3, r2, r3
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	da02      	bge.n	8011dd8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	68fa      	ldr	r2, [r7, #12]
 8011dd6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ddc:	2200      	movs	r2, #0
 8011dde:	69b9      	ldr	r1, [r7, #24]
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f7ff fdef 	bl	80119c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	3304      	adds	r3, #4
 8011dec:	69b9      	ldr	r1, [r7, #24]
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f7ff fe26 	bl	8011a40 <tcp_output_control_segment>
 8011df4:	4603      	mov	r3, r0
 8011df6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011df8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	372c      	adds	r7, #44	@ 0x2c
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd90      	pop	{r4, r7, pc}
 8011e04:	0801b5e0 	.word	0x0801b5e0
 8011e08:	0801bdd8 	.word	0x0801bdd8
 8011e0c:	0801b634 	.word	0x0801b634

08011e10 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011e18:	f7fa f812 	bl	800be40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8011e48 <tcpip_tcp_timer+0x38>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d103      	bne.n	8011e2c <tcpip_tcp_timer+0x1c>
 8011e24:	4b09      	ldr	r3, [pc, #36]	@ (8011e4c <tcpip_tcp_timer+0x3c>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d005      	beq.n	8011e38 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	4908      	ldr	r1, [pc, #32]	@ (8011e50 <tcpip_tcp_timer+0x40>)
 8011e30:	20fa      	movs	r0, #250	@ 0xfa
 8011e32:	f000 f8f3 	bl	801201c <sys_timeout>
 8011e36:	e003      	b.n	8011e40 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011e38:	4b06      	ldr	r3, [pc, #24]	@ (8011e54 <tcpip_tcp_timer+0x44>)
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	601a      	str	r2, [r3, #0]
  }
}
 8011e3e:	bf00      	nop
 8011e40:	bf00      	nop
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	20008fb4 	.word	0x20008fb4
 8011e4c:	20008fb8 	.word	0x20008fb8
 8011e50:	08011e11 	.word	0x08011e11
 8011e54:	20009000 	.word	0x20009000

08011e58 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011e88 <tcp_timer_needed+0x30>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d10f      	bne.n	8011e84 <tcp_timer_needed+0x2c>
 8011e64:	4b09      	ldr	r3, [pc, #36]	@ (8011e8c <tcp_timer_needed+0x34>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d103      	bne.n	8011e74 <tcp_timer_needed+0x1c>
 8011e6c:	4b08      	ldr	r3, [pc, #32]	@ (8011e90 <tcp_timer_needed+0x38>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d007      	beq.n	8011e84 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011e74:	4b04      	ldr	r3, [pc, #16]	@ (8011e88 <tcp_timer_needed+0x30>)
 8011e76:	2201      	movs	r2, #1
 8011e78:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	4905      	ldr	r1, [pc, #20]	@ (8011e94 <tcp_timer_needed+0x3c>)
 8011e7e:	20fa      	movs	r0, #250	@ 0xfa
 8011e80:	f000 f8cc 	bl	801201c <sys_timeout>
  }
}
 8011e84:	bf00      	nop
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	20009000 	.word	0x20009000
 8011e8c:	20008fb4 	.word	0x20008fb4
 8011e90:	20008fb8 	.word	0x20008fb8
 8011e94:	08011e11 	.word	0x08011e11

08011e98 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b086      	sub	sp, #24
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011ea4:	2006      	movs	r0, #6
 8011ea6:	f7f8 fdf1 	bl	800aa8c <memp_malloc>
 8011eaa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d109      	bne.n	8011ec6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d151      	bne.n	8011f5c <sys_timeout_abs+0xc4>
 8011eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8011f64 <sys_timeout_abs+0xcc>)
 8011eba:	22be      	movs	r2, #190	@ 0xbe
 8011ebc:	492a      	ldr	r1, [pc, #168]	@ (8011f68 <sys_timeout_abs+0xd0>)
 8011ebe:	482b      	ldr	r0, [pc, #172]	@ (8011f6c <sys_timeout_abs+0xd4>)
 8011ec0:	f005 fc9e 	bl	8017800 <iprintf>
    return;
 8011ec4:	e04a      	b.n	8011f5c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	68ba      	ldr	r2, [r7, #8]
 8011ed0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011ede:	4b24      	ldr	r3, [pc, #144]	@ (8011f70 <sys_timeout_abs+0xd8>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d103      	bne.n	8011eee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011ee6:	4a22      	ldr	r2, [pc, #136]	@ (8011f70 <sys_timeout_abs+0xd8>)
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	6013      	str	r3, [r2, #0]
    return;
 8011eec:	e037      	b.n	8011f5e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8011f70 <sys_timeout_abs+0xd8>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	1ad3      	subs	r3, r2, r3
 8011efa:	0fdb      	lsrs	r3, r3, #31
 8011efc:	f003 0301 	and.w	r3, r3, #1
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d007      	beq.n	8011f16 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011f06:	4b1a      	ldr	r3, [pc, #104]	@ (8011f70 <sys_timeout_abs+0xd8>)
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011f0e:	4a18      	ldr	r2, [pc, #96]	@ (8011f70 <sys_timeout_abs+0xd8>)
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	e023      	b.n	8011f5e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f16:	4b16      	ldr	r3, [pc, #88]	@ (8011f70 <sys_timeout_abs+0xd8>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	617b      	str	r3, [r7, #20]
 8011f1c:	e01a      	b.n	8011f54 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00b      	beq.n	8011f3e <sys_timeout_abs+0xa6>
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	685a      	ldr	r2, [r3, #4]
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	1ad3      	subs	r3, r2, r3
 8011f32:	0fdb      	lsrs	r3, r3, #31
 8011f34:	f003 0301 	and.w	r3, r3, #1
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d007      	beq.n	8011f4e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	693a      	ldr	r2, [r7, #16]
 8011f4a:	601a      	str	r2, [r3, #0]
        break;
 8011f4c:	e007      	b.n	8011f5e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	617b      	str	r3, [r7, #20]
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d1e1      	bne.n	8011f1e <sys_timeout_abs+0x86>
 8011f5a:	e000      	b.n	8011f5e <sys_timeout_abs+0xc6>
    return;
 8011f5c:	bf00      	nop
      }
    }
  }
}
 8011f5e:	3718      	adds	r7, #24
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	0801bdfc 	.word	0x0801bdfc
 8011f68:	0801be30 	.word	0x0801be30
 8011f6c:	0801be70 	.word	0x0801be70
 8011f70:	20008ff8 	.word	0x20008ff8

08011f74 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b086      	sub	sp, #24
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	4798      	blx	r3

  now = sys_now();
 8011f86:	f7f6 faf5 	bl	8008574 <sys_now>
 8011f8a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	681a      	ldr	r2, [r3, #0]
 8011f90:	4b0f      	ldr	r3, [pc, #60]	@ (8011fd0 <lwip_cyclic_timer+0x5c>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4413      	add	r3, r2
 8011f96:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011f98:	68fa      	ldr	r2, [r7, #12]
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	1ad3      	subs	r3, r2, r3
 8011f9e:	0fdb      	lsrs	r3, r3, #31
 8011fa0:	f003 0301 	and.w	r3, r3, #1
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d009      	beq.n	8011fbe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	4907      	ldr	r1, [pc, #28]	@ (8011fd4 <lwip_cyclic_timer+0x60>)
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7ff ff6e 	bl	8011e98 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011fbc:	e004      	b.n	8011fc8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011fbe:	687a      	ldr	r2, [r7, #4]
 8011fc0:	4904      	ldr	r1, [pc, #16]	@ (8011fd4 <lwip_cyclic_timer+0x60>)
 8011fc2:	68f8      	ldr	r0, [r7, #12]
 8011fc4:	f7ff ff68 	bl	8011e98 <sys_timeout_abs>
}
 8011fc8:	bf00      	nop
 8011fca:	3718      	adds	r7, #24
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}
 8011fd0:	20008ffc 	.word	0x20008ffc
 8011fd4:	08011f75 	.word	0x08011f75

08011fd8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fde:	2301      	movs	r3, #1
 8011fe0:	607b      	str	r3, [r7, #4]
 8011fe2:	e00e      	b.n	8012002 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8012014 <sys_timeouts_init+0x3c>)
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	00db      	lsls	r3, r3, #3
 8011ff0:	4a08      	ldr	r2, [pc, #32]	@ (8012014 <sys_timeouts_init+0x3c>)
 8011ff2:	4413      	add	r3, r2
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	4908      	ldr	r1, [pc, #32]	@ (8012018 <sys_timeouts_init+0x40>)
 8011ff8:	f000 f810 	bl	801201c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	3301      	adds	r3, #1
 8012000:	607b      	str	r3, [r7, #4]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2b04      	cmp	r3, #4
 8012006:	d9ed      	bls.n	8011fe4 <sys_timeouts_init+0xc>
  }
}
 8012008:	bf00      	nop
 801200a:	bf00      	nop
 801200c:	3708      	adds	r7, #8
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	08020454 	.word	0x08020454
 8012018:	08011f75 	.word	0x08011f75

0801201c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b086      	sub	sp, #24
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801202e:	d306      	bcc.n	801203e <sys_timeout+0x22>
 8012030:	4b0a      	ldr	r3, [pc, #40]	@ (801205c <sys_timeout+0x40>)
 8012032:	f240 1229 	movw	r2, #297	@ 0x129
 8012036:	490a      	ldr	r1, [pc, #40]	@ (8012060 <sys_timeout+0x44>)
 8012038:	480a      	ldr	r0, [pc, #40]	@ (8012064 <sys_timeout+0x48>)
 801203a:	f005 fbe1 	bl	8017800 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801203e:	f7f6 fa99 	bl	8008574 <sys_now>
 8012042:	4602      	mov	r2, r0
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	4413      	add	r3, r2
 8012048:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	68b9      	ldr	r1, [r7, #8]
 801204e:	6978      	ldr	r0, [r7, #20]
 8012050:	f7ff ff22 	bl	8011e98 <sys_timeout_abs>
#endif
}
 8012054:	bf00      	nop
 8012056:	3718      	adds	r7, #24
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}
 801205c:	0801bdfc 	.word	0x0801bdfc
 8012060:	0801be98 	.word	0x0801be98
 8012064:	0801be70 	.word	0x0801be70

08012068 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b084      	sub	sp, #16
 801206c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801206e:	f7f6 fa81 	bl	8008574 <sys_now>
 8012072:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012074:	4b1a      	ldr	r3, [pc, #104]	@ (80120e0 <sys_check_timeouts+0x78>)
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	b2db      	uxtb	r3, r3
 801207a:	2b00      	cmp	r3, #0
 801207c:	d001      	beq.n	8012082 <sys_check_timeouts+0x1a>
 801207e:	f7f9 f8bd 	bl	800b1fc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012082:	4b18      	ldr	r3, [pc, #96]	@ (80120e4 <sys_check_timeouts+0x7c>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d022      	beq.n	80120d4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	68fa      	ldr	r2, [r7, #12]
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	0fdb      	lsrs	r3, r3, #31
 8012098:	f003 0301 	and.w	r3, r3, #1
 801209c:	b2db      	uxtb	r3, r3
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d11a      	bne.n	80120d8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	4a0f      	ldr	r2, [pc, #60]	@ (80120e4 <sys_check_timeouts+0x7c>)
 80120a8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	4a0b      	ldr	r2, [pc, #44]	@ (80120e8 <sys_check_timeouts+0x80>)
 80120bc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80120be:	68b9      	ldr	r1, [r7, #8]
 80120c0:	2006      	movs	r0, #6
 80120c2:	f7f8 fd53 	bl	800ab6c <memp_free>
    if (handler != NULL) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d0d3      	beq.n	8012074 <sys_check_timeouts+0xc>
      handler(arg);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6838      	ldr	r0, [r7, #0]
 80120d0:	4798      	blx	r3
  do {
 80120d2:	e7cf      	b.n	8012074 <sys_check_timeouts+0xc>
      return;
 80120d4:	bf00      	nop
 80120d6:	e000      	b.n	80120da <sys_check_timeouts+0x72>
      return;
 80120d8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80120da:	3710      	adds	r7, #16
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	20008fa5 	.word	0x20008fa5
 80120e4:	20008ff8 	.word	0x20008ff8
 80120e8:	20008ffc 	.word	0x20008ffc

080120ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80120f0:	f004 fe2e 	bl	8016d50 <rand>
 80120f4:	4603      	mov	r3, r0
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012102:	b29a      	uxth	r2, r3
 8012104:	4b01      	ldr	r3, [pc, #4]	@ (801210c <udp_init+0x20>)
 8012106:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012108:	bf00      	nop
 801210a:	bd80      	pop	{r7, pc}
 801210c:	20000034 	.word	0x20000034

08012110 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012116:	2300      	movs	r3, #0
 8012118:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801211a:	4b17      	ldr	r3, [pc, #92]	@ (8012178 <udp_new_port+0x68>)
 801211c:	881b      	ldrh	r3, [r3, #0]
 801211e:	1c5a      	adds	r2, r3, #1
 8012120:	b291      	uxth	r1, r2
 8012122:	4a15      	ldr	r2, [pc, #84]	@ (8012178 <udp_new_port+0x68>)
 8012124:	8011      	strh	r1, [r2, #0]
 8012126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801212a:	4293      	cmp	r3, r2
 801212c:	d103      	bne.n	8012136 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801212e:	4b12      	ldr	r3, [pc, #72]	@ (8012178 <udp_new_port+0x68>)
 8012130:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012134:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012136:	4b11      	ldr	r3, [pc, #68]	@ (801217c <udp_new_port+0x6c>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	603b      	str	r3, [r7, #0]
 801213c:	e011      	b.n	8012162 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	8a5a      	ldrh	r2, [r3, #18]
 8012142:	4b0d      	ldr	r3, [pc, #52]	@ (8012178 <udp_new_port+0x68>)
 8012144:	881b      	ldrh	r3, [r3, #0]
 8012146:	429a      	cmp	r2, r3
 8012148:	d108      	bne.n	801215c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801214a:	88fb      	ldrh	r3, [r7, #6]
 801214c:	3301      	adds	r3, #1
 801214e:	80fb      	strh	r3, [r7, #6]
 8012150:	88fb      	ldrh	r3, [r7, #6]
 8012152:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012156:	d3e0      	bcc.n	801211a <udp_new_port+0xa>
        return 0;
 8012158:	2300      	movs	r3, #0
 801215a:	e007      	b.n	801216c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	68db      	ldr	r3, [r3, #12]
 8012160:	603b      	str	r3, [r7, #0]
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d1ea      	bne.n	801213e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012168:	4b03      	ldr	r3, [pc, #12]	@ (8012178 <udp_new_port+0x68>)
 801216a:	881b      	ldrh	r3, [r3, #0]
}
 801216c:	4618      	mov	r0, r3
 801216e:	370c      	adds	r7, #12
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr
 8012178:	20000034 	.word	0x20000034
 801217c:	20009004 	.word	0x20009004

08012180 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	4613      	mov	r3, r2
 801218c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d105      	bne.n	80121a0 <udp_input_local_match+0x20>
 8012194:	4b27      	ldr	r3, [pc, #156]	@ (8012234 <udp_input_local_match+0xb4>)
 8012196:	2287      	movs	r2, #135	@ 0x87
 8012198:	4927      	ldr	r1, [pc, #156]	@ (8012238 <udp_input_local_match+0xb8>)
 801219a:	4828      	ldr	r0, [pc, #160]	@ (801223c <udp_input_local_match+0xbc>)
 801219c:	f005 fb30 	bl	8017800 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d105      	bne.n	80121b2 <udp_input_local_match+0x32>
 80121a6:	4b23      	ldr	r3, [pc, #140]	@ (8012234 <udp_input_local_match+0xb4>)
 80121a8:	2288      	movs	r2, #136	@ 0x88
 80121aa:	4925      	ldr	r1, [pc, #148]	@ (8012240 <udp_input_local_match+0xc0>)
 80121ac:	4823      	ldr	r0, [pc, #140]	@ (801223c <udp_input_local_match+0xbc>)
 80121ae:	f005 fb27 	bl	8017800 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	7a1b      	ldrb	r3, [r3, #8]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d00b      	beq.n	80121d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	7a1a      	ldrb	r2, [r3, #8]
 80121be:	4b21      	ldr	r3, [pc, #132]	@ (8012244 <udp_input_local_match+0xc4>)
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80121c6:	3301      	adds	r3, #1
 80121c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d001      	beq.n	80121d2 <udp_input_local_match+0x52>
    return 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	e02b      	b.n	801222a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80121d2:	79fb      	ldrb	r3, [r7, #7]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d018      	beq.n	801220a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d013      	beq.n	8012206 <udp_input_local_match+0x86>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d00f      	beq.n	8012206 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80121e6:	4b17      	ldr	r3, [pc, #92]	@ (8012244 <udp_input_local_match+0xc4>)
 80121e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80121ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ee:	d00a      	beq.n	8012206 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	4b13      	ldr	r3, [pc, #76]	@ (8012244 <udp_input_local_match+0xc4>)
 80121f6:	695b      	ldr	r3, [r3, #20]
 80121f8:	405a      	eors	r2, r3
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	3308      	adds	r3, #8
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012202:	2b00      	cmp	r3, #0
 8012204:	d110      	bne.n	8012228 <udp_input_local_match+0xa8>
          return 1;
 8012206:	2301      	movs	r3, #1
 8012208:	e00f      	b.n	801222a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d009      	beq.n	8012224 <udp_input_local_match+0xa4>
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d005      	beq.n	8012224 <udp_input_local_match+0xa4>
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	4b09      	ldr	r3, [pc, #36]	@ (8012244 <udp_input_local_match+0xc4>)
 801221e:	695b      	ldr	r3, [r3, #20]
 8012220:	429a      	cmp	r2, r3
 8012222:	d101      	bne.n	8012228 <udp_input_local_match+0xa8>
        return 1;
 8012224:	2301      	movs	r3, #1
 8012226:	e000      	b.n	801222a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012228:	2300      	movs	r3, #0
}
 801222a:	4618      	mov	r0, r3
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	0801bee4 	.word	0x0801bee4
 8012238:	0801bf14 	.word	0x0801bf14
 801223c:	0801bf38 	.word	0x0801bf38
 8012240:	0801bf60 	.word	0x0801bf60
 8012244:	20005a18 	.word	0x20005a18

08012248 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012248:	b590      	push	{r4, r7, lr}
 801224a:	b08d      	sub	sp, #52	@ 0x34
 801224c:	af02      	add	r7, sp, #8
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012252:	2300      	movs	r3, #0
 8012254:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d105      	bne.n	8012268 <udp_input+0x20>
 801225c:	4b7c      	ldr	r3, [pc, #496]	@ (8012450 <udp_input+0x208>)
 801225e:	22cf      	movs	r2, #207	@ 0xcf
 8012260:	497c      	ldr	r1, [pc, #496]	@ (8012454 <udp_input+0x20c>)
 8012262:	487d      	ldr	r0, [pc, #500]	@ (8012458 <udp_input+0x210>)
 8012264:	f005 facc 	bl	8017800 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d105      	bne.n	801227a <udp_input+0x32>
 801226e:	4b78      	ldr	r3, [pc, #480]	@ (8012450 <udp_input+0x208>)
 8012270:	22d0      	movs	r2, #208	@ 0xd0
 8012272:	497a      	ldr	r1, [pc, #488]	@ (801245c <udp_input+0x214>)
 8012274:	4878      	ldr	r0, [pc, #480]	@ (8012458 <udp_input+0x210>)
 8012276:	f005 fac3 	bl	8017800 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	895b      	ldrh	r3, [r3, #10]
 801227e:	2b07      	cmp	r3, #7
 8012280:	d803      	bhi.n	801228a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f7f9 faf4 	bl	800b870 <pbuf_free>
    goto end;
 8012288:	e0de      	b.n	8012448 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012290:	4b73      	ldr	r3, [pc, #460]	@ (8012460 <udp_input+0x218>)
 8012292:	695b      	ldr	r3, [r3, #20]
 8012294:	4a72      	ldr	r2, [pc, #456]	@ (8012460 <udp_input+0x218>)
 8012296:	6812      	ldr	r2, [r2, #0]
 8012298:	4611      	mov	r1, r2
 801229a:	4618      	mov	r0, r3
 801229c:	f003 fe02 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 80122a0:	4603      	mov	r3, r0
 80122a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7f7 ff0c 	bl	800a0c8 <lwip_htons>
 80122b0:	4603      	mov	r3, r0
 80122b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	885b      	ldrh	r3, [r3, #2]
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7f7 ff04 	bl	800a0c8 <lwip_htons>
 80122c0:	4603      	mov	r3, r0
 80122c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80122c4:	2300      	movs	r3, #0
 80122c6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80122c8:	2300      	movs	r3, #0
 80122ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80122cc:	2300      	movs	r3, #0
 80122ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122d0:	4b64      	ldr	r3, [pc, #400]	@ (8012464 <udp_input+0x21c>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80122d6:	e054      	b.n	8012382 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80122d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122da:	8a5b      	ldrh	r3, [r3, #18]
 80122dc:	89fa      	ldrh	r2, [r7, #14]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d14a      	bne.n	8012378 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80122e2:	7cfb      	ldrb	r3, [r7, #19]
 80122e4:	461a      	mov	r2, r3
 80122e6:	6839      	ldr	r1, [r7, #0]
 80122e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80122ea:	f7ff ff49 	bl	8012180 <udp_input_local_match>
 80122ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d041      	beq.n	8012378 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80122f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f6:	7c1b      	ldrb	r3, [r3, #16]
 80122f8:	f003 0304 	and.w	r3, r3, #4
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d11d      	bne.n	801233c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d102      	bne.n	801230c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012308:	61fb      	str	r3, [r7, #28]
 801230a:	e017      	b.n	801233c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801230c:	7cfb      	ldrb	r3, [r7, #19]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d014      	beq.n	801233c <udp_input+0xf4>
 8012312:	4b53      	ldr	r3, [pc, #332]	@ (8012460 <udp_input+0x218>)
 8012314:	695b      	ldr	r3, [r3, #20]
 8012316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801231a:	d10f      	bne.n	801233c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	3304      	adds	r3, #4
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	429a      	cmp	r2, r3
 8012328:	d008      	beq.n	801233c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232c:	681a      	ldr	r2, [r3, #0]
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	3304      	adds	r3, #4
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	429a      	cmp	r2, r3
 8012336:	d101      	bne.n	801233c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233e:	8a9b      	ldrh	r3, [r3, #20]
 8012340:	8a3a      	ldrh	r2, [r7, #16]
 8012342:	429a      	cmp	r2, r3
 8012344:	d118      	bne.n	8012378 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012348:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801234a:	2b00      	cmp	r3, #0
 801234c:	d005      	beq.n	801235a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012350:	685a      	ldr	r2, [r3, #4]
 8012352:	4b43      	ldr	r3, [pc, #268]	@ (8012460 <udp_input+0x218>)
 8012354:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012356:	429a      	cmp	r2, r3
 8012358:	d10e      	bne.n	8012378 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801235a:	6a3b      	ldr	r3, [r7, #32]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d014      	beq.n	801238a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012362:	68da      	ldr	r2, [r3, #12]
 8012364:	6a3b      	ldr	r3, [r7, #32]
 8012366:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012368:	4b3e      	ldr	r3, [pc, #248]	@ (8012464 <udp_input+0x21c>)
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801236e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012370:	4a3c      	ldr	r2, [pc, #240]	@ (8012464 <udp_input+0x21c>)
 8012372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012374:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012376:	e008      	b.n	801238a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801237a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	627b      	str	r3, [r7, #36]	@ 0x24
 8012382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012384:	2b00      	cmp	r3, #0
 8012386:	d1a7      	bne.n	80122d8 <udp_input+0x90>
 8012388:	e000      	b.n	801238c <udp_input+0x144>
        break;
 801238a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801238e:	2b00      	cmp	r3, #0
 8012390:	d101      	bne.n	8012396 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012398:	2b00      	cmp	r3, #0
 801239a:	d002      	beq.n	80123a2 <udp_input+0x15a>
    for_us = 1;
 801239c:	2301      	movs	r3, #1
 801239e:	76fb      	strb	r3, [r7, #27]
 80123a0:	e00a      	b.n	80123b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	3304      	adds	r3, #4
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	4b2d      	ldr	r3, [pc, #180]	@ (8012460 <udp_input+0x218>)
 80123aa:	695b      	ldr	r3, [r3, #20]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	bf0c      	ite	eq
 80123b0:	2301      	moveq	r3, #1
 80123b2:	2300      	movne	r3, #0
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80123b8:	7efb      	ldrb	r3, [r7, #27]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d041      	beq.n	8012442 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80123be:	2108      	movs	r1, #8
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f7f9 f9cf 	bl	800b764 <pbuf_remove_header>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00a      	beq.n	80123e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80123cc:	4b20      	ldr	r3, [pc, #128]	@ (8012450 <udp_input+0x208>)
 80123ce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80123d2:	4925      	ldr	r1, [pc, #148]	@ (8012468 <udp_input+0x220>)
 80123d4:	4820      	ldr	r0, [pc, #128]	@ (8012458 <udp_input+0x210>)
 80123d6:	f005 fa13 	bl	8017800 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7f9 fa48 	bl	800b870 <pbuf_free>
      goto end;
 80123e0:	e032      	b.n	8012448 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80123e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d012      	beq.n	801240e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80123e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ea:	699b      	ldr	r3, [r3, #24]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00a      	beq.n	8012406 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80123f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123f2:	699c      	ldr	r4, [r3, #24]
 80123f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123f6:	69d8      	ldr	r0, [r3, #28]
 80123f8:	8a3b      	ldrh	r3, [r7, #16]
 80123fa:	9300      	str	r3, [sp, #0]
 80123fc:	4b1b      	ldr	r3, [pc, #108]	@ (801246c <udp_input+0x224>)
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012402:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012404:	e021      	b.n	801244a <udp_input+0x202>
        pbuf_free(p);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7f9 fa32 	bl	800b870 <pbuf_free>
        goto end;
 801240c:	e01c      	b.n	8012448 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801240e:	7cfb      	ldrb	r3, [r7, #19]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d112      	bne.n	801243a <udp_input+0x1f2>
 8012414:	4b12      	ldr	r3, [pc, #72]	@ (8012460 <udp_input+0x218>)
 8012416:	695b      	ldr	r3, [r3, #20]
 8012418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801241c:	2be0      	cmp	r3, #224	@ 0xe0
 801241e:	d00c      	beq.n	801243a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012420:	4b0f      	ldr	r3, [pc, #60]	@ (8012460 <udp_input+0x218>)
 8012422:	899b      	ldrh	r3, [r3, #12]
 8012424:	3308      	adds	r3, #8
 8012426:	b29b      	uxth	r3, r3
 8012428:	b21b      	sxth	r3, r3
 801242a:	4619      	mov	r1, r3
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f7f9 fa0c 	bl	800b84a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012432:	2103      	movs	r1, #3
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f003 f9f7 	bl	8015828 <icmp_dest_unreach>
      pbuf_free(p);
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f7f9 fa18 	bl	800b870 <pbuf_free>
  return;
 8012440:	e003      	b.n	801244a <udp_input+0x202>
    pbuf_free(p);
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f7f9 fa14 	bl	800b870 <pbuf_free>
  return;
 8012448:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801244a:	372c      	adds	r7, #44	@ 0x2c
 801244c:	46bd      	mov	sp, r7
 801244e:	bd90      	pop	{r4, r7, pc}
 8012450:	0801bee4 	.word	0x0801bee4
 8012454:	0801bf88 	.word	0x0801bf88
 8012458:	0801bf38 	.word	0x0801bf38
 801245c:	0801bfa0 	.word	0x0801bfa0
 8012460:	20005a18 	.word	0x20005a18
 8012464:	20009004 	.word	0x20009004
 8012468:	0801bfbc 	.word	0x0801bfbc
 801246c:	20005a28 	.word	0x20005a28

08012470 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b088      	sub	sp, #32
 8012474:	af02      	add	r7, sp, #8
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
 801247c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d109      	bne.n	8012498 <udp_sendto_if+0x28>
 8012484:	4b2e      	ldr	r3, [pc, #184]	@ (8012540 <udp_sendto_if+0xd0>)
 8012486:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801248a:	492e      	ldr	r1, [pc, #184]	@ (8012544 <udp_sendto_if+0xd4>)
 801248c:	482e      	ldr	r0, [pc, #184]	@ (8012548 <udp_sendto_if+0xd8>)
 801248e:	f005 f9b7 	bl	8017800 <iprintf>
 8012492:	f06f 030f 	mvn.w	r3, #15
 8012496:	e04f      	b.n	8012538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d109      	bne.n	80124b2 <udp_sendto_if+0x42>
 801249e:	4b28      	ldr	r3, [pc, #160]	@ (8012540 <udp_sendto_if+0xd0>)
 80124a0:	f240 2281 	movw	r2, #641	@ 0x281
 80124a4:	4929      	ldr	r1, [pc, #164]	@ (801254c <udp_sendto_if+0xdc>)
 80124a6:	4828      	ldr	r0, [pc, #160]	@ (8012548 <udp_sendto_if+0xd8>)
 80124a8:	f005 f9aa 	bl	8017800 <iprintf>
 80124ac:	f06f 030f 	mvn.w	r3, #15
 80124b0:	e042      	b.n	8012538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d109      	bne.n	80124cc <udp_sendto_if+0x5c>
 80124b8:	4b21      	ldr	r3, [pc, #132]	@ (8012540 <udp_sendto_if+0xd0>)
 80124ba:	f240 2282 	movw	r2, #642	@ 0x282
 80124be:	4924      	ldr	r1, [pc, #144]	@ (8012550 <udp_sendto_if+0xe0>)
 80124c0:	4821      	ldr	r0, [pc, #132]	@ (8012548 <udp_sendto_if+0xd8>)
 80124c2:	f005 f99d 	bl	8017800 <iprintf>
 80124c6:	f06f 030f 	mvn.w	r3, #15
 80124ca:	e035      	b.n	8012538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80124cc:	6a3b      	ldr	r3, [r7, #32]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d109      	bne.n	80124e6 <udp_sendto_if+0x76>
 80124d2:	4b1b      	ldr	r3, [pc, #108]	@ (8012540 <udp_sendto_if+0xd0>)
 80124d4:	f240 2283 	movw	r2, #643	@ 0x283
 80124d8:	491e      	ldr	r1, [pc, #120]	@ (8012554 <udp_sendto_if+0xe4>)
 80124da:	481b      	ldr	r0, [pc, #108]	@ (8012548 <udp_sendto_if+0xd8>)
 80124dc:	f005 f990 	bl	8017800 <iprintf>
 80124e0:	f06f 030f 	mvn.w	r3, #15
 80124e4:	e028      	b.n	8012538 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d009      	beq.n	8012500 <udp_sendto_if+0x90>
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d005      	beq.n	8012500 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124fc:	2be0      	cmp	r3, #224	@ 0xe0
 80124fe:	d103      	bne.n	8012508 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012500:	6a3b      	ldr	r3, [r7, #32]
 8012502:	3304      	adds	r3, #4
 8012504:	617b      	str	r3, [r7, #20]
 8012506:	e00b      	b.n	8012520 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	6a3b      	ldr	r3, [r7, #32]
 801250e:	3304      	adds	r3, #4
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	429a      	cmp	r2, r3
 8012514:	d002      	beq.n	801251c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012516:	f06f 0303 	mvn.w	r3, #3
 801251a:	e00d      	b.n	8012538 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012520:	887a      	ldrh	r2, [r7, #2]
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	9301      	str	r3, [sp, #4]
 8012526:	6a3b      	ldr	r3, [r7, #32]
 8012528:	9300      	str	r3, [sp, #0]
 801252a:	4613      	mov	r3, r2
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	68b9      	ldr	r1, [r7, #8]
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f000 f811 	bl	8012558 <udp_sendto_if_src>
 8012536:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012538:	4618      	mov	r0, r3
 801253a:	3718      	adds	r7, #24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	0801bee4 	.word	0x0801bee4
 8012544:	0801c058 	.word	0x0801c058
 8012548:	0801bf38 	.word	0x0801bf38
 801254c:	0801c074 	.word	0x0801c074
 8012550:	0801c090 	.word	0x0801c090
 8012554:	0801c0b0 	.word	0x0801c0b0

08012558 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b08c      	sub	sp, #48	@ 0x30
 801255c:	af04      	add	r7, sp, #16
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	607a      	str	r2, [r7, #4]
 8012564:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d109      	bne.n	8012580 <udp_sendto_if_src+0x28>
 801256c:	4b65      	ldr	r3, [pc, #404]	@ (8012704 <udp_sendto_if_src+0x1ac>)
 801256e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012572:	4965      	ldr	r1, [pc, #404]	@ (8012708 <udp_sendto_if_src+0x1b0>)
 8012574:	4865      	ldr	r0, [pc, #404]	@ (801270c <udp_sendto_if_src+0x1b4>)
 8012576:	f005 f943 	bl	8017800 <iprintf>
 801257a:	f06f 030f 	mvn.w	r3, #15
 801257e:	e0bc      	b.n	80126fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d109      	bne.n	801259a <udp_sendto_if_src+0x42>
 8012586:	4b5f      	ldr	r3, [pc, #380]	@ (8012704 <udp_sendto_if_src+0x1ac>)
 8012588:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801258c:	4960      	ldr	r1, [pc, #384]	@ (8012710 <udp_sendto_if_src+0x1b8>)
 801258e:	485f      	ldr	r0, [pc, #380]	@ (801270c <udp_sendto_if_src+0x1b4>)
 8012590:	f005 f936 	bl	8017800 <iprintf>
 8012594:	f06f 030f 	mvn.w	r3, #15
 8012598:	e0af      	b.n	80126fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d109      	bne.n	80125b4 <udp_sendto_if_src+0x5c>
 80125a0:	4b58      	ldr	r3, [pc, #352]	@ (8012704 <udp_sendto_if_src+0x1ac>)
 80125a2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80125a6:	495b      	ldr	r1, [pc, #364]	@ (8012714 <udp_sendto_if_src+0x1bc>)
 80125a8:	4858      	ldr	r0, [pc, #352]	@ (801270c <udp_sendto_if_src+0x1b4>)
 80125aa:	f005 f929 	bl	8017800 <iprintf>
 80125ae:	f06f 030f 	mvn.w	r3, #15
 80125b2:	e0a2      	b.n	80126fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80125b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d109      	bne.n	80125ce <udp_sendto_if_src+0x76>
 80125ba:	4b52      	ldr	r3, [pc, #328]	@ (8012704 <udp_sendto_if_src+0x1ac>)
 80125bc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80125c0:	4955      	ldr	r1, [pc, #340]	@ (8012718 <udp_sendto_if_src+0x1c0>)
 80125c2:	4852      	ldr	r0, [pc, #328]	@ (801270c <udp_sendto_if_src+0x1b4>)
 80125c4:	f005 f91c 	bl	8017800 <iprintf>
 80125c8:	f06f 030f 	mvn.w	r3, #15
 80125cc:	e095      	b.n	80126fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80125ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d109      	bne.n	80125e8 <udp_sendto_if_src+0x90>
 80125d4:	4b4b      	ldr	r3, [pc, #300]	@ (8012704 <udp_sendto_if_src+0x1ac>)
 80125d6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80125da:	4950      	ldr	r1, [pc, #320]	@ (801271c <udp_sendto_if_src+0x1c4>)
 80125dc:	484b      	ldr	r0, [pc, #300]	@ (801270c <udp_sendto_if_src+0x1b4>)
 80125de:	f005 f90f 	bl	8017800 <iprintf>
 80125e2:	f06f 030f 	mvn.w	r3, #15
 80125e6:	e088      	b.n	80126fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	8a5b      	ldrh	r3, [r3, #18]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10f      	bne.n	8012610 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80125f0:	68f9      	ldr	r1, [r7, #12]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	8a5b      	ldrh	r3, [r3, #18]
 80125f6:	461a      	mov	r2, r3
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f000 f893 	bl	8012724 <udp_bind>
 80125fe:	4603      	mov	r3, r0
 8012600:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012602:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d002      	beq.n	8012610 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801260a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801260e:	e074      	b.n	80126fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	891b      	ldrh	r3, [r3, #8]
 8012614:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012618:	4293      	cmp	r3, r2
 801261a:	d902      	bls.n	8012622 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801261c:	f04f 33ff 	mov.w	r3, #4294967295
 8012620:	e06b      	b.n	80126fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012622:	2108      	movs	r1, #8
 8012624:	68b8      	ldr	r0, [r7, #8]
 8012626:	f7f9 f88d 	bl	800b744 <pbuf_add_header>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d015      	beq.n	801265c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012630:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012634:	2108      	movs	r1, #8
 8012636:	2022      	movs	r0, #34	@ 0x22
 8012638:	f7f8 fe36 	bl	800b2a8 <pbuf_alloc>
 801263c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d102      	bne.n	801264a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012644:	f04f 33ff 	mov.w	r3, #4294967295
 8012648:	e057      	b.n	80126fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	891b      	ldrh	r3, [r3, #8]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d006      	beq.n	8012660 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012652:	68b9      	ldr	r1, [r7, #8]
 8012654:	69f8      	ldr	r0, [r7, #28]
 8012656:	f7f9 fa23 	bl	800baa0 <pbuf_chain>
 801265a:	e001      	b.n	8012660 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	895b      	ldrh	r3, [r3, #10]
 8012664:	2b07      	cmp	r3, #7
 8012666:	d806      	bhi.n	8012676 <udp_sendto_if_src+0x11e>
 8012668:	4b26      	ldr	r3, [pc, #152]	@ (8012704 <udp_sendto_if_src+0x1ac>)
 801266a:	f240 320d 	movw	r2, #781	@ 0x30d
 801266e:	492c      	ldr	r1, [pc, #176]	@ (8012720 <udp_sendto_if_src+0x1c8>)
 8012670:	4826      	ldr	r0, [pc, #152]	@ (801270c <udp_sendto_if_src+0x1b4>)
 8012672:	f005 f8c5 	bl	8017800 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	8a5b      	ldrh	r3, [r3, #18]
 8012680:	4618      	mov	r0, r3
 8012682:	f7f7 fd21 	bl	800a0c8 <lwip_htons>
 8012686:	4603      	mov	r3, r0
 8012688:	461a      	mov	r2, r3
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801268e:	887b      	ldrh	r3, [r7, #2]
 8012690:	4618      	mov	r0, r3
 8012692:	f7f7 fd19 	bl	800a0c8 <lwip_htons>
 8012696:	4603      	mov	r3, r0
 8012698:	461a      	mov	r2, r3
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	2200      	movs	r2, #0
 80126a2:	719a      	strb	r2, [r3, #6]
 80126a4:	2200      	movs	r2, #0
 80126a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	891b      	ldrh	r3, [r3, #8]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7f7 fd0b 	bl	800a0c8 <lwip_htons>
 80126b2:	4603      	mov	r3, r0
 80126b4:	461a      	mov	r2, r3
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80126ba:	2311      	movs	r3, #17
 80126bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	7adb      	ldrb	r3, [r3, #11]
 80126c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	7a9b      	ldrb	r3, [r3, #10]
 80126c8:	7cb9      	ldrb	r1, [r7, #18]
 80126ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126cc:	9202      	str	r2, [sp, #8]
 80126ce:	7cfa      	ldrb	r2, [r7, #19]
 80126d0:	9201      	str	r2, [sp, #4]
 80126d2:	9300      	str	r3, [sp, #0]
 80126d4:	460b      	mov	r3, r1
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80126da:	69f8      	ldr	r0, [r7, #28]
 80126dc:	f003 fb34 	bl	8015d48 <ip4_output_if_src>
 80126e0:	4603      	mov	r3, r0
 80126e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80126e4:	69fa      	ldr	r2, [r7, #28]
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d004      	beq.n	80126f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80126ec:	69f8      	ldr	r0, [r7, #28]
 80126ee:	f7f9 f8bf 	bl	800b870 <pbuf_free>
    q = NULL;
 80126f2:	2300      	movs	r3, #0
 80126f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80126f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3720      	adds	r7, #32
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	0801bee4 	.word	0x0801bee4
 8012708:	0801c0d0 	.word	0x0801c0d0
 801270c:	0801bf38 	.word	0x0801bf38
 8012710:	0801c0f0 	.word	0x0801c0f0
 8012714:	0801c110 	.word	0x0801c110
 8012718:	0801c134 	.word	0x0801c134
 801271c:	0801c158 	.word	0x0801c158
 8012720:	0801c17c 	.word	0x0801c17c

08012724 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b086      	sub	sp, #24
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	4613      	mov	r3, r2
 8012730:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012732:	68bb      	ldr	r3, [r7, #8]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d101      	bne.n	801273c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012738:	4b39      	ldr	r3, [pc, #228]	@ (8012820 <udp_bind+0xfc>)
 801273a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d109      	bne.n	8012756 <udp_bind+0x32>
 8012742:	4b38      	ldr	r3, [pc, #224]	@ (8012824 <udp_bind+0x100>)
 8012744:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8012748:	4937      	ldr	r1, [pc, #220]	@ (8012828 <udp_bind+0x104>)
 801274a:	4838      	ldr	r0, [pc, #224]	@ (801282c <udp_bind+0x108>)
 801274c:	f005 f858 	bl	8017800 <iprintf>
 8012750:	f06f 030f 	mvn.w	r3, #15
 8012754:	e060      	b.n	8012818 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012756:	2300      	movs	r3, #0
 8012758:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801275a:	4b35      	ldr	r3, [pc, #212]	@ (8012830 <udp_bind+0x10c>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	617b      	str	r3, [r7, #20]
 8012760:	e009      	b.n	8012776 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	429a      	cmp	r2, r3
 8012768:	d102      	bne.n	8012770 <udp_bind+0x4c>
      rebind = 1;
 801276a:	2301      	movs	r3, #1
 801276c:	74fb      	strb	r3, [r7, #19]
      break;
 801276e:	e005      	b.n	801277c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	617b      	str	r3, [r7, #20]
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d1f2      	bne.n	8012762 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801277c:	88fb      	ldrh	r3, [r7, #6]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d109      	bne.n	8012796 <udp_bind+0x72>
    port = udp_new_port();
 8012782:	f7ff fcc5 	bl	8012110 <udp_new_port>
 8012786:	4603      	mov	r3, r0
 8012788:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801278a:	88fb      	ldrh	r3, [r7, #6]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d12c      	bne.n	80127ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012790:	f06f 0307 	mvn.w	r3, #7
 8012794:	e040      	b.n	8012818 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012796:	4b26      	ldr	r3, [pc, #152]	@ (8012830 <udp_bind+0x10c>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	617b      	str	r3, [r7, #20]
 801279c:	e022      	b.n	80127e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801279e:	68fa      	ldr	r2, [r7, #12]
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d01b      	beq.n	80127de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	8a5b      	ldrh	r3, [r3, #18]
 80127aa:	88fa      	ldrh	r2, [r7, #6]
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d116      	bne.n	80127de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d00d      	beq.n	80127d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00a      	beq.n	80127d8 <udp_bind+0xb4>
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d006      	beq.n	80127d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80127ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d003      	beq.n	80127d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d102      	bne.n	80127de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80127d8:	f06f 0307 	mvn.w	r3, #7
 80127dc:	e01c      	b.n	8012818 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	68db      	ldr	r3, [r3, #12]
 80127e2:	617b      	str	r3, [r7, #20]
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d1d9      	bne.n	801279e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d002      	beq.n	80127f6 <udp_bind+0xd2>
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	e000      	b.n	80127f8 <udp_bind+0xd4>
 80127f6:	2300      	movs	r3, #0
 80127f8:	68fa      	ldr	r2, [r7, #12]
 80127fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	88fa      	ldrh	r2, [r7, #6]
 8012800:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012802:	7cfb      	ldrb	r3, [r7, #19]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d106      	bne.n	8012816 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012808:	4b09      	ldr	r3, [pc, #36]	@ (8012830 <udp_bind+0x10c>)
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012810:	4a07      	ldr	r2, [pc, #28]	@ (8012830 <udp_bind+0x10c>)
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012816:	2300      	movs	r3, #0
}
 8012818:	4618      	mov	r0, r3
 801281a:	3718      	adds	r7, #24
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}
 8012820:	0802047c 	.word	0x0802047c
 8012824:	0801bee4 	.word	0x0801bee4
 8012828:	0801c1ac 	.word	0x0801c1ac
 801282c:	0801bf38 	.word	0x0801bf38
 8012830:	20009004 	.word	0x20009004

08012834 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b086      	sub	sp, #24
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	4613      	mov	r3, r2
 8012840:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d109      	bne.n	801285c <udp_connect+0x28>
 8012848:	4b2c      	ldr	r3, [pc, #176]	@ (80128fc <udp_connect+0xc8>)
 801284a:	f240 4235 	movw	r2, #1077	@ 0x435
 801284e:	492c      	ldr	r1, [pc, #176]	@ (8012900 <udp_connect+0xcc>)
 8012850:	482c      	ldr	r0, [pc, #176]	@ (8012904 <udp_connect+0xd0>)
 8012852:	f004 ffd5 	bl	8017800 <iprintf>
 8012856:	f06f 030f 	mvn.w	r3, #15
 801285a:	e04b      	b.n	80128f4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d109      	bne.n	8012876 <udp_connect+0x42>
 8012862:	4b26      	ldr	r3, [pc, #152]	@ (80128fc <udp_connect+0xc8>)
 8012864:	f240 4236 	movw	r2, #1078	@ 0x436
 8012868:	4927      	ldr	r1, [pc, #156]	@ (8012908 <udp_connect+0xd4>)
 801286a:	4826      	ldr	r0, [pc, #152]	@ (8012904 <udp_connect+0xd0>)
 801286c:	f004 ffc8 	bl	8017800 <iprintf>
 8012870:	f06f 030f 	mvn.w	r3, #15
 8012874:	e03e      	b.n	80128f4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	8a5b      	ldrh	r3, [r3, #18]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d10f      	bne.n	801289e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801287e:	68f9      	ldr	r1, [r7, #12]
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	8a5b      	ldrh	r3, [r3, #18]
 8012884:	461a      	mov	r2, r3
 8012886:	68f8      	ldr	r0, [r7, #12]
 8012888:	f7ff ff4c 	bl	8012724 <udp_bind>
 801288c:	4603      	mov	r3, r0
 801288e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012890:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d002      	beq.n	801289e <udp_connect+0x6a>
      return err;
 8012898:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801289c:	e02a      	b.n	80128f4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d002      	beq.n	80128aa <udp_connect+0x76>
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	e000      	b.n	80128ac <udp_connect+0x78>
 80128aa:	2300      	movs	r3, #0
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	88fa      	ldrh	r2, [r7, #6]
 80128b4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	7c1b      	ldrb	r3, [r3, #16]
 80128ba:	f043 0304 	orr.w	r3, r3, #4
 80128be:	b2da      	uxtb	r2, r3
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80128c4:	4b11      	ldr	r3, [pc, #68]	@ (801290c <udp_connect+0xd8>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	617b      	str	r3, [r7, #20]
 80128ca:	e008      	b.n	80128de <udp_connect+0xaa>
    if (pcb == ipcb) {
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d101      	bne.n	80128d8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80128d4:	2300      	movs	r3, #0
 80128d6:	e00d      	b.n	80128f4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	617b      	str	r3, [r7, #20]
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d1f3      	bne.n	80128cc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80128e4:	4b09      	ldr	r3, [pc, #36]	@ (801290c <udp_connect+0xd8>)
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80128ec:	4a07      	ldr	r2, [pc, #28]	@ (801290c <udp_connect+0xd8>)
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80128f2:	2300      	movs	r3, #0
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3718      	adds	r7, #24
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	0801bee4 	.word	0x0801bee4
 8012900:	0801c1c4 	.word	0x0801c1c4
 8012904:	0801bf38 	.word	0x0801bf38
 8012908:	0801c1e0 	.word	0x0801c1e0
 801290c:	20009004 	.word	0x20009004

08012910 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d107      	bne.n	8012932 <udp_recv+0x22>
 8012922:	4b08      	ldr	r3, [pc, #32]	@ (8012944 <udp_recv+0x34>)
 8012924:	f240 428a 	movw	r2, #1162	@ 0x48a
 8012928:	4907      	ldr	r1, [pc, #28]	@ (8012948 <udp_recv+0x38>)
 801292a:	4808      	ldr	r0, [pc, #32]	@ (801294c <udp_recv+0x3c>)
 801292c:	f004 ff68 	bl	8017800 <iprintf>
 8012930:	e005      	b.n	801293e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	68ba      	ldr	r2, [r7, #8]
 8012936:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	61da      	str	r2, [r3, #28]
}
 801293e:	3710      	adds	r7, #16
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	0801bee4 	.word	0x0801bee4
 8012948:	0801c218 	.word	0x0801c218
 801294c:	0801bf38 	.word	0x0801bf38

08012950 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d107      	bne.n	801296e <udp_remove+0x1e>
 801295e:	4b19      	ldr	r3, [pc, #100]	@ (80129c4 <udp_remove+0x74>)
 8012960:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8012964:	4918      	ldr	r1, [pc, #96]	@ (80129c8 <udp_remove+0x78>)
 8012966:	4819      	ldr	r0, [pc, #100]	@ (80129cc <udp_remove+0x7c>)
 8012968:	f004 ff4a 	bl	8017800 <iprintf>
 801296c:	e026      	b.n	80129bc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801296e:	4b18      	ldr	r3, [pc, #96]	@ (80129d0 <udp_remove+0x80>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	429a      	cmp	r2, r3
 8012976:	d105      	bne.n	8012984 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012978:	4b15      	ldr	r3, [pc, #84]	@ (80129d0 <udp_remove+0x80>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	68db      	ldr	r3, [r3, #12]
 801297e:	4a14      	ldr	r2, [pc, #80]	@ (80129d0 <udp_remove+0x80>)
 8012980:	6013      	str	r3, [r2, #0]
 8012982:	e017      	b.n	80129b4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012984:	4b12      	ldr	r3, [pc, #72]	@ (80129d0 <udp_remove+0x80>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	60fb      	str	r3, [r7, #12]
 801298a:	e010      	b.n	80129ae <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d009      	beq.n	80129a8 <udp_remove+0x58>
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	429a      	cmp	r2, r3
 801299c:	d104      	bne.n	80129a8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	68da      	ldr	r2, [r3, #12]
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	60da      	str	r2, [r3, #12]
        break;
 80129a6:	e005      	b.n	80129b4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	60fb      	str	r3, [r7, #12]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d1eb      	bne.n	801298c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80129b4:	6879      	ldr	r1, [r7, #4]
 80129b6:	2000      	movs	r0, #0
 80129b8:	f7f8 f8d8 	bl	800ab6c <memp_free>
}
 80129bc:	3710      	adds	r7, #16
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	0801bee4 	.word	0x0801bee4
 80129c8:	0801c230 	.word	0x0801c230
 80129cc:	0801bf38 	.word	0x0801bf38
 80129d0:	20009004 	.word	0x20009004

080129d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80129da:	2000      	movs	r0, #0
 80129dc:	f7f8 f856 	bl	800aa8c <memp_malloc>
 80129e0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d007      	beq.n	80129f8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80129e8:	2220      	movs	r2, #32
 80129ea:	2100      	movs	r1, #0
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f004 ffa6 	bl	801793e <memset>
    pcb->ttl = UDP_TTL;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	22ff      	movs	r2, #255	@ 0xff
 80129f6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80129f8:	687b      	ldr	r3, [r7, #4]
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3708      	adds	r7, #8
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
	...

08012a04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d01e      	beq.n	8012a52 <udp_netif_ip_addr_changed+0x4e>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d01a      	beq.n	8012a52 <udp_netif_ip_addr_changed+0x4e>
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d017      	beq.n	8012a52 <udp_netif_ip_addr_changed+0x4e>
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d013      	beq.n	8012a52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012a60 <udp_netif_ip_addr_changed+0x5c>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	60fb      	str	r3, [r7, #12]
 8012a30:	e00c      	b.n	8012a4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d103      	bne.n	8012a46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	681a      	ldr	r2, [r3, #0]
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	60fb      	str	r3, [r7, #12]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d1ef      	bne.n	8012a32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012a52:	bf00      	nop
 8012a54:	3714      	adds	r7, #20
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	20009004 	.word	0x20009004

08012a64 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012a68:	4b20      	ldr	r3, [pc, #128]	@ (8012aec <dhcp_inc_pcb_refcount+0x88>)
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d133      	bne.n	8012ad8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012a70:	4b1f      	ldr	r3, [pc, #124]	@ (8012af0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d005      	beq.n	8012a84 <dhcp_inc_pcb_refcount+0x20>
 8012a78:	4b1e      	ldr	r3, [pc, #120]	@ (8012af4 <dhcp_inc_pcb_refcount+0x90>)
 8012a7a:	22e5      	movs	r2, #229	@ 0xe5
 8012a7c:	491e      	ldr	r1, [pc, #120]	@ (8012af8 <dhcp_inc_pcb_refcount+0x94>)
 8012a7e:	481f      	ldr	r0, [pc, #124]	@ (8012afc <dhcp_inc_pcb_refcount+0x98>)
 8012a80:	f004 febe 	bl	8017800 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012a84:	f7ff ffa6 	bl	80129d4 <udp_new>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	4a19      	ldr	r2, [pc, #100]	@ (8012af0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a8c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012a8e:	4b18      	ldr	r3, [pc, #96]	@ (8012af0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d102      	bne.n	8012a9c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012a96:	f04f 33ff 	mov.w	r3, #4294967295
 8012a9a:	e024      	b.n	8012ae6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012a9c:	4b14      	ldr	r3, [pc, #80]	@ (8012af0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	7a5a      	ldrb	r2, [r3, #9]
 8012aa2:	4b13      	ldr	r3, [pc, #76]	@ (8012af0 <dhcp_inc_pcb_refcount+0x8c>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f042 0220 	orr.w	r2, r2, #32
 8012aaa:	b2d2      	uxtb	r2, r2
 8012aac:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012aae:	4b10      	ldr	r3, [pc, #64]	@ (8012af0 <dhcp_inc_pcb_refcount+0x8c>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2244      	movs	r2, #68	@ 0x44
 8012ab4:	4912      	ldr	r1, [pc, #72]	@ (8012b00 <dhcp_inc_pcb_refcount+0x9c>)
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7ff fe34 	bl	8012724 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012abc:	4b0c      	ldr	r3, [pc, #48]	@ (8012af0 <dhcp_inc_pcb_refcount+0x8c>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2243      	movs	r2, #67	@ 0x43
 8012ac2:	490f      	ldr	r1, [pc, #60]	@ (8012b00 <dhcp_inc_pcb_refcount+0x9c>)
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7ff feb5 	bl	8012834 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012aca:	4b09      	ldr	r3, [pc, #36]	@ (8012af0 <dhcp_inc_pcb_refcount+0x8c>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	490c      	ldr	r1, [pc, #48]	@ (8012b04 <dhcp_inc_pcb_refcount+0xa0>)
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7ff ff1c 	bl	8012910 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012ad8:	4b04      	ldr	r3, [pc, #16]	@ (8012aec <dhcp_inc_pcb_refcount+0x88>)
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	3301      	adds	r3, #1
 8012ade:	b2da      	uxtb	r2, r3
 8012ae0:	4b02      	ldr	r3, [pc, #8]	@ (8012aec <dhcp_inc_pcb_refcount+0x88>)
 8012ae2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012ae4:	2300      	movs	r3, #0
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	20009034 	.word	0x20009034
 8012af0:	20009030 	.word	0x20009030
 8012af4:	0801c248 	.word	0x0801c248
 8012af8:	0801c280 	.word	0x0801c280
 8012afc:	0801c2a8 	.word	0x0801c2a8
 8012b00:	0802047c 	.word	0x0802047c
 8012b04:	08014391 	.word	0x08014391

08012b08 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8012b48 <dhcp_dec_pcb_refcount+0x40>)
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d105      	bne.n	8012b20 <dhcp_dec_pcb_refcount+0x18>
 8012b14:	4b0d      	ldr	r3, [pc, #52]	@ (8012b4c <dhcp_dec_pcb_refcount+0x44>)
 8012b16:	22ff      	movs	r2, #255	@ 0xff
 8012b18:	490d      	ldr	r1, [pc, #52]	@ (8012b50 <dhcp_dec_pcb_refcount+0x48>)
 8012b1a:	480e      	ldr	r0, [pc, #56]	@ (8012b54 <dhcp_dec_pcb_refcount+0x4c>)
 8012b1c:	f004 fe70 	bl	8017800 <iprintf>
  dhcp_pcb_refcount--;
 8012b20:	4b09      	ldr	r3, [pc, #36]	@ (8012b48 <dhcp_dec_pcb_refcount+0x40>)
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	b2da      	uxtb	r2, r3
 8012b28:	4b07      	ldr	r3, [pc, #28]	@ (8012b48 <dhcp_dec_pcb_refcount+0x40>)
 8012b2a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012b2c:	4b06      	ldr	r3, [pc, #24]	@ (8012b48 <dhcp_dec_pcb_refcount+0x40>)
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d107      	bne.n	8012b44 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012b34:	4b08      	ldr	r3, [pc, #32]	@ (8012b58 <dhcp_dec_pcb_refcount+0x50>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7ff ff09 	bl	8012950 <udp_remove>
    dhcp_pcb = NULL;
 8012b3e:	4b06      	ldr	r3, [pc, #24]	@ (8012b58 <dhcp_dec_pcb_refcount+0x50>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	601a      	str	r2, [r3, #0]
  }
}
 8012b44:	bf00      	nop
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	20009034 	.word	0x20009034
 8012b4c:	0801c248 	.word	0x0801c248
 8012b50:	0801c2d0 	.word	0x0801c2d0
 8012b54:	0801c2a8 	.word	0x0801c2a8
 8012b58:	20009030 	.word	0x20009030

08012b5c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b68:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012b6a:	210c      	movs	r1, #12
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f001 f851 	bl	8013c14 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012b72:	4b06      	ldr	r3, [pc, #24]	@ (8012b8c <dhcp_handle_nak+0x30>)
 8012b74:	4a05      	ldr	r2, [pc, #20]	@ (8012b8c <dhcp_handle_nak+0x30>)
 8012b76:	4905      	ldr	r1, [pc, #20]	@ (8012b8c <dhcp_handle_nak+0x30>)
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f7f8 f999 	bl	800aeb0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f000 fc4a 	bl	8013418 <dhcp_discover>
}
 8012b84:	bf00      	nop
 8012b86:	3710      	adds	r7, #16
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	0802047c 	.word	0x0802047c

08012b90 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b9c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012b9e:	2108      	movs	r1, #8
 8012ba0:	68f8      	ldr	r0, [r7, #12]
 8012ba2:	f001 f837 	bl	8013c14 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	331c      	adds	r3, #28
 8012baa:	2200      	movs	r2, #0
 8012bac:	4619      	mov	r1, r3
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f002 fb38 	bl	8015224 <etharp_query>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	799b      	ldrb	r3, [r3, #6]
 8012bbc:	2bff      	cmp	r3, #255	@ 0xff
 8012bbe:	d005      	beq.n	8012bcc <dhcp_check+0x3c>
    dhcp->tries++;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	799b      	ldrb	r3, [r3, #6]
 8012bc4:	3301      	adds	r3, #1
 8012bc6:	b2da      	uxtb	r2, r3
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012bcc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8012bd0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012bd2:	893b      	ldrh	r3, [r7, #8]
 8012bd4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012bd8:	4a06      	ldr	r2, [pc, #24]	@ (8012bf4 <dhcp_check+0x64>)
 8012bda:	fb82 1203 	smull	r1, r2, r2, r3
 8012bde:	1152      	asrs	r2, r2, #5
 8012be0:	17db      	asrs	r3, r3, #31
 8012be2:	1ad3      	subs	r3, r2, r3
 8012be4:	b29a      	uxth	r2, r3
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012bea:	bf00      	nop
 8012bec:	3710      	adds	r7, #16
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	10624dd3 	.word	0x10624dd3

08012bf8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012c08:	4b0c      	ldr	r3, [pc, #48]	@ (8012c3c <dhcp_handle_offer+0x44>)
 8012c0a:	789b      	ldrb	r3, [r3, #2]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d011      	beq.n	8012c34 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2200      	movs	r2, #0
 8012c14:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012c16:	4b0a      	ldr	r3, [pc, #40]	@ (8012c40 <dhcp_handle_offer+0x48>)
 8012c18:	689b      	ldr	r3, [r3, #8]
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7f7 fa69 	bl	800a0f2 <lwip_htonl>
 8012c20:	4602      	mov	r2, r0
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	691a      	ldr	r2, [r3, #16]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f000 f808 	bl	8012c44 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012c34:	bf00      	nop
 8012c36:	3710      	adds	r7, #16
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	20009028 	.word	0x20009028
 8012c40:	20009008 	.word	0x20009008

08012c44 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012c44:	b5b0      	push	{r4, r5, r7, lr}
 8012c46:	b08a      	sub	sp, #40	@ 0x28
 8012c48:	af02      	add	r7, sp, #8
 8012c4a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d109      	bne.n	8012c66 <dhcp_select+0x22>
 8012c52:	4b71      	ldr	r3, [pc, #452]	@ (8012e18 <dhcp_select+0x1d4>)
 8012c54:	f240 1277 	movw	r2, #375	@ 0x177
 8012c58:	4970      	ldr	r1, [pc, #448]	@ (8012e1c <dhcp_select+0x1d8>)
 8012c5a:	4871      	ldr	r0, [pc, #452]	@ (8012e20 <dhcp_select+0x1dc>)
 8012c5c:	f004 fdd0 	bl	8017800 <iprintf>
 8012c60:	f06f 030f 	mvn.w	r3, #15
 8012c64:	e0d3      	b.n	8012e0e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c6a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012c6c:	69bb      	ldr	r3, [r7, #24]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d109      	bne.n	8012c86 <dhcp_select+0x42>
 8012c72:	4b69      	ldr	r3, [pc, #420]	@ (8012e18 <dhcp_select+0x1d4>)
 8012c74:	f240 1279 	movw	r2, #377	@ 0x179
 8012c78:	496a      	ldr	r1, [pc, #424]	@ (8012e24 <dhcp_select+0x1e0>)
 8012c7a:	4869      	ldr	r0, [pc, #420]	@ (8012e20 <dhcp_select+0x1dc>)
 8012c7c:	f004 fdc0 	bl	8017800 <iprintf>
 8012c80:	f06f 0305 	mvn.w	r3, #5
 8012c84:	e0c3      	b.n	8012e0e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012c86:	2101      	movs	r1, #1
 8012c88:	69b8      	ldr	r0, [r7, #24]
 8012c8a:	f000 ffc3 	bl	8013c14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012c8e:	f107 030c 	add.w	r3, r7, #12
 8012c92:	2203      	movs	r2, #3
 8012c94:	69b9      	ldr	r1, [r7, #24]
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f001 fc48 	bl	801452c <dhcp_create_msg>
 8012c9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f000 8085 	beq.w	8012db0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012cac:	89b8      	ldrh	r0, [r7, #12]
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012cb4:	2302      	movs	r3, #2
 8012cb6:	2239      	movs	r2, #57	@ 0x39
 8012cb8:	f000 ffc6 	bl	8013c48 <dhcp_option>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012cc0:	89b8      	ldrh	r0, [r7, #12]
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ccc:	461a      	mov	r2, r3
 8012cce:	f001 f815 	bl	8013cfc <dhcp_option_short>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012cd6:	89b8      	ldrh	r0, [r7, #12]
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012cde:	2304      	movs	r3, #4
 8012ce0:	2232      	movs	r2, #50	@ 0x32
 8012ce2:	f000 ffb1 	bl	8013c48 <dhcp_option>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012cea:	89bc      	ldrh	r4, [r7, #12]
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	69db      	ldr	r3, [r3, #28]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f7 f9fb 	bl	800a0f2 <lwip_htonl>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	461a      	mov	r2, r3
 8012d00:	4629      	mov	r1, r5
 8012d02:	4620      	mov	r0, r4
 8012d04:	f001 f82c 	bl	8013d60 <dhcp_option_long>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012d0c:	89b8      	ldrh	r0, [r7, #12]
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d14:	2304      	movs	r3, #4
 8012d16:	2236      	movs	r2, #54	@ 0x36
 8012d18:	f000 ff96 	bl	8013c48 <dhcp_option>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012d20:	89bc      	ldrh	r4, [r7, #12]
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012d28:	69bb      	ldr	r3, [r7, #24]
 8012d2a:	699b      	ldr	r3, [r3, #24]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7f7 f9e0 	bl	800a0f2 <lwip_htonl>
 8012d32:	4603      	mov	r3, r0
 8012d34:	461a      	mov	r2, r3
 8012d36:	4629      	mov	r1, r5
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f001 f811 	bl	8013d60 <dhcp_option_long>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012d42:	89b8      	ldrh	r0, [r7, #12]
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d4a:	2303      	movs	r3, #3
 8012d4c:	2237      	movs	r2, #55	@ 0x37
 8012d4e:	f000 ff7b 	bl	8013c48 <dhcp_option>
 8012d52:	4603      	mov	r3, r0
 8012d54:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d56:	2300      	movs	r3, #0
 8012d58:	77bb      	strb	r3, [r7, #30]
 8012d5a:	e00e      	b.n	8012d7a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012d5c:	89b8      	ldrh	r0, [r7, #12]
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d64:	7fbb      	ldrb	r3, [r7, #30]
 8012d66:	4a30      	ldr	r2, [pc, #192]	@ (8012e28 <dhcp_select+0x1e4>)
 8012d68:	5cd3      	ldrb	r3, [r2, r3]
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	f000 ffa0 	bl	8013cb0 <dhcp_option_byte>
 8012d70:	4603      	mov	r3, r0
 8012d72:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d74:	7fbb      	ldrb	r3, [r7, #30]
 8012d76:	3301      	adds	r3, #1
 8012d78:	77bb      	strb	r3, [r7, #30]
 8012d7a:	7fbb      	ldrb	r3, [r7, #30]
 8012d7c:	2b02      	cmp	r3, #2
 8012d7e:	d9ed      	bls.n	8012d5c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012d80:	89b8      	ldrh	r0, [r7, #12]
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	33f0      	adds	r3, #240	@ 0xf0
 8012d86:	697a      	ldr	r2, [r7, #20]
 8012d88:	4619      	mov	r1, r3
 8012d8a:	f001 fca5 	bl	80146d8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012d8e:	4b27      	ldr	r3, [pc, #156]	@ (8012e2c <dhcp_select+0x1e8>)
 8012d90:	6818      	ldr	r0, [r3, #0]
 8012d92:	4b27      	ldr	r3, [pc, #156]	@ (8012e30 <dhcp_select+0x1ec>)
 8012d94:	9301      	str	r3, [sp, #4]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	9300      	str	r3, [sp, #0]
 8012d9a:	2343      	movs	r3, #67	@ 0x43
 8012d9c:	4a25      	ldr	r2, [pc, #148]	@ (8012e34 <dhcp_select+0x1f0>)
 8012d9e:	6979      	ldr	r1, [r7, #20]
 8012da0:	f7ff fbda 	bl	8012558 <udp_sendto_if_src>
 8012da4:	4603      	mov	r3, r0
 8012da6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012da8:	6978      	ldr	r0, [r7, #20]
 8012daa:	f7f8 fd61 	bl	800b870 <pbuf_free>
 8012dae:	e001      	b.n	8012db4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012db0:	23ff      	movs	r3, #255	@ 0xff
 8012db2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	799b      	ldrb	r3, [r3, #6]
 8012db8:	2bff      	cmp	r3, #255	@ 0xff
 8012dba:	d005      	beq.n	8012dc8 <dhcp_select+0x184>
    dhcp->tries++;
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	799b      	ldrb	r3, [r3, #6]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	b2da      	uxtb	r2, r3
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012dc8:	69bb      	ldr	r3, [r7, #24]
 8012dca:	799b      	ldrb	r3, [r3, #6]
 8012dcc:	2b05      	cmp	r3, #5
 8012dce:	d80d      	bhi.n	8012dec <dhcp_select+0x1a8>
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	799b      	ldrb	r3, [r3, #6]
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	4093      	lsls	r3, r2
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	461a      	mov	r2, r3
 8012dde:	0152      	lsls	r2, r2, #5
 8012de0:	1ad2      	subs	r2, r2, r3
 8012de2:	0092      	lsls	r2, r2, #2
 8012de4:	4413      	add	r3, r2
 8012de6:	00db      	lsls	r3, r3, #3
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	e001      	b.n	8012df0 <dhcp_select+0x1ac>
 8012dec:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8012df0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012df2:	89fb      	ldrh	r3, [r7, #14]
 8012df4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012df8:	4a0f      	ldr	r2, [pc, #60]	@ (8012e38 <dhcp_select+0x1f4>)
 8012dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8012dfe:	1152      	asrs	r2, r2, #5
 8012e00:	17db      	asrs	r3, r3, #31
 8012e02:	1ad3      	subs	r3, r2, r3
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	69bb      	ldr	r3, [r7, #24]
 8012e08:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012e0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3720      	adds	r7, #32
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bdb0      	pop	{r4, r5, r7, pc}
 8012e16:	bf00      	nop
 8012e18:	0801c248 	.word	0x0801c248
 8012e1c:	0801c2f4 	.word	0x0801c2f4
 8012e20:	0801c2a8 	.word	0x0801c2a8
 8012e24:	0801c310 	.word	0x0801c310
 8012e28:	20000038 	.word	0x20000038
 8012e2c:	20009030 	.word	0x20009030
 8012e30:	0802047c 	.word	0x0802047c
 8012e34:	08020480 	.word	0x08020480
 8012e38:	10624dd3 	.word	0x10624dd3

08012e3c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b082      	sub	sp, #8
 8012e40:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012e42:	4b27      	ldr	r3, [pc, #156]	@ (8012ee0 <dhcp_coarse_tmr+0xa4>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	607b      	str	r3, [r7, #4]
 8012e48:	e042      	b.n	8012ed0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e4e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d039      	beq.n	8012eca <dhcp_coarse_tmr+0x8e>
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	795b      	ldrb	r3, [r3, #5]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d035      	beq.n	8012eca <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	8a9b      	ldrh	r3, [r3, #20]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d012      	beq.n	8012e8c <dhcp_coarse_tmr+0x50>
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	8a5b      	ldrh	r3, [r3, #18]
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	825a      	strh	r2, [r3, #18]
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	8a5a      	ldrh	r2, [r3, #18]
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	8a9b      	ldrh	r3, [r3, #20]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d106      	bne.n	8012e8c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f000 fe2e 	bl	8013ae0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 f96b 	bl	8013160 <dhcp_start>
 8012e8a:	e01e      	b.n	8012eca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	8a1b      	ldrh	r3, [r3, #16]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00b      	beq.n	8012eac <dhcp_coarse_tmr+0x70>
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	8a1b      	ldrh	r3, [r3, #16]
 8012e98:	1e5a      	subs	r2, r3, #1
 8012e9a:	b291      	uxth	r1, r2
 8012e9c:	683a      	ldr	r2, [r7, #0]
 8012e9e:	8211      	strh	r1, [r2, #16]
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d103      	bne.n	8012eac <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 f8c7 	bl	8013038 <dhcp_t2_timeout>
 8012eaa:	e00e      	b.n	8012eca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	89db      	ldrh	r3, [r3, #14]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d00a      	beq.n	8012eca <dhcp_coarse_tmr+0x8e>
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	89db      	ldrh	r3, [r3, #14]
 8012eb8:	1e5a      	subs	r2, r3, #1
 8012eba:	b291      	uxth	r1, r2
 8012ebc:	683a      	ldr	r2, [r7, #0]
 8012ebe:	81d1      	strh	r1, [r2, #14]
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	d102      	bne.n	8012eca <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f000 f888 	bl	8012fda <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	607b      	str	r3, [r7, #4]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d1b9      	bne.n	8012e4a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012ed6:	bf00      	nop
 8012ed8:	bf00      	nop
 8012eda:	3708      	adds	r7, #8
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	20008f9c 	.word	0x20008f9c

08012ee4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b082      	sub	sp, #8
 8012ee8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012eea:	4b16      	ldr	r3, [pc, #88]	@ (8012f44 <dhcp_fine_tmr+0x60>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	607b      	str	r3, [r7, #4]
 8012ef0:	e020      	b.n	8012f34 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ef6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d017      	beq.n	8012f2e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	891b      	ldrh	r3, [r3, #8]
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d906      	bls.n	8012f14 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	891b      	ldrh	r3, [r3, #8]
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	811a      	strh	r2, [r3, #8]
 8012f12:	e00c      	b.n	8012f2e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	891b      	ldrh	r3, [r3, #8]
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	d108      	bne.n	8012f2e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	891b      	ldrh	r3, [r3, #8]
 8012f20:	3b01      	subs	r3, #1
 8012f22:	b29a      	uxth	r2, r3
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f000 f80d 	bl	8012f48 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	607b      	str	r3, [r7, #4]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d1db      	bne.n	8012ef2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012f3a:	bf00      	nop
 8012f3c:	bf00      	nop
 8012f3e:	3708      	adds	r7, #8
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	20008f9c 	.word	0x20008f9c

08012f48 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f54:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	795b      	ldrb	r3, [r3, #5]
 8012f5a:	2b0c      	cmp	r3, #12
 8012f5c:	d003      	beq.n	8012f66 <dhcp_timeout+0x1e>
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	795b      	ldrb	r3, [r3, #5]
 8012f62:	2b06      	cmp	r3, #6
 8012f64:	d103      	bne.n	8012f6e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f000 fa56 	bl	8013418 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012f6c:	e031      	b.n	8012fd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	795b      	ldrb	r3, [r3, #5]
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d10e      	bne.n	8012f94 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	799b      	ldrb	r3, [r3, #6]
 8012f7a:	2b05      	cmp	r3, #5
 8012f7c:	d803      	bhi.n	8012f86 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f7ff fe60 	bl	8012c44 <dhcp_select>
}
 8012f84:	e025      	b.n	8012fd2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 fdaa 	bl	8013ae0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f000 f8e7 	bl	8013160 <dhcp_start>
}
 8012f92:	e01e      	b.n	8012fd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	795b      	ldrb	r3, [r3, #5]
 8012f98:	2b08      	cmp	r3, #8
 8012f9a:	d10b      	bne.n	8012fb4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	799b      	ldrb	r3, [r3, #6]
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d803      	bhi.n	8012fac <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7ff fdf3 	bl	8012b90 <dhcp_check>
}
 8012faa:	e012      	b.n	8012fd2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f000 fad5 	bl	801355c <dhcp_bind>
}
 8012fb2:	e00e      	b.n	8012fd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	795b      	ldrb	r3, [r3, #5]
 8012fb8:	2b03      	cmp	r3, #3
 8012fba:	d10a      	bne.n	8012fd2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	799b      	ldrb	r3, [r3, #6]
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d803      	bhi.n	8012fcc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 fcd7 	bl	8013978 <dhcp_reboot>
}
 8012fca:	e002      	b.n	8012fd2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f000 fa23 	bl	8013418 <dhcp_discover>
}
 8012fd2:	bf00      	nop
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012fda:	b580      	push	{r7, lr}
 8012fdc:	b084      	sub	sp, #16
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fe6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	795b      	ldrb	r3, [r3, #5]
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d007      	beq.n	8013000 <dhcp_t1_timeout+0x26>
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	795b      	ldrb	r3, [r3, #5]
 8012ff4:	2b0a      	cmp	r3, #10
 8012ff6:	d003      	beq.n	8013000 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012ffc:	2b05      	cmp	r3, #5
 8012ffe:	d117      	bne.n	8013030 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f000 fb85 	bl	8013710 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	899b      	ldrh	r3, [r3, #12]
 801300a:	461a      	mov	r2, r3
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	8a5b      	ldrh	r3, [r3, #18]
 8013010:	1ad3      	subs	r3, r2, r3
 8013012:	2b01      	cmp	r3, #1
 8013014:	dd0c      	ble.n	8013030 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	899b      	ldrh	r3, [r3, #12]
 801301a:	461a      	mov	r2, r3
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	8a5b      	ldrh	r3, [r3, #18]
 8013020:	1ad3      	subs	r3, r2, r3
 8013022:	2b00      	cmp	r3, #0
 8013024:	da00      	bge.n	8013028 <dhcp_t1_timeout+0x4e>
 8013026:	3301      	adds	r3, #1
 8013028:	105b      	asrs	r3, r3, #1
 801302a:	b29a      	uxth	r2, r3
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013030:	bf00      	nop
 8013032:	3710      	adds	r7, #16
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}

08013038 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b084      	sub	sp, #16
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013044:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	795b      	ldrb	r3, [r3, #5]
 801304a:	2b01      	cmp	r3, #1
 801304c:	d00b      	beq.n	8013066 <dhcp_t2_timeout+0x2e>
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	795b      	ldrb	r3, [r3, #5]
 8013052:	2b0a      	cmp	r3, #10
 8013054:	d007      	beq.n	8013066 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801305a:	2b05      	cmp	r3, #5
 801305c:	d003      	beq.n	8013066 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	795b      	ldrb	r3, [r3, #5]
 8013062:	2b04      	cmp	r3, #4
 8013064:	d117      	bne.n	8013096 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 fbec 	bl	8013844 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	8a9b      	ldrh	r3, [r3, #20]
 8013070:	461a      	mov	r2, r3
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	8a5b      	ldrh	r3, [r3, #18]
 8013076:	1ad3      	subs	r3, r2, r3
 8013078:	2b01      	cmp	r3, #1
 801307a:	dd0c      	ble.n	8013096 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	8a9b      	ldrh	r3, [r3, #20]
 8013080:	461a      	mov	r2, r3
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	8a5b      	ldrh	r3, [r3, #18]
 8013086:	1ad3      	subs	r3, r2, r3
 8013088:	2b00      	cmp	r3, #0
 801308a:	da00      	bge.n	801308e <dhcp_t2_timeout+0x56>
 801308c:	3301      	adds	r3, #1
 801308e:	105b      	asrs	r3, r3, #1
 8013090:	b29a      	uxth	r2, r3
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013096:	bf00      	nop
 8013098:	3710      	adds	r7, #16
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
	...

080130a0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b084      	sub	sp, #16
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130ae:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2200      	movs	r2, #0
 80130b4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80130bc:	4b26      	ldr	r3, [pc, #152]	@ (8013158 <dhcp_handle_ack+0xb8>)
 80130be:	78db      	ldrb	r3, [r3, #3]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d003      	beq.n	80130cc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80130c4:	4b25      	ldr	r3, [pc, #148]	@ (801315c <dhcp_handle_ack+0xbc>)
 80130c6:	68da      	ldr	r2, [r3, #12]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80130cc:	4b22      	ldr	r3, [pc, #136]	@ (8013158 <dhcp_handle_ack+0xb8>)
 80130ce:	791b      	ldrb	r3, [r3, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d004      	beq.n	80130de <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80130d4:	4b21      	ldr	r3, [pc, #132]	@ (801315c <dhcp_handle_ack+0xbc>)
 80130d6:	691a      	ldr	r2, [r3, #16]
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80130dc:	e004      	b.n	80130e8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130e2:	085a      	lsrs	r2, r3, #1
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80130e8:	4b1b      	ldr	r3, [pc, #108]	@ (8013158 <dhcp_handle_ack+0xb8>)
 80130ea:	795b      	ldrb	r3, [r3, #5]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d004      	beq.n	80130fa <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80130f0:	4b1a      	ldr	r3, [pc, #104]	@ (801315c <dhcp_handle_ack+0xbc>)
 80130f2:	695a      	ldr	r2, [r3, #20]
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80130f8:	e007      	b.n	801310a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80130fe:	4613      	mov	r3, r2
 8013100:	00db      	lsls	r3, r3, #3
 8013102:	1a9b      	subs	r3, r3, r2
 8013104:	08da      	lsrs	r2, r3, #3
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	691a      	ldr	r2, [r3, #16]
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013112:	4b11      	ldr	r3, [pc, #68]	@ (8013158 <dhcp_handle_ack+0xb8>)
 8013114:	799b      	ldrb	r3, [r3, #6]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d00b      	beq.n	8013132 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801311a:	4b10      	ldr	r3, [pc, #64]	@ (801315c <dhcp_handle_ack+0xbc>)
 801311c:	699b      	ldr	r3, [r3, #24]
 801311e:	4618      	mov	r0, r3
 8013120:	f7f6 ffe7 	bl	800a0f2 <lwip_htonl>
 8013124:	4602      	mov	r2, r0
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2201      	movs	r2, #1
 801312e:	71da      	strb	r2, [r3, #7]
 8013130:	e002      	b.n	8013138 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2200      	movs	r2, #0
 8013136:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013138:	4b07      	ldr	r3, [pc, #28]	@ (8013158 <dhcp_handle_ack+0xb8>)
 801313a:	79db      	ldrb	r3, [r3, #7]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d007      	beq.n	8013150 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013140:	4b06      	ldr	r3, [pc, #24]	@ (801315c <dhcp_handle_ack+0xbc>)
 8013142:	69db      	ldr	r3, [r3, #28]
 8013144:	4618      	mov	r0, r3
 8013146:	f7f6 ffd4 	bl	800a0f2 <lwip_htonl>
 801314a:	4602      	mov	r2, r0
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013150:	bf00      	nop
 8013152:	3710      	adds	r7, #16
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	20009028 	.word	0x20009028
 801315c:	20009008 	.word	0x20009008

08013160 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d109      	bne.n	8013182 <dhcp_start+0x22>
 801316e:	4b37      	ldr	r3, [pc, #220]	@ (801324c <dhcp_start+0xec>)
 8013170:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8013174:	4936      	ldr	r1, [pc, #216]	@ (8013250 <dhcp_start+0xf0>)
 8013176:	4837      	ldr	r0, [pc, #220]	@ (8013254 <dhcp_start+0xf4>)
 8013178:	f004 fb42 	bl	8017800 <iprintf>
 801317c:	f06f 030f 	mvn.w	r3, #15
 8013180:	e060      	b.n	8013244 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013188:	f003 0301 	and.w	r3, r3, #1
 801318c:	2b00      	cmp	r3, #0
 801318e:	d109      	bne.n	80131a4 <dhcp_start+0x44>
 8013190:	4b2e      	ldr	r3, [pc, #184]	@ (801324c <dhcp_start+0xec>)
 8013192:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8013196:	4930      	ldr	r1, [pc, #192]	@ (8013258 <dhcp_start+0xf8>)
 8013198:	482e      	ldr	r0, [pc, #184]	@ (8013254 <dhcp_start+0xf4>)
 801319a:	f004 fb31 	bl	8017800 <iprintf>
 801319e:	f06f 030f 	mvn.w	r3, #15
 80131a2:	e04f      	b.n	8013244 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131a8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80131ae:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80131b2:	d202      	bcs.n	80131ba <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80131b4:	f04f 33ff 	mov.w	r3, #4294967295
 80131b8:	e044      	b.n	8013244 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d10d      	bne.n	80131dc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80131c0:	2034      	movs	r0, #52	@ 0x34
 80131c2:	f7f7 fad3 	bl	800a76c <mem_malloc>
 80131c6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d102      	bne.n	80131d4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80131ce:	f04f 33ff 	mov.w	r3, #4294967295
 80131d2:	e037      	b.n	8013244 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80131da:	e005      	b.n	80131e8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	791b      	ldrb	r3, [r3, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80131e4:	f7ff fc90 	bl	8012b08 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80131e8:	2234      	movs	r2, #52	@ 0x34
 80131ea:	2100      	movs	r1, #0
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f004 fba6 	bl	801793e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80131f2:	f7ff fc37 	bl	8012a64 <dhcp_inc_pcb_refcount>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d002      	beq.n	8013202 <dhcp_start+0xa2>
    return ERR_MEM;
 80131fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013200:	e020      	b.n	8013244 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	2201      	movs	r2, #1
 8013206:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801320e:	f003 0304 	and.w	r3, r3, #4
 8013212:	2b00      	cmp	r3, #0
 8013214:	d105      	bne.n	8013222 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013216:	2102      	movs	r1, #2
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f000 fcfb 	bl	8013c14 <dhcp_set_state>
    return ERR_OK;
 801321e:	2300      	movs	r3, #0
 8013220:	e010      	b.n	8013244 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f000 f8f8 	bl	8013418 <dhcp_discover>
 8013228:	4603      	mov	r3, r0
 801322a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801322c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d005      	beq.n	8013240 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f000 fc53 	bl	8013ae0 <dhcp_release_and_stop>
    return ERR_MEM;
 801323a:	f04f 33ff 	mov.w	r3, #4294967295
 801323e:	e001      	b.n	8013244 <dhcp_start+0xe4>
  }
  return result;
 8013240:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013244:	4618      	mov	r0, r3
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	0801c248 	.word	0x0801c248
 8013250:	0801c32c 	.word	0x0801c32c
 8013254:	0801c2a8 	.word	0x0801c2a8
 8013258:	0801c370 	.word	0x0801c370

0801325c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013268:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d025      	beq.n	80132bc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	795b      	ldrb	r3, [r3, #5]
 8013274:	2b0a      	cmp	r3, #10
 8013276:	d008      	beq.n	801328a <dhcp_network_changed+0x2e>
 8013278:	2b0a      	cmp	r3, #10
 801327a:	dc0d      	bgt.n	8013298 <dhcp_network_changed+0x3c>
 801327c:	2b00      	cmp	r3, #0
 801327e:	d01f      	beq.n	80132c0 <dhcp_network_changed+0x64>
 8013280:	2b00      	cmp	r3, #0
 8013282:	db09      	blt.n	8013298 <dhcp_network_changed+0x3c>
 8013284:	3b03      	subs	r3, #3
 8013286:	2b02      	cmp	r3, #2
 8013288:	d806      	bhi.n	8013298 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2200      	movs	r2, #0
 801328e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f000 fb71 	bl	8013978 <dhcp_reboot>
      break;
 8013296:	e014      	b.n	80132c2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	795b      	ldrb	r3, [r3, #5]
 801329c:	2b0c      	cmp	r3, #12
 801329e:	d906      	bls.n	80132ae <dhcp_network_changed+0x52>
 80132a0:	4b09      	ldr	r3, [pc, #36]	@ (80132c8 <dhcp_network_changed+0x6c>)
 80132a2:	f240 326d 	movw	r2, #877	@ 0x36d
 80132a6:	4909      	ldr	r1, [pc, #36]	@ (80132cc <dhcp_network_changed+0x70>)
 80132a8:	4809      	ldr	r0, [pc, #36]	@ (80132d0 <dhcp_network_changed+0x74>)
 80132aa:	f004 faa9 	bl	8017800 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	2200      	movs	r2, #0
 80132b2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f000 f8af 	bl	8013418 <dhcp_discover>
      break;
 80132ba:	e002      	b.n	80132c2 <dhcp_network_changed+0x66>
    return;
 80132bc:	bf00      	nop
 80132be:	e000      	b.n	80132c2 <dhcp_network_changed+0x66>
      break;
 80132c0:	bf00      	nop
  }
}
 80132c2:	3710      	adds	r7, #16
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	0801c248 	.word	0x0801c248
 80132cc:	0801c394 	.word	0x0801c394
 80132d0:	0801c2a8 	.word	0x0801c2a8

080132d4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d107      	bne.n	80132f4 <dhcp_arp_reply+0x20>
 80132e4:	4b0e      	ldr	r3, [pc, #56]	@ (8013320 <dhcp_arp_reply+0x4c>)
 80132e6:	f240 328b 	movw	r2, #907	@ 0x38b
 80132ea:	490e      	ldr	r1, [pc, #56]	@ (8013324 <dhcp_arp_reply+0x50>)
 80132ec:	480e      	ldr	r0, [pc, #56]	@ (8013328 <dhcp_arp_reply+0x54>)
 80132ee:	f004 fa87 	bl	8017800 <iprintf>
 80132f2:	e012      	b.n	801331a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132f8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00c      	beq.n	801331a <dhcp_arp_reply+0x46>
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	795b      	ldrb	r3, [r3, #5]
 8013304:	2b08      	cmp	r3, #8
 8013306:	d108      	bne.n	801331a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	681a      	ldr	r2, [r3, #0]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	69db      	ldr	r3, [r3, #28]
 8013310:	429a      	cmp	r2, r3
 8013312:	d102      	bne.n	801331a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f000 f809 	bl	801332c <dhcp_decline>
    }
  }
}
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	0801c248 	.word	0x0801c248
 8013324:	0801c32c 	.word	0x0801c32c
 8013328:	0801c2a8 	.word	0x0801c2a8

0801332c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801332c:	b5b0      	push	{r4, r5, r7, lr}
 801332e:	b08a      	sub	sp, #40	@ 0x28
 8013330:	af02      	add	r7, sp, #8
 8013332:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013338:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801333a:	210c      	movs	r1, #12
 801333c:	69b8      	ldr	r0, [r7, #24]
 801333e:	f000 fc69 	bl	8013c14 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013342:	f107 030c 	add.w	r3, r7, #12
 8013346:	2204      	movs	r2, #4
 8013348:	69b9      	ldr	r1, [r7, #24]
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f001 f8ee 	bl	801452c <dhcp_create_msg>
 8013350:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d035      	beq.n	80133c4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	685b      	ldr	r3, [r3, #4]
 801335c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801335e:	89b8      	ldrh	r0, [r7, #12]
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013366:	2304      	movs	r3, #4
 8013368:	2232      	movs	r2, #50	@ 0x32
 801336a:	f000 fc6d 	bl	8013c48 <dhcp_option>
 801336e:	4603      	mov	r3, r0
 8013370:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013372:	89bc      	ldrh	r4, [r7, #12]
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801337a:	69bb      	ldr	r3, [r7, #24]
 801337c:	69db      	ldr	r3, [r3, #28]
 801337e:	4618      	mov	r0, r3
 8013380:	f7f6 feb7 	bl	800a0f2 <lwip_htonl>
 8013384:	4603      	mov	r3, r0
 8013386:	461a      	mov	r2, r3
 8013388:	4629      	mov	r1, r5
 801338a:	4620      	mov	r0, r4
 801338c:	f000 fce8 	bl	8013d60 <dhcp_option_long>
 8013390:	4603      	mov	r3, r0
 8013392:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013394:	89b8      	ldrh	r0, [r7, #12]
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	33f0      	adds	r3, #240	@ 0xf0
 801339a:	697a      	ldr	r2, [r7, #20]
 801339c:	4619      	mov	r1, r3
 801339e:	f001 f99b 	bl	80146d8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80133a2:	4b19      	ldr	r3, [pc, #100]	@ (8013408 <dhcp_decline+0xdc>)
 80133a4:	6818      	ldr	r0, [r3, #0]
 80133a6:	4b19      	ldr	r3, [pc, #100]	@ (801340c <dhcp_decline+0xe0>)
 80133a8:	9301      	str	r3, [sp, #4]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	9300      	str	r3, [sp, #0]
 80133ae:	2343      	movs	r3, #67	@ 0x43
 80133b0:	4a17      	ldr	r2, [pc, #92]	@ (8013410 <dhcp_decline+0xe4>)
 80133b2:	6979      	ldr	r1, [r7, #20]
 80133b4:	f7ff f8d0 	bl	8012558 <udp_sendto_if_src>
 80133b8:	4603      	mov	r3, r0
 80133ba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80133bc:	6978      	ldr	r0, [r7, #20]
 80133be:	f7f8 fa57 	bl	800b870 <pbuf_free>
 80133c2:	e001      	b.n	80133c8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80133c4:	23ff      	movs	r3, #255	@ 0xff
 80133c6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	799b      	ldrb	r3, [r3, #6]
 80133cc:	2bff      	cmp	r3, #255	@ 0xff
 80133ce:	d005      	beq.n	80133dc <dhcp_decline+0xb0>
    dhcp->tries++;
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	799b      	ldrb	r3, [r3, #6]
 80133d4:	3301      	adds	r3, #1
 80133d6:	b2da      	uxtb	r2, r3
 80133d8:	69bb      	ldr	r3, [r7, #24]
 80133da:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80133dc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80133e0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80133e2:	89fb      	ldrh	r3, [r7, #14]
 80133e4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80133e8:	4a0a      	ldr	r2, [pc, #40]	@ (8013414 <dhcp_decline+0xe8>)
 80133ea:	fb82 1203 	smull	r1, r2, r2, r3
 80133ee:	1152      	asrs	r2, r2, #5
 80133f0:	17db      	asrs	r3, r3, #31
 80133f2:	1ad3      	subs	r3, r2, r3
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80133fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3720      	adds	r7, #32
 8013402:	46bd      	mov	sp, r7
 8013404:	bdb0      	pop	{r4, r5, r7, pc}
 8013406:	bf00      	nop
 8013408:	20009030 	.word	0x20009030
 801340c:	0802047c 	.word	0x0802047c
 8013410:	08020480 	.word	0x08020480
 8013414:	10624dd3 	.word	0x10624dd3

08013418 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b08a      	sub	sp, #40	@ 0x28
 801341c:	af02      	add	r7, sp, #8
 801341e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013424:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013426:	2300      	movs	r3, #0
 8013428:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801342a:	69bb      	ldr	r3, [r7, #24]
 801342c:	2200      	movs	r2, #0
 801342e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013430:	2106      	movs	r1, #6
 8013432:	69b8      	ldr	r0, [r7, #24]
 8013434:	f000 fbee 	bl	8013c14 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013438:	f107 0308 	add.w	r3, r7, #8
 801343c:	2201      	movs	r2, #1
 801343e:	69b9      	ldr	r1, [r7, #24]
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f001 f873 	bl	801452c <dhcp_create_msg>
 8013446:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d04b      	beq.n	80134e6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013454:	8938      	ldrh	r0, [r7, #8]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801345c:	2302      	movs	r3, #2
 801345e:	2239      	movs	r2, #57	@ 0x39
 8013460:	f000 fbf2 	bl	8013c48 <dhcp_option>
 8013464:	4603      	mov	r3, r0
 8013466:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013468:	8938      	ldrh	r0, [r7, #8]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013474:	461a      	mov	r2, r3
 8013476:	f000 fc41 	bl	8013cfc <dhcp_option_short>
 801347a:	4603      	mov	r3, r0
 801347c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801347e:	8938      	ldrh	r0, [r7, #8]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013486:	2303      	movs	r3, #3
 8013488:	2237      	movs	r2, #55	@ 0x37
 801348a:	f000 fbdd 	bl	8013c48 <dhcp_option>
 801348e:	4603      	mov	r3, r0
 8013490:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013492:	2300      	movs	r3, #0
 8013494:	77fb      	strb	r3, [r7, #31]
 8013496:	e00e      	b.n	80134b6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013498:	8938      	ldrh	r0, [r7, #8]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80134a0:	7ffb      	ldrb	r3, [r7, #31]
 80134a2:	4a29      	ldr	r2, [pc, #164]	@ (8013548 <dhcp_discover+0x130>)
 80134a4:	5cd3      	ldrb	r3, [r2, r3]
 80134a6:	461a      	mov	r2, r3
 80134a8:	f000 fc02 	bl	8013cb0 <dhcp_option_byte>
 80134ac:	4603      	mov	r3, r0
 80134ae:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134b0:	7ffb      	ldrb	r3, [r7, #31]
 80134b2:	3301      	adds	r3, #1
 80134b4:	77fb      	strb	r3, [r7, #31]
 80134b6:	7ffb      	ldrb	r3, [r7, #31]
 80134b8:	2b02      	cmp	r3, #2
 80134ba:	d9ed      	bls.n	8013498 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80134bc:	8938      	ldrh	r0, [r7, #8]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	33f0      	adds	r3, #240	@ 0xf0
 80134c2:	693a      	ldr	r2, [r7, #16]
 80134c4:	4619      	mov	r1, r3
 80134c6:	f001 f907 	bl	80146d8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80134ca:	4b20      	ldr	r3, [pc, #128]	@ (801354c <dhcp_discover+0x134>)
 80134cc:	6818      	ldr	r0, [r3, #0]
 80134ce:	4b20      	ldr	r3, [pc, #128]	@ (8013550 <dhcp_discover+0x138>)
 80134d0:	9301      	str	r3, [sp, #4]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	9300      	str	r3, [sp, #0]
 80134d6:	2343      	movs	r3, #67	@ 0x43
 80134d8:	4a1e      	ldr	r2, [pc, #120]	@ (8013554 <dhcp_discover+0x13c>)
 80134da:	6939      	ldr	r1, [r7, #16]
 80134dc:	f7ff f83c 	bl	8012558 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80134e0:	6938      	ldr	r0, [r7, #16]
 80134e2:	f7f8 f9c5 	bl	800b870 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	799b      	ldrb	r3, [r3, #6]
 80134ea:	2bff      	cmp	r3, #255	@ 0xff
 80134ec:	d005      	beq.n	80134fa <dhcp_discover+0xe2>
    dhcp->tries++;
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	799b      	ldrb	r3, [r3, #6]
 80134f2:	3301      	adds	r3, #1
 80134f4:	b2da      	uxtb	r2, r3
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80134fa:	69bb      	ldr	r3, [r7, #24]
 80134fc:	799b      	ldrb	r3, [r3, #6]
 80134fe:	2b05      	cmp	r3, #5
 8013500:	d80d      	bhi.n	801351e <dhcp_discover+0x106>
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	799b      	ldrb	r3, [r3, #6]
 8013506:	461a      	mov	r2, r3
 8013508:	2301      	movs	r3, #1
 801350a:	4093      	lsls	r3, r2
 801350c:	b29b      	uxth	r3, r3
 801350e:	461a      	mov	r2, r3
 8013510:	0152      	lsls	r2, r2, #5
 8013512:	1ad2      	subs	r2, r2, r3
 8013514:	0092      	lsls	r2, r2, #2
 8013516:	4413      	add	r3, r2
 8013518:	00db      	lsls	r3, r3, #3
 801351a:	b29b      	uxth	r3, r3
 801351c:	e001      	b.n	8013522 <dhcp_discover+0x10a>
 801351e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8013522:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013524:	897b      	ldrh	r3, [r7, #10]
 8013526:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801352a:	4a0b      	ldr	r2, [pc, #44]	@ (8013558 <dhcp_discover+0x140>)
 801352c:	fb82 1203 	smull	r1, r2, r2, r3
 8013530:	1152      	asrs	r2, r2, #5
 8013532:	17db      	asrs	r3, r3, #31
 8013534:	1ad3      	subs	r3, r2, r3
 8013536:	b29a      	uxth	r2, r3
 8013538:	69bb      	ldr	r3, [r7, #24]
 801353a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801353c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013540:	4618      	mov	r0, r3
 8013542:	3720      	adds	r7, #32
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	20000038 	.word	0x20000038
 801354c:	20009030 	.word	0x20009030
 8013550:	0802047c 	.word	0x0802047c
 8013554:	08020480 	.word	0x08020480
 8013558:	10624dd3 	.word	0x10624dd3

0801355c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b088      	sub	sp, #32
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d107      	bne.n	801357a <dhcp_bind+0x1e>
 801356a:	4b64      	ldr	r3, [pc, #400]	@ (80136fc <dhcp_bind+0x1a0>)
 801356c:	f240 4215 	movw	r2, #1045	@ 0x415
 8013570:	4963      	ldr	r1, [pc, #396]	@ (8013700 <dhcp_bind+0x1a4>)
 8013572:	4864      	ldr	r0, [pc, #400]	@ (8013704 <dhcp_bind+0x1a8>)
 8013574:	f004 f944 	bl	8017800 <iprintf>
 8013578:	e0bc      	b.n	80136f4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801357e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d107      	bne.n	8013596 <dhcp_bind+0x3a>
 8013586:	4b5d      	ldr	r3, [pc, #372]	@ (80136fc <dhcp_bind+0x1a0>)
 8013588:	f240 4217 	movw	r2, #1047	@ 0x417
 801358c:	495e      	ldr	r1, [pc, #376]	@ (8013708 <dhcp_bind+0x1ac>)
 801358e:	485d      	ldr	r0, [pc, #372]	@ (8013704 <dhcp_bind+0x1a8>)
 8013590:	f004 f936 	bl	8017800 <iprintf>
 8013594:	e0ae      	b.n	80136f4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013596:	69bb      	ldr	r3, [r7, #24]
 8013598:	2200      	movs	r2, #0
 801359a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135a4:	d019      	beq.n	80135da <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80135a6:	69bb      	ldr	r3, [r7, #24]
 80135a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135aa:	331e      	adds	r3, #30
 80135ac:	4a57      	ldr	r2, [pc, #348]	@ (801370c <dhcp_bind+0x1b0>)
 80135ae:	fba2 2303 	umull	r2, r3, r2, r3
 80135b2:	095b      	lsrs	r3, r3, #5
 80135b4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80135b6:	69fb      	ldr	r3, [r7, #28]
 80135b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135bc:	d302      	bcc.n	80135c4 <dhcp_bind+0x68>
      timeout = 0xffff;
 80135be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80135c2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	69bb      	ldr	r3, [r7, #24]
 80135ca:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	8a9b      	ldrh	r3, [r3, #20]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d102      	bne.n	80135da <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	2201      	movs	r2, #1
 80135d8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135e2:	d01d      	beq.n	8013620 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80135e4:	69bb      	ldr	r3, [r7, #24]
 80135e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135e8:	331e      	adds	r3, #30
 80135ea:	4a48      	ldr	r2, [pc, #288]	@ (801370c <dhcp_bind+0x1b0>)
 80135ec:	fba2 2303 	umull	r2, r3, r2, r3
 80135f0:	095b      	lsrs	r3, r3, #5
 80135f2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80135f4:	69fb      	ldr	r3, [r7, #28]
 80135f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135fa:	d302      	bcc.n	8013602 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80135fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013600:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	b29a      	uxth	r2, r3
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	895b      	ldrh	r3, [r3, #10]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d102      	bne.n	8013618 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013612:	69bb      	ldr	r3, [r7, #24]
 8013614:	2201      	movs	r2, #1
 8013616:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013618:	69bb      	ldr	r3, [r7, #24]
 801361a:	895a      	ldrh	r2, [r3, #10]
 801361c:	69bb      	ldr	r3, [r7, #24]
 801361e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013628:	d01d      	beq.n	8013666 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801362e:	331e      	adds	r3, #30
 8013630:	4a36      	ldr	r2, [pc, #216]	@ (801370c <dhcp_bind+0x1b0>)
 8013632:	fba2 2303 	umull	r2, r3, r2, r3
 8013636:	095b      	lsrs	r3, r3, #5
 8013638:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801363a:	69fb      	ldr	r3, [r7, #28]
 801363c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013640:	d302      	bcc.n	8013648 <dhcp_bind+0xec>
      timeout = 0xffff;
 8013642:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013646:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	b29a      	uxth	r2, r3
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	899b      	ldrh	r3, [r3, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d102      	bne.n	801365e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	2201      	movs	r2, #1
 801365c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	899a      	ldrh	r2, [r3, #12]
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	895a      	ldrh	r2, [r3, #10]
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	899b      	ldrh	r3, [r3, #12]
 801366e:	429a      	cmp	r2, r3
 8013670:	d306      	bcc.n	8013680 <dhcp_bind+0x124>
 8013672:	69bb      	ldr	r3, [r7, #24]
 8013674:	899b      	ldrh	r3, [r3, #12]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d002      	beq.n	8013680 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	2200      	movs	r2, #0
 801367e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	79db      	ldrb	r3, [r3, #7]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d003      	beq.n	8013690 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013688:	69bb      	ldr	r3, [r7, #24]
 801368a:	6a1b      	ldr	r3, [r3, #32]
 801368c:	613b      	str	r3, [r7, #16]
 801368e:	e014      	b.n	80136ba <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	331c      	adds	r3, #28
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013698:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801369c:	2b00      	cmp	r3, #0
 801369e:	db02      	blt.n	80136a6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80136a0:	23ff      	movs	r3, #255	@ 0xff
 80136a2:	613b      	str	r3, [r7, #16]
 80136a4:	e009      	b.n	80136ba <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80136a6:	7dfb      	ldrb	r3, [r7, #23]
 80136a8:	2bbf      	cmp	r3, #191	@ 0xbf
 80136aa:	d903      	bls.n	80136b4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80136ac:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80136b0:	613b      	str	r3, [r7, #16]
 80136b2:	e002      	b.n	80136ba <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80136b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80136b8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80136ba:	69bb      	ldr	r3, [r7, #24]
 80136bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136be:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d108      	bne.n	80136d8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80136c6:	69bb      	ldr	r3, [r7, #24]
 80136c8:	69da      	ldr	r2, [r3, #28]
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	4013      	ands	r3, r2
 80136ce:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80136d6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80136d8:	210a      	movs	r1, #10
 80136da:	69b8      	ldr	r0, [r7, #24]
 80136dc:	f000 fa9a 	bl	8013c14 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	f103 011c 	add.w	r1, r3, #28
 80136e6:	f107 030c 	add.w	r3, r7, #12
 80136ea:	f107 0210 	add.w	r2, r7, #16
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7f7 fbde 	bl	800aeb0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80136f4:	3720      	adds	r7, #32
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	0801c248 	.word	0x0801c248
 8013700:	0801c3a8 	.word	0x0801c3a8
 8013704:	0801c2a8 	.word	0x0801c2a8
 8013708:	0801c3c4 	.word	0x0801c3c4
 801370c:	88888889 	.word	0x88888889

08013710 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b08a      	sub	sp, #40	@ 0x28
 8013714:	af02      	add	r7, sp, #8
 8013716:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801371c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801371e:	2105      	movs	r1, #5
 8013720:	69b8      	ldr	r0, [r7, #24]
 8013722:	f000 fa77 	bl	8013c14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013726:	f107 030c 	add.w	r3, r7, #12
 801372a:	2203      	movs	r2, #3
 801372c:	69b9      	ldr	r1, [r7, #24]
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f000 fefc 	bl	801452c <dhcp_create_msg>
 8013734:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d04e      	beq.n	80137da <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013742:	89b8      	ldrh	r0, [r7, #12]
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801374a:	2302      	movs	r3, #2
 801374c:	2239      	movs	r2, #57	@ 0x39
 801374e:	f000 fa7b 	bl	8013c48 <dhcp_option>
 8013752:	4603      	mov	r3, r0
 8013754:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013756:	89b8      	ldrh	r0, [r7, #12]
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013762:	461a      	mov	r2, r3
 8013764:	f000 faca 	bl	8013cfc <dhcp_option_short>
 8013768:	4603      	mov	r3, r0
 801376a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801376c:	89b8      	ldrh	r0, [r7, #12]
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013774:	2303      	movs	r3, #3
 8013776:	2237      	movs	r2, #55	@ 0x37
 8013778:	f000 fa66 	bl	8013c48 <dhcp_option>
 801377c:	4603      	mov	r3, r0
 801377e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013780:	2300      	movs	r3, #0
 8013782:	77bb      	strb	r3, [r7, #30]
 8013784:	e00e      	b.n	80137a4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013786:	89b8      	ldrh	r0, [r7, #12]
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801378e:	7fbb      	ldrb	r3, [r7, #30]
 8013790:	4a29      	ldr	r2, [pc, #164]	@ (8013838 <dhcp_renew+0x128>)
 8013792:	5cd3      	ldrb	r3, [r2, r3]
 8013794:	461a      	mov	r2, r3
 8013796:	f000 fa8b 	bl	8013cb0 <dhcp_option_byte>
 801379a:	4603      	mov	r3, r0
 801379c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801379e:	7fbb      	ldrb	r3, [r7, #30]
 80137a0:	3301      	adds	r3, #1
 80137a2:	77bb      	strb	r3, [r7, #30]
 80137a4:	7fbb      	ldrb	r3, [r7, #30]
 80137a6:	2b02      	cmp	r3, #2
 80137a8:	d9ed      	bls.n	8013786 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80137aa:	89b8      	ldrh	r0, [r7, #12]
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	33f0      	adds	r3, #240	@ 0xf0
 80137b0:	697a      	ldr	r2, [r7, #20]
 80137b2:	4619      	mov	r1, r3
 80137b4:	f000 ff90 	bl	80146d8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80137b8:	4b20      	ldr	r3, [pc, #128]	@ (801383c <dhcp_renew+0x12c>)
 80137ba:	6818      	ldr	r0, [r3, #0]
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	f103 0218 	add.w	r2, r3, #24
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	9300      	str	r3, [sp, #0]
 80137c6:	2343      	movs	r3, #67	@ 0x43
 80137c8:	6979      	ldr	r1, [r7, #20]
 80137ca:	f7fe fe51 	bl	8012470 <udp_sendto_if>
 80137ce:	4603      	mov	r3, r0
 80137d0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f7f8 f84c 	bl	800b870 <pbuf_free>
 80137d8:	e001      	b.n	80137de <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80137da:	23ff      	movs	r3, #255	@ 0xff
 80137dc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	799b      	ldrb	r3, [r3, #6]
 80137e2:	2bff      	cmp	r3, #255	@ 0xff
 80137e4:	d005      	beq.n	80137f2 <dhcp_renew+0xe2>
    dhcp->tries++;
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	799b      	ldrb	r3, [r3, #6]
 80137ea:	3301      	adds	r3, #1
 80137ec:	b2da      	uxtb	r2, r3
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	799b      	ldrb	r3, [r3, #6]
 80137f6:	2b09      	cmp	r3, #9
 80137f8:	d809      	bhi.n	801380e <dhcp_renew+0xfe>
 80137fa:	69bb      	ldr	r3, [r7, #24]
 80137fc:	799b      	ldrb	r3, [r3, #6]
 80137fe:	461a      	mov	r2, r3
 8013800:	0152      	lsls	r2, r2, #5
 8013802:	1ad2      	subs	r2, r2, r3
 8013804:	0092      	lsls	r2, r2, #2
 8013806:	4413      	add	r3, r2
 8013808:	011b      	lsls	r3, r3, #4
 801380a:	b29b      	uxth	r3, r3
 801380c:	e001      	b.n	8013812 <dhcp_renew+0x102>
 801380e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013812:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013814:	89fb      	ldrh	r3, [r7, #14]
 8013816:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801381a:	4a09      	ldr	r2, [pc, #36]	@ (8013840 <dhcp_renew+0x130>)
 801381c:	fb82 1203 	smull	r1, r2, r2, r3
 8013820:	1152      	asrs	r2, r2, #5
 8013822:	17db      	asrs	r3, r3, #31
 8013824:	1ad3      	subs	r3, r2, r3
 8013826:	b29a      	uxth	r2, r3
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801382c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013830:	4618      	mov	r0, r3
 8013832:	3720      	adds	r7, #32
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}
 8013838:	20000038 	.word	0x20000038
 801383c:	20009030 	.word	0x20009030
 8013840:	10624dd3 	.word	0x10624dd3

08013844 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b08a      	sub	sp, #40	@ 0x28
 8013848:	af02      	add	r7, sp, #8
 801384a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013850:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013852:	2104      	movs	r1, #4
 8013854:	69b8      	ldr	r0, [r7, #24]
 8013856:	f000 f9dd 	bl	8013c14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801385a:	f107 030c 	add.w	r3, r7, #12
 801385e:	2203      	movs	r2, #3
 8013860:	69b9      	ldr	r1, [r7, #24]
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f000 fe62 	bl	801452c <dhcp_create_msg>
 8013868:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d04c      	beq.n	801390a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013876:	89b8      	ldrh	r0, [r7, #12]
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801387e:	2302      	movs	r3, #2
 8013880:	2239      	movs	r2, #57	@ 0x39
 8013882:	f000 f9e1 	bl	8013c48 <dhcp_option>
 8013886:	4603      	mov	r3, r0
 8013888:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801388a:	89b8      	ldrh	r0, [r7, #12]
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013896:	461a      	mov	r2, r3
 8013898:	f000 fa30 	bl	8013cfc <dhcp_option_short>
 801389c:	4603      	mov	r3, r0
 801389e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80138a0:	89b8      	ldrh	r0, [r7, #12]
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80138a8:	2303      	movs	r3, #3
 80138aa:	2237      	movs	r2, #55	@ 0x37
 80138ac:	f000 f9cc 	bl	8013c48 <dhcp_option>
 80138b0:	4603      	mov	r3, r0
 80138b2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138b4:	2300      	movs	r3, #0
 80138b6:	77bb      	strb	r3, [r7, #30]
 80138b8:	e00e      	b.n	80138d8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80138ba:	89b8      	ldrh	r0, [r7, #12]
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80138c2:	7fbb      	ldrb	r3, [r7, #30]
 80138c4:	4a28      	ldr	r2, [pc, #160]	@ (8013968 <dhcp_rebind+0x124>)
 80138c6:	5cd3      	ldrb	r3, [r2, r3]
 80138c8:	461a      	mov	r2, r3
 80138ca:	f000 f9f1 	bl	8013cb0 <dhcp_option_byte>
 80138ce:	4603      	mov	r3, r0
 80138d0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138d2:	7fbb      	ldrb	r3, [r7, #30]
 80138d4:	3301      	adds	r3, #1
 80138d6:	77bb      	strb	r3, [r7, #30]
 80138d8:	7fbb      	ldrb	r3, [r7, #30]
 80138da:	2b02      	cmp	r3, #2
 80138dc:	d9ed      	bls.n	80138ba <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80138de:	89b8      	ldrh	r0, [r7, #12]
 80138e0:	693b      	ldr	r3, [r7, #16]
 80138e2:	33f0      	adds	r3, #240	@ 0xf0
 80138e4:	697a      	ldr	r2, [r7, #20]
 80138e6:	4619      	mov	r1, r3
 80138e8:	f000 fef6 	bl	80146d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80138ec:	4b1f      	ldr	r3, [pc, #124]	@ (801396c <dhcp_rebind+0x128>)
 80138ee:	6818      	ldr	r0, [r3, #0]
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	2343      	movs	r3, #67	@ 0x43
 80138f6:	4a1e      	ldr	r2, [pc, #120]	@ (8013970 <dhcp_rebind+0x12c>)
 80138f8:	6979      	ldr	r1, [r7, #20]
 80138fa:	f7fe fdb9 	bl	8012470 <udp_sendto_if>
 80138fe:	4603      	mov	r3, r0
 8013900:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013902:	6978      	ldr	r0, [r7, #20]
 8013904:	f7f7 ffb4 	bl	800b870 <pbuf_free>
 8013908:	e001      	b.n	801390e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801390a:	23ff      	movs	r3, #255	@ 0xff
 801390c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801390e:	69bb      	ldr	r3, [r7, #24]
 8013910:	799b      	ldrb	r3, [r3, #6]
 8013912:	2bff      	cmp	r3, #255	@ 0xff
 8013914:	d005      	beq.n	8013922 <dhcp_rebind+0xde>
    dhcp->tries++;
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	799b      	ldrb	r3, [r3, #6]
 801391a:	3301      	adds	r3, #1
 801391c:	b2da      	uxtb	r2, r3
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013922:	69bb      	ldr	r3, [r7, #24]
 8013924:	799b      	ldrb	r3, [r3, #6]
 8013926:	2b09      	cmp	r3, #9
 8013928:	d809      	bhi.n	801393e <dhcp_rebind+0xfa>
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	799b      	ldrb	r3, [r3, #6]
 801392e:	461a      	mov	r2, r3
 8013930:	0152      	lsls	r2, r2, #5
 8013932:	1ad2      	subs	r2, r2, r3
 8013934:	0092      	lsls	r2, r2, #2
 8013936:	4413      	add	r3, r2
 8013938:	00db      	lsls	r3, r3, #3
 801393a:	b29b      	uxth	r3, r3
 801393c:	e001      	b.n	8013942 <dhcp_rebind+0xfe>
 801393e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013942:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013944:	89fb      	ldrh	r3, [r7, #14]
 8013946:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801394a:	4a0a      	ldr	r2, [pc, #40]	@ (8013974 <dhcp_rebind+0x130>)
 801394c:	fb82 1203 	smull	r1, r2, r2, r3
 8013950:	1152      	asrs	r2, r2, #5
 8013952:	17db      	asrs	r3, r3, #31
 8013954:	1ad3      	subs	r3, r2, r3
 8013956:	b29a      	uxth	r2, r3
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801395c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013960:	4618      	mov	r0, r3
 8013962:	3720      	adds	r7, #32
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	20000038 	.word	0x20000038
 801396c:	20009030 	.word	0x20009030
 8013970:	08020480 	.word	0x08020480
 8013974:	10624dd3 	.word	0x10624dd3

08013978 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013978:	b5b0      	push	{r4, r5, r7, lr}
 801397a:	b08a      	sub	sp, #40	@ 0x28
 801397c:	af02      	add	r7, sp, #8
 801397e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013984:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013986:	2103      	movs	r1, #3
 8013988:	69b8      	ldr	r0, [r7, #24]
 801398a:	f000 f943 	bl	8013c14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801398e:	f107 030c 	add.w	r3, r7, #12
 8013992:	2203      	movs	r2, #3
 8013994:	69b9      	ldr	r1, [r7, #24]
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 fdc8 	bl	801452c <dhcp_create_msg>
 801399c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d066      	beq.n	8013a72 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	685b      	ldr	r3, [r3, #4]
 80139a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80139aa:	89b8      	ldrh	r0, [r7, #12]
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80139b2:	2302      	movs	r3, #2
 80139b4:	2239      	movs	r2, #57	@ 0x39
 80139b6:	f000 f947 	bl	8013c48 <dhcp_option>
 80139ba:	4603      	mov	r3, r0
 80139bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80139be:	89b8      	ldrh	r0, [r7, #12]
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	33f0      	adds	r3, #240	@ 0xf0
 80139c4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80139c8:	4619      	mov	r1, r3
 80139ca:	f000 f997 	bl	8013cfc <dhcp_option_short>
 80139ce:	4603      	mov	r3, r0
 80139d0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80139d2:	89b8      	ldrh	r0, [r7, #12]
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80139da:	2304      	movs	r3, #4
 80139dc:	2232      	movs	r2, #50	@ 0x32
 80139de:	f000 f933 	bl	8013c48 <dhcp_option>
 80139e2:	4603      	mov	r3, r0
 80139e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80139e6:	89bc      	ldrh	r4, [r7, #12]
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80139ee:	69bb      	ldr	r3, [r7, #24]
 80139f0:	69db      	ldr	r3, [r3, #28]
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7f6 fb7d 	bl	800a0f2 <lwip_htonl>
 80139f8:	4603      	mov	r3, r0
 80139fa:	461a      	mov	r2, r3
 80139fc:	4629      	mov	r1, r5
 80139fe:	4620      	mov	r0, r4
 8013a00:	f000 f9ae 	bl	8013d60 <dhcp_option_long>
 8013a04:	4603      	mov	r3, r0
 8013a06:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013a08:	89b8      	ldrh	r0, [r7, #12]
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013a10:	2303      	movs	r3, #3
 8013a12:	2237      	movs	r2, #55	@ 0x37
 8013a14:	f000 f918 	bl	8013c48 <dhcp_option>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	77bb      	strb	r3, [r7, #30]
 8013a20:	e00e      	b.n	8013a40 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013a22:	89b8      	ldrh	r0, [r7, #12]
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013a2a:	7fbb      	ldrb	r3, [r7, #30]
 8013a2c:	4a28      	ldr	r2, [pc, #160]	@ (8013ad0 <dhcp_reboot+0x158>)
 8013a2e:	5cd3      	ldrb	r3, [r2, r3]
 8013a30:	461a      	mov	r2, r3
 8013a32:	f000 f93d 	bl	8013cb0 <dhcp_option_byte>
 8013a36:	4603      	mov	r3, r0
 8013a38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a3a:	7fbb      	ldrb	r3, [r7, #30]
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	77bb      	strb	r3, [r7, #30]
 8013a40:	7fbb      	ldrb	r3, [r7, #30]
 8013a42:	2b02      	cmp	r3, #2
 8013a44:	d9ed      	bls.n	8013a22 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013a46:	89b8      	ldrh	r0, [r7, #12]
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	33f0      	adds	r3, #240	@ 0xf0
 8013a4c:	697a      	ldr	r2, [r7, #20]
 8013a4e:	4619      	mov	r1, r3
 8013a50:	f000 fe42 	bl	80146d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013a54:	4b1f      	ldr	r3, [pc, #124]	@ (8013ad4 <dhcp_reboot+0x15c>)
 8013a56:	6818      	ldr	r0, [r3, #0]
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	2343      	movs	r3, #67	@ 0x43
 8013a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8013ad8 <dhcp_reboot+0x160>)
 8013a60:	6979      	ldr	r1, [r7, #20]
 8013a62:	f7fe fd05 	bl	8012470 <udp_sendto_if>
 8013a66:	4603      	mov	r3, r0
 8013a68:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013a6a:	6978      	ldr	r0, [r7, #20]
 8013a6c:	f7f7 ff00 	bl	800b870 <pbuf_free>
 8013a70:	e001      	b.n	8013a76 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013a72:	23ff      	movs	r3, #255	@ 0xff
 8013a74:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013a76:	69bb      	ldr	r3, [r7, #24]
 8013a78:	799b      	ldrb	r3, [r3, #6]
 8013a7a:	2bff      	cmp	r3, #255	@ 0xff
 8013a7c:	d005      	beq.n	8013a8a <dhcp_reboot+0x112>
    dhcp->tries++;
 8013a7e:	69bb      	ldr	r3, [r7, #24]
 8013a80:	799b      	ldrb	r3, [r3, #6]
 8013a82:	3301      	adds	r3, #1
 8013a84:	b2da      	uxtb	r2, r3
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	799b      	ldrb	r3, [r3, #6]
 8013a8e:	2b09      	cmp	r3, #9
 8013a90:	d809      	bhi.n	8013aa6 <dhcp_reboot+0x12e>
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	799b      	ldrb	r3, [r3, #6]
 8013a96:	461a      	mov	r2, r3
 8013a98:	0152      	lsls	r2, r2, #5
 8013a9a:	1ad2      	subs	r2, r2, r3
 8013a9c:	0092      	lsls	r2, r2, #2
 8013a9e:	4413      	add	r3, r2
 8013aa0:	00db      	lsls	r3, r3, #3
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	e001      	b.n	8013aaa <dhcp_reboot+0x132>
 8013aa6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013aaa:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013aac:	89fb      	ldrh	r3, [r7, #14]
 8013aae:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8013adc <dhcp_reboot+0x164>)
 8013ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8013ab8:	1152      	asrs	r2, r2, #5
 8013aba:	17db      	asrs	r3, r3, #31
 8013abc:	1ad3      	subs	r3, r2, r3
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3720      	adds	r7, #32
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bdb0      	pop	{r4, r5, r7, pc}
 8013ad0:	20000038 	.word	0x20000038
 8013ad4:	20009030 	.word	0x20009030
 8013ad8:	08020480 	.word	0x08020480
 8013adc:	10624dd3 	.word	0x10624dd3

08013ae0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013ae0:	b5b0      	push	{r4, r5, r7, lr}
 8013ae2:	b08a      	sub	sp, #40	@ 0x28
 8013ae4:	af02      	add	r7, sp, #8
 8013ae6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013aec:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	f000 8084 	beq.w	8013bfe <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	795b      	ldrb	r3, [r3, #5]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	f000 8081 	beq.w	8013c02 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	699b      	ldr	r3, [r3, #24]
 8013b04:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013b12:	69fb      	ldr	r3, [r7, #28]
 8013b14:	2200      	movs	r2, #0
 8013b16:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	2200      	movs	r2, #0
 8013b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b2c:	69fb      	ldr	r3, [r7, #28]
 8013b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b30:	69fb      	ldr	r3, [r7, #28]
 8013b32:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013b34:	69fb      	ldr	r3, [r7, #28]
 8013b36:	2200      	movs	r2, #0
 8013b38:	829a      	strh	r2, [r3, #20]
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	8a9a      	ldrh	r2, [r3, #20]
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	825a      	strh	r2, [r3, #18]
 8013b42:	69fb      	ldr	r3, [r7, #28]
 8013b44:	8a5a      	ldrh	r2, [r3, #18]
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	821a      	strh	r2, [r3, #16]
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	8a1a      	ldrh	r2, [r3, #16]
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 fdee 	bl	8014734 <dhcp_supplied_address>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d03b      	beq.n	8013bd6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013b5e:	f107 030e 	add.w	r3, r7, #14
 8013b62:	2207      	movs	r2, #7
 8013b64:	69f9      	ldr	r1, [r7, #28]
 8013b66:	6878      	ldr	r0, [r7, #4]
 8013b68:	f000 fce0 	bl	801452c <dhcp_create_msg>
 8013b6c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013b6e:	69bb      	ldr	r3, [r7, #24]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d030      	beq.n	8013bd6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013b7a:	89f8      	ldrh	r0, [r7, #14]
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b82:	2304      	movs	r3, #4
 8013b84:	2236      	movs	r2, #54	@ 0x36
 8013b86:	f000 f85f 	bl	8013c48 <dhcp_option>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013b8e:	89fc      	ldrh	r4, [r7, #14]
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7f6 faaa 	bl	800a0f2 <lwip_htonl>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	f000 f8db 	bl	8013d60 <dhcp_option_long>
 8013baa:	4603      	mov	r3, r0
 8013bac:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013bae:	89f8      	ldrh	r0, [r7, #14]
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	33f0      	adds	r3, #240	@ 0xf0
 8013bb4:	69ba      	ldr	r2, [r7, #24]
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	f000 fd8e 	bl	80146d8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013bbc:	4b13      	ldr	r3, [pc, #76]	@ (8013c0c <dhcp_release_and_stop+0x12c>)
 8013bbe:	6818      	ldr	r0, [r3, #0]
 8013bc0:	f107 0210 	add.w	r2, r7, #16
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	2343      	movs	r3, #67	@ 0x43
 8013bca:	69b9      	ldr	r1, [r7, #24]
 8013bcc:	f7fe fc50 	bl	8012470 <udp_sendto_if>
      pbuf_free(p_out);
 8013bd0:	69b8      	ldr	r0, [r7, #24]
 8013bd2:	f7f7 fe4d 	bl	800b870 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8013c10 <dhcp_release_and_stop+0x130>)
 8013bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8013c10 <dhcp_release_and_stop+0x130>)
 8013bda:	490d      	ldr	r1, [pc, #52]	@ (8013c10 <dhcp_release_and_stop+0x130>)
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7f7 f967 	bl	800aeb0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013be2:	2100      	movs	r1, #0
 8013be4:	69f8      	ldr	r0, [r7, #28]
 8013be6:	f000 f815 	bl	8013c14 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	791b      	ldrb	r3, [r3, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d008      	beq.n	8013c04 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013bf2:	f7fe ff89 	bl	8012b08 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	711a      	strb	r2, [r3, #4]
 8013bfc:	e002      	b.n	8013c04 <dhcp_release_and_stop+0x124>
    return;
 8013bfe:	bf00      	nop
 8013c00:	e000      	b.n	8013c04 <dhcp_release_and_stop+0x124>
    return;
 8013c02:	bf00      	nop
  }
}
 8013c04:	3720      	adds	r7, #32
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bdb0      	pop	{r4, r5, r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	20009030 	.word	0x20009030
 8013c10:	0802047c 	.word	0x0802047c

08013c14 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	795b      	ldrb	r3, [r3, #5]
 8013c24:	78fa      	ldrb	r2, [r7, #3]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d008      	beq.n	8013c3c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	78fa      	ldrb	r2, [r7, #3]
 8013c2e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	811a      	strh	r2, [r3, #8]
  }
}
 8013c3c:	bf00      	nop
 8013c3e:	370c      	adds	r7, #12
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6039      	str	r1, [r7, #0]
 8013c50:	4611      	mov	r1, r2
 8013c52:	461a      	mov	r2, r3
 8013c54:	4603      	mov	r3, r0
 8013c56:	80fb      	strh	r3, [r7, #6]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	717b      	strb	r3, [r7, #5]
 8013c5c:	4613      	mov	r3, r2
 8013c5e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013c60:	88fa      	ldrh	r2, [r7, #6]
 8013c62:	793b      	ldrb	r3, [r7, #4]
 8013c64:	4413      	add	r3, r2
 8013c66:	3302      	adds	r3, #2
 8013c68:	2b44      	cmp	r3, #68	@ 0x44
 8013c6a:	d906      	bls.n	8013c7a <dhcp_option+0x32>
 8013c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca4 <dhcp_option+0x5c>)
 8013c6e:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013c72:	490d      	ldr	r1, [pc, #52]	@ (8013ca8 <dhcp_option+0x60>)
 8013c74:	480d      	ldr	r0, [pc, #52]	@ (8013cac <dhcp_option+0x64>)
 8013c76:	f003 fdc3 	bl	8017800 <iprintf>
  options[options_out_len++] = option_type;
 8013c7a:	88fb      	ldrh	r3, [r7, #6]
 8013c7c:	1c5a      	adds	r2, r3, #1
 8013c7e:	80fa      	strh	r2, [r7, #6]
 8013c80:	461a      	mov	r2, r3
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	4413      	add	r3, r2
 8013c86:	797a      	ldrb	r2, [r7, #5]
 8013c88:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013c8a:	88fb      	ldrh	r3, [r7, #6]
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	80fa      	strh	r2, [r7, #6]
 8013c90:	461a      	mov	r2, r3
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	4413      	add	r3, r2
 8013c96:	793a      	ldrb	r2, [r7, #4]
 8013c98:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013c9a:	88fb      	ldrh	r3, [r7, #6]
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	0801c248 	.word	0x0801c248
 8013ca8:	0801c3dc 	.word	0x0801c3dc
 8013cac:	0801c2a8 	.word	0x0801c2a8

08013cb0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	6039      	str	r1, [r7, #0]
 8013cba:	80fb      	strh	r3, [r7, #6]
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013cc0:	88fb      	ldrh	r3, [r7, #6]
 8013cc2:	2b43      	cmp	r3, #67	@ 0x43
 8013cc4:	d906      	bls.n	8013cd4 <dhcp_option_byte+0x24>
 8013cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8013cf0 <dhcp_option_byte+0x40>)
 8013cc8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8013ccc:	4909      	ldr	r1, [pc, #36]	@ (8013cf4 <dhcp_option_byte+0x44>)
 8013cce:	480a      	ldr	r0, [pc, #40]	@ (8013cf8 <dhcp_option_byte+0x48>)
 8013cd0:	f003 fd96 	bl	8017800 <iprintf>
  options[options_out_len++] = value;
 8013cd4:	88fb      	ldrh	r3, [r7, #6]
 8013cd6:	1c5a      	adds	r2, r3, #1
 8013cd8:	80fa      	strh	r2, [r7, #6]
 8013cda:	461a      	mov	r2, r3
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	4413      	add	r3, r2
 8013ce0:	797a      	ldrb	r2, [r7, #5]
 8013ce2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013ce4:	88fb      	ldrh	r3, [r7, #6]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3708      	adds	r7, #8
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	0801c248 	.word	0x0801c248
 8013cf4:	0801c420 	.word	0x0801c420
 8013cf8:	0801c2a8 	.word	0x0801c2a8

08013cfc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b082      	sub	sp, #8
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	4603      	mov	r3, r0
 8013d04:	6039      	str	r1, [r7, #0]
 8013d06:	80fb      	strh	r3, [r7, #6]
 8013d08:	4613      	mov	r3, r2
 8013d0a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013d0c:	88fb      	ldrh	r3, [r7, #6]
 8013d0e:	3302      	adds	r3, #2
 8013d10:	2b44      	cmp	r3, #68	@ 0x44
 8013d12:	d906      	bls.n	8013d22 <dhcp_option_short+0x26>
 8013d14:	4b0f      	ldr	r3, [pc, #60]	@ (8013d54 <dhcp_option_short+0x58>)
 8013d16:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8013d1a:	490f      	ldr	r1, [pc, #60]	@ (8013d58 <dhcp_option_short+0x5c>)
 8013d1c:	480f      	ldr	r0, [pc, #60]	@ (8013d5c <dhcp_option_short+0x60>)
 8013d1e:	f003 fd6f 	bl	8017800 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013d22:	88bb      	ldrh	r3, [r7, #4]
 8013d24:	0a1b      	lsrs	r3, r3, #8
 8013d26:	b29a      	uxth	r2, r3
 8013d28:	88fb      	ldrh	r3, [r7, #6]
 8013d2a:	1c59      	adds	r1, r3, #1
 8013d2c:	80f9      	strh	r1, [r7, #6]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	440b      	add	r3, r1
 8013d34:	b2d2      	uxtb	r2, r2
 8013d36:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013d38:	88fb      	ldrh	r3, [r7, #6]
 8013d3a:	1c5a      	adds	r2, r3, #1
 8013d3c:	80fa      	strh	r2, [r7, #6]
 8013d3e:	461a      	mov	r2, r3
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	4413      	add	r3, r2
 8013d44:	88ba      	ldrh	r2, [r7, #4]
 8013d46:	b2d2      	uxtb	r2, r2
 8013d48:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013d4a:	88fb      	ldrh	r3, [r7, #6]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3708      	adds	r7, #8
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	0801c248 	.word	0x0801c248
 8013d58:	0801c458 	.word	0x0801c458
 8013d5c:	0801c2a8 	.word	0x0801c2a8

08013d60 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	4603      	mov	r3, r0
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
 8013d6c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013d6e:	89fb      	ldrh	r3, [r7, #14]
 8013d70:	3304      	adds	r3, #4
 8013d72:	2b44      	cmp	r3, #68	@ 0x44
 8013d74:	d906      	bls.n	8013d84 <dhcp_option_long+0x24>
 8013d76:	4b19      	ldr	r3, [pc, #100]	@ (8013ddc <dhcp_option_long+0x7c>)
 8013d78:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8013d7c:	4918      	ldr	r1, [pc, #96]	@ (8013de0 <dhcp_option_long+0x80>)
 8013d7e:	4819      	ldr	r0, [pc, #100]	@ (8013de4 <dhcp_option_long+0x84>)
 8013d80:	f003 fd3e 	bl	8017800 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	0e1a      	lsrs	r2, r3, #24
 8013d88:	89fb      	ldrh	r3, [r7, #14]
 8013d8a:	1c59      	adds	r1, r3, #1
 8013d8c:	81f9      	strh	r1, [r7, #14]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	440b      	add	r3, r1
 8013d94:	b2d2      	uxtb	r2, r2
 8013d96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	0c1a      	lsrs	r2, r3, #16
 8013d9c:	89fb      	ldrh	r3, [r7, #14]
 8013d9e:	1c59      	adds	r1, r3, #1
 8013da0:	81f9      	strh	r1, [r7, #14]
 8013da2:	4619      	mov	r1, r3
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	440b      	add	r3, r1
 8013da8:	b2d2      	uxtb	r2, r2
 8013daa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	0a1a      	lsrs	r2, r3, #8
 8013db0:	89fb      	ldrh	r3, [r7, #14]
 8013db2:	1c59      	adds	r1, r3, #1
 8013db4:	81f9      	strh	r1, [r7, #14]
 8013db6:	4619      	mov	r1, r3
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	440b      	add	r3, r1
 8013dbc:	b2d2      	uxtb	r2, r2
 8013dbe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013dc0:	89fb      	ldrh	r3, [r7, #14]
 8013dc2:	1c5a      	adds	r2, r3, #1
 8013dc4:	81fa      	strh	r2, [r7, #14]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	4413      	add	r3, r2
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	b2d2      	uxtb	r2, r2
 8013dd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013dd2:	89fb      	ldrh	r3, [r7, #14]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	0801c248 	.word	0x0801c248
 8013de0:	0801c494 	.word	0x0801c494
 8013de4:	0801c2a8 	.word	0x0801c2a8

08013de8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b090      	sub	sp, #64	@ 0x40
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013df2:	2300      	movs	r3, #0
 8013df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8013df6:	2300      	movs	r3, #0
 8013df8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013dfa:	2208      	movs	r2, #8
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	48b5      	ldr	r0, [pc, #724]	@ (80140d4 <dhcp_parse_reply+0x2ec>)
 8013e00:	f003 fd9d 	bl	801793e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	895b      	ldrh	r3, [r3, #10]
 8013e08:	2b2b      	cmp	r3, #43	@ 0x2b
 8013e0a:	d802      	bhi.n	8013e12 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013e0c:	f06f 0301 	mvn.w	r3, #1
 8013e10:	e2a7      	b.n	8014362 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013e18:	23f0      	movs	r3, #240	@ 0xf0
 8013e1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	891b      	ldrh	r3, [r3, #8]
 8013e20:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013e26:	e00c      	b.n	8013e42 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e2a:	895b      	ldrh	r3, [r3, #10]
 8013e2c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013e2e:	1ad3      	subs	r3, r2, r3
 8013e30:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e34:	895b      	ldrh	r3, [r3, #10]
 8013e36:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8013e38:	1ad3      	subs	r3, r2, r3
 8013e3a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8013e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d004      	beq.n	8013e52 <dhcp_parse_reply+0x6a>
 8013e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e4a:	895b      	ldrh	r3, [r3, #10]
 8013e4c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d2ea      	bcs.n	8013e28 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d102      	bne.n	8013e5e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013e58:	f06f 0301 	mvn.w	r3, #1
 8013e5c:	e281      	b.n	8014362 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8013e5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e60:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8013e62:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013e64:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8013e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013e6c:	e239      	b.n	80142e2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8013e6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013e70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013e72:	4413      	add	r3, r2
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8013e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e82:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013e84:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013e86:	3302      	adds	r3, #2
 8013e88:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013e8a:	8bfa      	ldrh	r2, [r7, #30]
 8013e8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d202      	bcs.n	8013e98 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013e92:	f06f 0301 	mvn.w	r3, #1
 8013e96:	e264      	b.n	8014362 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013e98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e9e:	8952      	ldrh	r2, [r2, #10]
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	da07      	bge.n	8013eb4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013ea4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013eaa:	4413      	add	r3, r2
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013eb2:	e00b      	b.n	8013ecc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d004      	beq.n	8013ec6 <dhcp_parse_reply+0xde>
 8013ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	e000      	b.n	8013ec8 <dhcp_parse_reply+0xe0>
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ed0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8013ed4:	7dfb      	ldrb	r3, [r7, #23]
 8013ed6:	2b3b      	cmp	r3, #59	@ 0x3b
 8013ed8:	f200 812c 	bhi.w	8014134 <dhcp_parse_reply+0x34c>
 8013edc:	a201      	add	r2, pc, #4	@ (adr r2, 8013ee4 <dhcp_parse_reply+0xfc>)
 8013ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ee2:	bf00      	nop
 8013ee4:	08013fd5 	.word	0x08013fd5
 8013ee8:	08013fe5 	.word	0x08013fe5
 8013eec:	08014135 	.word	0x08014135
 8013ef0:	08014007 	.word	0x08014007
 8013ef4:	08014135 	.word	0x08014135
 8013ef8:	08014135 	.word	0x08014135
 8013efc:	08014135 	.word	0x08014135
 8013f00:	08014135 	.word	0x08014135
 8013f04:	08014135 	.word	0x08014135
 8013f08:	08014135 	.word	0x08014135
 8013f0c:	08014135 	.word	0x08014135
 8013f10:	08014135 	.word	0x08014135
 8013f14:	08014135 	.word	0x08014135
 8013f18:	08014135 	.word	0x08014135
 8013f1c:	08014135 	.word	0x08014135
 8013f20:	08014135 	.word	0x08014135
 8013f24:	08014135 	.word	0x08014135
 8013f28:	08014135 	.word	0x08014135
 8013f2c:	08014135 	.word	0x08014135
 8013f30:	08014135 	.word	0x08014135
 8013f34:	08014135 	.word	0x08014135
 8013f38:	08014135 	.word	0x08014135
 8013f3c:	08014135 	.word	0x08014135
 8013f40:	08014135 	.word	0x08014135
 8013f44:	08014135 	.word	0x08014135
 8013f48:	08014135 	.word	0x08014135
 8013f4c:	08014135 	.word	0x08014135
 8013f50:	08014135 	.word	0x08014135
 8013f54:	08014135 	.word	0x08014135
 8013f58:	08014135 	.word	0x08014135
 8013f5c:	08014135 	.word	0x08014135
 8013f60:	08014135 	.word	0x08014135
 8013f64:	08014135 	.word	0x08014135
 8013f68:	08014135 	.word	0x08014135
 8013f6c:	08014135 	.word	0x08014135
 8013f70:	08014135 	.word	0x08014135
 8013f74:	08014135 	.word	0x08014135
 8013f78:	08014135 	.word	0x08014135
 8013f7c:	08014135 	.word	0x08014135
 8013f80:	08014135 	.word	0x08014135
 8013f84:	08014135 	.word	0x08014135
 8013f88:	08014135 	.word	0x08014135
 8013f8c:	08014135 	.word	0x08014135
 8013f90:	08014135 	.word	0x08014135
 8013f94:	08014135 	.word	0x08014135
 8013f98:	08014135 	.word	0x08014135
 8013f9c:	08014135 	.word	0x08014135
 8013fa0:	08014135 	.word	0x08014135
 8013fa4:	08014135 	.word	0x08014135
 8013fa8:	08014135 	.word	0x08014135
 8013fac:	08014135 	.word	0x08014135
 8013fb0:	08014033 	.word	0x08014033
 8013fb4:	08014055 	.word	0x08014055
 8013fb8:	08014091 	.word	0x08014091
 8013fbc:	080140b3 	.word	0x080140b3
 8013fc0:	08014135 	.word	0x08014135
 8013fc4:	08014135 	.word	0x08014135
 8013fc8:	08014135 	.word	0x08014135
 8013fcc:	080140f1 	.word	0x080140f1
 8013fd0:	08014113 	.word	0x08014113
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8013fe2:	e0ab      	b.n	801413c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fe8:	2b04      	cmp	r3, #4
 8013fea:	d009      	beq.n	8014000 <dhcp_parse_reply+0x218>
 8013fec:	4b3a      	ldr	r3, [pc, #232]	@ (80140d8 <dhcp_parse_reply+0x2f0>)
 8013fee:	f240 622e 	movw	r2, #1582	@ 0x62e
 8013ff2:	493a      	ldr	r1, [pc, #232]	@ (80140dc <dhcp_parse_reply+0x2f4>)
 8013ff4:	483a      	ldr	r0, [pc, #232]	@ (80140e0 <dhcp_parse_reply+0x2f8>)
 8013ff6:	f003 fc03 	bl	8017800 <iprintf>
 8013ffa:	f06f 0305 	mvn.w	r3, #5
 8013ffe:	e1b0      	b.n	8014362 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014000:	2306      	movs	r3, #6
 8014002:	623b      	str	r3, [r7, #32]
        break;
 8014004:	e09a      	b.n	801413c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014006:	2304      	movs	r3, #4
 8014008:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801400c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014010:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014014:	429a      	cmp	r2, r3
 8014016:	d209      	bcs.n	801402c <dhcp_parse_reply+0x244>
 8014018:	4b2f      	ldr	r3, [pc, #188]	@ (80140d8 <dhcp_parse_reply+0x2f0>)
 801401a:	f240 6233 	movw	r2, #1587	@ 0x633
 801401e:	4931      	ldr	r1, [pc, #196]	@ (80140e4 <dhcp_parse_reply+0x2fc>)
 8014020:	482f      	ldr	r0, [pc, #188]	@ (80140e0 <dhcp_parse_reply+0x2f8>)
 8014022:	f003 fbed 	bl	8017800 <iprintf>
 8014026:	f06f 0305 	mvn.w	r3, #5
 801402a:	e19a      	b.n	8014362 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801402c:	2307      	movs	r3, #7
 801402e:	623b      	str	r3, [r7, #32]
        break;
 8014030:	e084      	b.n	801413c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014036:	2b04      	cmp	r3, #4
 8014038:	d009      	beq.n	801404e <dhcp_parse_reply+0x266>
 801403a:	4b27      	ldr	r3, [pc, #156]	@ (80140d8 <dhcp_parse_reply+0x2f0>)
 801403c:	f240 6241 	movw	r2, #1601	@ 0x641
 8014040:	4926      	ldr	r1, [pc, #152]	@ (80140dc <dhcp_parse_reply+0x2f4>)
 8014042:	4827      	ldr	r0, [pc, #156]	@ (80140e0 <dhcp_parse_reply+0x2f8>)
 8014044:	f003 fbdc 	bl	8017800 <iprintf>
 8014048:	f06f 0305 	mvn.w	r3, #5
 801404c:	e189      	b.n	8014362 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801404e:	2303      	movs	r3, #3
 8014050:	623b      	str	r3, [r7, #32]
        break;
 8014052:	e073      	b.n	801413c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014058:	2b01      	cmp	r3, #1
 801405a:	d009      	beq.n	8014070 <dhcp_parse_reply+0x288>
 801405c:	4b1e      	ldr	r3, [pc, #120]	@ (80140d8 <dhcp_parse_reply+0x2f0>)
 801405e:	f240 624f 	movw	r2, #1615	@ 0x64f
 8014062:	4921      	ldr	r1, [pc, #132]	@ (80140e8 <dhcp_parse_reply+0x300>)
 8014064:	481e      	ldr	r0, [pc, #120]	@ (80140e0 <dhcp_parse_reply+0x2f8>)
 8014066:	f003 fbcb 	bl	8017800 <iprintf>
 801406a:	f06f 0305 	mvn.w	r3, #5
 801406e:	e178      	b.n	8014362 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014070:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014072:	2bf0      	cmp	r3, #240	@ 0xf0
 8014074:	d009      	beq.n	801408a <dhcp_parse_reply+0x2a2>
 8014076:	4b18      	ldr	r3, [pc, #96]	@ (80140d8 <dhcp_parse_reply+0x2f0>)
 8014078:	f240 6251 	movw	r2, #1617	@ 0x651
 801407c:	491b      	ldr	r1, [pc, #108]	@ (80140ec <dhcp_parse_reply+0x304>)
 801407e:	4818      	ldr	r0, [pc, #96]	@ (80140e0 <dhcp_parse_reply+0x2f8>)
 8014080:	f003 fbbe 	bl	8017800 <iprintf>
 8014084:	f06f 0305 	mvn.w	r3, #5
 8014088:	e16b      	b.n	8014362 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801408a:	2300      	movs	r3, #0
 801408c:	623b      	str	r3, [r7, #32]
        break;
 801408e:	e055      	b.n	801413c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014094:	2b01      	cmp	r3, #1
 8014096:	d009      	beq.n	80140ac <dhcp_parse_reply+0x2c4>
 8014098:	4b0f      	ldr	r3, [pc, #60]	@ (80140d8 <dhcp_parse_reply+0x2f0>)
 801409a:	f240 6255 	movw	r2, #1621	@ 0x655
 801409e:	4912      	ldr	r1, [pc, #72]	@ (80140e8 <dhcp_parse_reply+0x300>)
 80140a0:	480f      	ldr	r0, [pc, #60]	@ (80140e0 <dhcp_parse_reply+0x2f8>)
 80140a2:	f003 fbad 	bl	8017800 <iprintf>
 80140a6:	f06f 0305 	mvn.w	r3, #5
 80140aa:	e15a      	b.n	8014362 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80140ac:	2301      	movs	r3, #1
 80140ae:	623b      	str	r3, [r7, #32]
        break;
 80140b0:	e044      	b.n	801413c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140b6:	2b04      	cmp	r3, #4
 80140b8:	d009      	beq.n	80140ce <dhcp_parse_reply+0x2e6>
 80140ba:	4b07      	ldr	r3, [pc, #28]	@ (80140d8 <dhcp_parse_reply+0x2f0>)
 80140bc:	f240 6259 	movw	r2, #1625	@ 0x659
 80140c0:	4906      	ldr	r1, [pc, #24]	@ (80140dc <dhcp_parse_reply+0x2f4>)
 80140c2:	4807      	ldr	r0, [pc, #28]	@ (80140e0 <dhcp_parse_reply+0x2f8>)
 80140c4:	f003 fb9c 	bl	8017800 <iprintf>
 80140c8:	f06f 0305 	mvn.w	r3, #5
 80140cc:	e149      	b.n	8014362 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80140ce:	2302      	movs	r3, #2
 80140d0:	623b      	str	r3, [r7, #32]
        break;
 80140d2:	e033      	b.n	801413c <dhcp_parse_reply+0x354>
 80140d4:	20009028 	.word	0x20009028
 80140d8:	0801c248 	.word	0x0801c248
 80140dc:	0801c4d0 	.word	0x0801c4d0
 80140e0:	0801c2a8 	.word	0x0801c2a8
 80140e4:	0801c4dc 	.word	0x0801c4dc
 80140e8:	0801c4f0 	.word	0x0801c4f0
 80140ec:	0801c4fc 	.word	0x0801c4fc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140f4:	2b04      	cmp	r3, #4
 80140f6:	d009      	beq.n	801410c <dhcp_parse_reply+0x324>
 80140f8:	4b9c      	ldr	r3, [pc, #624]	@ (801436c <dhcp_parse_reply+0x584>)
 80140fa:	f240 625d 	movw	r2, #1629	@ 0x65d
 80140fe:	499c      	ldr	r1, [pc, #624]	@ (8014370 <dhcp_parse_reply+0x588>)
 8014100:	489c      	ldr	r0, [pc, #624]	@ (8014374 <dhcp_parse_reply+0x58c>)
 8014102:	f003 fb7d 	bl	8017800 <iprintf>
 8014106:	f06f 0305 	mvn.w	r3, #5
 801410a:	e12a      	b.n	8014362 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801410c:	2304      	movs	r3, #4
 801410e:	623b      	str	r3, [r7, #32]
        break;
 8014110:	e014      	b.n	801413c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014116:	2b04      	cmp	r3, #4
 8014118:	d009      	beq.n	801412e <dhcp_parse_reply+0x346>
 801411a:	4b94      	ldr	r3, [pc, #592]	@ (801436c <dhcp_parse_reply+0x584>)
 801411c:	f240 6261 	movw	r2, #1633	@ 0x661
 8014120:	4993      	ldr	r1, [pc, #588]	@ (8014370 <dhcp_parse_reply+0x588>)
 8014122:	4894      	ldr	r0, [pc, #592]	@ (8014374 <dhcp_parse_reply+0x58c>)
 8014124:	f003 fb6c 	bl	8017800 <iprintf>
 8014128:	f06f 0305 	mvn.w	r3, #5
 801412c:	e119      	b.n	8014362 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801412e:	2305      	movs	r3, #5
 8014130:	623b      	str	r3, [r7, #32]
        break;
 8014132:	e003      	b.n	801413c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8014134:	2300      	movs	r3, #0
 8014136:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801413a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801413c:	7dfb      	ldrb	r3, [r7, #23]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d103      	bne.n	801414a <dhcp_parse_reply+0x362>
      offset++;
 8014142:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014144:	3301      	adds	r3, #1
 8014146:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8014148:	e0a1      	b.n	801428e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801414a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801414c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014150:	4413      	add	r3, r2
 8014152:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8014156:	4293      	cmp	r3, r2
 8014158:	dd02      	ble.n	8014160 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801415a:	f06f 0301 	mvn.w	r3, #1
 801415e:	e100      	b.n	8014362 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8014160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014164:	b29a      	uxth	r2, r3
 8014166:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014168:	4413      	add	r3, r2
 801416a:	b29b      	uxth	r3, r3
 801416c:	3302      	adds	r3, #2
 801416e:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8014170:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014174:	2b00      	cmp	r3, #0
 8014176:	f000 808a 	beq.w	801428e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801417a:	2300      	movs	r3, #0
 801417c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801417e:	6a3b      	ldr	r3, [r7, #32]
 8014180:	2b00      	cmp	r3, #0
 8014182:	db02      	blt.n	801418a <dhcp_parse_reply+0x3a2>
 8014184:	6a3b      	ldr	r3, [r7, #32]
 8014186:	2b07      	cmp	r3, #7
 8014188:	dd06      	ble.n	8014198 <dhcp_parse_reply+0x3b0>
 801418a:	4b78      	ldr	r3, [pc, #480]	@ (801436c <dhcp_parse_reply+0x584>)
 801418c:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8014190:	4979      	ldr	r1, [pc, #484]	@ (8014378 <dhcp_parse_reply+0x590>)
 8014192:	4878      	ldr	r0, [pc, #480]	@ (8014374 <dhcp_parse_reply+0x58c>)
 8014194:	f003 fb34 	bl	8017800 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014198:	4a78      	ldr	r2, [pc, #480]	@ (801437c <dhcp_parse_reply+0x594>)
 801419a:	6a3b      	ldr	r3, [r7, #32]
 801419c:	4413      	add	r3, r2
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d174      	bne.n	801428e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80141a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80141a8:	2b04      	cmp	r3, #4
 80141aa:	bf28      	it	cs
 80141ac:	2304      	movcs	r3, #4
 80141ae:	b2db      	uxtb	r3, r3
 80141b0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80141b2:	8bfb      	ldrh	r3, [r7, #30]
 80141b4:	8aba      	ldrh	r2, [r7, #20]
 80141b6:	f107 0108 	add.w	r1, r7, #8
 80141ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80141bc:	f7f7 fd52 	bl	800bc64 <pbuf_copy_partial>
 80141c0:	4603      	mov	r3, r0
 80141c2:	461a      	mov	r2, r3
 80141c4:	8abb      	ldrh	r3, [r7, #20]
 80141c6:	4293      	cmp	r3, r2
 80141c8:	d002      	beq.n	80141d0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80141ca:	f06f 0301 	mvn.w	r3, #1
 80141ce:	e0c8      	b.n	8014362 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80141d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80141d4:	2b04      	cmp	r3, #4
 80141d6:	d933      	bls.n	8014240 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80141d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80141dc:	f003 0303 	and.w	r3, r3, #3
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d009      	beq.n	80141fa <dhcp_parse_reply+0x412>
 80141e6:	4b61      	ldr	r3, [pc, #388]	@ (801436c <dhcp_parse_reply+0x584>)
 80141e8:	f240 6281 	movw	r2, #1665	@ 0x681
 80141ec:	4964      	ldr	r1, [pc, #400]	@ (8014380 <dhcp_parse_reply+0x598>)
 80141ee:	4861      	ldr	r0, [pc, #388]	@ (8014374 <dhcp_parse_reply+0x58c>)
 80141f0:	f003 fb06 	bl	8017800 <iprintf>
 80141f4:	f06f 0305 	mvn.w	r3, #5
 80141f8:	e0b3      	b.n	8014362 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80141fa:	4a60      	ldr	r2, [pc, #384]	@ (801437c <dhcp_parse_reply+0x594>)
 80141fc:	6a3b      	ldr	r3, [r7, #32]
 80141fe:	4413      	add	r3, r2
 8014200:	2201      	movs	r2, #1
 8014202:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	4618      	mov	r0, r3
 8014208:	f7f5 ff73 	bl	800a0f2 <lwip_htonl>
 801420c:	4602      	mov	r2, r0
 801420e:	495d      	ldr	r1, [pc, #372]	@ (8014384 <dhcp_parse_reply+0x59c>)
 8014210:	6a3b      	ldr	r3, [r7, #32]
 8014212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014216:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801421a:	3b04      	subs	r3, #4
 801421c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014220:	8bfb      	ldrh	r3, [r7, #30]
 8014222:	3304      	adds	r3, #4
 8014224:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014226:	8a7a      	ldrh	r2, [r7, #18]
 8014228:	8bfb      	ldrh	r3, [r7, #30]
 801422a:	429a      	cmp	r2, r3
 801422c:	d202      	bcs.n	8014234 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801422e:	f06f 0301 	mvn.w	r3, #1
 8014232:	e096      	b.n	8014362 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8014234:	8a7b      	ldrh	r3, [r7, #18]
 8014236:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014238:	6a3b      	ldr	r3, [r7, #32]
 801423a:	3301      	adds	r3, #1
 801423c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801423e:	e79e      	b.n	801417e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8014240:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014244:	2b04      	cmp	r3, #4
 8014246:	d106      	bne.n	8014256 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8014248:	68bb      	ldr	r3, [r7, #8]
 801424a:	4618      	mov	r0, r3
 801424c:	f7f5 ff51 	bl	800a0f2 <lwip_htonl>
 8014250:	4603      	mov	r3, r0
 8014252:	60bb      	str	r3, [r7, #8]
 8014254:	e011      	b.n	801427a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014256:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801425a:	2b01      	cmp	r3, #1
 801425c:	d009      	beq.n	8014272 <dhcp_parse_reply+0x48a>
 801425e:	4b43      	ldr	r3, [pc, #268]	@ (801436c <dhcp_parse_reply+0x584>)
 8014260:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8014264:	4948      	ldr	r1, [pc, #288]	@ (8014388 <dhcp_parse_reply+0x5a0>)
 8014266:	4843      	ldr	r0, [pc, #268]	@ (8014374 <dhcp_parse_reply+0x58c>)
 8014268:	f003 faca 	bl	8017800 <iprintf>
 801426c:	f06f 0305 	mvn.w	r3, #5
 8014270:	e077      	b.n	8014362 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8014272:	f107 0308 	add.w	r3, r7, #8
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801427a:	4a40      	ldr	r2, [pc, #256]	@ (801437c <dhcp_parse_reply+0x594>)
 801427c:	6a3b      	ldr	r3, [r7, #32]
 801427e:	4413      	add	r3, r2
 8014280:	2201      	movs	r2, #1
 8014282:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014284:	68ba      	ldr	r2, [r7, #8]
 8014286:	493f      	ldr	r1, [pc, #252]	@ (8014384 <dhcp_parse_reply+0x59c>)
 8014288:	6a3b      	ldr	r3, [r7, #32]
 801428a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014290:	895b      	ldrh	r3, [r3, #10]
 8014292:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014294:	429a      	cmp	r2, r3
 8014296:	d324      	bcc.n	80142e2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8014298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801429a:	895b      	ldrh	r3, [r3, #10]
 801429c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801429e:	1ad3      	subs	r3, r2, r3
 80142a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80142a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142a4:	895b      	ldrh	r3, [r3, #10]
 80142a6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80142ac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80142ae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d213      	bcs.n	80142dc <dhcp_parse_reply+0x4f4>
        q = q->next;
 80142b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80142ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d109      	bne.n	80142d4 <dhcp_parse_reply+0x4ec>
 80142c0:	4b2a      	ldr	r3, [pc, #168]	@ (801436c <dhcp_parse_reply+0x584>)
 80142c2:	f240 629d 	movw	r2, #1693	@ 0x69d
 80142c6:	4931      	ldr	r1, [pc, #196]	@ (801438c <dhcp_parse_reply+0x5a4>)
 80142c8:	482a      	ldr	r0, [pc, #168]	@ (8014374 <dhcp_parse_reply+0x58c>)
 80142ca:	f003 fa99 	bl	8017800 <iprintf>
 80142ce:	f06f 0305 	mvn.w	r3, #5
 80142d2:	e046      	b.n	8014362 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80142d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80142da:	e002      	b.n	80142e2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80142dc:	f06f 0301 	mvn.w	r3, #1
 80142e0:	e03f      	b.n	8014362 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80142e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d00a      	beq.n	80142fe <dhcp_parse_reply+0x516>
 80142e8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80142ea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d206      	bcs.n	80142fe <dhcp_parse_reply+0x516>
 80142f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80142f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80142f4:	4413      	add	r3, r2
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	2bff      	cmp	r3, #255	@ 0xff
 80142fa:	f47f adb8 	bne.w	8013e6e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80142fe:	4b1f      	ldr	r3, [pc, #124]	@ (801437c <dhcp_parse_reply+0x594>)
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d018      	beq.n	8014338 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014306:	4b1f      	ldr	r3, [pc, #124]	@ (8014384 <dhcp_parse_reply+0x59c>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801430c:	4b1b      	ldr	r3, [pc, #108]	@ (801437c <dhcp_parse_reply+0x594>)
 801430e:	2200      	movs	r2, #0
 8014310:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	2b01      	cmp	r3, #1
 8014316:	d102      	bne.n	801431e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8014318:	2301      	movs	r3, #1
 801431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801431c:	e00c      	b.n	8014338 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2b02      	cmp	r3, #2
 8014322:	d102      	bne.n	801432a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8014324:	2301      	movs	r3, #1
 8014326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014328:	e006      	b.n	8014338 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2b03      	cmp	r3, #3
 801432e:	d103      	bne.n	8014338 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8014330:	2301      	movs	r3, #1
 8014332:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8014334:	2301      	movs	r3, #1
 8014336:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801433a:	2b00      	cmp	r3, #0
 801433c:	d006      	beq.n	801434c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801433e:	2300      	movs	r3, #0
 8014340:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8014342:	236c      	movs	r3, #108	@ 0x6c
 8014344:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014346:	23ec      	movs	r3, #236	@ 0xec
 8014348:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801434a:	e56a      	b.n	8013e22 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801434c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801434e:	2b00      	cmp	r3, #0
 8014350:	d006      	beq.n	8014360 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8014352:	2300      	movs	r3, #0
 8014354:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8014356:	232c      	movs	r3, #44	@ 0x2c
 8014358:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801435a:	236c      	movs	r3, #108	@ 0x6c
 801435c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801435e:	e560      	b.n	8013e22 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014360:	2300      	movs	r3, #0
}
 8014362:	4618      	mov	r0, r3
 8014364:	3740      	adds	r7, #64	@ 0x40
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}
 801436a:	bf00      	nop
 801436c:	0801c248 	.word	0x0801c248
 8014370:	0801c4d0 	.word	0x0801c4d0
 8014374:	0801c2a8 	.word	0x0801c2a8
 8014378:	0801c514 	.word	0x0801c514
 801437c:	20009028 	.word	0x20009028
 8014380:	0801c528 	.word	0x0801c528
 8014384:	20009008 	.word	0x20009008
 8014388:	0801c540 	.word	0x0801c540
 801438c:	0801c554 	.word	0x0801c554

08014390 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b08a      	sub	sp, #40	@ 0x28
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	607a      	str	r2, [r7, #4]
 801439c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801439e:	4b60      	ldr	r3, [pc, #384]	@ (8014520 <dhcp_recv+0x190>)
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143a4:	6a3b      	ldr	r3, [r7, #32]
 80143a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143a8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	f000 809d 	beq.w	80144f2 <dhcp_recv+0x162>
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	791b      	ldrb	r3, [r3, #4]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f000 8098 	beq.w	80144f2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	895b      	ldrh	r3, [r3, #10]
 80143c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80143c8:	f240 8095 	bls.w	80144f6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80143cc:	69bb      	ldr	r3, [r7, #24]
 80143ce:	781b      	ldrb	r3, [r3, #0]
 80143d0:	2b02      	cmp	r3, #2
 80143d2:	f040 8092 	bne.w	80144fa <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80143d6:	2300      	movs	r3, #0
 80143d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80143dc:	e012      	b.n	8014404 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80143de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143e2:	6a3a      	ldr	r2, [r7, #32]
 80143e4:	4413      	add	r3, r2
 80143e6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80143ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143ee:	69b9      	ldr	r1, [r7, #24]
 80143f0:	440b      	add	r3, r1
 80143f2:	7f1b      	ldrb	r3, [r3, #28]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	f040 8082 	bne.w	80144fe <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80143fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143fe:	3301      	adds	r3, #1
 8014400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014404:	6a3b      	ldr	r3, [r7, #32]
 8014406:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801440a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801440e:	429a      	cmp	r2, r3
 8014410:	d203      	bcs.n	801441a <dhcp_recv+0x8a>
 8014412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014416:	2b05      	cmp	r3, #5
 8014418:	d9e1      	bls.n	80143de <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801441a:	69bb      	ldr	r3, [r7, #24]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	4618      	mov	r0, r3
 8014420:	f7f5 fe67 	bl	800a0f2 <lwip_htonl>
 8014424:	4602      	mov	r2, r0
 8014426:	69fb      	ldr	r3, [r7, #28]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	429a      	cmp	r2, r3
 801442c:	d169      	bne.n	8014502 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801442e:	69f9      	ldr	r1, [r7, #28]
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f7ff fcd9 	bl	8013de8 <dhcp_parse_reply>
 8014436:	4603      	mov	r3, r0
 8014438:	2b00      	cmp	r3, #0
 801443a:	d164      	bne.n	8014506 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801443c:	4b39      	ldr	r3, [pc, #228]	@ (8014524 <dhcp_recv+0x194>)
 801443e:	785b      	ldrb	r3, [r3, #1]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d062      	beq.n	801450a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801444a:	4b37      	ldr	r3, [pc, #220]	@ (8014528 <dhcp_recv+0x198>)
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014450:	7cfb      	ldrb	r3, [r7, #19]
 8014452:	2b05      	cmp	r3, #5
 8014454:	d12a      	bne.n	80144ac <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014456:	69fb      	ldr	r3, [r7, #28]
 8014458:	795b      	ldrb	r3, [r3, #5]
 801445a:	2b01      	cmp	r3, #1
 801445c:	d112      	bne.n	8014484 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801445e:	6979      	ldr	r1, [r7, #20]
 8014460:	6a38      	ldr	r0, [r7, #32]
 8014462:	f7fe fe1d 	bl	80130a0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014466:	6a3b      	ldr	r3, [r7, #32]
 8014468:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801446c:	f003 0308 	and.w	r3, r3, #8
 8014470:	2b00      	cmp	r3, #0
 8014472:	d003      	beq.n	801447c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014474:	6a38      	ldr	r0, [r7, #32]
 8014476:	f7fe fb8b 	bl	8012b90 <dhcp_check>
 801447a:	e049      	b.n	8014510 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801447c:	6a38      	ldr	r0, [r7, #32]
 801447e:	f7ff f86d 	bl	801355c <dhcp_bind>
 8014482:	e045      	b.n	8014510 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	795b      	ldrb	r3, [r3, #5]
 8014488:	2b03      	cmp	r3, #3
 801448a:	d007      	beq.n	801449c <dhcp_recv+0x10c>
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	795b      	ldrb	r3, [r3, #5]
 8014490:	2b04      	cmp	r3, #4
 8014492:	d003      	beq.n	801449c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014498:	2b05      	cmp	r3, #5
 801449a:	d139      	bne.n	8014510 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801449c:	6979      	ldr	r1, [r7, #20]
 801449e:	6a38      	ldr	r0, [r7, #32]
 80144a0:	f7fe fdfe 	bl	80130a0 <dhcp_handle_ack>
      dhcp_bind(netif);
 80144a4:	6a38      	ldr	r0, [r7, #32]
 80144a6:	f7ff f859 	bl	801355c <dhcp_bind>
 80144aa:	e031      	b.n	8014510 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80144ac:	7cfb      	ldrb	r3, [r7, #19]
 80144ae:	2b06      	cmp	r3, #6
 80144b0:	d113      	bne.n	80144da <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144b2:	69fb      	ldr	r3, [r7, #28]
 80144b4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80144b6:	2b03      	cmp	r3, #3
 80144b8:	d00b      	beq.n	80144d2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144ba:	69fb      	ldr	r3, [r7, #28]
 80144bc:	795b      	ldrb	r3, [r3, #5]
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d007      	beq.n	80144d2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144c6:	2b04      	cmp	r3, #4
 80144c8:	d003      	beq.n	80144d2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80144ca:	69fb      	ldr	r3, [r7, #28]
 80144cc:	795b      	ldrb	r3, [r3, #5]
 80144ce:	2b05      	cmp	r3, #5
 80144d0:	d103      	bne.n	80144da <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80144d2:	6a38      	ldr	r0, [r7, #32]
 80144d4:	f7fe fb42 	bl	8012b5c <dhcp_handle_nak>
 80144d8:	e01a      	b.n	8014510 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80144da:	7cfb      	ldrb	r3, [r7, #19]
 80144dc:	2b02      	cmp	r3, #2
 80144de:	d116      	bne.n	801450e <dhcp_recv+0x17e>
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	795b      	ldrb	r3, [r3, #5]
 80144e4:	2b06      	cmp	r3, #6
 80144e6:	d112      	bne.n	801450e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80144e8:	6979      	ldr	r1, [r7, #20]
 80144ea:	6a38      	ldr	r0, [r7, #32]
 80144ec:	f7fe fb84 	bl	8012bf8 <dhcp_handle_offer>
 80144f0:	e00e      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80144f2:	bf00      	nop
 80144f4:	e00c      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80144f6:	bf00      	nop
 80144f8:	e00a      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80144fa:	bf00      	nop
 80144fc:	e008      	b.n	8014510 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80144fe:	bf00      	nop
 8014500:	e006      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014502:	bf00      	nop
 8014504:	e004      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014506:	bf00      	nop
 8014508:	e002      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801450a:	bf00      	nop
 801450c:	e000      	b.n	8014510 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801450e:	bf00      	nop
  pbuf_free(p);
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f7f7 f9ad 	bl	800b870 <pbuf_free>
}
 8014516:	bf00      	nop
 8014518:	3728      	adds	r7, #40	@ 0x28
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	20005a18 	.word	0x20005a18
 8014524:	20009028 	.word	0x20009028
 8014528:	20009008 	.word	0x20009008

0801452c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b088      	sub	sp, #32
 8014530:	af00      	add	r7, sp, #0
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	60b9      	str	r1, [r7, #8]
 8014536:	603b      	str	r3, [r7, #0]
 8014538:	4613      	mov	r3, r2
 801453a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d108      	bne.n	8014554 <dhcp_create_msg+0x28>
 8014542:	4b5f      	ldr	r3, [pc, #380]	@ (80146c0 <dhcp_create_msg+0x194>)
 8014544:	f240 7269 	movw	r2, #1897	@ 0x769
 8014548:	495e      	ldr	r1, [pc, #376]	@ (80146c4 <dhcp_create_msg+0x198>)
 801454a:	485f      	ldr	r0, [pc, #380]	@ (80146c8 <dhcp_create_msg+0x19c>)
 801454c:	f003 f958 	bl	8017800 <iprintf>
 8014550:	2300      	movs	r3, #0
 8014552:	e0b1      	b.n	80146b8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d108      	bne.n	801456c <dhcp_create_msg+0x40>
 801455a:	4b59      	ldr	r3, [pc, #356]	@ (80146c0 <dhcp_create_msg+0x194>)
 801455c:	f240 726a 	movw	r2, #1898	@ 0x76a
 8014560:	495a      	ldr	r1, [pc, #360]	@ (80146cc <dhcp_create_msg+0x1a0>)
 8014562:	4859      	ldr	r0, [pc, #356]	@ (80146c8 <dhcp_create_msg+0x19c>)
 8014564:	f003 f94c 	bl	8017800 <iprintf>
 8014568:	2300      	movs	r3, #0
 801456a:	e0a5      	b.n	80146b8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801456c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014570:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8014574:	2036      	movs	r0, #54	@ 0x36
 8014576:	f7f6 fe97 	bl	800b2a8 <pbuf_alloc>
 801457a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801457c:	69bb      	ldr	r3, [r7, #24]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d101      	bne.n	8014586 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014582:	2300      	movs	r3, #0
 8014584:	e098      	b.n	80146b8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	895b      	ldrh	r3, [r3, #10]
 801458a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801458e:	d206      	bcs.n	801459e <dhcp_create_msg+0x72>
 8014590:	4b4b      	ldr	r3, [pc, #300]	@ (80146c0 <dhcp_create_msg+0x194>)
 8014592:	f240 7271 	movw	r2, #1905	@ 0x771
 8014596:	494e      	ldr	r1, [pc, #312]	@ (80146d0 <dhcp_create_msg+0x1a4>)
 8014598:	484b      	ldr	r0, [pc, #300]	@ (80146c8 <dhcp_create_msg+0x19c>)
 801459a:	f003 f931 	bl	8017800 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801459e:	79fb      	ldrb	r3, [r7, #7]
 80145a0:	2b03      	cmp	r3, #3
 80145a2:	d103      	bne.n	80145ac <dhcp_create_msg+0x80>
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	795b      	ldrb	r3, [r3, #5]
 80145a8:	2b03      	cmp	r3, #3
 80145aa:	d10d      	bne.n	80145c8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	799b      	ldrb	r3, [r3, #6]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d105      	bne.n	80145c0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80145b4:	f002 fbcc 	bl	8016d50 <rand>
 80145b8:	4603      	mov	r3, r0
 80145ba:	461a      	mov	r2, r3
 80145bc:	4b45      	ldr	r3, [pc, #276]	@ (80146d4 <dhcp_create_msg+0x1a8>)
 80145be:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80145c0:	4b44      	ldr	r3, [pc, #272]	@ (80146d4 <dhcp_create_msg+0x1a8>)
 80145c2:	681a      	ldr	r2, [r3, #0]
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80145ce:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80145d2:	2100      	movs	r1, #0
 80145d4:	6978      	ldr	r0, [r7, #20]
 80145d6:	f003 f9b2 	bl	801793e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	2201      	movs	r2, #1
 80145de:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	2201      	movs	r2, #1
 80145e4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7f5 fd7c 	bl	800a0f2 <lwip_htonl>
 80145fa:	4602      	mov	r2, r0
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014600:	79fb      	ldrb	r3, [r7, #7]
 8014602:	2b08      	cmp	r3, #8
 8014604:	d010      	beq.n	8014628 <dhcp_create_msg+0xfc>
 8014606:	79fb      	ldrb	r3, [r7, #7]
 8014608:	2b04      	cmp	r3, #4
 801460a:	d00d      	beq.n	8014628 <dhcp_create_msg+0xfc>
 801460c:	79fb      	ldrb	r3, [r7, #7]
 801460e:	2b07      	cmp	r3, #7
 8014610:	d00a      	beq.n	8014628 <dhcp_create_msg+0xfc>
 8014612:	79fb      	ldrb	r3, [r7, #7]
 8014614:	2b03      	cmp	r3, #3
 8014616:	d10c      	bne.n	8014632 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801461c:	2b05      	cmp	r3, #5
 801461e:	d003      	beq.n	8014628 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	795b      	ldrb	r3, [r3, #5]
 8014624:	2b04      	cmp	r3, #4
 8014626:	d104      	bne.n	8014632 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	3304      	adds	r3, #4
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014632:	2300      	movs	r3, #0
 8014634:	83fb      	strh	r3, [r7, #30]
 8014636:	e00c      	b.n	8014652 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014638:	8bfa      	ldrh	r2, [r7, #30]
 801463a:	8bfb      	ldrh	r3, [r7, #30]
 801463c:	68f9      	ldr	r1, [r7, #12]
 801463e:	440a      	add	r2, r1
 8014640:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8014644:	697a      	ldr	r2, [r7, #20]
 8014646:	4413      	add	r3, r2
 8014648:	460a      	mov	r2, r1
 801464a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801464c:	8bfb      	ldrh	r3, [r7, #30]
 801464e:	3301      	adds	r3, #1
 8014650:	83fb      	strh	r3, [r7, #30]
 8014652:	8bfb      	ldrh	r3, [r7, #30]
 8014654:	2b05      	cmp	r3, #5
 8014656:	d9ef      	bls.n	8014638 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014658:	697b      	ldr	r3, [r7, #20]
 801465a:	2200      	movs	r2, #0
 801465c:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8014660:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8014664:	2200      	movs	r2, #0
 8014666:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801466a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801466e:	2200      	movs	r2, #0
 8014670:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8014674:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8014678:	2200      	movs	r2, #0
 801467a:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801467e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014688:	2301      	movs	r3, #1
 801468a:	2235      	movs	r2, #53	@ 0x35
 801468c:	2000      	movs	r0, #0
 801468e:	f7ff fadb 	bl	8013c48 <dhcp_option>
 8014692:	4603      	mov	r3, r0
 8014694:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801469c:	79fa      	ldrb	r2, [r7, #7]
 801469e:	8a7b      	ldrh	r3, [r7, #18]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7ff fb05 	bl	8013cb0 <dhcp_option_byte>
 80146a6:	4603      	mov	r3, r0
 80146a8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d002      	beq.n	80146b6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	8a7a      	ldrh	r2, [r7, #18]
 80146b4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80146b6:	69bb      	ldr	r3, [r7, #24]
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3720      	adds	r7, #32
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	0801c248 	.word	0x0801c248
 80146c4:	0801c568 	.word	0x0801c568
 80146c8:	0801c2a8 	.word	0x0801c2a8
 80146cc:	0801c588 	.word	0x0801c588
 80146d0:	0801c5a8 	.word	0x0801c5a8
 80146d4:	20009038 	.word	0x20009038

080146d8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b084      	sub	sp, #16
 80146dc:	af00      	add	r7, sp, #0
 80146de:	4603      	mov	r3, r0
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
 80146e4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80146e6:	89fb      	ldrh	r3, [r7, #14]
 80146e8:	1c5a      	adds	r2, r3, #1
 80146ea:	81fa      	strh	r2, [r7, #14]
 80146ec:	461a      	mov	r2, r3
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	4413      	add	r3, r2
 80146f2:	22ff      	movs	r2, #255	@ 0xff
 80146f4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80146f6:	e007      	b.n	8014708 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80146f8:	89fb      	ldrh	r3, [r7, #14]
 80146fa:	1c5a      	adds	r2, r3, #1
 80146fc:	81fa      	strh	r2, [r7, #14]
 80146fe:	461a      	mov	r2, r3
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	4413      	add	r3, r2
 8014704:	2200      	movs	r2, #0
 8014706:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014708:	89fb      	ldrh	r3, [r7, #14]
 801470a:	2b43      	cmp	r3, #67	@ 0x43
 801470c:	d904      	bls.n	8014718 <dhcp_option_trailer+0x40>
 801470e:	89fb      	ldrh	r3, [r7, #14]
 8014710:	f003 0303 	and.w	r3, r3, #3
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <dhcp_option_trailer+0x46>
 8014718:	89fb      	ldrh	r3, [r7, #14]
 801471a:	2b43      	cmp	r3, #67	@ 0x43
 801471c:	d9ec      	bls.n	80146f8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801471e:	89fb      	ldrh	r3, [r7, #14]
 8014720:	33f0      	adds	r3, #240	@ 0xf0
 8014722:	b29b      	uxth	r3, r3
 8014724:	4619      	mov	r1, r3
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f7f6 ff1c 	bl	800b564 <pbuf_realloc>
}
 801472c:	bf00      	nop
 801472e:	3710      	adds	r7, #16
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014734:	b480      	push	{r7}
 8014736:	b085      	sub	sp, #20
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d017      	beq.n	8014772 <dhcp_supplied_address+0x3e>
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014746:	2b00      	cmp	r3, #0
 8014748:	d013      	beq.n	8014772 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801474e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	795b      	ldrb	r3, [r3, #5]
 8014754:	2b0a      	cmp	r3, #10
 8014756:	d007      	beq.n	8014768 <dhcp_supplied_address+0x34>
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	795b      	ldrb	r3, [r3, #5]
 801475c:	2b05      	cmp	r3, #5
 801475e:	d003      	beq.n	8014768 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014764:	2b04      	cmp	r3, #4
 8014766:	d101      	bne.n	801476c <dhcp_supplied_address+0x38>
 8014768:	2301      	movs	r3, #1
 801476a:	e000      	b.n	801476e <dhcp_supplied_address+0x3a>
 801476c:	2300      	movs	r3, #0
 801476e:	b2db      	uxtb	r3, r3
 8014770:	e000      	b.n	8014774 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014772:	2300      	movs	r3, #0
}
 8014774:	4618      	mov	r0, r3
 8014776:	3714      	adds	r7, #20
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014788:	4915      	ldr	r1, [pc, #84]	@ (80147e0 <etharp_free_entry+0x60>)
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	4613      	mov	r3, r2
 801478e:	005b      	lsls	r3, r3, #1
 8014790:	4413      	add	r3, r2
 8014792:	00db      	lsls	r3, r3, #3
 8014794:	440b      	add	r3, r1
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d013      	beq.n	80147c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801479c:	4910      	ldr	r1, [pc, #64]	@ (80147e0 <etharp_free_entry+0x60>)
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	4613      	mov	r3, r2
 80147a2:	005b      	lsls	r3, r3, #1
 80147a4:	4413      	add	r3, r2
 80147a6:	00db      	lsls	r3, r3, #3
 80147a8:	440b      	add	r3, r1
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7f7 f85f 	bl	800b870 <pbuf_free>
    arp_table[i].q = NULL;
 80147b2:	490b      	ldr	r1, [pc, #44]	@ (80147e0 <etharp_free_entry+0x60>)
 80147b4:	687a      	ldr	r2, [r7, #4]
 80147b6:	4613      	mov	r3, r2
 80147b8:	005b      	lsls	r3, r3, #1
 80147ba:	4413      	add	r3, r2
 80147bc:	00db      	lsls	r3, r3, #3
 80147be:	440b      	add	r3, r1
 80147c0:	2200      	movs	r2, #0
 80147c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80147c4:	4906      	ldr	r1, [pc, #24]	@ (80147e0 <etharp_free_entry+0x60>)
 80147c6:	687a      	ldr	r2, [r7, #4]
 80147c8:	4613      	mov	r3, r2
 80147ca:	005b      	lsls	r3, r3, #1
 80147cc:	4413      	add	r3, r2
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	440b      	add	r3, r1
 80147d2:	3314      	adds	r3, #20
 80147d4:	2200      	movs	r2, #0
 80147d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80147d8:	bf00      	nop
 80147da:	3708      	adds	r7, #8
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}
 80147e0:	2000903c 	.word	0x2000903c

080147e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147ea:	2300      	movs	r3, #0
 80147ec:	607b      	str	r3, [r7, #4]
 80147ee:	e096      	b.n	801491e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80147f0:	494f      	ldr	r1, [pc, #316]	@ (8014930 <etharp_tmr+0x14c>)
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	440b      	add	r3, r1
 80147fe:	3314      	adds	r3, #20
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014804:	78fb      	ldrb	r3, [r7, #3]
 8014806:	2b00      	cmp	r3, #0
 8014808:	f000 8086 	beq.w	8014918 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801480c:	4948      	ldr	r1, [pc, #288]	@ (8014930 <etharp_tmr+0x14c>)
 801480e:	687a      	ldr	r2, [r7, #4]
 8014810:	4613      	mov	r3, r2
 8014812:	005b      	lsls	r3, r3, #1
 8014814:	4413      	add	r3, r2
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	440b      	add	r3, r1
 801481a:	3312      	adds	r3, #18
 801481c:	881b      	ldrh	r3, [r3, #0]
 801481e:	3301      	adds	r3, #1
 8014820:	b298      	uxth	r0, r3
 8014822:	4943      	ldr	r1, [pc, #268]	@ (8014930 <etharp_tmr+0x14c>)
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	4613      	mov	r3, r2
 8014828:	005b      	lsls	r3, r3, #1
 801482a:	4413      	add	r3, r2
 801482c:	00db      	lsls	r3, r3, #3
 801482e:	440b      	add	r3, r1
 8014830:	3312      	adds	r3, #18
 8014832:	4602      	mov	r2, r0
 8014834:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014836:	493e      	ldr	r1, [pc, #248]	@ (8014930 <etharp_tmr+0x14c>)
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	4613      	mov	r3, r2
 801483c:	005b      	lsls	r3, r3, #1
 801483e:	4413      	add	r3, r2
 8014840:	00db      	lsls	r3, r3, #3
 8014842:	440b      	add	r3, r1
 8014844:	3312      	adds	r3, #18
 8014846:	881b      	ldrh	r3, [r3, #0]
 8014848:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801484c:	d215      	bcs.n	801487a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801484e:	4938      	ldr	r1, [pc, #224]	@ (8014930 <etharp_tmr+0x14c>)
 8014850:	687a      	ldr	r2, [r7, #4]
 8014852:	4613      	mov	r3, r2
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	4413      	add	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	440b      	add	r3, r1
 801485c:	3314      	adds	r3, #20
 801485e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014860:	2b01      	cmp	r3, #1
 8014862:	d10e      	bne.n	8014882 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014864:	4932      	ldr	r1, [pc, #200]	@ (8014930 <etharp_tmr+0x14c>)
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	4613      	mov	r3, r2
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	4413      	add	r3, r2
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	440b      	add	r3, r1
 8014872:	3312      	adds	r3, #18
 8014874:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014876:	2b04      	cmp	r3, #4
 8014878:	d903      	bls.n	8014882 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f7ff ff80 	bl	8014780 <etharp_free_entry>
 8014880:	e04a      	b.n	8014918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014882:	492b      	ldr	r1, [pc, #172]	@ (8014930 <etharp_tmr+0x14c>)
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	4613      	mov	r3, r2
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	4413      	add	r3, r2
 801488c:	00db      	lsls	r3, r3, #3
 801488e:	440b      	add	r3, r1
 8014890:	3314      	adds	r3, #20
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	2b03      	cmp	r3, #3
 8014896:	d10a      	bne.n	80148ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014898:	4925      	ldr	r1, [pc, #148]	@ (8014930 <etharp_tmr+0x14c>)
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	4613      	mov	r3, r2
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	4413      	add	r3, r2
 80148a2:	00db      	lsls	r3, r3, #3
 80148a4:	440b      	add	r3, r1
 80148a6:	3314      	adds	r3, #20
 80148a8:	2204      	movs	r2, #4
 80148aa:	701a      	strb	r2, [r3, #0]
 80148ac:	e034      	b.n	8014918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80148ae:	4920      	ldr	r1, [pc, #128]	@ (8014930 <etharp_tmr+0x14c>)
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	00db      	lsls	r3, r3, #3
 80148ba:	440b      	add	r3, r1
 80148bc:	3314      	adds	r3, #20
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	2b04      	cmp	r3, #4
 80148c2:	d10a      	bne.n	80148da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80148c4:	491a      	ldr	r1, [pc, #104]	@ (8014930 <etharp_tmr+0x14c>)
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	4613      	mov	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	4413      	add	r3, r2
 80148ce:	00db      	lsls	r3, r3, #3
 80148d0:	440b      	add	r3, r1
 80148d2:	3314      	adds	r3, #20
 80148d4:	2202      	movs	r2, #2
 80148d6:	701a      	strb	r2, [r3, #0]
 80148d8:	e01e      	b.n	8014918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80148da:	4915      	ldr	r1, [pc, #84]	@ (8014930 <etharp_tmr+0x14c>)
 80148dc:	687a      	ldr	r2, [r7, #4]
 80148de:	4613      	mov	r3, r2
 80148e0:	005b      	lsls	r3, r3, #1
 80148e2:	4413      	add	r3, r2
 80148e4:	00db      	lsls	r3, r3, #3
 80148e6:	440b      	add	r3, r1
 80148e8:	3314      	adds	r3, #20
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d113      	bne.n	8014918 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80148f0:	490f      	ldr	r1, [pc, #60]	@ (8014930 <etharp_tmr+0x14c>)
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	4613      	mov	r3, r2
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	4413      	add	r3, r2
 80148fa:	00db      	lsls	r3, r3, #3
 80148fc:	440b      	add	r3, r1
 80148fe:	3308      	adds	r3, #8
 8014900:	6818      	ldr	r0, [r3, #0]
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	4613      	mov	r3, r2
 8014906:	005b      	lsls	r3, r3, #1
 8014908:	4413      	add	r3, r2
 801490a:	00db      	lsls	r3, r3, #3
 801490c:	4a08      	ldr	r2, [pc, #32]	@ (8014930 <etharp_tmr+0x14c>)
 801490e:	4413      	add	r3, r2
 8014910:	3304      	adds	r3, #4
 8014912:	4619      	mov	r1, r3
 8014914:	f000 fe72 	bl	80155fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	3301      	adds	r3, #1
 801491c:	607b      	str	r3, [r7, #4]
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2b09      	cmp	r3, #9
 8014922:	f77f af65 	ble.w	80147f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014926:	bf00      	nop
 8014928:	bf00      	nop
 801492a:	3708      	adds	r7, #8
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}
 8014930:	2000903c 	.word	0x2000903c

08014934 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b08a      	sub	sp, #40	@ 0x28
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	460b      	mov	r3, r1
 801493e:	607a      	str	r2, [r7, #4]
 8014940:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014942:	230a      	movs	r3, #10
 8014944:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014946:	230a      	movs	r3, #10
 8014948:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801494a:	230a      	movs	r3, #10
 801494c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801494e:	2300      	movs	r3, #0
 8014950:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014952:	230a      	movs	r3, #10
 8014954:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014956:	2300      	movs	r3, #0
 8014958:	83bb      	strh	r3, [r7, #28]
 801495a:	2300      	movs	r3, #0
 801495c:	837b      	strh	r3, [r7, #26]
 801495e:	2300      	movs	r3, #0
 8014960:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014962:	2300      	movs	r3, #0
 8014964:	843b      	strh	r3, [r7, #32]
 8014966:	e0ae      	b.n	8014ac6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014968:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801496c:	49a6      	ldr	r1, [pc, #664]	@ (8014c08 <etharp_find_entry+0x2d4>)
 801496e:	4613      	mov	r3, r2
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	440b      	add	r3, r1
 8014978:	3314      	adds	r3, #20
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801497e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014982:	2b0a      	cmp	r3, #10
 8014984:	d105      	bne.n	8014992 <etharp_find_entry+0x5e>
 8014986:	7dfb      	ldrb	r3, [r7, #23]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d102      	bne.n	8014992 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801498c:	8c3b      	ldrh	r3, [r7, #32]
 801498e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014990:	e095      	b.n	8014abe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014992:	7dfb      	ldrb	r3, [r7, #23]
 8014994:	2b00      	cmp	r3, #0
 8014996:	f000 8092 	beq.w	8014abe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801499a:	7dfb      	ldrb	r3, [r7, #23]
 801499c:	2b01      	cmp	r3, #1
 801499e:	d009      	beq.n	80149b4 <etharp_find_entry+0x80>
 80149a0:	7dfb      	ldrb	r3, [r7, #23]
 80149a2:	2b01      	cmp	r3, #1
 80149a4:	d806      	bhi.n	80149b4 <etharp_find_entry+0x80>
 80149a6:	4b99      	ldr	r3, [pc, #612]	@ (8014c0c <etharp_find_entry+0x2d8>)
 80149a8:	f240 1223 	movw	r2, #291	@ 0x123
 80149ac:	4998      	ldr	r1, [pc, #608]	@ (8014c10 <etharp_find_entry+0x2dc>)
 80149ae:	4899      	ldr	r0, [pc, #612]	@ (8014c14 <etharp_find_entry+0x2e0>)
 80149b0:	f002 ff26 	bl	8017800 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d020      	beq.n	80149fc <etharp_find_entry+0xc8>
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	6819      	ldr	r1, [r3, #0]
 80149be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149c2:	4891      	ldr	r0, [pc, #580]	@ (8014c08 <etharp_find_entry+0x2d4>)
 80149c4:	4613      	mov	r3, r2
 80149c6:	005b      	lsls	r3, r3, #1
 80149c8:	4413      	add	r3, r2
 80149ca:	00db      	lsls	r3, r3, #3
 80149cc:	4403      	add	r3, r0
 80149ce:	3304      	adds	r3, #4
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	4299      	cmp	r1, r3
 80149d4:	d112      	bne.n	80149fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d00c      	beq.n	80149f6 <etharp_find_entry+0xc2>
 80149dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149e0:	4989      	ldr	r1, [pc, #548]	@ (8014c08 <etharp_find_entry+0x2d4>)
 80149e2:	4613      	mov	r3, r2
 80149e4:	005b      	lsls	r3, r3, #1
 80149e6:	4413      	add	r3, r2
 80149e8:	00db      	lsls	r3, r3, #3
 80149ea:	440b      	add	r3, r1
 80149ec:	3308      	adds	r3, #8
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d102      	bne.n	80149fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80149f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80149fa:	e100      	b.n	8014bfe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80149fc:	7dfb      	ldrb	r3, [r7, #23]
 80149fe:	2b01      	cmp	r3, #1
 8014a00:	d140      	bne.n	8014a84 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014a02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a06:	4980      	ldr	r1, [pc, #512]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014a08:	4613      	mov	r3, r2
 8014a0a:	005b      	lsls	r3, r3, #1
 8014a0c:	4413      	add	r3, r2
 8014a0e:	00db      	lsls	r3, r3, #3
 8014a10:	440b      	add	r3, r1
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d01a      	beq.n	8014a4e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014a18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a1c:	497a      	ldr	r1, [pc, #488]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014a1e:	4613      	mov	r3, r2
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	440b      	add	r3, r1
 8014a28:	3312      	adds	r3, #18
 8014a2a:	881b      	ldrh	r3, [r3, #0]
 8014a2c:	8bba      	ldrh	r2, [r7, #28]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d845      	bhi.n	8014abe <etharp_find_entry+0x18a>
            old_queue = i;
 8014a32:	8c3b      	ldrh	r3, [r7, #32]
 8014a34:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014a36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a3a:	4973      	ldr	r1, [pc, #460]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014a3c:	4613      	mov	r3, r2
 8014a3e:	005b      	lsls	r3, r3, #1
 8014a40:	4413      	add	r3, r2
 8014a42:	00db      	lsls	r3, r3, #3
 8014a44:	440b      	add	r3, r1
 8014a46:	3312      	adds	r3, #18
 8014a48:	881b      	ldrh	r3, [r3, #0]
 8014a4a:	83bb      	strh	r3, [r7, #28]
 8014a4c:	e037      	b.n	8014abe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014a4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a52:	496d      	ldr	r1, [pc, #436]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014a54:	4613      	mov	r3, r2
 8014a56:	005b      	lsls	r3, r3, #1
 8014a58:	4413      	add	r3, r2
 8014a5a:	00db      	lsls	r3, r3, #3
 8014a5c:	440b      	add	r3, r1
 8014a5e:	3312      	adds	r3, #18
 8014a60:	881b      	ldrh	r3, [r3, #0]
 8014a62:	8b7a      	ldrh	r2, [r7, #26]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d82a      	bhi.n	8014abe <etharp_find_entry+0x18a>
            old_pending = i;
 8014a68:	8c3b      	ldrh	r3, [r7, #32]
 8014a6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014a6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a70:	4965      	ldr	r1, [pc, #404]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014a72:	4613      	mov	r3, r2
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	4413      	add	r3, r2
 8014a78:	00db      	lsls	r3, r3, #3
 8014a7a:	440b      	add	r3, r1
 8014a7c:	3312      	adds	r3, #18
 8014a7e:	881b      	ldrh	r3, [r3, #0]
 8014a80:	837b      	strh	r3, [r7, #26]
 8014a82:	e01c      	b.n	8014abe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014a84:	7dfb      	ldrb	r3, [r7, #23]
 8014a86:	2b01      	cmp	r3, #1
 8014a88:	d919      	bls.n	8014abe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014a8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a8e:	495e      	ldr	r1, [pc, #376]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014a90:	4613      	mov	r3, r2
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	4413      	add	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	440b      	add	r3, r1
 8014a9a:	3312      	adds	r3, #18
 8014a9c:	881b      	ldrh	r3, [r3, #0]
 8014a9e:	8b3a      	ldrh	r2, [r7, #24]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d80c      	bhi.n	8014abe <etharp_find_entry+0x18a>
            old_stable = i;
 8014aa4:	8c3b      	ldrh	r3, [r7, #32]
 8014aa6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014aa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014aac:	4956      	ldr	r1, [pc, #344]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	440b      	add	r3, r1
 8014ab8:	3312      	adds	r3, #18
 8014aba:	881b      	ldrh	r3, [r3, #0]
 8014abc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014abe:	8c3b      	ldrh	r3, [r7, #32]
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	843b      	strh	r3, [r7, #32]
 8014ac6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014aca:	2b09      	cmp	r3, #9
 8014acc:	f77f af4c 	ble.w	8014968 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014ad0:	7afb      	ldrb	r3, [r7, #11]
 8014ad2:	f003 0302 	and.w	r3, r3, #2
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d108      	bne.n	8014aec <etharp_find_entry+0x1b8>
 8014ada:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014ade:	2b0a      	cmp	r3, #10
 8014ae0:	d107      	bne.n	8014af2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014ae2:	7afb      	ldrb	r3, [r7, #11]
 8014ae4:	f003 0301 	and.w	r3, r3, #1
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d102      	bne.n	8014af2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014aec:	f04f 33ff 	mov.w	r3, #4294967295
 8014af0:	e085      	b.n	8014bfe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014af2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014af6:	2b09      	cmp	r3, #9
 8014af8:	dc02      	bgt.n	8014b00 <etharp_find_entry+0x1cc>
    i = empty;
 8014afa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014afc:	843b      	strh	r3, [r7, #32]
 8014afe:	e039      	b.n	8014b74 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014b00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014b04:	2b09      	cmp	r3, #9
 8014b06:	dc14      	bgt.n	8014b32 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014b08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014b0a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014b0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b10:	493d      	ldr	r1, [pc, #244]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	440b      	add	r3, r1
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d018      	beq.n	8014b54 <etharp_find_entry+0x220>
 8014b22:	4b3a      	ldr	r3, [pc, #232]	@ (8014c0c <etharp_find_entry+0x2d8>)
 8014b24:	f240 126d 	movw	r2, #365	@ 0x16d
 8014b28:	493b      	ldr	r1, [pc, #236]	@ (8014c18 <etharp_find_entry+0x2e4>)
 8014b2a:	483a      	ldr	r0, [pc, #232]	@ (8014c14 <etharp_find_entry+0x2e0>)
 8014b2c:	f002 fe68 	bl	8017800 <iprintf>
 8014b30:	e010      	b.n	8014b54 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014b32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014b36:	2b09      	cmp	r3, #9
 8014b38:	dc02      	bgt.n	8014b40 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014b3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014b3c:	843b      	strh	r3, [r7, #32]
 8014b3e:	e009      	b.n	8014b54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014b40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014b44:	2b09      	cmp	r3, #9
 8014b46:	dc02      	bgt.n	8014b4e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014b48:	8bfb      	ldrh	r3, [r7, #30]
 8014b4a:	843b      	strh	r3, [r7, #32]
 8014b4c:	e002      	b.n	8014b54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b52:	e054      	b.n	8014bfe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014b54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b58:	2b09      	cmp	r3, #9
 8014b5a:	dd06      	ble.n	8014b6a <etharp_find_entry+0x236>
 8014b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8014c0c <etharp_find_entry+0x2d8>)
 8014b5e:	f240 127f 	movw	r2, #383	@ 0x17f
 8014b62:	492e      	ldr	r1, [pc, #184]	@ (8014c1c <etharp_find_entry+0x2e8>)
 8014b64:	482b      	ldr	r0, [pc, #172]	@ (8014c14 <etharp_find_entry+0x2e0>)
 8014b66:	f002 fe4b 	bl	8017800 <iprintf>
    etharp_free_entry(i);
 8014b6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7ff fe06 	bl	8014780 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014b74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b78:	2b09      	cmp	r3, #9
 8014b7a:	dd06      	ble.n	8014b8a <etharp_find_entry+0x256>
 8014b7c:	4b23      	ldr	r3, [pc, #140]	@ (8014c0c <etharp_find_entry+0x2d8>)
 8014b7e:	f240 1283 	movw	r2, #387	@ 0x183
 8014b82:	4926      	ldr	r1, [pc, #152]	@ (8014c1c <etharp_find_entry+0x2e8>)
 8014b84:	4823      	ldr	r0, [pc, #140]	@ (8014c14 <etharp_find_entry+0x2e0>)
 8014b86:	f002 fe3b 	bl	8017800 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b8e:	491e      	ldr	r1, [pc, #120]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014b90:	4613      	mov	r3, r2
 8014b92:	005b      	lsls	r3, r3, #1
 8014b94:	4413      	add	r3, r2
 8014b96:	00db      	lsls	r3, r3, #3
 8014b98:	440b      	add	r3, r1
 8014b9a:	3314      	adds	r3, #20
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d006      	beq.n	8014bb0 <etharp_find_entry+0x27c>
 8014ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8014c0c <etharp_find_entry+0x2d8>)
 8014ba4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014ba8:	491d      	ldr	r1, [pc, #116]	@ (8014c20 <etharp_find_entry+0x2ec>)
 8014baa:	481a      	ldr	r0, [pc, #104]	@ (8014c14 <etharp_find_entry+0x2e0>)
 8014bac:	f002 fe28 	bl	8017800 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00b      	beq.n	8014bce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014bb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6819      	ldr	r1, [r3, #0]
 8014bbe:	4812      	ldr	r0, [pc, #72]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	005b      	lsls	r3, r3, #1
 8014bc4:	4413      	add	r3, r2
 8014bc6:	00db      	lsls	r3, r3, #3
 8014bc8:	4403      	add	r3, r0
 8014bca:	3304      	adds	r3, #4
 8014bcc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014bce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bd2:	490d      	ldr	r1, [pc, #52]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	4413      	add	r3, r2
 8014bda:	00db      	lsls	r3, r3, #3
 8014bdc:	440b      	add	r3, r1
 8014bde:	3312      	adds	r3, #18
 8014be0:	2200      	movs	r2, #0
 8014be2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014be4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014be8:	4907      	ldr	r1, [pc, #28]	@ (8014c08 <etharp_find_entry+0x2d4>)
 8014bea:	4613      	mov	r3, r2
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	4413      	add	r3, r2
 8014bf0:	00db      	lsls	r3, r3, #3
 8014bf2:	440b      	add	r3, r1
 8014bf4:	3308      	adds	r3, #8
 8014bf6:	687a      	ldr	r2, [r7, #4]
 8014bf8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014bfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3728      	adds	r7, #40	@ 0x28
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	2000903c 	.word	0x2000903c
 8014c0c:	0801c5e8 	.word	0x0801c5e8
 8014c10:	0801c620 	.word	0x0801c620
 8014c14:	0801c660 	.word	0x0801c660
 8014c18:	0801c688 	.word	0x0801c688
 8014c1c:	0801c6a0 	.word	0x0801c6a0
 8014c20:	0801c6b4 	.word	0x0801c6b4

08014c24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b088      	sub	sp, #32
 8014c28:	af02      	add	r7, sp, #8
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
 8014c30:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014c38:	2b06      	cmp	r3, #6
 8014c3a:	d006      	beq.n	8014c4a <etharp_update_arp_entry+0x26>
 8014c3c:	4b48      	ldr	r3, [pc, #288]	@ (8014d60 <etharp_update_arp_entry+0x13c>)
 8014c3e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014c42:	4948      	ldr	r1, [pc, #288]	@ (8014d64 <etharp_update_arp_entry+0x140>)
 8014c44:	4848      	ldr	r0, [pc, #288]	@ (8014d68 <etharp_update_arp_entry+0x144>)
 8014c46:	f002 fddb 	bl	8017800 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d012      	beq.n	8014c76 <etharp_update_arp_entry+0x52>
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d00e      	beq.n	8014c76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	68f9      	ldr	r1, [r7, #12]
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f001 f920 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8014c64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d105      	bne.n	8014c76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c72:	2be0      	cmp	r3, #224	@ 0xe0
 8014c74:	d102      	bne.n	8014c7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014c76:	f06f 030f 	mvn.w	r3, #15
 8014c7a:	e06c      	b.n	8014d56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014c7c:	78fb      	ldrb	r3, [r7, #3]
 8014c7e:	68fa      	ldr	r2, [r7, #12]
 8014c80:	4619      	mov	r1, r3
 8014c82:	68b8      	ldr	r0, [r7, #8]
 8014c84:	f7ff fe56 	bl	8014934 <etharp_find_entry>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014c8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	da02      	bge.n	8014c9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014c94:	8afb      	ldrh	r3, [r7, #22]
 8014c96:	b25b      	sxtb	r3, r3
 8014c98:	e05d      	b.n	8014d56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014c9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c9e:	4933      	ldr	r1, [pc, #204]	@ (8014d6c <etharp_update_arp_entry+0x148>)
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	005b      	lsls	r3, r3, #1
 8014ca4:	4413      	add	r3, r2
 8014ca6:	00db      	lsls	r3, r3, #3
 8014ca8:	440b      	add	r3, r1
 8014caa:	3314      	adds	r3, #20
 8014cac:	2202      	movs	r2, #2
 8014cae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014cb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cb4:	492d      	ldr	r1, [pc, #180]	@ (8014d6c <etharp_update_arp_entry+0x148>)
 8014cb6:	4613      	mov	r3, r2
 8014cb8:	005b      	lsls	r3, r3, #1
 8014cba:	4413      	add	r3, r2
 8014cbc:	00db      	lsls	r3, r3, #3
 8014cbe:	440b      	add	r3, r1
 8014cc0:	3308      	adds	r3, #8
 8014cc2:	68fa      	ldr	r2, [r7, #12]
 8014cc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014cc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cca:	4613      	mov	r3, r2
 8014ccc:	005b      	lsls	r3, r3, #1
 8014cce:	4413      	add	r3, r2
 8014cd0:	00db      	lsls	r3, r3, #3
 8014cd2:	3308      	adds	r3, #8
 8014cd4:	4a25      	ldr	r2, [pc, #148]	@ (8014d6c <etharp_update_arp_entry+0x148>)
 8014cd6:	4413      	add	r3, r2
 8014cd8:	3304      	adds	r3, #4
 8014cda:	2206      	movs	r2, #6
 8014cdc:	6879      	ldr	r1, [r7, #4]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f002 fec5 	bl	8017a6e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014ce4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ce8:	4920      	ldr	r1, [pc, #128]	@ (8014d6c <etharp_update_arp_entry+0x148>)
 8014cea:	4613      	mov	r3, r2
 8014cec:	005b      	lsls	r3, r3, #1
 8014cee:	4413      	add	r3, r2
 8014cf0:	00db      	lsls	r3, r3, #3
 8014cf2:	440b      	add	r3, r1
 8014cf4:	3312      	adds	r3, #18
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014cfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cfe:	491b      	ldr	r1, [pc, #108]	@ (8014d6c <etharp_update_arp_entry+0x148>)
 8014d00:	4613      	mov	r3, r2
 8014d02:	005b      	lsls	r3, r3, #1
 8014d04:	4413      	add	r3, r2
 8014d06:	00db      	lsls	r3, r3, #3
 8014d08:	440b      	add	r3, r1
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d021      	beq.n	8014d54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014d10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d14:	4915      	ldr	r1, [pc, #84]	@ (8014d6c <etharp_update_arp_entry+0x148>)
 8014d16:	4613      	mov	r3, r2
 8014d18:	005b      	lsls	r3, r3, #1
 8014d1a:	4413      	add	r3, r2
 8014d1c:	00db      	lsls	r3, r3, #3
 8014d1e:	440b      	add	r3, r1
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014d24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d28:	4910      	ldr	r1, [pc, #64]	@ (8014d6c <etharp_update_arp_entry+0x148>)
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	005b      	lsls	r3, r3, #1
 8014d2e:	4413      	add	r3, r2
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	440b      	add	r3, r1
 8014d34:	2200      	movs	r2, #0
 8014d36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8014d3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014d42:	9300      	str	r3, [sp, #0]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6939      	ldr	r1, [r7, #16]
 8014d48:	68f8      	ldr	r0, [r7, #12]
 8014d4a:	f001 ffb9 	bl	8016cc0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014d4e:	6938      	ldr	r0, [r7, #16]
 8014d50:	f7f6 fd8e 	bl	800b870 <pbuf_free>
  }
  return ERR_OK;
 8014d54:	2300      	movs	r3, #0
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3718      	adds	r7, #24
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	0801c5e8 	.word	0x0801c5e8
 8014d64:	0801c6e0 	.word	0x0801c6e0
 8014d68:	0801c660 	.word	0x0801c660
 8014d6c:	2000903c 	.word	0x2000903c

08014d70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b084      	sub	sp, #16
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d78:	2300      	movs	r3, #0
 8014d7a:	60fb      	str	r3, [r7, #12]
 8014d7c:	e01e      	b.n	8014dbc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014d7e:	4913      	ldr	r1, [pc, #76]	@ (8014dcc <etharp_cleanup_netif+0x5c>)
 8014d80:	68fa      	ldr	r2, [r7, #12]
 8014d82:	4613      	mov	r3, r2
 8014d84:	005b      	lsls	r3, r3, #1
 8014d86:	4413      	add	r3, r2
 8014d88:	00db      	lsls	r3, r3, #3
 8014d8a:	440b      	add	r3, r1
 8014d8c:	3314      	adds	r3, #20
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014d92:	7afb      	ldrb	r3, [r7, #11]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d00e      	beq.n	8014db6 <etharp_cleanup_netif+0x46>
 8014d98:	490c      	ldr	r1, [pc, #48]	@ (8014dcc <etharp_cleanup_netif+0x5c>)
 8014d9a:	68fa      	ldr	r2, [r7, #12]
 8014d9c:	4613      	mov	r3, r2
 8014d9e:	005b      	lsls	r3, r3, #1
 8014da0:	4413      	add	r3, r2
 8014da2:	00db      	lsls	r3, r3, #3
 8014da4:	440b      	add	r3, r1
 8014da6:	3308      	adds	r3, #8
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d102      	bne.n	8014db6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	f7ff fce5 	bl	8014780 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	3301      	adds	r3, #1
 8014dba:	60fb      	str	r3, [r7, #12]
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2b09      	cmp	r3, #9
 8014dc0:	dddd      	ble.n	8014d7e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014dc2:	bf00      	nop
 8014dc4:	bf00      	nop
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	2000903c 	.word	0x2000903c

08014dd0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014dd0:	b5b0      	push	{r4, r5, r7, lr}
 8014dd2:	b08a      	sub	sp, #40	@ 0x28
 8014dd4:	af04      	add	r7, sp, #16
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d107      	bne.n	8014df0 <etharp_input+0x20>
 8014de0:	4b3f      	ldr	r3, [pc, #252]	@ (8014ee0 <etharp_input+0x110>)
 8014de2:	f240 228a 	movw	r2, #650	@ 0x28a
 8014de6:	493f      	ldr	r1, [pc, #252]	@ (8014ee4 <etharp_input+0x114>)
 8014de8:	483f      	ldr	r0, [pc, #252]	@ (8014ee8 <etharp_input+0x118>)
 8014dea:	f002 fd09 	bl	8017800 <iprintf>
 8014dee:	e074      	b.n	8014eda <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	881b      	ldrh	r3, [r3, #0]
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e00:	d10c      	bne.n	8014e1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e02:	693b      	ldr	r3, [r7, #16]
 8014e04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e06:	2b06      	cmp	r3, #6
 8014e08:	d108      	bne.n	8014e1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e0e:	2b04      	cmp	r3, #4
 8014e10:	d104      	bne.n	8014e1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	885b      	ldrh	r3, [r3, #2]
 8014e16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e18:	2b08      	cmp	r3, #8
 8014e1a:	d003      	beq.n	8014e24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7f6 fd27 	bl	800b870 <pbuf_free>
    return;
 8014e22:	e05a      	b.n	8014eda <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	330e      	adds	r3, #14
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	3318      	adds	r3, #24
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	3304      	adds	r3, #4
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d102      	bne.n	8014e44 <etharp_input+0x74>
    for_us = 0;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	75fb      	strb	r3, [r7, #23]
 8014e42:	e009      	b.n	8014e58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014e44:	68ba      	ldr	r2, [r7, #8]
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	bf0c      	ite	eq
 8014e50:	2301      	moveq	r3, #1
 8014e52:	2300      	movne	r3, #0
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	f103 0208 	add.w	r2, r3, #8
 8014e5e:	7dfb      	ldrb	r3, [r7, #23]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d001      	beq.n	8014e68 <etharp_input+0x98>
 8014e64:	2301      	movs	r3, #1
 8014e66:	e000      	b.n	8014e6a <etharp_input+0x9a>
 8014e68:	2302      	movs	r3, #2
 8014e6a:	f107 010c 	add.w	r1, r7, #12
 8014e6e:	6838      	ldr	r0, [r7, #0]
 8014e70:	f7ff fed8 	bl	8014c24 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	88db      	ldrh	r3, [r3, #6]
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e7e:	d003      	beq.n	8014e88 <etharp_input+0xb8>
 8014e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e84:	d01e      	beq.n	8014ec4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014e86:	e025      	b.n	8014ed4 <etharp_input+0x104>
      if (for_us) {
 8014e88:	7dfb      	ldrb	r3, [r7, #23]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d021      	beq.n	8014ed2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014ea4:	693a      	ldr	r2, [r7, #16]
 8014ea6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014ea8:	2102      	movs	r1, #2
 8014eaa:	9103      	str	r1, [sp, #12]
 8014eac:	f107 010c 	add.w	r1, r7, #12
 8014eb0:	9102      	str	r1, [sp, #8]
 8014eb2:	9201      	str	r2, [sp, #4]
 8014eb4:	9300      	str	r3, [sp, #0]
 8014eb6:	462b      	mov	r3, r5
 8014eb8:	4622      	mov	r2, r4
 8014eba:	4601      	mov	r1, r0
 8014ebc:	6838      	ldr	r0, [r7, #0]
 8014ebe:	f000 faef 	bl	80154a0 <etharp_raw>
      break;
 8014ec2:	e006      	b.n	8014ed2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014ec4:	f107 030c 	add.w	r3, r7, #12
 8014ec8:	4619      	mov	r1, r3
 8014eca:	6838      	ldr	r0, [r7, #0]
 8014ecc:	f7fe fa02 	bl	80132d4 <dhcp_arp_reply>
      break;
 8014ed0:	e000      	b.n	8014ed4 <etharp_input+0x104>
      break;
 8014ed2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7f6 fccb 	bl	800b870 <pbuf_free>
}
 8014eda:	3718      	adds	r7, #24
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bdb0      	pop	{r4, r5, r7, pc}
 8014ee0:	0801c5e8 	.word	0x0801c5e8
 8014ee4:	0801c738 	.word	0x0801c738
 8014ee8:	0801c660 	.word	0x0801c660

08014eec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b086      	sub	sp, #24
 8014ef0:	af02      	add	r7, sp, #8
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	4613      	mov	r3, r2
 8014ef8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014efa:	79fa      	ldrb	r2, [r7, #7]
 8014efc:	4944      	ldr	r1, [pc, #272]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014efe:	4613      	mov	r3, r2
 8014f00:	005b      	lsls	r3, r3, #1
 8014f02:	4413      	add	r3, r2
 8014f04:	00db      	lsls	r3, r3, #3
 8014f06:	440b      	add	r3, r1
 8014f08:	3314      	adds	r3, #20
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	2b01      	cmp	r3, #1
 8014f0e:	d806      	bhi.n	8014f1e <etharp_output_to_arp_index+0x32>
 8014f10:	4b40      	ldr	r3, [pc, #256]	@ (8015014 <etharp_output_to_arp_index+0x128>)
 8014f12:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014f16:	4940      	ldr	r1, [pc, #256]	@ (8015018 <etharp_output_to_arp_index+0x12c>)
 8014f18:	4840      	ldr	r0, [pc, #256]	@ (801501c <etharp_output_to_arp_index+0x130>)
 8014f1a:	f002 fc71 	bl	8017800 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014f1e:	79fa      	ldrb	r2, [r7, #7]
 8014f20:	493b      	ldr	r1, [pc, #236]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014f22:	4613      	mov	r3, r2
 8014f24:	005b      	lsls	r3, r3, #1
 8014f26:	4413      	add	r3, r2
 8014f28:	00db      	lsls	r3, r3, #3
 8014f2a:	440b      	add	r3, r1
 8014f2c:	3314      	adds	r3, #20
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	2b02      	cmp	r3, #2
 8014f32:	d153      	bne.n	8014fdc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014f34:	79fa      	ldrb	r2, [r7, #7]
 8014f36:	4936      	ldr	r1, [pc, #216]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014f38:	4613      	mov	r3, r2
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	4413      	add	r3, r2
 8014f3e:	00db      	lsls	r3, r3, #3
 8014f40:	440b      	add	r3, r1
 8014f42:	3312      	adds	r3, #18
 8014f44:	881b      	ldrh	r3, [r3, #0]
 8014f46:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014f4a:	d919      	bls.n	8014f80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014f4c:	79fa      	ldrb	r2, [r7, #7]
 8014f4e:	4613      	mov	r3, r2
 8014f50:	005b      	lsls	r3, r3, #1
 8014f52:	4413      	add	r3, r2
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	4a2e      	ldr	r2, [pc, #184]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014f58:	4413      	add	r3, r2
 8014f5a:	3304      	adds	r3, #4
 8014f5c:	4619      	mov	r1, r3
 8014f5e:	68f8      	ldr	r0, [r7, #12]
 8014f60:	f000 fb4c 	bl	80155fc <etharp_request>
 8014f64:	4603      	mov	r3, r0
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d138      	bne.n	8014fdc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014f6a:	79fa      	ldrb	r2, [r7, #7]
 8014f6c:	4928      	ldr	r1, [pc, #160]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014f6e:	4613      	mov	r3, r2
 8014f70:	005b      	lsls	r3, r3, #1
 8014f72:	4413      	add	r3, r2
 8014f74:	00db      	lsls	r3, r3, #3
 8014f76:	440b      	add	r3, r1
 8014f78:	3314      	adds	r3, #20
 8014f7a:	2203      	movs	r2, #3
 8014f7c:	701a      	strb	r2, [r3, #0]
 8014f7e:	e02d      	b.n	8014fdc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014f80:	79fa      	ldrb	r2, [r7, #7]
 8014f82:	4923      	ldr	r1, [pc, #140]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014f84:	4613      	mov	r3, r2
 8014f86:	005b      	lsls	r3, r3, #1
 8014f88:	4413      	add	r3, r2
 8014f8a:	00db      	lsls	r3, r3, #3
 8014f8c:	440b      	add	r3, r1
 8014f8e:	3312      	adds	r3, #18
 8014f90:	881b      	ldrh	r3, [r3, #0]
 8014f92:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014f96:	d321      	bcc.n	8014fdc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014f98:	79fa      	ldrb	r2, [r7, #7]
 8014f9a:	4613      	mov	r3, r2
 8014f9c:	005b      	lsls	r3, r3, #1
 8014f9e:	4413      	add	r3, r2
 8014fa0:	00db      	lsls	r3, r3, #3
 8014fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014fa4:	4413      	add	r3, r2
 8014fa6:	1d19      	adds	r1, r3, #4
 8014fa8:	79fa      	ldrb	r2, [r7, #7]
 8014faa:	4613      	mov	r3, r2
 8014fac:	005b      	lsls	r3, r3, #1
 8014fae:	4413      	add	r3, r2
 8014fb0:	00db      	lsls	r3, r3, #3
 8014fb2:	3308      	adds	r3, #8
 8014fb4:	4a16      	ldr	r2, [pc, #88]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014fb6:	4413      	add	r3, r2
 8014fb8:	3304      	adds	r3, #4
 8014fba:	461a      	mov	r2, r3
 8014fbc:	68f8      	ldr	r0, [r7, #12]
 8014fbe:	f000 fafb 	bl	80155b8 <etharp_request_dst>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d109      	bne.n	8014fdc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014fc8:	79fa      	ldrb	r2, [r7, #7]
 8014fca:	4911      	ldr	r1, [pc, #68]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014fcc:	4613      	mov	r3, r2
 8014fce:	005b      	lsls	r3, r3, #1
 8014fd0:	4413      	add	r3, r2
 8014fd2:	00db      	lsls	r3, r3, #3
 8014fd4:	440b      	add	r3, r1
 8014fd6:	3314      	adds	r3, #20
 8014fd8:	2203      	movs	r2, #3
 8014fda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8014fe2:	79fa      	ldrb	r2, [r7, #7]
 8014fe4:	4613      	mov	r3, r2
 8014fe6:	005b      	lsls	r3, r3, #1
 8014fe8:	4413      	add	r3, r2
 8014fea:	00db      	lsls	r3, r3, #3
 8014fec:	3308      	adds	r3, #8
 8014fee:	4a08      	ldr	r2, [pc, #32]	@ (8015010 <etharp_output_to_arp_index+0x124>)
 8014ff0:	4413      	add	r3, r2
 8014ff2:	3304      	adds	r3, #4
 8014ff4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014ff8:	9200      	str	r2, [sp, #0]
 8014ffa:	460a      	mov	r2, r1
 8014ffc:	68b9      	ldr	r1, [r7, #8]
 8014ffe:	68f8      	ldr	r0, [r7, #12]
 8015000:	f001 fe5e 	bl	8016cc0 <ethernet_output>
 8015004:	4603      	mov	r3, r0
}
 8015006:	4618      	mov	r0, r3
 8015008:	3710      	adds	r7, #16
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	2000903c 	.word	0x2000903c
 8015014:	0801c5e8 	.word	0x0801c5e8
 8015018:	0801c758 	.word	0x0801c758
 801501c:	0801c660 	.word	0x0801c660

08015020 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b08a      	sub	sp, #40	@ 0x28
 8015024:	af02      	add	r7, sp, #8
 8015026:	60f8      	str	r0, [r7, #12]
 8015028:	60b9      	str	r1, [r7, #8]
 801502a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d106      	bne.n	8015044 <etharp_output+0x24>
 8015036:	4b73      	ldr	r3, [pc, #460]	@ (8015204 <etharp_output+0x1e4>)
 8015038:	f240 321e 	movw	r2, #798	@ 0x31e
 801503c:	4972      	ldr	r1, [pc, #456]	@ (8015208 <etharp_output+0x1e8>)
 801503e:	4873      	ldr	r0, [pc, #460]	@ (801520c <etharp_output+0x1ec>)
 8015040:	f002 fbde 	bl	8017800 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d106      	bne.n	8015058 <etharp_output+0x38>
 801504a:	4b6e      	ldr	r3, [pc, #440]	@ (8015204 <etharp_output+0x1e4>)
 801504c:	f240 321f 	movw	r2, #799	@ 0x31f
 8015050:	496f      	ldr	r1, [pc, #444]	@ (8015210 <etharp_output+0x1f0>)
 8015052:	486e      	ldr	r0, [pc, #440]	@ (801520c <etharp_output+0x1ec>)
 8015054:	f002 fbd4 	bl	8017800 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d106      	bne.n	801506c <etharp_output+0x4c>
 801505e:	4b69      	ldr	r3, [pc, #420]	@ (8015204 <etharp_output+0x1e4>)
 8015060:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015064:	496b      	ldr	r1, [pc, #428]	@ (8015214 <etharp_output+0x1f4>)
 8015066:	4869      	ldr	r0, [pc, #420]	@ (801520c <etharp_output+0x1ec>)
 8015068:	f002 fbca 	bl	8017800 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	68f9      	ldr	r1, [r7, #12]
 8015072:	4618      	mov	r0, r3
 8015074:	f000 ff16 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8015078:	4603      	mov	r3, r0
 801507a:	2b00      	cmp	r3, #0
 801507c:	d002      	beq.n	8015084 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801507e:	4b66      	ldr	r3, [pc, #408]	@ (8015218 <etharp_output+0x1f8>)
 8015080:	61fb      	str	r3, [r7, #28]
 8015082:	e0af      	b.n	80151e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801508c:	2be0      	cmp	r3, #224	@ 0xe0
 801508e:	d118      	bne.n	80150c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015090:	2301      	movs	r3, #1
 8015092:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015094:	2300      	movs	r3, #0
 8015096:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015098:	235e      	movs	r3, #94	@ 0x5e
 801509a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	3301      	adds	r3, #1
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	3302      	adds	r3, #2
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	3303      	adds	r3, #3
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80150ba:	f107 0310 	add.w	r3, r7, #16
 80150be:	61fb      	str	r3, [r7, #28]
 80150c0:	e090      	b.n	80151e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	3304      	adds	r3, #4
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	405a      	eors	r2, r3
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	3308      	adds	r3, #8
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4013      	ands	r3, r2
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d012      	beq.n	8015100 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80150e0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80150e4:	4293      	cmp	r3, r2
 80150e6:	d00b      	beq.n	8015100 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	330c      	adds	r3, #12
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d003      	beq.n	80150fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	330c      	adds	r3, #12
 80150f6:	61bb      	str	r3, [r7, #24]
 80150f8:	e002      	b.n	8015100 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80150fa:	f06f 0303 	mvn.w	r3, #3
 80150fe:	e07d      	b.n	80151fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015100:	4b46      	ldr	r3, [pc, #280]	@ (801521c <etharp_output+0x1fc>)
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	4619      	mov	r1, r3
 8015106:	4a46      	ldr	r2, [pc, #280]	@ (8015220 <etharp_output+0x200>)
 8015108:	460b      	mov	r3, r1
 801510a:	005b      	lsls	r3, r3, #1
 801510c:	440b      	add	r3, r1
 801510e:	00db      	lsls	r3, r3, #3
 8015110:	4413      	add	r3, r2
 8015112:	3314      	adds	r3, #20
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	2b01      	cmp	r3, #1
 8015118:	d925      	bls.n	8015166 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801511a:	4b40      	ldr	r3, [pc, #256]	@ (801521c <etharp_output+0x1fc>)
 801511c:	781b      	ldrb	r3, [r3, #0]
 801511e:	4619      	mov	r1, r3
 8015120:	4a3f      	ldr	r2, [pc, #252]	@ (8015220 <etharp_output+0x200>)
 8015122:	460b      	mov	r3, r1
 8015124:	005b      	lsls	r3, r3, #1
 8015126:	440b      	add	r3, r1
 8015128:	00db      	lsls	r3, r3, #3
 801512a:	4413      	add	r3, r2
 801512c:	3308      	adds	r3, #8
 801512e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015130:	68fa      	ldr	r2, [r7, #12]
 8015132:	429a      	cmp	r2, r3
 8015134:	d117      	bne.n	8015166 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015136:	69bb      	ldr	r3, [r7, #24]
 8015138:	681a      	ldr	r2, [r3, #0]
 801513a:	4b38      	ldr	r3, [pc, #224]	@ (801521c <etharp_output+0x1fc>)
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	4618      	mov	r0, r3
 8015140:	4937      	ldr	r1, [pc, #220]	@ (8015220 <etharp_output+0x200>)
 8015142:	4603      	mov	r3, r0
 8015144:	005b      	lsls	r3, r3, #1
 8015146:	4403      	add	r3, r0
 8015148:	00db      	lsls	r3, r3, #3
 801514a:	440b      	add	r3, r1
 801514c:	3304      	adds	r3, #4
 801514e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015150:	429a      	cmp	r2, r3
 8015152:	d108      	bne.n	8015166 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015154:	4b31      	ldr	r3, [pc, #196]	@ (801521c <etharp_output+0x1fc>)
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	461a      	mov	r2, r3
 801515a:	68b9      	ldr	r1, [r7, #8]
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	f7ff fec5 	bl	8014eec <etharp_output_to_arp_index>
 8015162:	4603      	mov	r3, r0
 8015164:	e04a      	b.n	80151fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015166:	2300      	movs	r3, #0
 8015168:	75fb      	strb	r3, [r7, #23]
 801516a:	e031      	b.n	80151d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801516c:	7dfa      	ldrb	r2, [r7, #23]
 801516e:	492c      	ldr	r1, [pc, #176]	@ (8015220 <etharp_output+0x200>)
 8015170:	4613      	mov	r3, r2
 8015172:	005b      	lsls	r3, r3, #1
 8015174:	4413      	add	r3, r2
 8015176:	00db      	lsls	r3, r3, #3
 8015178:	440b      	add	r3, r1
 801517a:	3314      	adds	r3, #20
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	2b01      	cmp	r3, #1
 8015180:	d923      	bls.n	80151ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015182:	7dfa      	ldrb	r2, [r7, #23]
 8015184:	4926      	ldr	r1, [pc, #152]	@ (8015220 <etharp_output+0x200>)
 8015186:	4613      	mov	r3, r2
 8015188:	005b      	lsls	r3, r3, #1
 801518a:	4413      	add	r3, r2
 801518c:	00db      	lsls	r3, r3, #3
 801518e:	440b      	add	r3, r1
 8015190:	3308      	adds	r3, #8
 8015192:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015194:	68fa      	ldr	r2, [r7, #12]
 8015196:	429a      	cmp	r2, r3
 8015198:	d117      	bne.n	80151ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801519a:	69bb      	ldr	r3, [r7, #24]
 801519c:	6819      	ldr	r1, [r3, #0]
 801519e:	7dfa      	ldrb	r2, [r7, #23]
 80151a0:	481f      	ldr	r0, [pc, #124]	@ (8015220 <etharp_output+0x200>)
 80151a2:	4613      	mov	r3, r2
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	4413      	add	r3, r2
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	4403      	add	r3, r0
 80151ac:	3304      	adds	r3, #4
 80151ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80151b0:	4299      	cmp	r1, r3
 80151b2:	d10a      	bne.n	80151ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80151b4:	4a19      	ldr	r2, [pc, #100]	@ (801521c <etharp_output+0x1fc>)
 80151b6:	7dfb      	ldrb	r3, [r7, #23]
 80151b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80151ba:	7dfb      	ldrb	r3, [r7, #23]
 80151bc:	461a      	mov	r2, r3
 80151be:	68b9      	ldr	r1, [r7, #8]
 80151c0:	68f8      	ldr	r0, [r7, #12]
 80151c2:	f7ff fe93 	bl	8014eec <etharp_output_to_arp_index>
 80151c6:	4603      	mov	r3, r0
 80151c8:	e018      	b.n	80151fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80151ca:	7dfb      	ldrb	r3, [r7, #23]
 80151cc:	3301      	adds	r3, #1
 80151ce:	75fb      	strb	r3, [r7, #23]
 80151d0:	7dfb      	ldrb	r3, [r7, #23]
 80151d2:	2b09      	cmp	r3, #9
 80151d4:	d9ca      	bls.n	801516c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80151d6:	68ba      	ldr	r2, [r7, #8]
 80151d8:	69b9      	ldr	r1, [r7, #24]
 80151da:	68f8      	ldr	r0, [r7, #12]
 80151dc:	f000 f822 	bl	8015224 <etharp_query>
 80151e0:	4603      	mov	r3, r0
 80151e2:	e00b      	b.n	80151fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80151ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80151ee:	9300      	str	r3, [sp, #0]
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	68b9      	ldr	r1, [r7, #8]
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f001 fd63 	bl	8016cc0 <ethernet_output>
 80151fa:	4603      	mov	r3, r0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3720      	adds	r7, #32
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	0801c5e8 	.word	0x0801c5e8
 8015208:	0801c738 	.word	0x0801c738
 801520c:	0801c660 	.word	0x0801c660
 8015210:	0801c788 	.word	0x0801c788
 8015214:	0801c728 	.word	0x0801c728
 8015218:	08020484 	.word	0x08020484
 801521c:	2000912c 	.word	0x2000912c
 8015220:	2000903c 	.word	0x2000903c

08015224 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b08c      	sub	sp, #48	@ 0x30
 8015228:	af02      	add	r7, sp, #8
 801522a:	60f8      	str	r0, [r7, #12]
 801522c:	60b9      	str	r1, [r7, #8]
 801522e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	332a      	adds	r3, #42	@ 0x2a
 8015234:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015236:	23ff      	movs	r3, #255	@ 0xff
 8015238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801523c:	2300      	movs	r3, #0
 801523e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	68f9      	ldr	r1, [r7, #12]
 8015246:	4618      	mov	r0, r3
 8015248:	f000 fe2c 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	d10c      	bne.n	801526c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801525a:	2be0      	cmp	r3, #224	@ 0xe0
 801525c:	d006      	beq.n	801526c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d003      	beq.n	801526c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d102      	bne.n	8015272 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801526c:	f06f 030f 	mvn.w	r3, #15
 8015270:	e101      	b.n	8015476 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015272:	68fa      	ldr	r2, [r7, #12]
 8015274:	2101      	movs	r1, #1
 8015276:	68b8      	ldr	r0, [r7, #8]
 8015278:	f7ff fb5c 	bl	8014934 <etharp_find_entry>
 801527c:	4603      	mov	r3, r0
 801527e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015280:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015284:	2b00      	cmp	r3, #0
 8015286:	da02      	bge.n	801528e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015288:	8a7b      	ldrh	r3, [r7, #18]
 801528a:	b25b      	sxtb	r3, r3
 801528c:	e0f3      	b.n	8015476 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801528e:	8a7b      	ldrh	r3, [r7, #18]
 8015290:	2b7e      	cmp	r3, #126	@ 0x7e
 8015292:	d906      	bls.n	80152a2 <etharp_query+0x7e>
 8015294:	4b7a      	ldr	r3, [pc, #488]	@ (8015480 <etharp_query+0x25c>)
 8015296:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801529a:	497a      	ldr	r1, [pc, #488]	@ (8015484 <etharp_query+0x260>)
 801529c:	487a      	ldr	r0, [pc, #488]	@ (8015488 <etharp_query+0x264>)
 801529e:	f002 faaf 	bl	8017800 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80152a2:	8a7b      	ldrh	r3, [r7, #18]
 80152a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80152a6:	7c7a      	ldrb	r2, [r7, #17]
 80152a8:	4978      	ldr	r1, [pc, #480]	@ (801548c <etharp_query+0x268>)
 80152aa:	4613      	mov	r3, r2
 80152ac:	005b      	lsls	r3, r3, #1
 80152ae:	4413      	add	r3, r2
 80152b0:	00db      	lsls	r3, r3, #3
 80152b2:	440b      	add	r3, r1
 80152b4:	3314      	adds	r3, #20
 80152b6:	781b      	ldrb	r3, [r3, #0]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d115      	bne.n	80152e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80152bc:	2301      	movs	r3, #1
 80152be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80152c0:	7c7a      	ldrb	r2, [r7, #17]
 80152c2:	4972      	ldr	r1, [pc, #456]	@ (801548c <etharp_query+0x268>)
 80152c4:	4613      	mov	r3, r2
 80152c6:	005b      	lsls	r3, r3, #1
 80152c8:	4413      	add	r3, r2
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	440b      	add	r3, r1
 80152ce:	3314      	adds	r3, #20
 80152d0:	2201      	movs	r2, #1
 80152d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80152d4:	7c7a      	ldrb	r2, [r7, #17]
 80152d6:	496d      	ldr	r1, [pc, #436]	@ (801548c <etharp_query+0x268>)
 80152d8:	4613      	mov	r3, r2
 80152da:	005b      	lsls	r3, r3, #1
 80152dc:	4413      	add	r3, r2
 80152de:	00db      	lsls	r3, r3, #3
 80152e0:	440b      	add	r3, r1
 80152e2:	3308      	adds	r3, #8
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80152e8:	7c7a      	ldrb	r2, [r7, #17]
 80152ea:	4968      	ldr	r1, [pc, #416]	@ (801548c <etharp_query+0x268>)
 80152ec:	4613      	mov	r3, r2
 80152ee:	005b      	lsls	r3, r3, #1
 80152f0:	4413      	add	r3, r2
 80152f2:	00db      	lsls	r3, r3, #3
 80152f4:	440b      	add	r3, r1
 80152f6:	3314      	adds	r3, #20
 80152f8:	781b      	ldrb	r3, [r3, #0]
 80152fa:	2b01      	cmp	r3, #1
 80152fc:	d011      	beq.n	8015322 <etharp_query+0xfe>
 80152fe:	7c7a      	ldrb	r2, [r7, #17]
 8015300:	4962      	ldr	r1, [pc, #392]	@ (801548c <etharp_query+0x268>)
 8015302:	4613      	mov	r3, r2
 8015304:	005b      	lsls	r3, r3, #1
 8015306:	4413      	add	r3, r2
 8015308:	00db      	lsls	r3, r3, #3
 801530a:	440b      	add	r3, r1
 801530c:	3314      	adds	r3, #20
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	2b01      	cmp	r3, #1
 8015312:	d806      	bhi.n	8015322 <etharp_query+0xfe>
 8015314:	4b5a      	ldr	r3, [pc, #360]	@ (8015480 <etharp_query+0x25c>)
 8015316:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801531a:	495d      	ldr	r1, [pc, #372]	@ (8015490 <etharp_query+0x26c>)
 801531c:	485a      	ldr	r0, [pc, #360]	@ (8015488 <etharp_query+0x264>)
 801531e:	f002 fa6f 	bl	8017800 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015322:	6a3b      	ldr	r3, [r7, #32]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d102      	bne.n	801532e <etharp_query+0x10a>
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d10c      	bne.n	8015348 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801532e:	68b9      	ldr	r1, [r7, #8]
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f000 f963 	bl	80155fc <etharp_request>
 8015336:	4603      	mov	r3, r0
 8015338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d102      	bne.n	8015348 <etharp_query+0x124>
      return result;
 8015342:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015346:	e096      	b.n	8015476 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d106      	bne.n	801535c <etharp_query+0x138>
 801534e:	4b4c      	ldr	r3, [pc, #304]	@ (8015480 <etharp_query+0x25c>)
 8015350:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015354:	494f      	ldr	r1, [pc, #316]	@ (8015494 <etharp_query+0x270>)
 8015356:	484c      	ldr	r0, [pc, #304]	@ (8015488 <etharp_query+0x264>)
 8015358:	f002 fa52 	bl	8017800 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801535c:	7c7a      	ldrb	r2, [r7, #17]
 801535e:	494b      	ldr	r1, [pc, #300]	@ (801548c <etharp_query+0x268>)
 8015360:	4613      	mov	r3, r2
 8015362:	005b      	lsls	r3, r3, #1
 8015364:	4413      	add	r3, r2
 8015366:	00db      	lsls	r3, r3, #3
 8015368:	440b      	add	r3, r1
 801536a:	3314      	adds	r3, #20
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	2b01      	cmp	r3, #1
 8015370:	d917      	bls.n	80153a2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015372:	4a49      	ldr	r2, [pc, #292]	@ (8015498 <etharp_query+0x274>)
 8015374:	7c7b      	ldrb	r3, [r7, #17]
 8015376:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015378:	7c7a      	ldrb	r2, [r7, #17]
 801537a:	4613      	mov	r3, r2
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	4413      	add	r3, r2
 8015380:	00db      	lsls	r3, r3, #3
 8015382:	3308      	adds	r3, #8
 8015384:	4a41      	ldr	r2, [pc, #260]	@ (801548c <etharp_query+0x268>)
 8015386:	4413      	add	r3, r2
 8015388:	3304      	adds	r3, #4
 801538a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801538e:	9200      	str	r2, [sp, #0]
 8015390:	697a      	ldr	r2, [r7, #20]
 8015392:	6879      	ldr	r1, [r7, #4]
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	f001 fc93 	bl	8016cc0 <ethernet_output>
 801539a:	4603      	mov	r3, r0
 801539c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80153a0:	e067      	b.n	8015472 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80153a2:	7c7a      	ldrb	r2, [r7, #17]
 80153a4:	4939      	ldr	r1, [pc, #228]	@ (801548c <etharp_query+0x268>)
 80153a6:	4613      	mov	r3, r2
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	4413      	add	r3, r2
 80153ac:	00db      	lsls	r3, r3, #3
 80153ae:	440b      	add	r3, r1
 80153b0:	3314      	adds	r3, #20
 80153b2:	781b      	ldrb	r3, [r3, #0]
 80153b4:	2b01      	cmp	r3, #1
 80153b6:	d15c      	bne.n	8015472 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80153b8:	2300      	movs	r3, #0
 80153ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80153c0:	e01c      	b.n	80153fc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80153c2:	69fb      	ldr	r3, [r7, #28]
 80153c4:	895a      	ldrh	r2, [r3, #10]
 80153c6:	69fb      	ldr	r3, [r7, #28]
 80153c8:	891b      	ldrh	r3, [r3, #8]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d10a      	bne.n	80153e4 <etharp_query+0x1c0>
 80153ce:	69fb      	ldr	r3, [r7, #28]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d006      	beq.n	80153e4 <etharp_query+0x1c0>
 80153d6:	4b2a      	ldr	r3, [pc, #168]	@ (8015480 <etharp_query+0x25c>)
 80153d8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80153dc:	492f      	ldr	r1, [pc, #188]	@ (801549c <etharp_query+0x278>)
 80153de:	482a      	ldr	r0, [pc, #168]	@ (8015488 <etharp_query+0x264>)
 80153e0:	f002 fa0e 	bl	8017800 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80153e4:	69fb      	ldr	r3, [r7, #28]
 80153e6:	7b1b      	ldrb	r3, [r3, #12]
 80153e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d002      	beq.n	80153f6 <etharp_query+0x1d2>
        copy_needed = 1;
 80153f0:	2301      	movs	r3, #1
 80153f2:	61bb      	str	r3, [r7, #24]
        break;
 80153f4:	e005      	b.n	8015402 <etharp_query+0x1de>
      }
      p = p->next;
 80153f6:	69fb      	ldr	r3, [r7, #28]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d1df      	bne.n	80153c2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015402:	69bb      	ldr	r3, [r7, #24]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d007      	beq.n	8015418 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015408:	687a      	ldr	r2, [r7, #4]
 801540a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801540e:	200e      	movs	r0, #14
 8015410:	f7f6 fc9a 	bl	800bd48 <pbuf_clone>
 8015414:	61f8      	str	r0, [r7, #28]
 8015416:	e004      	b.n	8015422 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801541c:	69f8      	ldr	r0, [r7, #28]
 801541e:	f7f6 fac7 	bl	800b9b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015422:	69fb      	ldr	r3, [r7, #28]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d021      	beq.n	801546c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015428:	7c7a      	ldrb	r2, [r7, #17]
 801542a:	4918      	ldr	r1, [pc, #96]	@ (801548c <etharp_query+0x268>)
 801542c:	4613      	mov	r3, r2
 801542e:	005b      	lsls	r3, r3, #1
 8015430:	4413      	add	r3, r2
 8015432:	00db      	lsls	r3, r3, #3
 8015434:	440b      	add	r3, r1
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d00a      	beq.n	8015452 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801543c:	7c7a      	ldrb	r2, [r7, #17]
 801543e:	4913      	ldr	r1, [pc, #76]	@ (801548c <etharp_query+0x268>)
 8015440:	4613      	mov	r3, r2
 8015442:	005b      	lsls	r3, r3, #1
 8015444:	4413      	add	r3, r2
 8015446:	00db      	lsls	r3, r3, #3
 8015448:	440b      	add	r3, r1
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	4618      	mov	r0, r3
 801544e:	f7f6 fa0f 	bl	800b870 <pbuf_free>
      }
      arp_table[i].q = p;
 8015452:	7c7a      	ldrb	r2, [r7, #17]
 8015454:	490d      	ldr	r1, [pc, #52]	@ (801548c <etharp_query+0x268>)
 8015456:	4613      	mov	r3, r2
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	4413      	add	r3, r2
 801545c:	00db      	lsls	r3, r3, #3
 801545e:	440b      	add	r3, r1
 8015460:	69fa      	ldr	r2, [r7, #28]
 8015462:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015464:	2300      	movs	r3, #0
 8015466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801546a:	e002      	b.n	8015472 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801546c:	23ff      	movs	r3, #255	@ 0xff
 801546e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015472:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015476:	4618      	mov	r0, r3
 8015478:	3728      	adds	r7, #40	@ 0x28
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	0801c5e8 	.word	0x0801c5e8
 8015484:	0801c794 	.word	0x0801c794
 8015488:	0801c660 	.word	0x0801c660
 801548c:	2000903c 	.word	0x2000903c
 8015490:	0801c7a4 	.word	0x0801c7a4
 8015494:	0801c788 	.word	0x0801c788
 8015498:	2000912c 	.word	0x2000912c
 801549c:	0801c7cc 	.word	0x0801c7cc

080154a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b08a      	sub	sp, #40	@ 0x28
 80154a4:	af02      	add	r7, sp, #8
 80154a6:	60f8      	str	r0, [r7, #12]
 80154a8:	60b9      	str	r1, [r7, #8]
 80154aa:	607a      	str	r2, [r7, #4]
 80154ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80154ae:	2300      	movs	r3, #0
 80154b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d106      	bne.n	80154c6 <etharp_raw+0x26>
 80154b8:	4b3a      	ldr	r3, [pc, #232]	@ (80155a4 <etharp_raw+0x104>)
 80154ba:	f240 4257 	movw	r2, #1111	@ 0x457
 80154be:	493a      	ldr	r1, [pc, #232]	@ (80155a8 <etharp_raw+0x108>)
 80154c0:	483a      	ldr	r0, [pc, #232]	@ (80155ac <etharp_raw+0x10c>)
 80154c2:	f002 f99d 	bl	8017800 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80154c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80154ca:	211c      	movs	r1, #28
 80154cc:	200e      	movs	r0, #14
 80154ce:	f7f5 feeb 	bl	800b2a8 <pbuf_alloc>
 80154d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80154d4:	69bb      	ldr	r3, [r7, #24]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d102      	bne.n	80154e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80154da:	f04f 33ff 	mov.w	r3, #4294967295
 80154de:	e05d      	b.n	801559c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80154e0:	69bb      	ldr	r3, [r7, #24]
 80154e2:	895b      	ldrh	r3, [r3, #10]
 80154e4:	2b1b      	cmp	r3, #27
 80154e6:	d806      	bhi.n	80154f6 <etharp_raw+0x56>
 80154e8:	4b2e      	ldr	r3, [pc, #184]	@ (80155a4 <etharp_raw+0x104>)
 80154ea:	f240 4262 	movw	r2, #1122	@ 0x462
 80154ee:	4930      	ldr	r1, [pc, #192]	@ (80155b0 <etharp_raw+0x110>)
 80154f0:	482e      	ldr	r0, [pc, #184]	@ (80155ac <etharp_raw+0x10c>)
 80154f2:	f002 f985 	bl	8017800 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80154fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80154fe:	4618      	mov	r0, r3
 8015500:	f7f4 fde2 	bl	800a0c8 <lwip_htons>
 8015504:	4603      	mov	r3, r0
 8015506:	461a      	mov	r2, r3
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015512:	2b06      	cmp	r3, #6
 8015514:	d006      	beq.n	8015524 <etharp_raw+0x84>
 8015516:	4b23      	ldr	r3, [pc, #140]	@ (80155a4 <etharp_raw+0x104>)
 8015518:	f240 4269 	movw	r2, #1129	@ 0x469
 801551c:	4925      	ldr	r1, [pc, #148]	@ (80155b4 <etharp_raw+0x114>)
 801551e:	4823      	ldr	r0, [pc, #140]	@ (80155ac <etharp_raw+0x10c>)
 8015520:	f002 f96e 	bl	8017800 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	3308      	adds	r3, #8
 8015528:	2206      	movs	r2, #6
 801552a:	6839      	ldr	r1, [r7, #0]
 801552c:	4618      	mov	r0, r3
 801552e:	f002 fa9e 	bl	8017a6e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	3312      	adds	r3, #18
 8015536:	2206      	movs	r2, #6
 8015538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801553a:	4618      	mov	r0, r3
 801553c:	f002 fa97 	bl	8017a6e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	330e      	adds	r3, #14
 8015544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015546:	6812      	ldr	r2, [r2, #0]
 8015548:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	3318      	adds	r3, #24
 801554e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015550:	6812      	ldr	r2, [r2, #0]
 8015552:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	2200      	movs	r2, #0
 8015558:	701a      	strb	r2, [r3, #0]
 801555a:	2200      	movs	r2, #0
 801555c:	f042 0201 	orr.w	r2, r2, #1
 8015560:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	2200      	movs	r2, #0
 8015566:	f042 0208 	orr.w	r2, r2, #8
 801556a:	709a      	strb	r2, [r3, #2]
 801556c:	2200      	movs	r2, #0
 801556e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	2206      	movs	r2, #6
 8015574:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	2204      	movs	r2, #4
 801557a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801557c:	f640 0306 	movw	r3, #2054	@ 0x806
 8015580:	9300      	str	r3, [sp, #0]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	68ba      	ldr	r2, [r7, #8]
 8015586:	69b9      	ldr	r1, [r7, #24]
 8015588:	68f8      	ldr	r0, [r7, #12]
 801558a:	f001 fb99 	bl	8016cc0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801558e:	69b8      	ldr	r0, [r7, #24]
 8015590:	f7f6 f96e 	bl	800b870 <pbuf_free>
  p = NULL;
 8015594:	2300      	movs	r3, #0
 8015596:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015598:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801559c:	4618      	mov	r0, r3
 801559e:	3720      	adds	r7, #32
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	0801c5e8 	.word	0x0801c5e8
 80155a8:	0801c738 	.word	0x0801c738
 80155ac:	0801c660 	.word	0x0801c660
 80155b0:	0801c7e8 	.word	0x0801c7e8
 80155b4:	0801c81c 	.word	0x0801c81c

080155b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b088      	sub	sp, #32
 80155bc:	af04      	add	r7, sp, #16
 80155be:	60f8      	str	r0, [r7, #12]
 80155c0:	60b9      	str	r1, [r7, #8]
 80155c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80155d4:	2201      	movs	r2, #1
 80155d6:	9203      	str	r2, [sp, #12]
 80155d8:	68ba      	ldr	r2, [r7, #8]
 80155da:	9202      	str	r2, [sp, #8]
 80155dc:	4a06      	ldr	r2, [pc, #24]	@ (80155f8 <etharp_request_dst+0x40>)
 80155de:	9201      	str	r2, [sp, #4]
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	4603      	mov	r3, r0
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	68f8      	ldr	r0, [r7, #12]
 80155e8:	f7ff ff5a 	bl	80154a0 <etharp_raw>
 80155ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3710      	adds	r7, #16
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	0802048c 	.word	0x0802048c

080155fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015606:	4a05      	ldr	r2, [pc, #20]	@ (801561c <etharp_request+0x20>)
 8015608:	6839      	ldr	r1, [r7, #0]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f7ff ffd4 	bl	80155b8 <etharp_request_dst>
 8015610:	4603      	mov	r3, r0
}
 8015612:	4618      	mov	r0, r3
 8015614:	3708      	adds	r7, #8
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}
 801561a:	bf00      	nop
 801561c:	08020484 	.word	0x08020484

08015620 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b08e      	sub	sp, #56	@ 0x38
 8015624:	af04      	add	r7, sp, #16
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801562a:	4b79      	ldr	r3, [pc, #484]	@ (8015810 <icmp_input+0x1f0>)
 801562c:	689b      	ldr	r3, [r3, #8]
 801562e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	f003 030f 	and.w	r3, r3, #15
 8015638:	b2db      	uxtb	r3, r3
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	b2db      	uxtb	r3, r3
 801563e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015640:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015642:	2b13      	cmp	r3, #19
 8015644:	f240 80cd 	bls.w	80157e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	895b      	ldrh	r3, [r3, #10]
 801564c:	2b03      	cmp	r3, #3
 801564e:	f240 80ca 	bls.w	80157e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801565c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015660:	2b00      	cmp	r3, #0
 8015662:	f000 80b7 	beq.w	80157d4 <icmp_input+0x1b4>
 8015666:	2b08      	cmp	r3, #8
 8015668:	f040 80b7 	bne.w	80157da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801566c:	4b69      	ldr	r3, [pc, #420]	@ (8015814 <icmp_input+0x1f4>)
 801566e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015670:	4b67      	ldr	r3, [pc, #412]	@ (8015810 <icmp_input+0x1f0>)
 8015672:	695b      	ldr	r3, [r3, #20]
 8015674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015678:	2be0      	cmp	r3, #224	@ 0xe0
 801567a:	f000 80bb 	beq.w	80157f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801567e:	4b64      	ldr	r3, [pc, #400]	@ (8015810 <icmp_input+0x1f0>)
 8015680:	695b      	ldr	r3, [r3, #20]
 8015682:	4a63      	ldr	r2, [pc, #396]	@ (8015810 <icmp_input+0x1f0>)
 8015684:	6812      	ldr	r2, [r2, #0]
 8015686:	4611      	mov	r1, r2
 8015688:	4618      	mov	r0, r3
 801568a:	f000 fc0b 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	f040 80b1 	bne.w	80157f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	891b      	ldrh	r3, [r3, #8]
 801569a:	2b07      	cmp	r3, #7
 801569c:	f240 80a5 	bls.w	80157ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80156a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80156a2:	330e      	adds	r3, #14
 80156a4:	4619      	mov	r1, r3
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f7f6 f84c 	bl	800b744 <pbuf_add_header>
 80156ac:	4603      	mov	r3, r0
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d04b      	beq.n	801574a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	891a      	ldrh	r2, [r3, #8]
 80156b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80156b8:	4413      	add	r3, r2
 80156ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	891b      	ldrh	r3, [r3, #8]
 80156c0:	8b7a      	ldrh	r2, [r7, #26]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	f0c0 809a 	bcc.w	80157fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80156c8:	8b7b      	ldrh	r3, [r7, #26]
 80156ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80156ce:	4619      	mov	r1, r3
 80156d0:	200e      	movs	r0, #14
 80156d2:	f7f5 fde9 	bl	800b2a8 <pbuf_alloc>
 80156d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	f000 8090 	beq.w	8015800 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	895b      	ldrh	r3, [r3, #10]
 80156e4:	461a      	mov	r2, r3
 80156e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80156e8:	3308      	adds	r3, #8
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d203      	bcs.n	80156f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80156ee:	6978      	ldr	r0, [r7, #20]
 80156f0:	f7f6 f8be 	bl	800b870 <pbuf_free>
          goto icmperr;
 80156f4:	e085      	b.n	8015802 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80156fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80156fe:	4618      	mov	r0, r3
 8015700:	f002 f9b5 	bl	8017a6e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015704:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015706:	4619      	mov	r1, r3
 8015708:	6978      	ldr	r0, [r7, #20]
 801570a:	f7f6 f82b 	bl	800b764 <pbuf_remove_header>
 801570e:	4603      	mov	r3, r0
 8015710:	2b00      	cmp	r3, #0
 8015712:	d009      	beq.n	8015728 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015714:	4b40      	ldr	r3, [pc, #256]	@ (8015818 <icmp_input+0x1f8>)
 8015716:	22b6      	movs	r2, #182	@ 0xb6
 8015718:	4940      	ldr	r1, [pc, #256]	@ (801581c <icmp_input+0x1fc>)
 801571a:	4841      	ldr	r0, [pc, #260]	@ (8015820 <icmp_input+0x200>)
 801571c:	f002 f870 	bl	8017800 <iprintf>
          pbuf_free(r);
 8015720:	6978      	ldr	r0, [r7, #20]
 8015722:	f7f6 f8a5 	bl	800b870 <pbuf_free>
          goto icmperr;
 8015726:	e06c      	b.n	8015802 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015728:	6879      	ldr	r1, [r7, #4]
 801572a:	6978      	ldr	r0, [r7, #20]
 801572c:	f7f6 f9c8 	bl	800bac0 <pbuf_copy>
 8015730:	4603      	mov	r3, r0
 8015732:	2b00      	cmp	r3, #0
 8015734:	d003      	beq.n	801573e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015736:	6978      	ldr	r0, [r7, #20]
 8015738:	f7f6 f89a 	bl	800b870 <pbuf_free>
          goto icmperr;
 801573c:	e061      	b.n	8015802 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7f6 f896 	bl	800b870 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	607b      	str	r3, [r7, #4]
 8015748:	e00f      	b.n	801576a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801574a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801574c:	330e      	adds	r3, #14
 801574e:	4619      	mov	r1, r3
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f7f6 f807 	bl	800b764 <pbuf_remove_header>
 8015756:	4603      	mov	r3, r0
 8015758:	2b00      	cmp	r3, #0
 801575a:	d006      	beq.n	801576a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801575c:	4b2e      	ldr	r3, [pc, #184]	@ (8015818 <icmp_input+0x1f8>)
 801575e:	22c7      	movs	r2, #199	@ 0xc7
 8015760:	4930      	ldr	r1, [pc, #192]	@ (8015824 <icmp_input+0x204>)
 8015762:	482f      	ldr	r0, [pc, #188]	@ (8015820 <icmp_input+0x200>)
 8015764:	f002 f84c 	bl	8017800 <iprintf>
          goto icmperr;
 8015768:	e04b      	b.n	8015802 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	685b      	ldr	r3, [r3, #4]
 801576e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015770:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015772:	4619      	mov	r1, r3
 8015774:	6878      	ldr	r0, [r7, #4]
 8015776:	f7f5 ffe5 	bl	800b744 <pbuf_add_header>
 801577a:	4603      	mov	r3, r0
 801577c:	2b00      	cmp	r3, #0
 801577e:	d12b      	bne.n	80157d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	685b      	ldr	r3, [r3, #4]
 8015784:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801578e:	4b20      	ldr	r3, [pc, #128]	@ (8015810 <icmp_input+0x1f0>)
 8015790:	691a      	ldr	r2, [r3, #16]
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	2200      	movs	r2, #0
 801579a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	2200      	movs	r2, #0
 80157a0:	709a      	strb	r2, [r3, #2]
 80157a2:	2200      	movs	r2, #0
 80157a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	22ff      	movs	r2, #255	@ 0xff
 80157aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	2200      	movs	r2, #0
 80157b0:	729a      	strb	r2, [r3, #10]
 80157b2:	2200      	movs	r2, #0
 80157b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	9302      	str	r3, [sp, #8]
 80157ba:	2301      	movs	r3, #1
 80157bc:	9301      	str	r3, [sp, #4]
 80157be:	2300      	movs	r3, #0
 80157c0:	9300      	str	r3, [sp, #0]
 80157c2:	23ff      	movs	r3, #255	@ 0xff
 80157c4:	2200      	movs	r2, #0
 80157c6:	69f9      	ldr	r1, [r7, #28]
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f000 fa93 	bl	8015cf4 <ip4_output_if>
 80157ce:	4603      	mov	r3, r0
 80157d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80157d2:	e001      	b.n	80157d8 <icmp_input+0x1b8>
      break;
 80157d4:	bf00      	nop
 80157d6:	e000      	b.n	80157da <icmp_input+0x1ba>
      break;
 80157d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f7f6 f848 	bl	800b870 <pbuf_free>
  return;
 80157e0:	e013      	b.n	801580a <icmp_input+0x1ea>
    goto lenerr;
 80157e2:	bf00      	nop
 80157e4:	e002      	b.n	80157ec <icmp_input+0x1cc>
    goto lenerr;
 80157e6:	bf00      	nop
 80157e8:	e000      	b.n	80157ec <icmp_input+0x1cc>
        goto lenerr;
 80157ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f7f6 f83f 	bl	800b870 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80157f2:	e00a      	b.n	801580a <icmp_input+0x1ea>
        goto icmperr;
 80157f4:	bf00      	nop
 80157f6:	e004      	b.n	8015802 <icmp_input+0x1e2>
        goto icmperr;
 80157f8:	bf00      	nop
 80157fa:	e002      	b.n	8015802 <icmp_input+0x1e2>
          goto icmperr;
 80157fc:	bf00      	nop
 80157fe:	e000      	b.n	8015802 <icmp_input+0x1e2>
          goto icmperr;
 8015800:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f7f6 f834 	bl	800b870 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015808:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801580a:	3728      	adds	r7, #40	@ 0x28
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}
 8015810:	20005a18 	.word	0x20005a18
 8015814:	20005a2c 	.word	0x20005a2c
 8015818:	0801c860 	.word	0x0801c860
 801581c:	0801c898 	.word	0x0801c898
 8015820:	0801c8d0 	.word	0x0801c8d0
 8015824:	0801c8f8 	.word	0x0801c8f8

08015828 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	460b      	mov	r3, r1
 8015832:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015834:	78fb      	ldrb	r3, [r7, #3]
 8015836:	461a      	mov	r2, r3
 8015838:	2103      	movs	r1, #3
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f000 f814 	bl	8015868 <icmp_send_response>
}
 8015840:	bf00      	nop
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	460b      	mov	r3, r1
 8015852:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015854:	78fb      	ldrb	r3, [r7, #3]
 8015856:	461a      	mov	r2, r3
 8015858:	210b      	movs	r1, #11
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f000 f804 	bl	8015868 <icmp_send_response>
}
 8015860:	bf00      	nop
 8015862:	3708      	adds	r7, #8
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b08c      	sub	sp, #48	@ 0x30
 801586c:	af04      	add	r7, sp, #16
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	460b      	mov	r3, r1
 8015872:	70fb      	strb	r3, [r7, #3]
 8015874:	4613      	mov	r3, r2
 8015876:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015878:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801587c:	2124      	movs	r1, #36	@ 0x24
 801587e:	2022      	movs	r0, #34	@ 0x22
 8015880:	f7f5 fd12 	bl	800b2a8 <pbuf_alloc>
 8015884:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d04c      	beq.n	8015926 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801588c:	69fb      	ldr	r3, [r7, #28]
 801588e:	895b      	ldrh	r3, [r3, #10]
 8015890:	2b23      	cmp	r3, #35	@ 0x23
 8015892:	d806      	bhi.n	80158a2 <icmp_send_response+0x3a>
 8015894:	4b26      	ldr	r3, [pc, #152]	@ (8015930 <icmp_send_response+0xc8>)
 8015896:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801589a:	4926      	ldr	r1, [pc, #152]	@ (8015934 <icmp_send_response+0xcc>)
 801589c:	4826      	ldr	r0, [pc, #152]	@ (8015938 <icmp_send_response+0xd0>)
 801589e:	f001 ffaf 	bl	8017800 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80158a8:	69fb      	ldr	r3, [r7, #28]
 80158aa:	685b      	ldr	r3, [r3, #4]
 80158ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	78fa      	ldrb	r2, [r7, #3]
 80158b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	78ba      	ldrb	r2, [r7, #2]
 80158b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80158ba:	697b      	ldr	r3, [r7, #20]
 80158bc:	2200      	movs	r2, #0
 80158be:	711a      	strb	r2, [r3, #4]
 80158c0:	2200      	movs	r2, #0
 80158c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	2200      	movs	r2, #0
 80158c8:	719a      	strb	r2, [r3, #6]
 80158ca:	2200      	movs	r2, #0
 80158cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80158ce:	69fb      	ldr	r3, [r7, #28]
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	f103 0008 	add.w	r0, r3, #8
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	685b      	ldr	r3, [r3, #4]
 80158da:	221c      	movs	r2, #28
 80158dc:	4619      	mov	r1, r3
 80158de:	f002 f8c6 	bl	8017a6e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	68db      	ldr	r3, [r3, #12]
 80158e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80158e8:	f107 030c 	add.w	r3, r7, #12
 80158ec:	4618      	mov	r0, r3
 80158ee:	f000 f825 	bl	801593c <ip4_route>
 80158f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d011      	beq.n	801591e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	2200      	movs	r2, #0
 80158fe:	709a      	strb	r2, [r3, #2]
 8015900:	2200      	movs	r2, #0
 8015902:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015904:	f107 020c 	add.w	r2, r7, #12
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	9302      	str	r3, [sp, #8]
 801590c:	2301      	movs	r3, #1
 801590e:	9301      	str	r3, [sp, #4]
 8015910:	2300      	movs	r3, #0
 8015912:	9300      	str	r3, [sp, #0]
 8015914:	23ff      	movs	r3, #255	@ 0xff
 8015916:	2100      	movs	r1, #0
 8015918:	69f8      	ldr	r0, [r7, #28]
 801591a:	f000 f9eb 	bl	8015cf4 <ip4_output_if>
  }
  pbuf_free(q);
 801591e:	69f8      	ldr	r0, [r7, #28]
 8015920:	f7f5 ffa6 	bl	800b870 <pbuf_free>
 8015924:	e000      	b.n	8015928 <icmp_send_response+0xc0>
    return;
 8015926:	bf00      	nop
}
 8015928:	3720      	adds	r7, #32
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	0801c860 	.word	0x0801c860
 8015934:	0801c92c 	.word	0x0801c92c
 8015938:	0801c8d0 	.word	0x0801c8d0

0801593c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801593c:	b480      	push	{r7}
 801593e:	b085      	sub	sp, #20
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015944:	4b33      	ldr	r3, [pc, #204]	@ (8015a14 <ip4_route+0xd8>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	60fb      	str	r3, [r7, #12]
 801594a:	e036      	b.n	80159ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015952:	f003 0301 	and.w	r3, r3, #1
 8015956:	b2db      	uxtb	r3, r3
 8015958:	2b00      	cmp	r3, #0
 801595a:	d02b      	beq.n	80159b4 <ip4_route+0x78>
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015962:	089b      	lsrs	r3, r3, #2
 8015964:	f003 0301 	and.w	r3, r3, #1
 8015968:	b2db      	uxtb	r3, r3
 801596a:	2b00      	cmp	r3, #0
 801596c:	d022      	beq.n	80159b4 <ip4_route+0x78>
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	3304      	adds	r3, #4
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d01d      	beq.n	80159b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681a      	ldr	r2, [r3, #0]
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	3304      	adds	r3, #4
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	405a      	eors	r2, r3
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	3308      	adds	r3, #8
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	4013      	ands	r3, r2
 801598c:	2b00      	cmp	r3, #0
 801598e:	d101      	bne.n	8015994 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	e038      	b.n	8015a06 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801599a:	f003 0302 	and.w	r3, r3, #2
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d108      	bne.n	80159b4 <ip4_route+0x78>
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	330c      	adds	r3, #12
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d101      	bne.n	80159b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	e028      	b.n	8015a06 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	60fb      	str	r3, [r7, #12]
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d1c5      	bne.n	801594c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80159c0:	4b15      	ldr	r3, [pc, #84]	@ (8015a18 <ip4_route+0xdc>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d01a      	beq.n	80159fe <ip4_route+0xc2>
 80159c8:	4b13      	ldr	r3, [pc, #76]	@ (8015a18 <ip4_route+0xdc>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80159d0:	f003 0301 	and.w	r3, r3, #1
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d012      	beq.n	80159fe <ip4_route+0xc2>
 80159d8:	4b0f      	ldr	r3, [pc, #60]	@ (8015a18 <ip4_route+0xdc>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80159e0:	f003 0304 	and.w	r3, r3, #4
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d00a      	beq.n	80159fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80159e8:	4b0b      	ldr	r3, [pc, #44]	@ (8015a18 <ip4_route+0xdc>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	3304      	adds	r3, #4
 80159ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d004      	beq.n	80159fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80159fc:	d101      	bne.n	8015a02 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80159fe:	2300      	movs	r3, #0
 8015a00:	e001      	b.n	8015a06 <ip4_route+0xca>
  }

  return netif_default;
 8015a02:	4b05      	ldr	r3, [pc, #20]	@ (8015a18 <ip4_route+0xdc>)
 8015a04:	681b      	ldr	r3, [r3, #0]
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	3714      	adds	r7, #20
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	20008f9c 	.word	0x20008f9c
 8015a18:	20008fa0 	.word	0x20008fa0

08015a1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015a2a:	f003 0301 	and.w	r3, r3, #1
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d016      	beq.n	8015a62 <ip4_input_accept+0x46>
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	3304      	adds	r3, #4
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d011      	beq.n	8015a62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8015a6c <ip4_input_accept+0x50>)
 8015a40:	695a      	ldr	r2, [r3, #20]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	3304      	adds	r3, #4
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d008      	beq.n	8015a5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015a4c:	4b07      	ldr	r3, [pc, #28]	@ (8015a6c <ip4_input_accept+0x50>)
 8015a4e:	695b      	ldr	r3, [r3, #20]
 8015a50:	6879      	ldr	r1, [r7, #4]
 8015a52:	4618      	mov	r0, r3
 8015a54:	f000 fa26 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8015a58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d001      	beq.n	8015a62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015a5e:	2301      	movs	r3, #1
 8015a60:	e000      	b.n	8015a64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015a62:	2300      	movs	r3, #0
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3708      	adds	r7, #8
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}
 8015a6c:	20005a18 	.word	0x20005a18

08015a70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b088      	sub	sp, #32
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
 8015a78:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015a84:	69fb      	ldr	r3, [r7, #28]
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	091b      	lsrs	r3, r3, #4
 8015a8a:	b2db      	uxtb	r3, r3
 8015a8c:	2b04      	cmp	r3, #4
 8015a8e:	d004      	beq.n	8015a9a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f7f5 feed 	bl	800b870 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015a96:	2300      	movs	r3, #0
 8015a98:	e123      	b.n	8015ce2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015a9a:	69fb      	ldr	r3, [r7, #28]
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	f003 030f 	and.w	r3, r3, #15
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	b2db      	uxtb	r3, r3
 8015aa8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015aaa:	69fb      	ldr	r3, [r7, #28]
 8015aac:	885b      	ldrh	r3, [r3, #2]
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7f4 fb09 	bl	800a0c8 <lwip_htons>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	891b      	ldrh	r3, [r3, #8]
 8015abe:	8a3a      	ldrh	r2, [r7, #16]
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d204      	bcs.n	8015ace <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015ac4:	8a3b      	ldrh	r3, [r7, #16]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	6878      	ldr	r0, [r7, #4]
 8015aca:	f7f5 fd4b 	bl	800b564 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	895b      	ldrh	r3, [r3, #10]
 8015ad2:	8a7a      	ldrh	r2, [r7, #18]
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d807      	bhi.n	8015ae8 <ip4_input+0x78>
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	891b      	ldrh	r3, [r3, #8]
 8015adc:	8a3a      	ldrh	r2, [r7, #16]
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d802      	bhi.n	8015ae8 <ip4_input+0x78>
 8015ae2:	8a7b      	ldrh	r3, [r7, #18]
 8015ae4:	2b13      	cmp	r3, #19
 8015ae6:	d804      	bhi.n	8015af2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f7f5 fec1 	bl	800b870 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015aee:	2300      	movs	r3, #0
 8015af0:	e0f7      	b.n	8015ce2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015af2:	69fb      	ldr	r3, [r7, #28]
 8015af4:	691b      	ldr	r3, [r3, #16]
 8015af6:	4a7d      	ldr	r2, [pc, #500]	@ (8015cec <ip4_input+0x27c>)
 8015af8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	68db      	ldr	r3, [r3, #12]
 8015afe:	4a7b      	ldr	r2, [pc, #492]	@ (8015cec <ip4_input+0x27c>)
 8015b00:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b02:	4b7a      	ldr	r3, [pc, #488]	@ (8015cec <ip4_input+0x27c>)
 8015b04:	695b      	ldr	r3, [r3, #20]
 8015b06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015b0a:	2be0      	cmp	r3, #224	@ 0xe0
 8015b0c:	d112      	bne.n	8015b34 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015b14:	f003 0301 	and.w	r3, r3, #1
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d007      	beq.n	8015b2e <ip4_input+0xbe>
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	3304      	adds	r3, #4
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d002      	beq.n	8015b2e <ip4_input+0xbe>
      netif = inp;
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	61bb      	str	r3, [r7, #24]
 8015b2c:	e02a      	b.n	8015b84 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	61bb      	str	r3, [r7, #24]
 8015b32:	e027      	b.n	8015b84 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015b34:	6838      	ldr	r0, [r7, #0]
 8015b36:	f7ff ff71 	bl	8015a1c <ip4_input_accept>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d002      	beq.n	8015b46 <ip4_input+0xd6>
      netif = inp;
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	61bb      	str	r3, [r7, #24]
 8015b44:	e01e      	b.n	8015b84 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015b46:	2300      	movs	r3, #0
 8015b48:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015b4a:	4b68      	ldr	r3, [pc, #416]	@ (8015cec <ip4_input+0x27c>)
 8015b4c:	695b      	ldr	r3, [r3, #20]
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	2b7f      	cmp	r3, #127	@ 0x7f
 8015b52:	d017      	beq.n	8015b84 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015b54:	4b66      	ldr	r3, [pc, #408]	@ (8015cf0 <ip4_input+0x280>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	61bb      	str	r3, [r7, #24]
 8015b5a:	e00e      	b.n	8015b7a <ip4_input+0x10a>
          if (netif == inp) {
 8015b5c:	69ba      	ldr	r2, [r7, #24]
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d006      	beq.n	8015b72 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015b64:	69b8      	ldr	r0, [r7, #24]
 8015b66:	f7ff ff59 	bl	8015a1c <ip4_input_accept>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d108      	bne.n	8015b82 <ip4_input+0x112>
 8015b70:	e000      	b.n	8015b74 <ip4_input+0x104>
            continue;
 8015b72:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015b74:	69bb      	ldr	r3, [r7, #24]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	61bb      	str	r3, [r7, #24]
 8015b7a:	69bb      	ldr	r3, [r7, #24]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d1ed      	bne.n	8015b5c <ip4_input+0xec>
 8015b80:	e000      	b.n	8015b84 <ip4_input+0x114>
            break;
 8015b82:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d111      	bne.n	8015bae <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	7a5b      	ldrb	r3, [r3, #9]
 8015b8e:	2b11      	cmp	r3, #17
 8015b90:	d10d      	bne.n	8015bae <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015b92:	8a7b      	ldrh	r3, [r7, #18]
 8015b94:	69fa      	ldr	r2, [r7, #28]
 8015b96:	4413      	add	r3, r2
 8015b98:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	885b      	ldrh	r3, [r3, #2]
 8015b9e:	b29b      	uxth	r3, r3
 8015ba0:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8015ba4:	d103      	bne.n	8015bae <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015baa:	2300      	movs	r3, #0
 8015bac:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d017      	beq.n	8015be4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8015cec <ip4_input+0x27c>)
 8015bb6:	691b      	ldr	r3, [r3, #16]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d013      	beq.n	8015be4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8015cec <ip4_input+0x27c>)
 8015bbe:	691b      	ldr	r3, [r3, #16]
 8015bc0:	6839      	ldr	r1, [r7, #0]
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f000 f96e 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d105      	bne.n	8015bda <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015bce:	4b47      	ldr	r3, [pc, #284]	@ (8015cec <ip4_input+0x27c>)
 8015bd0:	691b      	ldr	r3, [r3, #16]
 8015bd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015bd6:	2be0      	cmp	r3, #224	@ 0xe0
 8015bd8:	d104      	bne.n	8015be4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f7f5 fe48 	bl	800b870 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015be0:	2300      	movs	r3, #0
 8015be2:	e07e      	b.n	8015ce2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015be4:	69bb      	ldr	r3, [r7, #24]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d104      	bne.n	8015bf4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7f5 fe40 	bl	800b870 <pbuf_free>
    return ERR_OK;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e076      	b.n	8015ce2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015bf4:	69fb      	ldr	r3, [r7, #28]
 8015bf6:	88db      	ldrh	r3, [r3, #6]
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015c00:	4013      	ands	r3, r2
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d00b      	beq.n	8015c1e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 fc92 	bl	8016530 <ip4_reass>
 8015c0c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d101      	bne.n	8015c18 <ip4_input+0x1a8>
      return ERR_OK;
 8015c14:	2300      	movs	r3, #0
 8015c16:	e064      	b.n	8015ce2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015c1e:	4a33      	ldr	r2, [pc, #204]	@ (8015cec <ip4_input+0x27c>)
 8015c20:	69bb      	ldr	r3, [r7, #24]
 8015c22:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015c24:	4a31      	ldr	r2, [pc, #196]	@ (8015cec <ip4_input+0x27c>)
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015c2a:	4a30      	ldr	r2, [pc, #192]	@ (8015cec <ip4_input+0x27c>)
 8015c2c:	69fb      	ldr	r3, [r7, #28]
 8015c2e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	f003 030f 	and.w	r3, r3, #15
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	461a      	mov	r2, r3
 8015c40:	4b2a      	ldr	r3, [pc, #168]	@ (8015cec <ip4_input+0x27c>)
 8015c42:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015c44:	8a7b      	ldrh	r3, [r7, #18]
 8015c46:	4619      	mov	r1, r3
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f7f5 fd8b 	bl	800b764 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015c4e:	69fb      	ldr	r3, [r7, #28]
 8015c50:	7a5b      	ldrb	r3, [r3, #9]
 8015c52:	2b11      	cmp	r3, #17
 8015c54:	d006      	beq.n	8015c64 <ip4_input+0x1f4>
 8015c56:	2b11      	cmp	r3, #17
 8015c58:	dc13      	bgt.n	8015c82 <ip4_input+0x212>
 8015c5a:	2b01      	cmp	r3, #1
 8015c5c:	d00c      	beq.n	8015c78 <ip4_input+0x208>
 8015c5e:	2b06      	cmp	r3, #6
 8015c60:	d005      	beq.n	8015c6e <ip4_input+0x1fe>
 8015c62:	e00e      	b.n	8015c82 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015c64:	6839      	ldr	r1, [r7, #0]
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f7fc faee 	bl	8012248 <udp_input>
        break;
 8015c6c:	e026      	b.n	8015cbc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015c6e:	6839      	ldr	r1, [r7, #0]
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7f7 fedd 	bl	800da30 <tcp_input>
        break;
 8015c76:	e021      	b.n	8015cbc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015c78:	6839      	ldr	r1, [r7, #0]
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f7ff fcd0 	bl	8015620 <icmp_input>
        break;
 8015c80:	e01c      	b.n	8015cbc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015c82:	4b1a      	ldr	r3, [pc, #104]	@ (8015cec <ip4_input+0x27c>)
 8015c84:	695b      	ldr	r3, [r3, #20]
 8015c86:	69b9      	ldr	r1, [r7, #24]
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f000 f90b 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d10f      	bne.n	8015cb4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c94:	4b15      	ldr	r3, [pc, #84]	@ (8015cec <ip4_input+0x27c>)
 8015c96:	695b      	ldr	r3, [r3, #20]
 8015c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015c9c:	2be0      	cmp	r3, #224	@ 0xe0
 8015c9e:	d009      	beq.n	8015cb4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f7f5 fdcf 	bl	800b84a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015cac:	2102      	movs	r1, #2
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f7ff fdba 	bl	8015828 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f7f5 fddb 	bl	800b870 <pbuf_free>
        break;
 8015cba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8015cec <ip4_input+0x27c>)
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8015cec <ip4_input+0x27c>)
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015cc8:	4b08      	ldr	r3, [pc, #32]	@ (8015cec <ip4_input+0x27c>)
 8015cca:	2200      	movs	r2, #0
 8015ccc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015cce:	4b07      	ldr	r3, [pc, #28]	@ (8015cec <ip4_input+0x27c>)
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015cd4:	4b05      	ldr	r3, [pc, #20]	@ (8015cec <ip4_input+0x27c>)
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015cda:	4b04      	ldr	r3, [pc, #16]	@ (8015cec <ip4_input+0x27c>)
 8015cdc:	2200      	movs	r2, #0
 8015cde:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015ce0:	2300      	movs	r3, #0
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3720      	adds	r7, #32
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	20005a18 	.word	0x20005a18
 8015cf0:	20008f9c 	.word	0x20008f9c

08015cf4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b08a      	sub	sp, #40	@ 0x28
 8015cf8:	af04      	add	r7, sp, #16
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	607a      	str	r2, [r7, #4]
 8015d00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015d02:	68bb      	ldr	r3, [r7, #8]
 8015d04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d009      	beq.n	8015d20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d003      	beq.n	8015d1a <ip4_output_if+0x26>
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d102      	bne.n	8015d20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d1c:	3304      	adds	r3, #4
 8015d1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015d20:	78fa      	ldrb	r2, [r7, #3]
 8015d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d24:	9302      	str	r3, [sp, #8]
 8015d26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015d2a:	9301      	str	r3, [sp, #4]
 8015d2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015d30:	9300      	str	r3, [sp, #0]
 8015d32:	4613      	mov	r3, r2
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	6979      	ldr	r1, [r7, #20]
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f000 f805 	bl	8015d48 <ip4_output_if_src>
 8015d3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015d40:	4618      	mov	r0, r3
 8015d42:	3718      	adds	r7, #24
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}

08015d48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b088      	sub	sp, #32
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	607a      	str	r2, [r7, #4]
 8015d54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	7b9b      	ldrb	r3, [r3, #14]
 8015d5a:	2b01      	cmp	r3, #1
 8015d5c:	d006      	beq.n	8015d6c <ip4_output_if_src+0x24>
 8015d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8015e8c <ip4_output_if_src+0x144>)
 8015d60:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015d64:	494a      	ldr	r1, [pc, #296]	@ (8015e90 <ip4_output_if_src+0x148>)
 8015d66:	484b      	ldr	r0, [pc, #300]	@ (8015e94 <ip4_output_if_src+0x14c>)
 8015d68:	f001 fd4a 	bl	8017800 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d060      	beq.n	8015e34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015d72:	2314      	movs	r3, #20
 8015d74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015d76:	2114      	movs	r1, #20
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f7f5 fce3 	bl	800b744 <pbuf_add_header>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d002      	beq.n	8015d8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015d84:	f06f 0301 	mvn.w	r3, #1
 8015d88:	e07c      	b.n	8015e84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	895b      	ldrh	r3, [r3, #10]
 8015d94:	2b13      	cmp	r3, #19
 8015d96:	d806      	bhi.n	8015da6 <ip4_output_if_src+0x5e>
 8015d98:	4b3c      	ldr	r3, [pc, #240]	@ (8015e8c <ip4_output_if_src+0x144>)
 8015d9a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015d9e:	493e      	ldr	r1, [pc, #248]	@ (8015e98 <ip4_output_if_src+0x150>)
 8015da0:	483c      	ldr	r0, [pc, #240]	@ (8015e94 <ip4_output_if_src+0x14c>)
 8015da2:	f001 fd2d 	bl	8017800 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	78fa      	ldrb	r2, [r7, #3]
 8015daa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015dac:	69fb      	ldr	r3, [r7, #28]
 8015dae:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015db2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681a      	ldr	r2, [r3, #0]
 8015db8:	69fb      	ldr	r3, [r7, #28]
 8015dba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015dbc:	8b7b      	ldrh	r3, [r7, #26]
 8015dbe:	089b      	lsrs	r3, r3, #2
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015dc8:	b2da      	uxtb	r2, r3
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015dd4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	891b      	ldrh	r3, [r3, #8]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7f4 f974 	bl	800a0c8 <lwip_htons>
 8015de0:	4603      	mov	r3, r0
 8015de2:	461a      	mov	r2, r3
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	2200      	movs	r2, #0
 8015dec:	719a      	strb	r2, [r3, #6]
 8015dee:	2200      	movs	r2, #0
 8015df0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015df2:	4b2a      	ldr	r3, [pc, #168]	@ (8015e9c <ip4_output_if_src+0x154>)
 8015df4:	881b      	ldrh	r3, [r3, #0]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7f4 f966 	bl	800a0c8 <lwip_htons>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	461a      	mov	r2, r3
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015e04:	4b25      	ldr	r3, [pc, #148]	@ (8015e9c <ip4_output_if_src+0x154>)
 8015e06:	881b      	ldrh	r3, [r3, #0]
 8015e08:	3301      	adds	r3, #1
 8015e0a:	b29a      	uxth	r2, r3
 8015e0c:	4b23      	ldr	r3, [pc, #140]	@ (8015e9c <ip4_output_if_src+0x154>)
 8015e0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d104      	bne.n	8015e20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015e16:	4b22      	ldr	r3, [pc, #136]	@ (8015ea0 <ip4_output_if_src+0x158>)
 8015e18:	681a      	ldr	r2, [r3, #0]
 8015e1a:	69fb      	ldr	r3, [r7, #28]
 8015e1c:	60da      	str	r2, [r3, #12]
 8015e1e:	e003      	b.n	8015e28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	681a      	ldr	r2, [r3, #0]
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015e28:	69fb      	ldr	r3, [r7, #28]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	729a      	strb	r2, [r3, #10]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	72da      	strb	r2, [r3, #11]
 8015e32:	e00f      	b.n	8015e54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	895b      	ldrh	r3, [r3, #10]
 8015e38:	2b13      	cmp	r3, #19
 8015e3a:	d802      	bhi.n	8015e42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015e3c:	f06f 0301 	mvn.w	r3, #1
 8015e40:	e020      	b.n	8015e84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	685b      	ldr	r3, [r3, #4]
 8015e46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	691b      	ldr	r3, [r3, #16]
 8015e4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015e4e:	f107 0314 	add.w	r3, r7, #20
 8015e52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d00c      	beq.n	8015e76 <ip4_output_if_src+0x12e>
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	891a      	ldrh	r2, [r3, #8]
 8015e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d906      	bls.n	8015e76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015e68:	687a      	ldr	r2, [r7, #4]
 8015e6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015e6c:	68f8      	ldr	r0, [r7, #12]
 8015e6e:	f000 fd53 	bl	8016918 <ip4_frag>
 8015e72:	4603      	mov	r3, r0
 8015e74:	e006      	b.n	8015e84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e78:	695b      	ldr	r3, [r3, #20]
 8015e7a:	687a      	ldr	r2, [r7, #4]
 8015e7c:	68f9      	ldr	r1, [r7, #12]
 8015e7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e80:	4798      	blx	r3
 8015e82:	4603      	mov	r3, r0
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3720      	adds	r7, #32
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	0801c958 	.word	0x0801c958
 8015e90:	0801c98c 	.word	0x0801c98c
 8015e94:	0801c998 	.word	0x0801c998
 8015e98:	0801c9c0 	.word	0x0801c9c0
 8015e9c:	2000912e 	.word	0x2000912e
 8015ea0:	0802047c 	.word	0x0802047c

08015ea4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b085      	sub	sp, #20
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eb8:	d002      	beq.n	8015ec0 <ip4_addr_isbroadcast_u32+0x1c>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d101      	bne.n	8015ec4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	e02a      	b.n	8015f1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015eca:	f003 0302 	and.w	r3, r3, #2
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d101      	bne.n	8015ed6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	e021      	b.n	8015f1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	3304      	adds	r3, #4
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	429a      	cmp	r2, r3
 8015ee0:	d101      	bne.n	8015ee6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	e019      	b.n	8015f1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015ee6:	68fa      	ldr	r2, [r7, #12]
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	3304      	adds	r3, #4
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	405a      	eors	r2, r3
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	3308      	adds	r3, #8
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4013      	ands	r3, r2
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10d      	bne.n	8015f18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	3308      	adds	r3, #8
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	43da      	mvns	r2, r3
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	3308      	adds	r3, #8
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d101      	bne.n	8015f18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015f14:	2301      	movs	r3, #1
 8015f16:	e000      	b.n	8015f1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015f18:	2300      	movs	r3, #0
  }
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3714      	adds	r7, #20
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f24:	4770      	bx	lr
	...

08015f28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015f32:	4b12      	ldr	r3, [pc, #72]	@ (8015f7c <ip_reass_tmr+0x54>)
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015f38:	e018      	b.n	8015f6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	7fdb      	ldrb	r3, [r3, #31]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d00b      	beq.n	8015f5a <ip_reass_tmr+0x32>
      r->timer--;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	7fdb      	ldrb	r3, [r3, #31]
 8015f46:	3b01      	subs	r3, #1
 8015f48:	b2da      	uxtb	r2, r3
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	60fb      	str	r3, [r7, #12]
 8015f58:	e008      	b.n	8015f6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015f64:	68b9      	ldr	r1, [r7, #8]
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f000 f80a 	bl	8015f80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d1e3      	bne.n	8015f3a <ip_reass_tmr+0x12>
    }
  }
}
 8015f72:	bf00      	nop
 8015f74:	bf00      	nop
 8015f76:	3710      	adds	r7, #16
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	20009130 	.word	0x20009130

08015f80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b088      	sub	sp, #32
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015f8e:	683a      	ldr	r2, [r7, #0]
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d105      	bne.n	8015fa2 <ip_reass_free_complete_datagram+0x22>
 8015f96:	4b45      	ldr	r3, [pc, #276]	@ (80160ac <ip_reass_free_complete_datagram+0x12c>)
 8015f98:	22ab      	movs	r2, #171	@ 0xab
 8015f9a:	4945      	ldr	r1, [pc, #276]	@ (80160b0 <ip_reass_free_complete_datagram+0x130>)
 8015f9c:	4845      	ldr	r0, [pc, #276]	@ (80160b4 <ip_reass_free_complete_datagram+0x134>)
 8015f9e:	f001 fc2f 	bl	8017800 <iprintf>
  if (prev != NULL) {
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d00a      	beq.n	8015fbe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	687a      	ldr	r2, [r7, #4]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d005      	beq.n	8015fbe <ip_reass_free_complete_datagram+0x3e>
 8015fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80160ac <ip_reass_free_complete_datagram+0x12c>)
 8015fb4:	22ad      	movs	r2, #173	@ 0xad
 8015fb6:	4940      	ldr	r1, [pc, #256]	@ (80160b8 <ip_reass_free_complete_datagram+0x138>)
 8015fb8:	483e      	ldr	r0, [pc, #248]	@ (80160b4 <ip_reass_free_complete_datagram+0x134>)
 8015fba:	f001 fc21 	bl	8017800 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	889b      	ldrh	r3, [r3, #4]
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d12a      	bne.n	8016026 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015fde:	69bb      	ldr	r3, [r7, #24]
 8015fe0:	6858      	ldr	r0, [r3, #4]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	3308      	adds	r3, #8
 8015fe6:	2214      	movs	r2, #20
 8015fe8:	4619      	mov	r1, r3
 8015fea:	f001 fd40 	bl	8017a6e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015fee:	2101      	movs	r1, #1
 8015ff0:	69b8      	ldr	r0, [r7, #24]
 8015ff2:	f7ff fc29 	bl	8015848 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015ff6:	69b8      	ldr	r0, [r7, #24]
 8015ff8:	f7f5 fcc2 	bl	800b980 <pbuf_clen>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016000:	8bfa      	ldrh	r2, [r7, #30]
 8016002:	8a7b      	ldrh	r3, [r7, #18]
 8016004:	4413      	add	r3, r2
 8016006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801600a:	db05      	blt.n	8016018 <ip_reass_free_complete_datagram+0x98>
 801600c:	4b27      	ldr	r3, [pc, #156]	@ (80160ac <ip_reass_free_complete_datagram+0x12c>)
 801600e:	22bc      	movs	r2, #188	@ 0xbc
 8016010:	492a      	ldr	r1, [pc, #168]	@ (80160bc <ip_reass_free_complete_datagram+0x13c>)
 8016012:	4828      	ldr	r0, [pc, #160]	@ (80160b4 <ip_reass_free_complete_datagram+0x134>)
 8016014:	f001 fbf4 	bl	8017800 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016018:	8bfa      	ldrh	r2, [r7, #30]
 801601a:	8a7b      	ldrh	r3, [r7, #18]
 801601c:	4413      	add	r3, r2
 801601e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016020:	69b8      	ldr	r0, [r7, #24]
 8016022:	f7f5 fc25 	bl	800b870 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801602c:	e01f      	b.n	801606e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801602e:	69bb      	ldr	r3, [r7, #24]
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016034:	69bb      	ldr	r3, [r7, #24]
 8016036:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801603e:	68f8      	ldr	r0, [r7, #12]
 8016040:	f7f5 fc9e 	bl	800b980 <pbuf_clen>
 8016044:	4603      	mov	r3, r0
 8016046:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016048:	8bfa      	ldrh	r2, [r7, #30]
 801604a:	8a7b      	ldrh	r3, [r7, #18]
 801604c:	4413      	add	r3, r2
 801604e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016052:	db05      	blt.n	8016060 <ip_reass_free_complete_datagram+0xe0>
 8016054:	4b15      	ldr	r3, [pc, #84]	@ (80160ac <ip_reass_free_complete_datagram+0x12c>)
 8016056:	22cc      	movs	r2, #204	@ 0xcc
 8016058:	4918      	ldr	r1, [pc, #96]	@ (80160bc <ip_reass_free_complete_datagram+0x13c>)
 801605a:	4816      	ldr	r0, [pc, #88]	@ (80160b4 <ip_reass_free_complete_datagram+0x134>)
 801605c:	f001 fbd0 	bl	8017800 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016060:	8bfa      	ldrh	r2, [r7, #30]
 8016062:	8a7b      	ldrh	r3, [r7, #18]
 8016064:	4413      	add	r3, r2
 8016066:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f7f5 fc01 	bl	800b870 <pbuf_free>
  while (p != NULL) {
 801606e:	69bb      	ldr	r3, [r7, #24]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d1dc      	bne.n	801602e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016074:	6839      	ldr	r1, [r7, #0]
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f000 f8c2 	bl	8016200 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801607c:	4b10      	ldr	r3, [pc, #64]	@ (80160c0 <ip_reass_free_complete_datagram+0x140>)
 801607e:	881b      	ldrh	r3, [r3, #0]
 8016080:	8bfa      	ldrh	r2, [r7, #30]
 8016082:	429a      	cmp	r2, r3
 8016084:	d905      	bls.n	8016092 <ip_reass_free_complete_datagram+0x112>
 8016086:	4b09      	ldr	r3, [pc, #36]	@ (80160ac <ip_reass_free_complete_datagram+0x12c>)
 8016088:	22d2      	movs	r2, #210	@ 0xd2
 801608a:	490e      	ldr	r1, [pc, #56]	@ (80160c4 <ip_reass_free_complete_datagram+0x144>)
 801608c:	4809      	ldr	r0, [pc, #36]	@ (80160b4 <ip_reass_free_complete_datagram+0x134>)
 801608e:	f001 fbb7 	bl	8017800 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016092:	4b0b      	ldr	r3, [pc, #44]	@ (80160c0 <ip_reass_free_complete_datagram+0x140>)
 8016094:	881a      	ldrh	r2, [r3, #0]
 8016096:	8bfb      	ldrh	r3, [r7, #30]
 8016098:	1ad3      	subs	r3, r2, r3
 801609a:	b29a      	uxth	r2, r3
 801609c:	4b08      	ldr	r3, [pc, #32]	@ (80160c0 <ip_reass_free_complete_datagram+0x140>)
 801609e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80160a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80160a2:	4618      	mov	r0, r3
 80160a4:	3720      	adds	r7, #32
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}
 80160aa:	bf00      	nop
 80160ac:	0801c9f0 	.word	0x0801c9f0
 80160b0:	0801ca2c 	.word	0x0801ca2c
 80160b4:	0801ca38 	.word	0x0801ca38
 80160b8:	0801ca60 	.word	0x0801ca60
 80160bc:	0801ca74 	.word	0x0801ca74
 80160c0:	20009134 	.word	0x20009134
 80160c4:	0801ca94 	.word	0x0801ca94

080160c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b08a      	sub	sp, #40	@ 0x28
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80160d2:	2300      	movs	r3, #0
 80160d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80160d6:	2300      	movs	r3, #0
 80160d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80160da:	2300      	movs	r3, #0
 80160dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80160de:	2300      	movs	r3, #0
 80160e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80160e2:	2300      	movs	r3, #0
 80160e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80160e6:	4b28      	ldr	r3, [pc, #160]	@ (8016188 <ip_reass_remove_oldest_datagram+0xc0>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80160ec:	e030      	b.n	8016150 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80160ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160f0:	695a      	ldr	r2, [r3, #20]
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d10c      	bne.n	8016114 <ip_reass_remove_oldest_datagram+0x4c>
 80160fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160fc:	699a      	ldr	r2, [r3, #24]
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	691b      	ldr	r3, [r3, #16]
 8016102:	429a      	cmp	r2, r3
 8016104:	d106      	bne.n	8016114 <ip_reass_remove_oldest_datagram+0x4c>
 8016106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016108:	899a      	ldrh	r2, [r3, #12]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	889b      	ldrh	r3, [r3, #4]
 801610e:	b29b      	uxth	r3, r3
 8016110:	429a      	cmp	r2, r3
 8016112:	d014      	beq.n	801613e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	3301      	adds	r3, #1
 8016118:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801611a:	6a3b      	ldr	r3, [r7, #32]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d104      	bne.n	801612a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016122:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016124:	69fb      	ldr	r3, [r7, #28]
 8016126:	61bb      	str	r3, [r7, #24]
 8016128:	e009      	b.n	801613e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801612c:	7fda      	ldrb	r2, [r3, #31]
 801612e:	6a3b      	ldr	r3, [r7, #32]
 8016130:	7fdb      	ldrb	r3, [r3, #31]
 8016132:	429a      	cmp	r2, r3
 8016134:	d803      	bhi.n	801613e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016138:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d001      	beq.n	801614a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016148:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016152:	2b00      	cmp	r3, #0
 8016154:	d1cb      	bne.n	80160ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016156:	6a3b      	ldr	r3, [r7, #32]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d008      	beq.n	801616e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801615c:	69b9      	ldr	r1, [r7, #24]
 801615e:	6a38      	ldr	r0, [r7, #32]
 8016160:	f7ff ff0e 	bl	8015f80 <ip_reass_free_complete_datagram>
 8016164:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016166:	697a      	ldr	r2, [r7, #20]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	4413      	add	r3, r2
 801616c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801616e:	697a      	ldr	r2, [r7, #20]
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	429a      	cmp	r2, r3
 8016174:	da02      	bge.n	801617c <ip_reass_remove_oldest_datagram+0xb4>
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	2b01      	cmp	r3, #1
 801617a:	dcac      	bgt.n	80160d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801617c:	697b      	ldr	r3, [r7, #20]
}
 801617e:	4618      	mov	r0, r3
 8016180:	3728      	adds	r7, #40	@ 0x28
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}
 8016186:	bf00      	nop
 8016188:	20009130 	.word	0x20009130

0801618c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016196:	2004      	movs	r0, #4
 8016198:	f7f4 fc78 	bl	800aa8c <memp_malloc>
 801619c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d110      	bne.n	80161c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80161a4:	6839      	ldr	r1, [r7, #0]
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f7ff ff8e 	bl	80160c8 <ip_reass_remove_oldest_datagram>
 80161ac:	4602      	mov	r2, r0
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	4293      	cmp	r3, r2
 80161b2:	dc03      	bgt.n	80161bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80161b4:	2004      	movs	r0, #4
 80161b6:	f7f4 fc69 	bl	800aa8c <memp_malloc>
 80161ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d101      	bne.n	80161c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80161c2:	2300      	movs	r3, #0
 80161c4:	e016      	b.n	80161f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80161c6:	2220      	movs	r2, #32
 80161c8:	2100      	movs	r1, #0
 80161ca:	68f8      	ldr	r0, [r7, #12]
 80161cc:	f001 fbb7 	bl	801793e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	220f      	movs	r2, #15
 80161d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80161d6:	4b09      	ldr	r3, [pc, #36]	@ (80161fc <ip_reass_enqueue_new_datagram+0x70>)
 80161d8:	681a      	ldr	r2, [r3, #0]
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80161de:	4a07      	ldr	r2, [pc, #28]	@ (80161fc <ip_reass_enqueue_new_datagram+0x70>)
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	3308      	adds	r3, #8
 80161e8:	2214      	movs	r2, #20
 80161ea:	6879      	ldr	r1, [r7, #4]
 80161ec:	4618      	mov	r0, r3
 80161ee:	f001 fc3e 	bl	8017a6e <memcpy>
  return ipr;
 80161f2:	68fb      	ldr	r3, [r7, #12]
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3710      	adds	r7, #16
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	20009130 	.word	0x20009130

08016200 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801620a:	4b10      	ldr	r3, [pc, #64]	@ (801624c <ip_reass_dequeue_datagram+0x4c>)
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	687a      	ldr	r2, [r7, #4]
 8016210:	429a      	cmp	r2, r3
 8016212:	d104      	bne.n	801621e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	4a0c      	ldr	r2, [pc, #48]	@ (801624c <ip_reass_dequeue_datagram+0x4c>)
 801621a:	6013      	str	r3, [r2, #0]
 801621c:	e00d      	b.n	801623a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d106      	bne.n	8016232 <ip_reass_dequeue_datagram+0x32>
 8016224:	4b0a      	ldr	r3, [pc, #40]	@ (8016250 <ip_reass_dequeue_datagram+0x50>)
 8016226:	f240 1245 	movw	r2, #325	@ 0x145
 801622a:	490a      	ldr	r1, [pc, #40]	@ (8016254 <ip_reass_dequeue_datagram+0x54>)
 801622c:	480a      	ldr	r0, [pc, #40]	@ (8016258 <ip_reass_dequeue_datagram+0x58>)
 801622e:	f001 fae7 	bl	8017800 <iprintf>
    prev->next = ipr->next;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	681a      	ldr	r2, [r3, #0]
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801623a:	6879      	ldr	r1, [r7, #4]
 801623c:	2004      	movs	r0, #4
 801623e:	f7f4 fc95 	bl	800ab6c <memp_free>
}
 8016242:	bf00      	nop
 8016244:	3708      	adds	r7, #8
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	20009130 	.word	0x20009130
 8016250:	0801c9f0 	.word	0x0801c9f0
 8016254:	0801cab8 	.word	0x0801cab8
 8016258:	0801ca38 	.word	0x0801ca38

0801625c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b08c      	sub	sp, #48	@ 0x30
 8016260:	af00      	add	r7, sp, #0
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016268:	2300      	movs	r3, #0
 801626a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801626c:	2301      	movs	r3, #1
 801626e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	885b      	ldrh	r3, [r3, #2]
 801627a:	b29b      	uxth	r3, r3
 801627c:	4618      	mov	r0, r3
 801627e:	f7f3 ff23 	bl	800a0c8 <lwip_htons>
 8016282:	4603      	mov	r3, r0
 8016284:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016286:	69fb      	ldr	r3, [r7, #28]
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	f003 030f 	and.w	r3, r3, #15
 801628e:	b2db      	uxtb	r3, r3
 8016290:	009b      	lsls	r3, r3, #2
 8016292:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016294:	7e7b      	ldrb	r3, [r7, #25]
 8016296:	b29b      	uxth	r3, r3
 8016298:	8b7a      	ldrh	r2, [r7, #26]
 801629a:	429a      	cmp	r2, r3
 801629c:	d202      	bcs.n	80162a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801629e:	f04f 33ff 	mov.w	r3, #4294967295
 80162a2:	e135      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80162a4:	7e7b      	ldrb	r3, [r7, #25]
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	8b7a      	ldrh	r2, [r7, #26]
 80162aa:	1ad3      	subs	r3, r2, r3
 80162ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80162ae:	69fb      	ldr	r3, [r7, #28]
 80162b0:	88db      	ldrh	r3, [r3, #6]
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	4618      	mov	r0, r3
 80162b6:	f7f3 ff07 	bl	800a0c8 <lwip_htons>
 80162ba:	4603      	mov	r3, r0
 80162bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162c0:	b29b      	uxth	r3, r3
 80162c2:	00db      	lsls	r3, r3, #3
 80162c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80162cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162ce:	2200      	movs	r2, #0
 80162d0:	701a      	strb	r2, [r3, #0]
 80162d2:	2200      	movs	r2, #0
 80162d4:	705a      	strb	r2, [r3, #1]
 80162d6:	2200      	movs	r2, #0
 80162d8:	709a      	strb	r2, [r3, #2]
 80162da:	2200      	movs	r2, #0
 80162dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80162de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e0:	8afa      	ldrh	r2, [r7, #22]
 80162e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80162e4:	8afa      	ldrh	r2, [r7, #22]
 80162e6:	8b7b      	ldrh	r3, [r7, #26]
 80162e8:	4413      	add	r3, r2
 80162ea:	b29a      	uxth	r2, r3
 80162ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80162f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162f2:	88db      	ldrh	r3, [r3, #6]
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	8afa      	ldrh	r2, [r7, #22]
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d902      	bls.n	8016302 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016300:	e106      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	627b      	str	r3, [r7, #36]	@ 0x24
 8016308:	e068      	b.n	80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016312:	889b      	ldrh	r3, [r3, #4]
 8016314:	b29a      	uxth	r2, r3
 8016316:	693b      	ldr	r3, [r7, #16]
 8016318:	889b      	ldrh	r3, [r3, #4]
 801631a:	b29b      	uxth	r3, r3
 801631c:	429a      	cmp	r2, r3
 801631e:	d235      	bcs.n	801638c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016324:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016328:	2b00      	cmp	r3, #0
 801632a:	d020      	beq.n	801636e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801632e:	889b      	ldrh	r3, [r3, #4]
 8016330:	b29a      	uxth	r2, r3
 8016332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016334:	88db      	ldrh	r3, [r3, #6]
 8016336:	b29b      	uxth	r3, r3
 8016338:	429a      	cmp	r2, r3
 801633a:	d307      	bcc.n	801634c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801633e:	88db      	ldrh	r3, [r3, #6]
 8016340:	b29a      	uxth	r2, r3
 8016342:	693b      	ldr	r3, [r7, #16]
 8016344:	889b      	ldrh	r3, [r3, #4]
 8016346:	b29b      	uxth	r3, r3
 8016348:	429a      	cmp	r2, r3
 801634a:	d902      	bls.n	8016352 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801634c:	f04f 33ff 	mov.w	r3, #4294967295
 8016350:	e0de      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016354:	68ba      	ldr	r2, [r7, #8]
 8016356:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801635a:	88db      	ldrh	r3, [r3, #6]
 801635c:	b29a      	uxth	r2, r3
 801635e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016360:	889b      	ldrh	r3, [r3, #4]
 8016362:	b29b      	uxth	r3, r3
 8016364:	429a      	cmp	r2, r3
 8016366:	d03d      	beq.n	80163e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016368:	2300      	movs	r3, #0
 801636a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801636c:	e03a      	b.n	80163e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801636e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016370:	88db      	ldrh	r3, [r3, #6]
 8016372:	b29a      	uxth	r2, r3
 8016374:	693b      	ldr	r3, [r7, #16]
 8016376:	889b      	ldrh	r3, [r3, #4]
 8016378:	b29b      	uxth	r3, r3
 801637a:	429a      	cmp	r2, r3
 801637c:	d902      	bls.n	8016384 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801637e:	f04f 33ff 	mov.w	r3, #4294967295
 8016382:	e0c5      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	68ba      	ldr	r2, [r7, #8]
 8016388:	605a      	str	r2, [r3, #4]
      break;
 801638a:	e02b      	b.n	80163e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801638e:	889b      	ldrh	r3, [r3, #4]
 8016390:	b29a      	uxth	r2, r3
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	889b      	ldrh	r3, [r3, #4]
 8016396:	b29b      	uxth	r3, r3
 8016398:	429a      	cmp	r2, r3
 801639a:	d102      	bne.n	80163a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801639c:	f04f 33ff 	mov.w	r3, #4294967295
 80163a0:	e0b6      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80163a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163a4:	889b      	ldrh	r3, [r3, #4]
 80163a6:	b29a      	uxth	r2, r3
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	88db      	ldrh	r3, [r3, #6]
 80163ac:	b29b      	uxth	r3, r3
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d202      	bcs.n	80163b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163b2:	f04f 33ff 	mov.w	r3, #4294967295
 80163b6:	e0ab      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80163b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d009      	beq.n	80163d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80163be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163c0:	88db      	ldrh	r3, [r3, #6]
 80163c2:	b29a      	uxth	r2, r3
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	889b      	ldrh	r3, [r3, #4]
 80163c8:	b29b      	uxth	r3, r3
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d001      	beq.n	80163d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80163ce:	2300      	movs	r3, #0
 80163d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80163d2:	693b      	ldr	r3, [r7, #16]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80163d8:	693b      	ldr	r3, [r7, #16]
 80163da:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80163dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d193      	bne.n	801630a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80163e2:	e000      	b.n	80163e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80163e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80163e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d12d      	bne.n	8016448 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80163ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d01c      	beq.n	801642c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80163f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163f4:	88db      	ldrh	r3, [r3, #6]
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163fa:	889b      	ldrh	r3, [r3, #4]
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	429a      	cmp	r2, r3
 8016400:	d906      	bls.n	8016410 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016402:	4b45      	ldr	r3, [pc, #276]	@ (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016404:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016408:	4944      	ldr	r1, [pc, #272]	@ (801651c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801640a:	4845      	ldr	r0, [pc, #276]	@ (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801640c:	f001 f9f8 	bl	8017800 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016412:	68ba      	ldr	r2, [r7, #8]
 8016414:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016418:	88db      	ldrh	r3, [r3, #6]
 801641a:	b29a      	uxth	r2, r3
 801641c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801641e:	889b      	ldrh	r3, [r3, #4]
 8016420:	b29b      	uxth	r3, r3
 8016422:	429a      	cmp	r2, r3
 8016424:	d010      	beq.n	8016448 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016426:	2300      	movs	r3, #0
 8016428:	623b      	str	r3, [r7, #32]
 801642a:	e00d      	b.n	8016448 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d006      	beq.n	8016442 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016434:	4b38      	ldr	r3, [pc, #224]	@ (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016436:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801643a:	493a      	ldr	r1, [pc, #232]	@ (8016524 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801643c:	4838      	ldr	r0, [pc, #224]	@ (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801643e:	f001 f9df 	bl	8017800 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	68ba      	ldr	r2, [r7, #8]
 8016446:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d105      	bne.n	801645a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	7f9b      	ldrb	r3, [r3, #30]
 8016452:	f003 0301 	and.w	r3, r3, #1
 8016456:	2b00      	cmp	r3, #0
 8016458:	d059      	beq.n	801650e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801645a:	6a3b      	ldr	r3, [r7, #32]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d04f      	beq.n	8016500 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d006      	beq.n	8016476 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	685b      	ldr	r3, [r3, #4]
 801646e:	889b      	ldrh	r3, [r3, #4]
 8016470:	b29b      	uxth	r3, r3
 8016472:	2b00      	cmp	r3, #0
 8016474:	d002      	beq.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016476:	2300      	movs	r3, #0
 8016478:	623b      	str	r3, [r7, #32]
 801647a:	e041      	b.n	8016500 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801647e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016486:	e012      	b.n	80164ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801648e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016490:	88db      	ldrh	r3, [r3, #6]
 8016492:	b29a      	uxth	r2, r3
 8016494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016496:	889b      	ldrh	r3, [r3, #4]
 8016498:	b29b      	uxth	r3, r3
 801649a:	429a      	cmp	r2, r3
 801649c:	d002      	beq.n	80164a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801649e:	2300      	movs	r3, #0
 80164a0:	623b      	str	r3, [r7, #32]
            break;
 80164a2:	e007      	b.n	80164b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80164a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164a6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80164a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80164ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d1e9      	bne.n	8016488 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80164b4:	6a3b      	ldr	r3, [r7, #32]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d022      	beq.n	8016500 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	685b      	ldr	r3, [r3, #4]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d106      	bne.n	80164d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80164c2:	4b15      	ldr	r3, [pc, #84]	@ (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164c4:	f240 12df 	movw	r2, #479	@ 0x1df
 80164c8:	4917      	ldr	r1, [pc, #92]	@ (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80164ca:	4815      	ldr	r0, [pc, #84]	@ (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164cc:	f001 f998 	bl	8017800 <iprintf>
          LWIP_ASSERT("sanity check",
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80164d8:	429a      	cmp	r2, r3
 80164da:	d106      	bne.n	80164ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80164dc:	4b0e      	ldr	r3, [pc, #56]	@ (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164de:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80164e2:	4911      	ldr	r1, [pc, #68]	@ (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80164e4:	480e      	ldr	r0, [pc, #56]	@ (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164e6:	f001 f98b 	bl	8017800 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80164ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d006      	beq.n	8016500 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80164f2:	4b09      	ldr	r3, [pc, #36]	@ (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164f4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80164f8:	490c      	ldr	r1, [pc, #48]	@ (801652c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80164fa:	4809      	ldr	r0, [pc, #36]	@ (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164fc:	f001 f980 	bl	8017800 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016500:	6a3b      	ldr	r3, [r7, #32]
 8016502:	2b00      	cmp	r3, #0
 8016504:	bf14      	ite	ne
 8016506:	2301      	movne	r3, #1
 8016508:	2300      	moveq	r3, #0
 801650a:	b2db      	uxtb	r3, r3
 801650c:	e000      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801650e:	2300      	movs	r3, #0
}
 8016510:	4618      	mov	r0, r3
 8016512:	3730      	adds	r7, #48	@ 0x30
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}
 8016518:	0801c9f0 	.word	0x0801c9f0
 801651c:	0801cad4 	.word	0x0801cad4
 8016520:	0801ca38 	.word	0x0801ca38
 8016524:	0801caf4 	.word	0x0801caf4
 8016528:	0801cb2c 	.word	0x0801cb2c
 801652c:	0801cb3c 	.word	0x0801cb3c

08016530 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b08e      	sub	sp, #56	@ 0x38
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	f003 030f 	and.w	r3, r3, #15
 8016546:	b2db      	uxtb	r3, r3
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	b2db      	uxtb	r3, r3
 801654c:	2b14      	cmp	r3, #20
 801654e:	f040 8171 	bne.w	8016834 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016554:	88db      	ldrh	r3, [r3, #6]
 8016556:	b29b      	uxth	r3, r3
 8016558:	4618      	mov	r0, r3
 801655a:	f7f3 fdb5 	bl	800a0c8 <lwip_htons>
 801655e:	4603      	mov	r3, r0
 8016560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016564:	b29b      	uxth	r3, r3
 8016566:	00db      	lsls	r3, r3, #3
 8016568:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801656c:	885b      	ldrh	r3, [r3, #2]
 801656e:	b29b      	uxth	r3, r3
 8016570:	4618      	mov	r0, r3
 8016572:	f7f3 fda9 	bl	800a0c8 <lwip_htons>
 8016576:	4603      	mov	r3, r0
 8016578:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	f003 030f 	and.w	r3, r3, #15
 8016582:	b2db      	uxtb	r3, r3
 8016584:	009b      	lsls	r3, r3, #2
 8016586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801658a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801658e:	b29b      	uxth	r3, r3
 8016590:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016592:	429a      	cmp	r2, r3
 8016594:	f0c0 8150 	bcc.w	8016838 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016598:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801659c:	b29b      	uxth	r3, r3
 801659e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80165a0:	1ad3      	subs	r3, r2, r3
 80165a2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f7f5 f9eb 	bl	800b980 <pbuf_clen>
 80165aa:	4603      	mov	r3, r0
 80165ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80165ae:	4b8c      	ldr	r3, [pc, #560]	@ (80167e0 <ip4_reass+0x2b0>)
 80165b0:	881b      	ldrh	r3, [r3, #0]
 80165b2:	461a      	mov	r2, r3
 80165b4:	8c3b      	ldrh	r3, [r7, #32]
 80165b6:	4413      	add	r3, r2
 80165b8:	2b0a      	cmp	r3, #10
 80165ba:	dd10      	ble.n	80165de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80165bc:	8c3b      	ldrh	r3, [r7, #32]
 80165be:	4619      	mov	r1, r3
 80165c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80165c2:	f7ff fd81 	bl	80160c8 <ip_reass_remove_oldest_datagram>
 80165c6:	4603      	mov	r3, r0
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	f000 8137 	beq.w	801683c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80165ce:	4b84      	ldr	r3, [pc, #528]	@ (80167e0 <ip4_reass+0x2b0>)
 80165d0:	881b      	ldrh	r3, [r3, #0]
 80165d2:	461a      	mov	r2, r3
 80165d4:	8c3b      	ldrh	r3, [r7, #32]
 80165d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80165d8:	2b0a      	cmp	r3, #10
 80165da:	f300 812f 	bgt.w	801683c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80165de:	4b81      	ldr	r3, [pc, #516]	@ (80167e4 <ip4_reass+0x2b4>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80165e4:	e015      	b.n	8016612 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80165e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165e8:	695a      	ldr	r2, [r3, #20]
 80165ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165ec:	68db      	ldr	r3, [r3, #12]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d10c      	bne.n	801660c <ip4_reass+0xdc>
 80165f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165f4:	699a      	ldr	r2, [r3, #24]
 80165f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165f8:	691b      	ldr	r3, [r3, #16]
 80165fa:	429a      	cmp	r2, r3
 80165fc:	d106      	bne.n	801660c <ip4_reass+0xdc>
 80165fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016600:	899a      	ldrh	r2, [r3, #12]
 8016602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016604:	889b      	ldrh	r3, [r3, #4]
 8016606:	b29b      	uxth	r3, r3
 8016608:	429a      	cmp	r2, r3
 801660a:	d006      	beq.n	801661a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	633b      	str	r3, [r7, #48]	@ 0x30
 8016612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016614:	2b00      	cmp	r3, #0
 8016616:	d1e6      	bne.n	80165e6 <ip4_reass+0xb6>
 8016618:	e000      	b.n	801661c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801661a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801661e:	2b00      	cmp	r3, #0
 8016620:	d109      	bne.n	8016636 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016622:	8c3b      	ldrh	r3, [r7, #32]
 8016624:	4619      	mov	r1, r3
 8016626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016628:	f7ff fdb0 	bl	801618c <ip_reass_enqueue_new_datagram>
 801662c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016630:	2b00      	cmp	r3, #0
 8016632:	d11c      	bne.n	801666e <ip4_reass+0x13e>
      goto nullreturn;
 8016634:	e105      	b.n	8016842 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016638:	88db      	ldrh	r3, [r3, #6]
 801663a:	b29b      	uxth	r3, r3
 801663c:	4618      	mov	r0, r3
 801663e:	f7f3 fd43 	bl	800a0c8 <lwip_htons>
 8016642:	4603      	mov	r3, r0
 8016644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016648:	2b00      	cmp	r3, #0
 801664a:	d110      	bne.n	801666e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801664e:	89db      	ldrh	r3, [r3, #14]
 8016650:	4618      	mov	r0, r3
 8016652:	f7f3 fd39 	bl	800a0c8 <lwip_htons>
 8016656:	4603      	mov	r3, r0
 8016658:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801665c:	2b00      	cmp	r3, #0
 801665e:	d006      	beq.n	801666e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016662:	3308      	adds	r3, #8
 8016664:	2214      	movs	r2, #20
 8016666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016668:	4618      	mov	r0, r3
 801666a:	f001 fa00 	bl	8017a6e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016670:	88db      	ldrh	r3, [r3, #6]
 8016672:	b29b      	uxth	r3, r3
 8016674:	f003 0320 	and.w	r3, r3, #32
 8016678:	2b00      	cmp	r3, #0
 801667a:	bf0c      	ite	eq
 801667c:	2301      	moveq	r3, #1
 801667e:	2300      	movne	r3, #0
 8016680:	b2db      	uxtb	r3, r3
 8016682:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016684:	69fb      	ldr	r3, [r7, #28]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d00e      	beq.n	80166a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801668a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801668c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801668e:	4413      	add	r3, r2
 8016690:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016692:	8b7a      	ldrh	r2, [r7, #26]
 8016694:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016696:	429a      	cmp	r2, r3
 8016698:	f0c0 80a0 	bcc.w	80167dc <ip4_reass+0x2ac>
 801669c:	8b7b      	ldrh	r3, [r7, #26]
 801669e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80166a2:	4293      	cmp	r3, r2
 80166a4:	f200 809a 	bhi.w	80167dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80166a8:	69fa      	ldr	r2, [r7, #28]
 80166aa:	6879      	ldr	r1, [r7, #4]
 80166ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80166ae:	f7ff fdd5 	bl	801625c <ip_reass_chain_frag_into_datagram_and_validate>
 80166b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ba:	f000 809b 	beq.w	80167f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80166be:	4b48      	ldr	r3, [pc, #288]	@ (80167e0 <ip4_reass+0x2b0>)
 80166c0:	881a      	ldrh	r2, [r3, #0]
 80166c2:	8c3b      	ldrh	r3, [r7, #32]
 80166c4:	4413      	add	r3, r2
 80166c6:	b29a      	uxth	r2, r3
 80166c8:	4b45      	ldr	r3, [pc, #276]	@ (80167e0 <ip4_reass+0x2b0>)
 80166ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80166cc:	69fb      	ldr	r3, [r7, #28]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d00d      	beq.n	80166ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80166d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80166d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80166d6:	4413      	add	r3, r2
 80166d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80166da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166dc:	8a7a      	ldrh	r2, [r7, #18]
 80166de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80166e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166e2:	7f9b      	ldrb	r3, [r3, #30]
 80166e4:	f043 0301 	orr.w	r3, r3, #1
 80166e8:	b2da      	uxtb	r2, r3
 80166ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	2b01      	cmp	r3, #1
 80166f2:	d171      	bne.n	80167d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80166f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166f6:	8b9b      	ldrh	r3, [r3, #28]
 80166f8:	3314      	adds	r3, #20
 80166fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80166fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016710:	3308      	adds	r3, #8
 8016712:	2214      	movs	r2, #20
 8016714:	4619      	mov	r1, r3
 8016716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016718:	f001 f9a9 	bl	8017a6e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801671c:	8a3b      	ldrh	r3, [r7, #16]
 801671e:	4618      	mov	r0, r3
 8016720:	f7f3 fcd2 	bl	800a0c8 <lwip_htons>
 8016724:	4603      	mov	r3, r0
 8016726:	461a      	mov	r2, r3
 8016728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801672a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801672c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801672e:	2200      	movs	r2, #0
 8016730:	719a      	strb	r2, [r3, #6]
 8016732:	2200      	movs	r2, #0
 8016734:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016738:	2200      	movs	r2, #0
 801673a:	729a      	strb	r2, [r3, #10]
 801673c:	2200      	movs	r2, #0
 801673e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016746:	e00d      	b.n	8016764 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801674a:	685b      	ldr	r3, [r3, #4]
 801674c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801674e:	2114      	movs	r1, #20
 8016750:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016752:	f7f5 f807 	bl	800b764 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016756:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7f5 f94b 	bl	800b9f4 <pbuf_cat>
      r = iprh->next_pbuf;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016766:	2b00      	cmp	r3, #0
 8016768:	d1ee      	bne.n	8016748 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801676a:	4b1e      	ldr	r3, [pc, #120]	@ (80167e4 <ip4_reass+0x2b4>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016770:	429a      	cmp	r2, r3
 8016772:	d102      	bne.n	801677a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016774:	2300      	movs	r3, #0
 8016776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016778:	e010      	b.n	801679c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801677a:	4b1a      	ldr	r3, [pc, #104]	@ (80167e4 <ip4_reass+0x2b4>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016780:	e007      	b.n	8016792 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016788:	429a      	cmp	r2, r3
 801678a:	d006      	beq.n	801679a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801678c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016794:	2b00      	cmp	r3, #0
 8016796:	d1f4      	bne.n	8016782 <ip4_reass+0x252>
 8016798:	e000      	b.n	801679c <ip4_reass+0x26c>
          break;
 801679a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801679c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801679e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80167a0:	f7ff fd2e 	bl	8016200 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80167a4:	6878      	ldr	r0, [r7, #4]
 80167a6:	f7f5 f8eb 	bl	800b980 <pbuf_clen>
 80167aa:	4603      	mov	r3, r0
 80167ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80167ae:	4b0c      	ldr	r3, [pc, #48]	@ (80167e0 <ip4_reass+0x2b0>)
 80167b0:	881b      	ldrh	r3, [r3, #0]
 80167b2:	8c3a      	ldrh	r2, [r7, #32]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d906      	bls.n	80167c6 <ip4_reass+0x296>
 80167b8:	4b0b      	ldr	r3, [pc, #44]	@ (80167e8 <ip4_reass+0x2b8>)
 80167ba:	f240 229b 	movw	r2, #667	@ 0x29b
 80167be:	490b      	ldr	r1, [pc, #44]	@ (80167ec <ip4_reass+0x2bc>)
 80167c0:	480b      	ldr	r0, [pc, #44]	@ (80167f0 <ip4_reass+0x2c0>)
 80167c2:	f001 f81d 	bl	8017800 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80167c6:	4b06      	ldr	r3, [pc, #24]	@ (80167e0 <ip4_reass+0x2b0>)
 80167c8:	881a      	ldrh	r2, [r3, #0]
 80167ca:	8c3b      	ldrh	r3, [r7, #32]
 80167cc:	1ad3      	subs	r3, r2, r3
 80167ce:	b29a      	uxth	r2, r3
 80167d0:	4b03      	ldr	r3, [pc, #12]	@ (80167e0 <ip4_reass+0x2b0>)
 80167d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	e038      	b.n	801684a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80167d8:	2300      	movs	r3, #0
 80167da:	e036      	b.n	801684a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80167dc:	bf00      	nop
 80167de:	e00a      	b.n	80167f6 <ip4_reass+0x2c6>
 80167e0:	20009134 	.word	0x20009134
 80167e4:	20009130 	.word	0x20009130
 80167e8:	0801c9f0 	.word	0x0801c9f0
 80167ec:	0801cb60 	.word	0x0801cb60
 80167f0:	0801ca38 	.word	0x0801ca38
    goto nullreturn_ipr;
 80167f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80167f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d106      	bne.n	801680a <ip4_reass+0x2da>
 80167fc:	4b15      	ldr	r3, [pc, #84]	@ (8016854 <ip4_reass+0x324>)
 80167fe:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016802:	4915      	ldr	r1, [pc, #84]	@ (8016858 <ip4_reass+0x328>)
 8016804:	4815      	ldr	r0, [pc, #84]	@ (801685c <ip4_reass+0x32c>)
 8016806:	f000 fffb 	bl	8017800 <iprintf>
  if (ipr->p == NULL) {
 801680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801680c:	685b      	ldr	r3, [r3, #4]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d116      	bne.n	8016840 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016812:	4b13      	ldr	r3, [pc, #76]	@ (8016860 <ip4_reass+0x330>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016818:	429a      	cmp	r2, r3
 801681a:	d006      	beq.n	801682a <ip4_reass+0x2fa>
 801681c:	4b0d      	ldr	r3, [pc, #52]	@ (8016854 <ip4_reass+0x324>)
 801681e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016822:	4910      	ldr	r1, [pc, #64]	@ (8016864 <ip4_reass+0x334>)
 8016824:	480d      	ldr	r0, [pc, #52]	@ (801685c <ip4_reass+0x32c>)
 8016826:	f000 ffeb 	bl	8017800 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801682a:	2100      	movs	r1, #0
 801682c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801682e:	f7ff fce7 	bl	8016200 <ip_reass_dequeue_datagram>
 8016832:	e006      	b.n	8016842 <ip4_reass+0x312>
    goto nullreturn;
 8016834:	bf00      	nop
 8016836:	e004      	b.n	8016842 <ip4_reass+0x312>
    goto nullreturn;
 8016838:	bf00      	nop
 801683a:	e002      	b.n	8016842 <ip4_reass+0x312>
      goto nullreturn;
 801683c:	bf00      	nop
 801683e:	e000      	b.n	8016842 <ip4_reass+0x312>
  }

nullreturn:
 8016840:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7f5 f814 	bl	800b870 <pbuf_free>
  return NULL;
 8016848:	2300      	movs	r3, #0
}
 801684a:	4618      	mov	r0, r3
 801684c:	3738      	adds	r7, #56	@ 0x38
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}
 8016852:	bf00      	nop
 8016854:	0801c9f0 	.word	0x0801c9f0
 8016858:	0801cb7c 	.word	0x0801cb7c
 801685c:	0801ca38 	.word	0x0801ca38
 8016860:	20009130 	.word	0x20009130
 8016864:	0801cb88 	.word	0x0801cb88

08016868 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801686c:	2005      	movs	r0, #5
 801686e:	f7f4 f90d 	bl	800aa8c <memp_malloc>
 8016872:	4603      	mov	r3, r0
}
 8016874:	4618      	mov	r0, r3
 8016876:	bd80      	pop	{r7, pc}

08016878 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d106      	bne.n	8016894 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016886:	4b07      	ldr	r3, [pc, #28]	@ (80168a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016888:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801688c:	4906      	ldr	r1, [pc, #24]	@ (80168a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801688e:	4807      	ldr	r0, [pc, #28]	@ (80168ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8016890:	f000 ffb6 	bl	8017800 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016894:	6879      	ldr	r1, [r7, #4]
 8016896:	2005      	movs	r0, #5
 8016898:	f7f4 f968 	bl	800ab6c <memp_free>
}
 801689c:	bf00      	nop
 801689e:	3708      	adds	r7, #8
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	0801c9f0 	.word	0x0801c9f0
 80168a8:	0801cba8 	.word	0x0801cba8
 80168ac:	0801ca38 	.word	0x0801ca38

080168b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b084      	sub	sp, #16
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d106      	bne.n	80168d0 <ipfrag_free_pbuf_custom+0x20>
 80168c2:	4b11      	ldr	r3, [pc, #68]	@ (8016908 <ipfrag_free_pbuf_custom+0x58>)
 80168c4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80168c8:	4910      	ldr	r1, [pc, #64]	@ (801690c <ipfrag_free_pbuf_custom+0x5c>)
 80168ca:	4811      	ldr	r0, [pc, #68]	@ (8016910 <ipfrag_free_pbuf_custom+0x60>)
 80168cc:	f000 ff98 	bl	8017800 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80168d0:	68fa      	ldr	r2, [r7, #12]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	429a      	cmp	r2, r3
 80168d6:	d006      	beq.n	80168e6 <ipfrag_free_pbuf_custom+0x36>
 80168d8:	4b0b      	ldr	r3, [pc, #44]	@ (8016908 <ipfrag_free_pbuf_custom+0x58>)
 80168da:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80168de:	490d      	ldr	r1, [pc, #52]	@ (8016914 <ipfrag_free_pbuf_custom+0x64>)
 80168e0:	480b      	ldr	r0, [pc, #44]	@ (8016910 <ipfrag_free_pbuf_custom+0x60>)
 80168e2:	f000 ff8d 	bl	8017800 <iprintf>
  if (pcr->original != NULL) {
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	695b      	ldr	r3, [r3, #20]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d004      	beq.n	80168f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	695b      	ldr	r3, [r3, #20]
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7f4 ffbc 	bl	800b870 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	f7ff ffbd 	bl	8016878 <ip_frag_free_pbuf_custom_ref>
}
 80168fe:	bf00      	nop
 8016900:	3710      	adds	r7, #16
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	0801c9f0 	.word	0x0801c9f0
 801690c:	0801cbb4 	.word	0x0801cbb4
 8016910:	0801ca38 	.word	0x0801ca38
 8016914:	0801cbc0 	.word	0x0801cbc0

08016918 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b094      	sub	sp, #80	@ 0x50
 801691c:	af02      	add	r7, sp, #8
 801691e:	60f8      	str	r0, [r7, #12]
 8016920:	60b9      	str	r1, [r7, #8]
 8016922:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016924:	2300      	movs	r3, #0
 8016926:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801692e:	3b14      	subs	r3, #20
 8016930:	2b00      	cmp	r3, #0
 8016932:	da00      	bge.n	8016936 <ip4_frag+0x1e>
 8016934:	3307      	adds	r3, #7
 8016936:	10db      	asrs	r3, r3, #3
 8016938:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801693a:	2314      	movs	r3, #20
 801693c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	685b      	ldr	r3, [r3, #4]
 8016942:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016946:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801694a:	781b      	ldrb	r3, [r3, #0]
 801694c:	f003 030f 	and.w	r3, r3, #15
 8016950:	b2db      	uxtb	r3, r3
 8016952:	009b      	lsls	r3, r3, #2
 8016954:	b2db      	uxtb	r3, r3
 8016956:	2b14      	cmp	r3, #20
 8016958:	d002      	beq.n	8016960 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801695a:	f06f 0305 	mvn.w	r3, #5
 801695e:	e110      	b.n	8016b82 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	895b      	ldrh	r3, [r3, #10]
 8016964:	2b13      	cmp	r3, #19
 8016966:	d809      	bhi.n	801697c <ip4_frag+0x64>
 8016968:	4b88      	ldr	r3, [pc, #544]	@ (8016b8c <ip4_frag+0x274>)
 801696a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801696e:	4988      	ldr	r1, [pc, #544]	@ (8016b90 <ip4_frag+0x278>)
 8016970:	4888      	ldr	r0, [pc, #544]	@ (8016b94 <ip4_frag+0x27c>)
 8016972:	f000 ff45 	bl	8017800 <iprintf>
 8016976:	f06f 0305 	mvn.w	r3, #5
 801697a:	e102      	b.n	8016b82 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801697e:	88db      	ldrh	r3, [r3, #6]
 8016980:	b29b      	uxth	r3, r3
 8016982:	4618      	mov	r0, r3
 8016984:	f7f3 fba0 	bl	800a0c8 <lwip_htons>
 8016988:	4603      	mov	r3, r0
 801698a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801698c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801698e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016992:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016996:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801699c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	891b      	ldrh	r3, [r3, #8]
 80169a2:	3b14      	subs	r3, #20
 80169a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80169a8:	e0e1      	b.n	8016b6e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80169aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80169ac:	00db      	lsls	r3, r3, #3
 80169ae:	b29b      	uxth	r3, r3
 80169b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80169b4:	4293      	cmp	r3, r2
 80169b6:	bf28      	it	cs
 80169b8:	4613      	movcs	r3, r2
 80169ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80169bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80169c0:	2114      	movs	r1, #20
 80169c2:	200e      	movs	r0, #14
 80169c4:	f7f4 fc70 	bl	800b2a8 <pbuf_alloc>
 80169c8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80169ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	f000 80d5 	beq.w	8016b7c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80169d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169d4:	895b      	ldrh	r3, [r3, #10]
 80169d6:	2b13      	cmp	r3, #19
 80169d8:	d806      	bhi.n	80169e8 <ip4_frag+0xd0>
 80169da:	4b6c      	ldr	r3, [pc, #432]	@ (8016b8c <ip4_frag+0x274>)
 80169dc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80169e0:	496d      	ldr	r1, [pc, #436]	@ (8016b98 <ip4_frag+0x280>)
 80169e2:	486c      	ldr	r0, [pc, #432]	@ (8016b94 <ip4_frag+0x27c>)
 80169e4:	f000 ff0c 	bl	8017800 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80169e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ea:	685b      	ldr	r3, [r3, #4]
 80169ec:	2214      	movs	r2, #20
 80169ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80169f0:	4618      	mov	r0, r3
 80169f2:	f001 f83c 	bl	8017a6e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80169f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80169fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80169fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016a02:	e064      	b.n	8016ace <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	895a      	ldrh	r2, [r3, #10]
 8016a08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016a0a:	1ad3      	subs	r3, r2, r3
 8016a0c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	895b      	ldrh	r3, [r3, #10]
 8016a12:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016a14:	429a      	cmp	r2, r3
 8016a16:	d906      	bls.n	8016a26 <ip4_frag+0x10e>
 8016a18:	4b5c      	ldr	r3, [pc, #368]	@ (8016b8c <ip4_frag+0x274>)
 8016a1a:	f240 322d 	movw	r2, #813	@ 0x32d
 8016a1e:	495f      	ldr	r1, [pc, #380]	@ (8016b9c <ip4_frag+0x284>)
 8016a20:	485c      	ldr	r0, [pc, #368]	@ (8016b94 <ip4_frag+0x27c>)
 8016a22:	f000 feed 	bl	8017800 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016a26:	8bfa      	ldrh	r2, [r7, #30]
 8016a28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016a2c:	4293      	cmp	r3, r2
 8016a2e:	bf28      	it	cs
 8016a30:	4613      	movcs	r3, r2
 8016a32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016a36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d105      	bne.n	8016a4a <ip4_frag+0x132>
        poff = 0;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	60fb      	str	r3, [r7, #12]
        continue;
 8016a48:	e041      	b.n	8016ace <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016a4a:	f7ff ff0d 	bl	8016868 <ip_frag_alloc_pbuf_custom_ref>
 8016a4e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016a50:	69bb      	ldr	r3, [r7, #24]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d103      	bne.n	8016a5e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016a56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016a58:	f7f4 ff0a 	bl	800b870 <pbuf_free>
        goto memerr;
 8016a5c:	e08f      	b.n	8016b7e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016a5e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016a64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016a66:	4413      	add	r3, r2
 8016a68:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016a6c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016a70:	9201      	str	r2, [sp, #4]
 8016a72:	9300      	str	r3, [sp, #0]
 8016a74:	4603      	mov	r3, r0
 8016a76:	2241      	movs	r2, #65	@ 0x41
 8016a78:	2000      	movs	r0, #0
 8016a7a:	f7f4 fd3f 	bl	800b4fc <pbuf_alloced_custom>
 8016a7e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d106      	bne.n	8016a94 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016a86:	69b8      	ldr	r0, [r7, #24]
 8016a88:	f7ff fef6 	bl	8016878 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016a8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016a8e:	f7f4 feef 	bl	800b870 <pbuf_free>
        goto memerr;
 8016a92:	e074      	b.n	8016b7e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016a94:	68f8      	ldr	r0, [r7, #12]
 8016a96:	f7f4 ff8b 	bl	800b9b0 <pbuf_ref>
      pcr->original = p;
 8016a9a:	69bb      	ldr	r3, [r7, #24]
 8016a9c:	68fa      	ldr	r2, [r7, #12]
 8016a9e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8016ba0 <ip4_frag+0x288>)
 8016aa4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016aa6:	6979      	ldr	r1, [r7, #20]
 8016aa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016aaa:	f7f4 ffa3 	bl	800b9f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016aae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016ab2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016ab6:	1ad3      	subs	r3, r2, r3
 8016ab8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016abc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d004      	beq.n	8016ace <ip4_frag+0x1b6>
        poff = 0;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016ace:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d196      	bne.n	8016a04 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016ad6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016ad8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016adc:	4413      	add	r3, r2
 8016ade:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016ae0:	68bb      	ldr	r3, [r7, #8]
 8016ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ae4:	f1a3 0213 	sub.w	r2, r3, #19
 8016ae8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016aec:	429a      	cmp	r2, r3
 8016aee:	bfcc      	ite	gt
 8016af0:	2301      	movgt	r3, #1
 8016af2:	2300      	movle	r3, #0
 8016af4:	b2db      	uxtb	r3, r3
 8016af6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016af8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016b02:	6a3b      	ldr	r3, [r7, #32]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d002      	beq.n	8016b0e <ip4_frag+0x1f6>
 8016b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d003      	beq.n	8016b16 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016b0e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016b10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016b14:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016b16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f7f3 fad5 	bl	800a0c8 <lwip_htons>
 8016b1e:	4603      	mov	r3, r0
 8016b20:	461a      	mov	r2, r3
 8016b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b24:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016b26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016b28:	3314      	adds	r3, #20
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7f3 facb 	bl	800a0c8 <lwip_htons>
 8016b32:	4603      	mov	r3, r0
 8016b34:	461a      	mov	r2, r3
 8016b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b38:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	729a      	strb	r2, [r3, #10]
 8016b40:	2200      	movs	r2, #0
 8016b42:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	695b      	ldr	r3, [r3, #20]
 8016b48:	687a      	ldr	r2, [r7, #4]
 8016b4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016b4c:	68b8      	ldr	r0, [r7, #8]
 8016b4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016b50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016b52:	f7f4 fe8d 	bl	800b870 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016b56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016b5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016b5c:	1ad3      	subs	r3, r2, r3
 8016b5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016b62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8016b66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016b68:	4413      	add	r3, r2
 8016b6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016b6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	f47f af19 	bne.w	80169aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	e002      	b.n	8016b82 <ip4_frag+0x26a>
      goto memerr;
 8016b7c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3748      	adds	r7, #72	@ 0x48
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}
 8016b8a:	bf00      	nop
 8016b8c:	0801c9f0 	.word	0x0801c9f0
 8016b90:	0801cbcc 	.word	0x0801cbcc
 8016b94:	0801ca38 	.word	0x0801ca38
 8016b98:	0801cbe8 	.word	0x0801cbe8
 8016b9c:	0801cc08 	.word	0x0801cc08
 8016ba0:	080168b1 	.word	0x080168b1

08016ba4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b086      	sub	sp, #24
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016bae:	230e      	movs	r3, #14
 8016bb0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	895b      	ldrh	r3, [r3, #10]
 8016bb6:	2b0e      	cmp	r3, #14
 8016bb8:	d96e      	bls.n	8016c98 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	7bdb      	ldrb	r3, [r3, #15]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d106      	bne.n	8016bd0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016bc2:	683b      	ldr	r3, [r7, #0]
 8016bc4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016bc8:	3301      	adds	r3, #1
 8016bca:	b2da      	uxtb	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	685b      	ldr	r3, [r3, #4]
 8016bd4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016bd6:	693b      	ldr	r3, [r7, #16]
 8016bd8:	7b1a      	ldrb	r2, [r3, #12]
 8016bda:	7b5b      	ldrb	r3, [r3, #13]
 8016bdc:	021b      	lsls	r3, r3, #8
 8016bde:	4313      	orrs	r3, r2
 8016be0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	f003 0301 	and.w	r3, r3, #1
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d023      	beq.n	8016c36 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016bee:	693b      	ldr	r3, [r7, #16]
 8016bf0:	781b      	ldrb	r3, [r3, #0]
 8016bf2:	2b01      	cmp	r3, #1
 8016bf4:	d10f      	bne.n	8016c16 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016bf6:	693b      	ldr	r3, [r7, #16]
 8016bf8:	785b      	ldrb	r3, [r3, #1]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d11b      	bne.n	8016c36 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016c02:	2b5e      	cmp	r3, #94	@ 0x5e
 8016c04:	d117      	bne.n	8016c36 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	7b5b      	ldrb	r3, [r3, #13]
 8016c0a:	f043 0310 	orr.w	r3, r3, #16
 8016c0e:	b2da      	uxtb	r2, r3
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	735a      	strb	r2, [r3, #13]
 8016c14:	e00f      	b.n	8016c36 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016c16:	693b      	ldr	r3, [r7, #16]
 8016c18:	2206      	movs	r2, #6
 8016c1a:	4928      	ldr	r1, [pc, #160]	@ (8016cbc <ethernet_input+0x118>)
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f000 fe64 	bl	80178ea <memcmp>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d106      	bne.n	8016c36 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	7b5b      	ldrb	r3, [r3, #13]
 8016c2c:	f043 0308 	orr.w	r3, r3, #8
 8016c30:	b2da      	uxtb	r2, r3
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016c36:	89fb      	ldrh	r3, [r7, #14]
 8016c38:	2b08      	cmp	r3, #8
 8016c3a:	d003      	beq.n	8016c44 <ethernet_input+0xa0>
 8016c3c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016c40:	d014      	beq.n	8016c6c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016c42:	e032      	b.n	8016caa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016c4a:	f003 0308 	and.w	r3, r3, #8
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d024      	beq.n	8016c9c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c52:	8afb      	ldrh	r3, [r7, #22]
 8016c54:	4619      	mov	r1, r3
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f7f4 fd84 	bl	800b764 <pbuf_remove_header>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d11e      	bne.n	8016ca0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016c62:	6839      	ldr	r1, [r7, #0]
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f7fe ff03 	bl	8015a70 <ip4_input>
      break;
 8016c6a:	e013      	b.n	8016c94 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016c72:	f003 0308 	and.w	r3, r3, #8
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d014      	beq.n	8016ca4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c7a:	8afb      	ldrh	r3, [r7, #22]
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f7f4 fd70 	bl	800b764 <pbuf_remove_header>
 8016c84:	4603      	mov	r3, r0
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d10e      	bne.n	8016ca8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016c8a:	6839      	ldr	r1, [r7, #0]
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f7fe f89f 	bl	8014dd0 <etharp_input>
      break;
 8016c92:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016c94:	2300      	movs	r3, #0
 8016c96:	e00c      	b.n	8016cb2 <ethernet_input+0x10e>
    goto free_and_return;
 8016c98:	bf00      	nop
 8016c9a:	e006      	b.n	8016caa <ethernet_input+0x106>
        goto free_and_return;
 8016c9c:	bf00      	nop
 8016c9e:	e004      	b.n	8016caa <ethernet_input+0x106>
        goto free_and_return;
 8016ca0:	bf00      	nop
 8016ca2:	e002      	b.n	8016caa <ethernet_input+0x106>
        goto free_and_return;
 8016ca4:	bf00      	nop
 8016ca6:	e000      	b.n	8016caa <ethernet_input+0x106>
        goto free_and_return;
 8016ca8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f7f4 fde0 	bl	800b870 <pbuf_free>
  return ERR_OK;
 8016cb0:	2300      	movs	r3, #0
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3718      	adds	r7, #24
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	08020484 	.word	0x08020484

08016cc0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b086      	sub	sp, #24
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	60f8      	str	r0, [r7, #12]
 8016cc8:	60b9      	str	r1, [r7, #8]
 8016cca:	607a      	str	r2, [r7, #4]
 8016ccc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016cce:	8c3b      	ldrh	r3, [r7, #32]
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7f3 f9f9 	bl	800a0c8 <lwip_htons>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016cda:	210e      	movs	r1, #14
 8016cdc:	68b8      	ldr	r0, [r7, #8]
 8016cde:	f7f4 fd31 	bl	800b744 <pbuf_add_header>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d125      	bne.n	8016d34 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	685b      	ldr	r3, [r3, #4]
 8016cec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016cee:	693b      	ldr	r3, [r7, #16]
 8016cf0:	8afa      	ldrh	r2, [r7, #22]
 8016cf2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	2206      	movs	r2, #6
 8016cf8:	6839      	ldr	r1, [r7, #0]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f000 feb7 	bl	8017a6e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	3306      	adds	r3, #6
 8016d04:	2206      	movs	r2, #6
 8016d06:	6879      	ldr	r1, [r7, #4]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f000 feb0 	bl	8017a6e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016d14:	2b06      	cmp	r3, #6
 8016d16:	d006      	beq.n	8016d26 <ethernet_output+0x66>
 8016d18:	4b0a      	ldr	r3, [pc, #40]	@ (8016d44 <ethernet_output+0x84>)
 8016d1a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016d1e:	490a      	ldr	r1, [pc, #40]	@ (8016d48 <ethernet_output+0x88>)
 8016d20:	480a      	ldr	r0, [pc, #40]	@ (8016d4c <ethernet_output+0x8c>)
 8016d22:	f000 fd6d 	bl	8017800 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	699b      	ldr	r3, [r3, #24]
 8016d2a:	68b9      	ldr	r1, [r7, #8]
 8016d2c:	68f8      	ldr	r0, [r7, #12]
 8016d2e:	4798      	blx	r3
 8016d30:	4603      	mov	r3, r0
 8016d32:	e002      	b.n	8016d3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016d34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016d36:	f06f 0301 	mvn.w	r3, #1
}
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	3718      	adds	r7, #24
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bd80      	pop	{r7, pc}
 8016d42:	bf00      	nop
 8016d44:	0801cc18 	.word	0x0801cc18
 8016d48:	0801cc50 	.word	0x0801cc50
 8016d4c:	0801cc84 	.word	0x0801cc84

08016d50 <rand>:
 8016d50:	4b16      	ldr	r3, [pc, #88]	@ (8016dac <rand+0x5c>)
 8016d52:	b510      	push	{r4, lr}
 8016d54:	681c      	ldr	r4, [r3, #0]
 8016d56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d58:	b9b3      	cbnz	r3, 8016d88 <rand+0x38>
 8016d5a:	2018      	movs	r0, #24
 8016d5c:	f001 fd4a 	bl	80187f4 <malloc>
 8016d60:	4602      	mov	r2, r0
 8016d62:	6320      	str	r0, [r4, #48]	@ 0x30
 8016d64:	b920      	cbnz	r0, 8016d70 <rand+0x20>
 8016d66:	4b12      	ldr	r3, [pc, #72]	@ (8016db0 <rand+0x60>)
 8016d68:	4812      	ldr	r0, [pc, #72]	@ (8016db4 <rand+0x64>)
 8016d6a:	2152      	movs	r1, #82	@ 0x52
 8016d6c:	f000 fe8e 	bl	8017a8c <__assert_func>
 8016d70:	4911      	ldr	r1, [pc, #68]	@ (8016db8 <rand+0x68>)
 8016d72:	4b12      	ldr	r3, [pc, #72]	@ (8016dbc <rand+0x6c>)
 8016d74:	e9c0 1300 	strd	r1, r3, [r0]
 8016d78:	4b11      	ldr	r3, [pc, #68]	@ (8016dc0 <rand+0x70>)
 8016d7a:	6083      	str	r3, [r0, #8]
 8016d7c:	230b      	movs	r3, #11
 8016d7e:	8183      	strh	r3, [r0, #12]
 8016d80:	2100      	movs	r1, #0
 8016d82:	2001      	movs	r0, #1
 8016d84:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016d88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016d8a:	480e      	ldr	r0, [pc, #56]	@ (8016dc4 <rand+0x74>)
 8016d8c:	690b      	ldr	r3, [r1, #16]
 8016d8e:	694c      	ldr	r4, [r1, #20]
 8016d90:	4a0d      	ldr	r2, [pc, #52]	@ (8016dc8 <rand+0x78>)
 8016d92:	4358      	muls	r0, r3
 8016d94:	fb02 0004 	mla	r0, r2, r4, r0
 8016d98:	fba3 3202 	umull	r3, r2, r3, r2
 8016d9c:	3301      	adds	r3, #1
 8016d9e:	eb40 0002 	adc.w	r0, r0, r2
 8016da2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016da6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016daa:	bd10      	pop	{r4, pc}
 8016dac:	20000048 	.word	0x20000048
 8016db0:	08020492 	.word	0x08020492
 8016db4:	080204a9 	.word	0x080204a9
 8016db8:	abcd330e 	.word	0xabcd330e
 8016dbc:	e66d1234 	.word	0xe66d1234
 8016dc0:	0005deec 	.word	0x0005deec
 8016dc4:	5851f42d 	.word	0x5851f42d
 8016dc8:	4c957f2d 	.word	0x4c957f2d

08016dcc <__cvt>:
 8016dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016dd0:	ec57 6b10 	vmov	r6, r7, d0
 8016dd4:	2f00      	cmp	r7, #0
 8016dd6:	460c      	mov	r4, r1
 8016dd8:	4619      	mov	r1, r3
 8016dda:	463b      	mov	r3, r7
 8016ddc:	bfbb      	ittet	lt
 8016dde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016de2:	461f      	movlt	r7, r3
 8016de4:	2300      	movge	r3, #0
 8016de6:	232d      	movlt	r3, #45	@ 0x2d
 8016de8:	700b      	strb	r3, [r1, #0]
 8016dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016dec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016df0:	4691      	mov	r9, r2
 8016df2:	f023 0820 	bic.w	r8, r3, #32
 8016df6:	bfbc      	itt	lt
 8016df8:	4632      	movlt	r2, r6
 8016dfa:	4616      	movlt	r6, r2
 8016dfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016e00:	d005      	beq.n	8016e0e <__cvt+0x42>
 8016e02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016e06:	d100      	bne.n	8016e0a <__cvt+0x3e>
 8016e08:	3401      	adds	r4, #1
 8016e0a:	2102      	movs	r1, #2
 8016e0c:	e000      	b.n	8016e10 <__cvt+0x44>
 8016e0e:	2103      	movs	r1, #3
 8016e10:	ab03      	add	r3, sp, #12
 8016e12:	9301      	str	r3, [sp, #4]
 8016e14:	ab02      	add	r3, sp, #8
 8016e16:	9300      	str	r3, [sp, #0]
 8016e18:	ec47 6b10 	vmov	d0, r6, r7
 8016e1c:	4653      	mov	r3, sl
 8016e1e:	4622      	mov	r2, r4
 8016e20:	f000 feda 	bl	8017bd8 <_dtoa_r>
 8016e24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016e28:	4605      	mov	r5, r0
 8016e2a:	d119      	bne.n	8016e60 <__cvt+0x94>
 8016e2c:	f019 0f01 	tst.w	r9, #1
 8016e30:	d00e      	beq.n	8016e50 <__cvt+0x84>
 8016e32:	eb00 0904 	add.w	r9, r0, r4
 8016e36:	2200      	movs	r2, #0
 8016e38:	2300      	movs	r3, #0
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	4639      	mov	r1, r7
 8016e3e:	f7e9 fe73 	bl	8000b28 <__aeabi_dcmpeq>
 8016e42:	b108      	cbz	r0, 8016e48 <__cvt+0x7c>
 8016e44:	f8cd 900c 	str.w	r9, [sp, #12]
 8016e48:	2230      	movs	r2, #48	@ 0x30
 8016e4a:	9b03      	ldr	r3, [sp, #12]
 8016e4c:	454b      	cmp	r3, r9
 8016e4e:	d31e      	bcc.n	8016e8e <__cvt+0xc2>
 8016e50:	9b03      	ldr	r3, [sp, #12]
 8016e52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016e54:	1b5b      	subs	r3, r3, r5
 8016e56:	4628      	mov	r0, r5
 8016e58:	6013      	str	r3, [r2, #0]
 8016e5a:	b004      	add	sp, #16
 8016e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016e64:	eb00 0904 	add.w	r9, r0, r4
 8016e68:	d1e5      	bne.n	8016e36 <__cvt+0x6a>
 8016e6a:	7803      	ldrb	r3, [r0, #0]
 8016e6c:	2b30      	cmp	r3, #48	@ 0x30
 8016e6e:	d10a      	bne.n	8016e86 <__cvt+0xba>
 8016e70:	2200      	movs	r2, #0
 8016e72:	2300      	movs	r3, #0
 8016e74:	4630      	mov	r0, r6
 8016e76:	4639      	mov	r1, r7
 8016e78:	f7e9 fe56 	bl	8000b28 <__aeabi_dcmpeq>
 8016e7c:	b918      	cbnz	r0, 8016e86 <__cvt+0xba>
 8016e7e:	f1c4 0401 	rsb	r4, r4, #1
 8016e82:	f8ca 4000 	str.w	r4, [sl]
 8016e86:	f8da 3000 	ldr.w	r3, [sl]
 8016e8a:	4499      	add	r9, r3
 8016e8c:	e7d3      	b.n	8016e36 <__cvt+0x6a>
 8016e8e:	1c59      	adds	r1, r3, #1
 8016e90:	9103      	str	r1, [sp, #12]
 8016e92:	701a      	strb	r2, [r3, #0]
 8016e94:	e7d9      	b.n	8016e4a <__cvt+0x7e>

08016e96 <__exponent>:
 8016e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e98:	2900      	cmp	r1, #0
 8016e9a:	bfba      	itte	lt
 8016e9c:	4249      	neglt	r1, r1
 8016e9e:	232d      	movlt	r3, #45	@ 0x2d
 8016ea0:	232b      	movge	r3, #43	@ 0x2b
 8016ea2:	2909      	cmp	r1, #9
 8016ea4:	7002      	strb	r2, [r0, #0]
 8016ea6:	7043      	strb	r3, [r0, #1]
 8016ea8:	dd29      	ble.n	8016efe <__exponent+0x68>
 8016eaa:	f10d 0307 	add.w	r3, sp, #7
 8016eae:	461d      	mov	r5, r3
 8016eb0:	270a      	movs	r7, #10
 8016eb2:	461a      	mov	r2, r3
 8016eb4:	fbb1 f6f7 	udiv	r6, r1, r7
 8016eb8:	fb07 1416 	mls	r4, r7, r6, r1
 8016ebc:	3430      	adds	r4, #48	@ 0x30
 8016ebe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8016ec2:	460c      	mov	r4, r1
 8016ec4:	2c63      	cmp	r4, #99	@ 0x63
 8016ec6:	f103 33ff 	add.w	r3, r3, #4294967295
 8016eca:	4631      	mov	r1, r6
 8016ecc:	dcf1      	bgt.n	8016eb2 <__exponent+0x1c>
 8016ece:	3130      	adds	r1, #48	@ 0x30
 8016ed0:	1e94      	subs	r4, r2, #2
 8016ed2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016ed6:	1c41      	adds	r1, r0, #1
 8016ed8:	4623      	mov	r3, r4
 8016eda:	42ab      	cmp	r3, r5
 8016edc:	d30a      	bcc.n	8016ef4 <__exponent+0x5e>
 8016ede:	f10d 0309 	add.w	r3, sp, #9
 8016ee2:	1a9b      	subs	r3, r3, r2
 8016ee4:	42ac      	cmp	r4, r5
 8016ee6:	bf88      	it	hi
 8016ee8:	2300      	movhi	r3, #0
 8016eea:	3302      	adds	r3, #2
 8016eec:	4403      	add	r3, r0
 8016eee:	1a18      	subs	r0, r3, r0
 8016ef0:	b003      	add	sp, #12
 8016ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ef4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016ef8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8016efc:	e7ed      	b.n	8016eda <__exponent+0x44>
 8016efe:	2330      	movs	r3, #48	@ 0x30
 8016f00:	3130      	adds	r1, #48	@ 0x30
 8016f02:	7083      	strb	r3, [r0, #2]
 8016f04:	70c1      	strb	r1, [r0, #3]
 8016f06:	1d03      	adds	r3, r0, #4
 8016f08:	e7f1      	b.n	8016eee <__exponent+0x58>
	...

08016f0c <_printf_float>:
 8016f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f10:	b08d      	sub	sp, #52	@ 0x34
 8016f12:	460c      	mov	r4, r1
 8016f14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016f18:	4616      	mov	r6, r2
 8016f1a:	461f      	mov	r7, r3
 8016f1c:	4605      	mov	r5, r0
 8016f1e:	f000 fd35 	bl	801798c <_localeconv_r>
 8016f22:	6803      	ldr	r3, [r0, #0]
 8016f24:	9304      	str	r3, [sp, #16]
 8016f26:	4618      	mov	r0, r3
 8016f28:	f7e9 f9d2 	bl	80002d0 <strlen>
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f30:	f8d8 3000 	ldr.w	r3, [r8]
 8016f34:	9005      	str	r0, [sp, #20]
 8016f36:	3307      	adds	r3, #7
 8016f38:	f023 0307 	bic.w	r3, r3, #7
 8016f3c:	f103 0208 	add.w	r2, r3, #8
 8016f40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016f44:	f8d4 b000 	ldr.w	fp, [r4]
 8016f48:	f8c8 2000 	str.w	r2, [r8]
 8016f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016f50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016f54:	9307      	str	r3, [sp, #28]
 8016f56:	f8cd 8018 	str.w	r8, [sp, #24]
 8016f5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8016f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f62:	4b9c      	ldr	r3, [pc, #624]	@ (80171d4 <_printf_float+0x2c8>)
 8016f64:	f04f 32ff 	mov.w	r2, #4294967295
 8016f68:	f7e9 fe10 	bl	8000b8c <__aeabi_dcmpun>
 8016f6c:	bb70      	cbnz	r0, 8016fcc <_printf_float+0xc0>
 8016f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f72:	4b98      	ldr	r3, [pc, #608]	@ (80171d4 <_printf_float+0x2c8>)
 8016f74:	f04f 32ff 	mov.w	r2, #4294967295
 8016f78:	f7e9 fdea 	bl	8000b50 <__aeabi_dcmple>
 8016f7c:	bb30      	cbnz	r0, 8016fcc <_printf_float+0xc0>
 8016f7e:	2200      	movs	r2, #0
 8016f80:	2300      	movs	r3, #0
 8016f82:	4640      	mov	r0, r8
 8016f84:	4649      	mov	r1, r9
 8016f86:	f7e9 fdd9 	bl	8000b3c <__aeabi_dcmplt>
 8016f8a:	b110      	cbz	r0, 8016f92 <_printf_float+0x86>
 8016f8c:	232d      	movs	r3, #45	@ 0x2d
 8016f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016f92:	4a91      	ldr	r2, [pc, #580]	@ (80171d8 <_printf_float+0x2cc>)
 8016f94:	4b91      	ldr	r3, [pc, #580]	@ (80171dc <_printf_float+0x2d0>)
 8016f96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016f9a:	bf94      	ite	ls
 8016f9c:	4690      	movls	r8, r2
 8016f9e:	4698      	movhi	r8, r3
 8016fa0:	2303      	movs	r3, #3
 8016fa2:	6123      	str	r3, [r4, #16]
 8016fa4:	f02b 0304 	bic.w	r3, fp, #4
 8016fa8:	6023      	str	r3, [r4, #0]
 8016faa:	f04f 0900 	mov.w	r9, #0
 8016fae:	9700      	str	r7, [sp, #0]
 8016fb0:	4633      	mov	r3, r6
 8016fb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016fb4:	4621      	mov	r1, r4
 8016fb6:	4628      	mov	r0, r5
 8016fb8:	f000 f9d2 	bl	8017360 <_printf_common>
 8016fbc:	3001      	adds	r0, #1
 8016fbe:	f040 808d 	bne.w	80170dc <_printf_float+0x1d0>
 8016fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fc6:	b00d      	add	sp, #52	@ 0x34
 8016fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fcc:	4642      	mov	r2, r8
 8016fce:	464b      	mov	r3, r9
 8016fd0:	4640      	mov	r0, r8
 8016fd2:	4649      	mov	r1, r9
 8016fd4:	f7e9 fdda 	bl	8000b8c <__aeabi_dcmpun>
 8016fd8:	b140      	cbz	r0, 8016fec <_printf_float+0xe0>
 8016fda:	464b      	mov	r3, r9
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	bfbc      	itt	lt
 8016fe0:	232d      	movlt	r3, #45	@ 0x2d
 8016fe2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80171e0 <_printf_float+0x2d4>)
 8016fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80171e4 <_printf_float+0x2d8>)
 8016fea:	e7d4      	b.n	8016f96 <_printf_float+0x8a>
 8016fec:	6863      	ldr	r3, [r4, #4]
 8016fee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8016ff2:	9206      	str	r2, [sp, #24]
 8016ff4:	1c5a      	adds	r2, r3, #1
 8016ff6:	d13b      	bne.n	8017070 <_printf_float+0x164>
 8016ff8:	2306      	movs	r3, #6
 8016ffa:	6063      	str	r3, [r4, #4]
 8016ffc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8017000:	2300      	movs	r3, #0
 8017002:	6022      	str	r2, [r4, #0]
 8017004:	9303      	str	r3, [sp, #12]
 8017006:	ab0a      	add	r3, sp, #40	@ 0x28
 8017008:	e9cd a301 	strd	sl, r3, [sp, #4]
 801700c:	ab09      	add	r3, sp, #36	@ 0x24
 801700e:	9300      	str	r3, [sp, #0]
 8017010:	6861      	ldr	r1, [r4, #4]
 8017012:	ec49 8b10 	vmov	d0, r8, r9
 8017016:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801701a:	4628      	mov	r0, r5
 801701c:	f7ff fed6 	bl	8016dcc <__cvt>
 8017020:	9b06      	ldr	r3, [sp, #24]
 8017022:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017024:	2b47      	cmp	r3, #71	@ 0x47
 8017026:	4680      	mov	r8, r0
 8017028:	d129      	bne.n	801707e <_printf_float+0x172>
 801702a:	1cc8      	adds	r0, r1, #3
 801702c:	db02      	blt.n	8017034 <_printf_float+0x128>
 801702e:	6863      	ldr	r3, [r4, #4]
 8017030:	4299      	cmp	r1, r3
 8017032:	dd41      	ble.n	80170b8 <_printf_float+0x1ac>
 8017034:	f1aa 0a02 	sub.w	sl, sl, #2
 8017038:	fa5f fa8a 	uxtb.w	sl, sl
 801703c:	3901      	subs	r1, #1
 801703e:	4652      	mov	r2, sl
 8017040:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017044:	9109      	str	r1, [sp, #36]	@ 0x24
 8017046:	f7ff ff26 	bl	8016e96 <__exponent>
 801704a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801704c:	1813      	adds	r3, r2, r0
 801704e:	2a01      	cmp	r2, #1
 8017050:	4681      	mov	r9, r0
 8017052:	6123      	str	r3, [r4, #16]
 8017054:	dc02      	bgt.n	801705c <_printf_float+0x150>
 8017056:	6822      	ldr	r2, [r4, #0]
 8017058:	07d2      	lsls	r2, r2, #31
 801705a:	d501      	bpl.n	8017060 <_printf_float+0x154>
 801705c:	3301      	adds	r3, #1
 801705e:	6123      	str	r3, [r4, #16]
 8017060:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017064:	2b00      	cmp	r3, #0
 8017066:	d0a2      	beq.n	8016fae <_printf_float+0xa2>
 8017068:	232d      	movs	r3, #45	@ 0x2d
 801706a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801706e:	e79e      	b.n	8016fae <_printf_float+0xa2>
 8017070:	9a06      	ldr	r2, [sp, #24]
 8017072:	2a47      	cmp	r2, #71	@ 0x47
 8017074:	d1c2      	bne.n	8016ffc <_printf_float+0xf0>
 8017076:	2b00      	cmp	r3, #0
 8017078:	d1c0      	bne.n	8016ffc <_printf_float+0xf0>
 801707a:	2301      	movs	r3, #1
 801707c:	e7bd      	b.n	8016ffa <_printf_float+0xee>
 801707e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017082:	d9db      	bls.n	801703c <_printf_float+0x130>
 8017084:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8017088:	d118      	bne.n	80170bc <_printf_float+0x1b0>
 801708a:	2900      	cmp	r1, #0
 801708c:	6863      	ldr	r3, [r4, #4]
 801708e:	dd0b      	ble.n	80170a8 <_printf_float+0x19c>
 8017090:	6121      	str	r1, [r4, #16]
 8017092:	b913      	cbnz	r3, 801709a <_printf_float+0x18e>
 8017094:	6822      	ldr	r2, [r4, #0]
 8017096:	07d0      	lsls	r0, r2, #31
 8017098:	d502      	bpl.n	80170a0 <_printf_float+0x194>
 801709a:	3301      	adds	r3, #1
 801709c:	440b      	add	r3, r1
 801709e:	6123      	str	r3, [r4, #16]
 80170a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80170a2:	f04f 0900 	mov.w	r9, #0
 80170a6:	e7db      	b.n	8017060 <_printf_float+0x154>
 80170a8:	b913      	cbnz	r3, 80170b0 <_printf_float+0x1a4>
 80170aa:	6822      	ldr	r2, [r4, #0]
 80170ac:	07d2      	lsls	r2, r2, #31
 80170ae:	d501      	bpl.n	80170b4 <_printf_float+0x1a8>
 80170b0:	3302      	adds	r3, #2
 80170b2:	e7f4      	b.n	801709e <_printf_float+0x192>
 80170b4:	2301      	movs	r3, #1
 80170b6:	e7f2      	b.n	801709e <_printf_float+0x192>
 80170b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80170bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170be:	4299      	cmp	r1, r3
 80170c0:	db05      	blt.n	80170ce <_printf_float+0x1c2>
 80170c2:	6823      	ldr	r3, [r4, #0]
 80170c4:	6121      	str	r1, [r4, #16]
 80170c6:	07d8      	lsls	r0, r3, #31
 80170c8:	d5ea      	bpl.n	80170a0 <_printf_float+0x194>
 80170ca:	1c4b      	adds	r3, r1, #1
 80170cc:	e7e7      	b.n	801709e <_printf_float+0x192>
 80170ce:	2900      	cmp	r1, #0
 80170d0:	bfd4      	ite	le
 80170d2:	f1c1 0202 	rsble	r2, r1, #2
 80170d6:	2201      	movgt	r2, #1
 80170d8:	4413      	add	r3, r2
 80170da:	e7e0      	b.n	801709e <_printf_float+0x192>
 80170dc:	6823      	ldr	r3, [r4, #0]
 80170de:	055a      	lsls	r2, r3, #21
 80170e0:	d407      	bmi.n	80170f2 <_printf_float+0x1e6>
 80170e2:	6923      	ldr	r3, [r4, #16]
 80170e4:	4642      	mov	r2, r8
 80170e6:	4631      	mov	r1, r6
 80170e8:	4628      	mov	r0, r5
 80170ea:	47b8      	blx	r7
 80170ec:	3001      	adds	r0, #1
 80170ee:	d12b      	bne.n	8017148 <_printf_float+0x23c>
 80170f0:	e767      	b.n	8016fc2 <_printf_float+0xb6>
 80170f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80170f6:	f240 80dd 	bls.w	80172b4 <_printf_float+0x3a8>
 80170fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80170fe:	2200      	movs	r2, #0
 8017100:	2300      	movs	r3, #0
 8017102:	f7e9 fd11 	bl	8000b28 <__aeabi_dcmpeq>
 8017106:	2800      	cmp	r0, #0
 8017108:	d033      	beq.n	8017172 <_printf_float+0x266>
 801710a:	4a37      	ldr	r2, [pc, #220]	@ (80171e8 <_printf_float+0x2dc>)
 801710c:	2301      	movs	r3, #1
 801710e:	4631      	mov	r1, r6
 8017110:	4628      	mov	r0, r5
 8017112:	47b8      	blx	r7
 8017114:	3001      	adds	r0, #1
 8017116:	f43f af54 	beq.w	8016fc2 <_printf_float+0xb6>
 801711a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801711e:	4543      	cmp	r3, r8
 8017120:	db02      	blt.n	8017128 <_printf_float+0x21c>
 8017122:	6823      	ldr	r3, [r4, #0]
 8017124:	07d8      	lsls	r0, r3, #31
 8017126:	d50f      	bpl.n	8017148 <_printf_float+0x23c>
 8017128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801712c:	4631      	mov	r1, r6
 801712e:	4628      	mov	r0, r5
 8017130:	47b8      	blx	r7
 8017132:	3001      	adds	r0, #1
 8017134:	f43f af45 	beq.w	8016fc2 <_printf_float+0xb6>
 8017138:	f04f 0900 	mov.w	r9, #0
 801713c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017140:	f104 0a1a 	add.w	sl, r4, #26
 8017144:	45c8      	cmp	r8, r9
 8017146:	dc09      	bgt.n	801715c <_printf_float+0x250>
 8017148:	6823      	ldr	r3, [r4, #0]
 801714a:	079b      	lsls	r3, r3, #30
 801714c:	f100 8103 	bmi.w	8017356 <_printf_float+0x44a>
 8017150:	68e0      	ldr	r0, [r4, #12]
 8017152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017154:	4298      	cmp	r0, r3
 8017156:	bfb8      	it	lt
 8017158:	4618      	movlt	r0, r3
 801715a:	e734      	b.n	8016fc6 <_printf_float+0xba>
 801715c:	2301      	movs	r3, #1
 801715e:	4652      	mov	r2, sl
 8017160:	4631      	mov	r1, r6
 8017162:	4628      	mov	r0, r5
 8017164:	47b8      	blx	r7
 8017166:	3001      	adds	r0, #1
 8017168:	f43f af2b 	beq.w	8016fc2 <_printf_float+0xb6>
 801716c:	f109 0901 	add.w	r9, r9, #1
 8017170:	e7e8      	b.n	8017144 <_printf_float+0x238>
 8017172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017174:	2b00      	cmp	r3, #0
 8017176:	dc39      	bgt.n	80171ec <_printf_float+0x2e0>
 8017178:	4a1b      	ldr	r2, [pc, #108]	@ (80171e8 <_printf_float+0x2dc>)
 801717a:	2301      	movs	r3, #1
 801717c:	4631      	mov	r1, r6
 801717e:	4628      	mov	r0, r5
 8017180:	47b8      	blx	r7
 8017182:	3001      	adds	r0, #1
 8017184:	f43f af1d 	beq.w	8016fc2 <_printf_float+0xb6>
 8017188:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801718c:	ea59 0303 	orrs.w	r3, r9, r3
 8017190:	d102      	bne.n	8017198 <_printf_float+0x28c>
 8017192:	6823      	ldr	r3, [r4, #0]
 8017194:	07d9      	lsls	r1, r3, #31
 8017196:	d5d7      	bpl.n	8017148 <_printf_float+0x23c>
 8017198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801719c:	4631      	mov	r1, r6
 801719e:	4628      	mov	r0, r5
 80171a0:	47b8      	blx	r7
 80171a2:	3001      	adds	r0, #1
 80171a4:	f43f af0d 	beq.w	8016fc2 <_printf_float+0xb6>
 80171a8:	f04f 0a00 	mov.w	sl, #0
 80171ac:	f104 0b1a 	add.w	fp, r4, #26
 80171b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171b2:	425b      	negs	r3, r3
 80171b4:	4553      	cmp	r3, sl
 80171b6:	dc01      	bgt.n	80171bc <_printf_float+0x2b0>
 80171b8:	464b      	mov	r3, r9
 80171ba:	e793      	b.n	80170e4 <_printf_float+0x1d8>
 80171bc:	2301      	movs	r3, #1
 80171be:	465a      	mov	r2, fp
 80171c0:	4631      	mov	r1, r6
 80171c2:	4628      	mov	r0, r5
 80171c4:	47b8      	blx	r7
 80171c6:	3001      	adds	r0, #1
 80171c8:	f43f aefb 	beq.w	8016fc2 <_printf_float+0xb6>
 80171cc:	f10a 0a01 	add.w	sl, sl, #1
 80171d0:	e7ee      	b.n	80171b0 <_printf_float+0x2a4>
 80171d2:	bf00      	nop
 80171d4:	7fefffff 	.word	0x7fefffff
 80171d8:	08020602 	.word	0x08020602
 80171dc:	08020606 	.word	0x08020606
 80171e0:	0802060a 	.word	0x0802060a
 80171e4:	0802060e 	.word	0x0802060e
 80171e8:	08020612 	.word	0x08020612
 80171ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80171ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80171f2:	4553      	cmp	r3, sl
 80171f4:	bfa8      	it	ge
 80171f6:	4653      	movge	r3, sl
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	4699      	mov	r9, r3
 80171fc:	dc36      	bgt.n	801726c <_printf_float+0x360>
 80171fe:	f04f 0b00 	mov.w	fp, #0
 8017202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017206:	f104 021a 	add.w	r2, r4, #26
 801720a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801720c:	9306      	str	r3, [sp, #24]
 801720e:	eba3 0309 	sub.w	r3, r3, r9
 8017212:	455b      	cmp	r3, fp
 8017214:	dc31      	bgt.n	801727a <_printf_float+0x36e>
 8017216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017218:	459a      	cmp	sl, r3
 801721a:	dc3a      	bgt.n	8017292 <_printf_float+0x386>
 801721c:	6823      	ldr	r3, [r4, #0]
 801721e:	07da      	lsls	r2, r3, #31
 8017220:	d437      	bmi.n	8017292 <_printf_float+0x386>
 8017222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017224:	ebaa 0903 	sub.w	r9, sl, r3
 8017228:	9b06      	ldr	r3, [sp, #24]
 801722a:	ebaa 0303 	sub.w	r3, sl, r3
 801722e:	4599      	cmp	r9, r3
 8017230:	bfa8      	it	ge
 8017232:	4699      	movge	r9, r3
 8017234:	f1b9 0f00 	cmp.w	r9, #0
 8017238:	dc33      	bgt.n	80172a2 <_printf_float+0x396>
 801723a:	f04f 0800 	mov.w	r8, #0
 801723e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017242:	f104 0b1a 	add.w	fp, r4, #26
 8017246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017248:	ebaa 0303 	sub.w	r3, sl, r3
 801724c:	eba3 0309 	sub.w	r3, r3, r9
 8017250:	4543      	cmp	r3, r8
 8017252:	f77f af79 	ble.w	8017148 <_printf_float+0x23c>
 8017256:	2301      	movs	r3, #1
 8017258:	465a      	mov	r2, fp
 801725a:	4631      	mov	r1, r6
 801725c:	4628      	mov	r0, r5
 801725e:	47b8      	blx	r7
 8017260:	3001      	adds	r0, #1
 8017262:	f43f aeae 	beq.w	8016fc2 <_printf_float+0xb6>
 8017266:	f108 0801 	add.w	r8, r8, #1
 801726a:	e7ec      	b.n	8017246 <_printf_float+0x33a>
 801726c:	4642      	mov	r2, r8
 801726e:	4631      	mov	r1, r6
 8017270:	4628      	mov	r0, r5
 8017272:	47b8      	blx	r7
 8017274:	3001      	adds	r0, #1
 8017276:	d1c2      	bne.n	80171fe <_printf_float+0x2f2>
 8017278:	e6a3      	b.n	8016fc2 <_printf_float+0xb6>
 801727a:	2301      	movs	r3, #1
 801727c:	4631      	mov	r1, r6
 801727e:	4628      	mov	r0, r5
 8017280:	9206      	str	r2, [sp, #24]
 8017282:	47b8      	blx	r7
 8017284:	3001      	adds	r0, #1
 8017286:	f43f ae9c 	beq.w	8016fc2 <_printf_float+0xb6>
 801728a:	9a06      	ldr	r2, [sp, #24]
 801728c:	f10b 0b01 	add.w	fp, fp, #1
 8017290:	e7bb      	b.n	801720a <_printf_float+0x2fe>
 8017292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017296:	4631      	mov	r1, r6
 8017298:	4628      	mov	r0, r5
 801729a:	47b8      	blx	r7
 801729c:	3001      	adds	r0, #1
 801729e:	d1c0      	bne.n	8017222 <_printf_float+0x316>
 80172a0:	e68f      	b.n	8016fc2 <_printf_float+0xb6>
 80172a2:	9a06      	ldr	r2, [sp, #24]
 80172a4:	464b      	mov	r3, r9
 80172a6:	4442      	add	r2, r8
 80172a8:	4631      	mov	r1, r6
 80172aa:	4628      	mov	r0, r5
 80172ac:	47b8      	blx	r7
 80172ae:	3001      	adds	r0, #1
 80172b0:	d1c3      	bne.n	801723a <_printf_float+0x32e>
 80172b2:	e686      	b.n	8016fc2 <_printf_float+0xb6>
 80172b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80172b8:	f1ba 0f01 	cmp.w	sl, #1
 80172bc:	dc01      	bgt.n	80172c2 <_printf_float+0x3b6>
 80172be:	07db      	lsls	r3, r3, #31
 80172c0:	d536      	bpl.n	8017330 <_printf_float+0x424>
 80172c2:	2301      	movs	r3, #1
 80172c4:	4642      	mov	r2, r8
 80172c6:	4631      	mov	r1, r6
 80172c8:	4628      	mov	r0, r5
 80172ca:	47b8      	blx	r7
 80172cc:	3001      	adds	r0, #1
 80172ce:	f43f ae78 	beq.w	8016fc2 <_printf_float+0xb6>
 80172d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80172d6:	4631      	mov	r1, r6
 80172d8:	4628      	mov	r0, r5
 80172da:	47b8      	blx	r7
 80172dc:	3001      	adds	r0, #1
 80172de:	f43f ae70 	beq.w	8016fc2 <_printf_float+0xb6>
 80172e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80172e6:	2200      	movs	r2, #0
 80172e8:	2300      	movs	r3, #0
 80172ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80172ee:	f7e9 fc1b 	bl	8000b28 <__aeabi_dcmpeq>
 80172f2:	b9c0      	cbnz	r0, 8017326 <_printf_float+0x41a>
 80172f4:	4653      	mov	r3, sl
 80172f6:	f108 0201 	add.w	r2, r8, #1
 80172fa:	4631      	mov	r1, r6
 80172fc:	4628      	mov	r0, r5
 80172fe:	47b8      	blx	r7
 8017300:	3001      	adds	r0, #1
 8017302:	d10c      	bne.n	801731e <_printf_float+0x412>
 8017304:	e65d      	b.n	8016fc2 <_printf_float+0xb6>
 8017306:	2301      	movs	r3, #1
 8017308:	465a      	mov	r2, fp
 801730a:	4631      	mov	r1, r6
 801730c:	4628      	mov	r0, r5
 801730e:	47b8      	blx	r7
 8017310:	3001      	adds	r0, #1
 8017312:	f43f ae56 	beq.w	8016fc2 <_printf_float+0xb6>
 8017316:	f108 0801 	add.w	r8, r8, #1
 801731a:	45d0      	cmp	r8, sl
 801731c:	dbf3      	blt.n	8017306 <_printf_float+0x3fa>
 801731e:	464b      	mov	r3, r9
 8017320:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017324:	e6df      	b.n	80170e6 <_printf_float+0x1da>
 8017326:	f04f 0800 	mov.w	r8, #0
 801732a:	f104 0b1a 	add.w	fp, r4, #26
 801732e:	e7f4      	b.n	801731a <_printf_float+0x40e>
 8017330:	2301      	movs	r3, #1
 8017332:	4642      	mov	r2, r8
 8017334:	e7e1      	b.n	80172fa <_printf_float+0x3ee>
 8017336:	2301      	movs	r3, #1
 8017338:	464a      	mov	r2, r9
 801733a:	4631      	mov	r1, r6
 801733c:	4628      	mov	r0, r5
 801733e:	47b8      	blx	r7
 8017340:	3001      	adds	r0, #1
 8017342:	f43f ae3e 	beq.w	8016fc2 <_printf_float+0xb6>
 8017346:	f108 0801 	add.w	r8, r8, #1
 801734a:	68e3      	ldr	r3, [r4, #12]
 801734c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801734e:	1a5b      	subs	r3, r3, r1
 8017350:	4543      	cmp	r3, r8
 8017352:	dcf0      	bgt.n	8017336 <_printf_float+0x42a>
 8017354:	e6fc      	b.n	8017150 <_printf_float+0x244>
 8017356:	f04f 0800 	mov.w	r8, #0
 801735a:	f104 0919 	add.w	r9, r4, #25
 801735e:	e7f4      	b.n	801734a <_printf_float+0x43e>

08017360 <_printf_common>:
 8017360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017364:	4616      	mov	r6, r2
 8017366:	4698      	mov	r8, r3
 8017368:	688a      	ldr	r2, [r1, #8]
 801736a:	690b      	ldr	r3, [r1, #16]
 801736c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017370:	4293      	cmp	r3, r2
 8017372:	bfb8      	it	lt
 8017374:	4613      	movlt	r3, r2
 8017376:	6033      	str	r3, [r6, #0]
 8017378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801737c:	4607      	mov	r7, r0
 801737e:	460c      	mov	r4, r1
 8017380:	b10a      	cbz	r2, 8017386 <_printf_common+0x26>
 8017382:	3301      	adds	r3, #1
 8017384:	6033      	str	r3, [r6, #0]
 8017386:	6823      	ldr	r3, [r4, #0]
 8017388:	0699      	lsls	r1, r3, #26
 801738a:	bf42      	ittt	mi
 801738c:	6833      	ldrmi	r3, [r6, #0]
 801738e:	3302      	addmi	r3, #2
 8017390:	6033      	strmi	r3, [r6, #0]
 8017392:	6825      	ldr	r5, [r4, #0]
 8017394:	f015 0506 	ands.w	r5, r5, #6
 8017398:	d106      	bne.n	80173a8 <_printf_common+0x48>
 801739a:	f104 0a19 	add.w	sl, r4, #25
 801739e:	68e3      	ldr	r3, [r4, #12]
 80173a0:	6832      	ldr	r2, [r6, #0]
 80173a2:	1a9b      	subs	r3, r3, r2
 80173a4:	42ab      	cmp	r3, r5
 80173a6:	dc26      	bgt.n	80173f6 <_printf_common+0x96>
 80173a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80173ac:	6822      	ldr	r2, [r4, #0]
 80173ae:	3b00      	subs	r3, #0
 80173b0:	bf18      	it	ne
 80173b2:	2301      	movne	r3, #1
 80173b4:	0692      	lsls	r2, r2, #26
 80173b6:	d42b      	bmi.n	8017410 <_printf_common+0xb0>
 80173b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80173bc:	4641      	mov	r1, r8
 80173be:	4638      	mov	r0, r7
 80173c0:	47c8      	blx	r9
 80173c2:	3001      	adds	r0, #1
 80173c4:	d01e      	beq.n	8017404 <_printf_common+0xa4>
 80173c6:	6823      	ldr	r3, [r4, #0]
 80173c8:	6922      	ldr	r2, [r4, #16]
 80173ca:	f003 0306 	and.w	r3, r3, #6
 80173ce:	2b04      	cmp	r3, #4
 80173d0:	bf02      	ittt	eq
 80173d2:	68e5      	ldreq	r5, [r4, #12]
 80173d4:	6833      	ldreq	r3, [r6, #0]
 80173d6:	1aed      	subeq	r5, r5, r3
 80173d8:	68a3      	ldr	r3, [r4, #8]
 80173da:	bf0c      	ite	eq
 80173dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173e0:	2500      	movne	r5, #0
 80173e2:	4293      	cmp	r3, r2
 80173e4:	bfc4      	itt	gt
 80173e6:	1a9b      	subgt	r3, r3, r2
 80173e8:	18ed      	addgt	r5, r5, r3
 80173ea:	2600      	movs	r6, #0
 80173ec:	341a      	adds	r4, #26
 80173ee:	42b5      	cmp	r5, r6
 80173f0:	d11a      	bne.n	8017428 <_printf_common+0xc8>
 80173f2:	2000      	movs	r0, #0
 80173f4:	e008      	b.n	8017408 <_printf_common+0xa8>
 80173f6:	2301      	movs	r3, #1
 80173f8:	4652      	mov	r2, sl
 80173fa:	4641      	mov	r1, r8
 80173fc:	4638      	mov	r0, r7
 80173fe:	47c8      	blx	r9
 8017400:	3001      	adds	r0, #1
 8017402:	d103      	bne.n	801740c <_printf_common+0xac>
 8017404:	f04f 30ff 	mov.w	r0, #4294967295
 8017408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801740c:	3501      	adds	r5, #1
 801740e:	e7c6      	b.n	801739e <_printf_common+0x3e>
 8017410:	18e1      	adds	r1, r4, r3
 8017412:	1c5a      	adds	r2, r3, #1
 8017414:	2030      	movs	r0, #48	@ 0x30
 8017416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801741a:	4422      	add	r2, r4
 801741c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017424:	3302      	adds	r3, #2
 8017426:	e7c7      	b.n	80173b8 <_printf_common+0x58>
 8017428:	2301      	movs	r3, #1
 801742a:	4622      	mov	r2, r4
 801742c:	4641      	mov	r1, r8
 801742e:	4638      	mov	r0, r7
 8017430:	47c8      	blx	r9
 8017432:	3001      	adds	r0, #1
 8017434:	d0e6      	beq.n	8017404 <_printf_common+0xa4>
 8017436:	3601      	adds	r6, #1
 8017438:	e7d9      	b.n	80173ee <_printf_common+0x8e>
	...

0801743c <_printf_i>:
 801743c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017440:	7e0f      	ldrb	r7, [r1, #24]
 8017442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017444:	2f78      	cmp	r7, #120	@ 0x78
 8017446:	4691      	mov	r9, r2
 8017448:	4680      	mov	r8, r0
 801744a:	460c      	mov	r4, r1
 801744c:	469a      	mov	sl, r3
 801744e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017452:	d807      	bhi.n	8017464 <_printf_i+0x28>
 8017454:	2f62      	cmp	r7, #98	@ 0x62
 8017456:	d80a      	bhi.n	801746e <_printf_i+0x32>
 8017458:	2f00      	cmp	r7, #0
 801745a:	f000 80d2 	beq.w	8017602 <_printf_i+0x1c6>
 801745e:	2f58      	cmp	r7, #88	@ 0x58
 8017460:	f000 80b9 	beq.w	80175d6 <_printf_i+0x19a>
 8017464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801746c:	e03a      	b.n	80174e4 <_printf_i+0xa8>
 801746e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017472:	2b15      	cmp	r3, #21
 8017474:	d8f6      	bhi.n	8017464 <_printf_i+0x28>
 8017476:	a101      	add	r1, pc, #4	@ (adr r1, 801747c <_printf_i+0x40>)
 8017478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801747c:	080174d5 	.word	0x080174d5
 8017480:	080174e9 	.word	0x080174e9
 8017484:	08017465 	.word	0x08017465
 8017488:	08017465 	.word	0x08017465
 801748c:	08017465 	.word	0x08017465
 8017490:	08017465 	.word	0x08017465
 8017494:	080174e9 	.word	0x080174e9
 8017498:	08017465 	.word	0x08017465
 801749c:	08017465 	.word	0x08017465
 80174a0:	08017465 	.word	0x08017465
 80174a4:	08017465 	.word	0x08017465
 80174a8:	080175e9 	.word	0x080175e9
 80174ac:	08017513 	.word	0x08017513
 80174b0:	080175a3 	.word	0x080175a3
 80174b4:	08017465 	.word	0x08017465
 80174b8:	08017465 	.word	0x08017465
 80174bc:	0801760b 	.word	0x0801760b
 80174c0:	08017465 	.word	0x08017465
 80174c4:	08017513 	.word	0x08017513
 80174c8:	08017465 	.word	0x08017465
 80174cc:	08017465 	.word	0x08017465
 80174d0:	080175ab 	.word	0x080175ab
 80174d4:	6833      	ldr	r3, [r6, #0]
 80174d6:	1d1a      	adds	r2, r3, #4
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	6032      	str	r2, [r6, #0]
 80174dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80174e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80174e4:	2301      	movs	r3, #1
 80174e6:	e09d      	b.n	8017624 <_printf_i+0x1e8>
 80174e8:	6833      	ldr	r3, [r6, #0]
 80174ea:	6820      	ldr	r0, [r4, #0]
 80174ec:	1d19      	adds	r1, r3, #4
 80174ee:	6031      	str	r1, [r6, #0]
 80174f0:	0606      	lsls	r6, r0, #24
 80174f2:	d501      	bpl.n	80174f8 <_printf_i+0xbc>
 80174f4:	681d      	ldr	r5, [r3, #0]
 80174f6:	e003      	b.n	8017500 <_printf_i+0xc4>
 80174f8:	0645      	lsls	r5, r0, #25
 80174fa:	d5fb      	bpl.n	80174f4 <_printf_i+0xb8>
 80174fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017500:	2d00      	cmp	r5, #0
 8017502:	da03      	bge.n	801750c <_printf_i+0xd0>
 8017504:	232d      	movs	r3, #45	@ 0x2d
 8017506:	426d      	negs	r5, r5
 8017508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801750c:	4859      	ldr	r0, [pc, #356]	@ (8017674 <_printf_i+0x238>)
 801750e:	230a      	movs	r3, #10
 8017510:	e011      	b.n	8017536 <_printf_i+0xfa>
 8017512:	6821      	ldr	r1, [r4, #0]
 8017514:	6833      	ldr	r3, [r6, #0]
 8017516:	0608      	lsls	r0, r1, #24
 8017518:	f853 5b04 	ldr.w	r5, [r3], #4
 801751c:	d402      	bmi.n	8017524 <_printf_i+0xe8>
 801751e:	0649      	lsls	r1, r1, #25
 8017520:	bf48      	it	mi
 8017522:	b2ad      	uxthmi	r5, r5
 8017524:	2f6f      	cmp	r7, #111	@ 0x6f
 8017526:	4853      	ldr	r0, [pc, #332]	@ (8017674 <_printf_i+0x238>)
 8017528:	6033      	str	r3, [r6, #0]
 801752a:	bf14      	ite	ne
 801752c:	230a      	movne	r3, #10
 801752e:	2308      	moveq	r3, #8
 8017530:	2100      	movs	r1, #0
 8017532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017536:	6866      	ldr	r6, [r4, #4]
 8017538:	60a6      	str	r6, [r4, #8]
 801753a:	2e00      	cmp	r6, #0
 801753c:	bfa2      	ittt	ge
 801753e:	6821      	ldrge	r1, [r4, #0]
 8017540:	f021 0104 	bicge.w	r1, r1, #4
 8017544:	6021      	strge	r1, [r4, #0]
 8017546:	b90d      	cbnz	r5, 801754c <_printf_i+0x110>
 8017548:	2e00      	cmp	r6, #0
 801754a:	d04b      	beq.n	80175e4 <_printf_i+0x1a8>
 801754c:	4616      	mov	r6, r2
 801754e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017552:	fb03 5711 	mls	r7, r3, r1, r5
 8017556:	5dc7      	ldrb	r7, [r0, r7]
 8017558:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801755c:	462f      	mov	r7, r5
 801755e:	42bb      	cmp	r3, r7
 8017560:	460d      	mov	r5, r1
 8017562:	d9f4      	bls.n	801754e <_printf_i+0x112>
 8017564:	2b08      	cmp	r3, #8
 8017566:	d10b      	bne.n	8017580 <_printf_i+0x144>
 8017568:	6823      	ldr	r3, [r4, #0]
 801756a:	07df      	lsls	r7, r3, #31
 801756c:	d508      	bpl.n	8017580 <_printf_i+0x144>
 801756e:	6923      	ldr	r3, [r4, #16]
 8017570:	6861      	ldr	r1, [r4, #4]
 8017572:	4299      	cmp	r1, r3
 8017574:	bfde      	ittt	le
 8017576:	2330      	movle	r3, #48	@ 0x30
 8017578:	f806 3c01 	strble.w	r3, [r6, #-1]
 801757c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017580:	1b92      	subs	r2, r2, r6
 8017582:	6122      	str	r2, [r4, #16]
 8017584:	f8cd a000 	str.w	sl, [sp]
 8017588:	464b      	mov	r3, r9
 801758a:	aa03      	add	r2, sp, #12
 801758c:	4621      	mov	r1, r4
 801758e:	4640      	mov	r0, r8
 8017590:	f7ff fee6 	bl	8017360 <_printf_common>
 8017594:	3001      	adds	r0, #1
 8017596:	d14a      	bne.n	801762e <_printf_i+0x1f2>
 8017598:	f04f 30ff 	mov.w	r0, #4294967295
 801759c:	b004      	add	sp, #16
 801759e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175a2:	6823      	ldr	r3, [r4, #0]
 80175a4:	f043 0320 	orr.w	r3, r3, #32
 80175a8:	6023      	str	r3, [r4, #0]
 80175aa:	4833      	ldr	r0, [pc, #204]	@ (8017678 <_printf_i+0x23c>)
 80175ac:	2778      	movs	r7, #120	@ 0x78
 80175ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80175b2:	6823      	ldr	r3, [r4, #0]
 80175b4:	6831      	ldr	r1, [r6, #0]
 80175b6:	061f      	lsls	r7, r3, #24
 80175b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80175bc:	d402      	bmi.n	80175c4 <_printf_i+0x188>
 80175be:	065f      	lsls	r7, r3, #25
 80175c0:	bf48      	it	mi
 80175c2:	b2ad      	uxthmi	r5, r5
 80175c4:	6031      	str	r1, [r6, #0]
 80175c6:	07d9      	lsls	r1, r3, #31
 80175c8:	bf44      	itt	mi
 80175ca:	f043 0320 	orrmi.w	r3, r3, #32
 80175ce:	6023      	strmi	r3, [r4, #0]
 80175d0:	b11d      	cbz	r5, 80175da <_printf_i+0x19e>
 80175d2:	2310      	movs	r3, #16
 80175d4:	e7ac      	b.n	8017530 <_printf_i+0xf4>
 80175d6:	4827      	ldr	r0, [pc, #156]	@ (8017674 <_printf_i+0x238>)
 80175d8:	e7e9      	b.n	80175ae <_printf_i+0x172>
 80175da:	6823      	ldr	r3, [r4, #0]
 80175dc:	f023 0320 	bic.w	r3, r3, #32
 80175e0:	6023      	str	r3, [r4, #0]
 80175e2:	e7f6      	b.n	80175d2 <_printf_i+0x196>
 80175e4:	4616      	mov	r6, r2
 80175e6:	e7bd      	b.n	8017564 <_printf_i+0x128>
 80175e8:	6833      	ldr	r3, [r6, #0]
 80175ea:	6825      	ldr	r5, [r4, #0]
 80175ec:	6961      	ldr	r1, [r4, #20]
 80175ee:	1d18      	adds	r0, r3, #4
 80175f0:	6030      	str	r0, [r6, #0]
 80175f2:	062e      	lsls	r6, r5, #24
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	d501      	bpl.n	80175fc <_printf_i+0x1c0>
 80175f8:	6019      	str	r1, [r3, #0]
 80175fa:	e002      	b.n	8017602 <_printf_i+0x1c6>
 80175fc:	0668      	lsls	r0, r5, #25
 80175fe:	d5fb      	bpl.n	80175f8 <_printf_i+0x1bc>
 8017600:	8019      	strh	r1, [r3, #0]
 8017602:	2300      	movs	r3, #0
 8017604:	6123      	str	r3, [r4, #16]
 8017606:	4616      	mov	r6, r2
 8017608:	e7bc      	b.n	8017584 <_printf_i+0x148>
 801760a:	6833      	ldr	r3, [r6, #0]
 801760c:	1d1a      	adds	r2, r3, #4
 801760e:	6032      	str	r2, [r6, #0]
 8017610:	681e      	ldr	r6, [r3, #0]
 8017612:	6862      	ldr	r2, [r4, #4]
 8017614:	2100      	movs	r1, #0
 8017616:	4630      	mov	r0, r6
 8017618:	f7e8 fe0a 	bl	8000230 <memchr>
 801761c:	b108      	cbz	r0, 8017622 <_printf_i+0x1e6>
 801761e:	1b80      	subs	r0, r0, r6
 8017620:	6060      	str	r0, [r4, #4]
 8017622:	6863      	ldr	r3, [r4, #4]
 8017624:	6123      	str	r3, [r4, #16]
 8017626:	2300      	movs	r3, #0
 8017628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801762c:	e7aa      	b.n	8017584 <_printf_i+0x148>
 801762e:	6923      	ldr	r3, [r4, #16]
 8017630:	4632      	mov	r2, r6
 8017632:	4649      	mov	r1, r9
 8017634:	4640      	mov	r0, r8
 8017636:	47d0      	blx	sl
 8017638:	3001      	adds	r0, #1
 801763a:	d0ad      	beq.n	8017598 <_printf_i+0x15c>
 801763c:	6823      	ldr	r3, [r4, #0]
 801763e:	079b      	lsls	r3, r3, #30
 8017640:	d413      	bmi.n	801766a <_printf_i+0x22e>
 8017642:	68e0      	ldr	r0, [r4, #12]
 8017644:	9b03      	ldr	r3, [sp, #12]
 8017646:	4298      	cmp	r0, r3
 8017648:	bfb8      	it	lt
 801764a:	4618      	movlt	r0, r3
 801764c:	e7a6      	b.n	801759c <_printf_i+0x160>
 801764e:	2301      	movs	r3, #1
 8017650:	4632      	mov	r2, r6
 8017652:	4649      	mov	r1, r9
 8017654:	4640      	mov	r0, r8
 8017656:	47d0      	blx	sl
 8017658:	3001      	adds	r0, #1
 801765a:	d09d      	beq.n	8017598 <_printf_i+0x15c>
 801765c:	3501      	adds	r5, #1
 801765e:	68e3      	ldr	r3, [r4, #12]
 8017660:	9903      	ldr	r1, [sp, #12]
 8017662:	1a5b      	subs	r3, r3, r1
 8017664:	42ab      	cmp	r3, r5
 8017666:	dcf2      	bgt.n	801764e <_printf_i+0x212>
 8017668:	e7eb      	b.n	8017642 <_printf_i+0x206>
 801766a:	2500      	movs	r5, #0
 801766c:	f104 0619 	add.w	r6, r4, #25
 8017670:	e7f5      	b.n	801765e <_printf_i+0x222>
 8017672:	bf00      	nop
 8017674:	08020614 	.word	0x08020614
 8017678:	08020625 	.word	0x08020625

0801767c <std>:
 801767c:	2300      	movs	r3, #0
 801767e:	b510      	push	{r4, lr}
 8017680:	4604      	mov	r4, r0
 8017682:	e9c0 3300 	strd	r3, r3, [r0]
 8017686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801768a:	6083      	str	r3, [r0, #8]
 801768c:	8181      	strh	r1, [r0, #12]
 801768e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017690:	81c2      	strh	r2, [r0, #14]
 8017692:	6183      	str	r3, [r0, #24]
 8017694:	4619      	mov	r1, r3
 8017696:	2208      	movs	r2, #8
 8017698:	305c      	adds	r0, #92	@ 0x5c
 801769a:	f000 f950 	bl	801793e <memset>
 801769e:	4b0d      	ldr	r3, [pc, #52]	@ (80176d4 <std+0x58>)
 80176a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80176a2:	4b0d      	ldr	r3, [pc, #52]	@ (80176d8 <std+0x5c>)
 80176a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80176a6:	4b0d      	ldr	r3, [pc, #52]	@ (80176dc <std+0x60>)
 80176a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80176aa:	4b0d      	ldr	r3, [pc, #52]	@ (80176e0 <std+0x64>)
 80176ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80176ae:	4b0d      	ldr	r3, [pc, #52]	@ (80176e4 <std+0x68>)
 80176b0:	6224      	str	r4, [r4, #32]
 80176b2:	429c      	cmp	r4, r3
 80176b4:	d006      	beq.n	80176c4 <std+0x48>
 80176b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80176ba:	4294      	cmp	r4, r2
 80176bc:	d002      	beq.n	80176c4 <std+0x48>
 80176be:	33d0      	adds	r3, #208	@ 0xd0
 80176c0:	429c      	cmp	r4, r3
 80176c2:	d105      	bne.n	80176d0 <std+0x54>
 80176c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80176c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176cc:	f000 b9cc 	b.w	8017a68 <__retarget_lock_init_recursive>
 80176d0:	bd10      	pop	{r4, pc}
 80176d2:	bf00      	nop
 80176d4:	08017865 	.word	0x08017865
 80176d8:	08017887 	.word	0x08017887
 80176dc:	080178bf 	.word	0x080178bf
 80176e0:	080178e3 	.word	0x080178e3
 80176e4:	20009138 	.word	0x20009138

080176e8 <stdio_exit_handler>:
 80176e8:	4a02      	ldr	r2, [pc, #8]	@ (80176f4 <stdio_exit_handler+0xc>)
 80176ea:	4903      	ldr	r1, [pc, #12]	@ (80176f8 <stdio_exit_handler+0x10>)
 80176ec:	4803      	ldr	r0, [pc, #12]	@ (80176fc <stdio_exit_handler+0x14>)
 80176ee:	f000 b869 	b.w	80177c4 <_fwalk_sglue>
 80176f2:	bf00      	nop
 80176f4:	2000003c 	.word	0x2000003c
 80176f8:	080196a1 	.word	0x080196a1
 80176fc:	2000004c 	.word	0x2000004c

08017700 <cleanup_stdio>:
 8017700:	6841      	ldr	r1, [r0, #4]
 8017702:	4b0c      	ldr	r3, [pc, #48]	@ (8017734 <cleanup_stdio+0x34>)
 8017704:	4299      	cmp	r1, r3
 8017706:	b510      	push	{r4, lr}
 8017708:	4604      	mov	r4, r0
 801770a:	d001      	beq.n	8017710 <cleanup_stdio+0x10>
 801770c:	f001 ffc8 	bl	80196a0 <_fflush_r>
 8017710:	68a1      	ldr	r1, [r4, #8]
 8017712:	4b09      	ldr	r3, [pc, #36]	@ (8017738 <cleanup_stdio+0x38>)
 8017714:	4299      	cmp	r1, r3
 8017716:	d002      	beq.n	801771e <cleanup_stdio+0x1e>
 8017718:	4620      	mov	r0, r4
 801771a:	f001 ffc1 	bl	80196a0 <_fflush_r>
 801771e:	68e1      	ldr	r1, [r4, #12]
 8017720:	4b06      	ldr	r3, [pc, #24]	@ (801773c <cleanup_stdio+0x3c>)
 8017722:	4299      	cmp	r1, r3
 8017724:	d004      	beq.n	8017730 <cleanup_stdio+0x30>
 8017726:	4620      	mov	r0, r4
 8017728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801772c:	f001 bfb8 	b.w	80196a0 <_fflush_r>
 8017730:	bd10      	pop	{r4, pc}
 8017732:	bf00      	nop
 8017734:	20009138 	.word	0x20009138
 8017738:	200091a0 	.word	0x200091a0
 801773c:	20009208 	.word	0x20009208

08017740 <global_stdio_init.part.0>:
 8017740:	b510      	push	{r4, lr}
 8017742:	4b0b      	ldr	r3, [pc, #44]	@ (8017770 <global_stdio_init.part.0+0x30>)
 8017744:	4c0b      	ldr	r4, [pc, #44]	@ (8017774 <global_stdio_init.part.0+0x34>)
 8017746:	4a0c      	ldr	r2, [pc, #48]	@ (8017778 <global_stdio_init.part.0+0x38>)
 8017748:	601a      	str	r2, [r3, #0]
 801774a:	4620      	mov	r0, r4
 801774c:	2200      	movs	r2, #0
 801774e:	2104      	movs	r1, #4
 8017750:	f7ff ff94 	bl	801767c <std>
 8017754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017758:	2201      	movs	r2, #1
 801775a:	2109      	movs	r1, #9
 801775c:	f7ff ff8e 	bl	801767c <std>
 8017760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017764:	2202      	movs	r2, #2
 8017766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801776a:	2112      	movs	r1, #18
 801776c:	f7ff bf86 	b.w	801767c <std>
 8017770:	20009270 	.word	0x20009270
 8017774:	20009138 	.word	0x20009138
 8017778:	080176e9 	.word	0x080176e9

0801777c <__sfp_lock_acquire>:
 801777c:	4801      	ldr	r0, [pc, #4]	@ (8017784 <__sfp_lock_acquire+0x8>)
 801777e:	f000 b974 	b.w	8017a6a <__retarget_lock_acquire_recursive>
 8017782:	bf00      	nop
 8017784:	20009279 	.word	0x20009279

08017788 <__sfp_lock_release>:
 8017788:	4801      	ldr	r0, [pc, #4]	@ (8017790 <__sfp_lock_release+0x8>)
 801778a:	f000 b96f 	b.w	8017a6c <__retarget_lock_release_recursive>
 801778e:	bf00      	nop
 8017790:	20009279 	.word	0x20009279

08017794 <__sinit>:
 8017794:	b510      	push	{r4, lr}
 8017796:	4604      	mov	r4, r0
 8017798:	f7ff fff0 	bl	801777c <__sfp_lock_acquire>
 801779c:	6a23      	ldr	r3, [r4, #32]
 801779e:	b11b      	cbz	r3, 80177a8 <__sinit+0x14>
 80177a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177a4:	f7ff bff0 	b.w	8017788 <__sfp_lock_release>
 80177a8:	4b04      	ldr	r3, [pc, #16]	@ (80177bc <__sinit+0x28>)
 80177aa:	6223      	str	r3, [r4, #32]
 80177ac:	4b04      	ldr	r3, [pc, #16]	@ (80177c0 <__sinit+0x2c>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d1f5      	bne.n	80177a0 <__sinit+0xc>
 80177b4:	f7ff ffc4 	bl	8017740 <global_stdio_init.part.0>
 80177b8:	e7f2      	b.n	80177a0 <__sinit+0xc>
 80177ba:	bf00      	nop
 80177bc:	08017701 	.word	0x08017701
 80177c0:	20009270 	.word	0x20009270

080177c4 <_fwalk_sglue>:
 80177c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177c8:	4607      	mov	r7, r0
 80177ca:	4688      	mov	r8, r1
 80177cc:	4614      	mov	r4, r2
 80177ce:	2600      	movs	r6, #0
 80177d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80177d4:	f1b9 0901 	subs.w	r9, r9, #1
 80177d8:	d505      	bpl.n	80177e6 <_fwalk_sglue+0x22>
 80177da:	6824      	ldr	r4, [r4, #0]
 80177dc:	2c00      	cmp	r4, #0
 80177de:	d1f7      	bne.n	80177d0 <_fwalk_sglue+0xc>
 80177e0:	4630      	mov	r0, r6
 80177e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177e6:	89ab      	ldrh	r3, [r5, #12]
 80177e8:	2b01      	cmp	r3, #1
 80177ea:	d907      	bls.n	80177fc <_fwalk_sglue+0x38>
 80177ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80177f0:	3301      	adds	r3, #1
 80177f2:	d003      	beq.n	80177fc <_fwalk_sglue+0x38>
 80177f4:	4629      	mov	r1, r5
 80177f6:	4638      	mov	r0, r7
 80177f8:	47c0      	blx	r8
 80177fa:	4306      	orrs	r6, r0
 80177fc:	3568      	adds	r5, #104	@ 0x68
 80177fe:	e7e9      	b.n	80177d4 <_fwalk_sglue+0x10>

08017800 <iprintf>:
 8017800:	b40f      	push	{r0, r1, r2, r3}
 8017802:	b507      	push	{r0, r1, r2, lr}
 8017804:	4906      	ldr	r1, [pc, #24]	@ (8017820 <iprintf+0x20>)
 8017806:	ab04      	add	r3, sp, #16
 8017808:	6808      	ldr	r0, [r1, #0]
 801780a:	f853 2b04 	ldr.w	r2, [r3], #4
 801780e:	6881      	ldr	r1, [r0, #8]
 8017810:	9301      	str	r3, [sp, #4]
 8017812:	f001 fda9 	bl	8019368 <_vfiprintf_r>
 8017816:	b003      	add	sp, #12
 8017818:	f85d eb04 	ldr.w	lr, [sp], #4
 801781c:	b004      	add	sp, #16
 801781e:	4770      	bx	lr
 8017820:	20000048 	.word	0x20000048

08017824 <siprintf>:
 8017824:	b40e      	push	{r1, r2, r3}
 8017826:	b500      	push	{lr}
 8017828:	b09c      	sub	sp, #112	@ 0x70
 801782a:	ab1d      	add	r3, sp, #116	@ 0x74
 801782c:	9002      	str	r0, [sp, #8]
 801782e:	9006      	str	r0, [sp, #24]
 8017830:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017834:	4809      	ldr	r0, [pc, #36]	@ (801785c <siprintf+0x38>)
 8017836:	9107      	str	r1, [sp, #28]
 8017838:	9104      	str	r1, [sp, #16]
 801783a:	4909      	ldr	r1, [pc, #36]	@ (8017860 <siprintf+0x3c>)
 801783c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017840:	9105      	str	r1, [sp, #20]
 8017842:	6800      	ldr	r0, [r0, #0]
 8017844:	9301      	str	r3, [sp, #4]
 8017846:	a902      	add	r1, sp, #8
 8017848:	f001 fc68 	bl	801911c <_svfiprintf_r>
 801784c:	9b02      	ldr	r3, [sp, #8]
 801784e:	2200      	movs	r2, #0
 8017850:	701a      	strb	r2, [r3, #0]
 8017852:	b01c      	add	sp, #112	@ 0x70
 8017854:	f85d eb04 	ldr.w	lr, [sp], #4
 8017858:	b003      	add	sp, #12
 801785a:	4770      	bx	lr
 801785c:	20000048 	.word	0x20000048
 8017860:	ffff0208 	.word	0xffff0208

08017864 <__sread>:
 8017864:	b510      	push	{r4, lr}
 8017866:	460c      	mov	r4, r1
 8017868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801786c:	f000 f8b4 	bl	80179d8 <_read_r>
 8017870:	2800      	cmp	r0, #0
 8017872:	bfab      	itete	ge
 8017874:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017876:	89a3      	ldrhlt	r3, [r4, #12]
 8017878:	181b      	addge	r3, r3, r0
 801787a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801787e:	bfac      	ite	ge
 8017880:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017882:	81a3      	strhlt	r3, [r4, #12]
 8017884:	bd10      	pop	{r4, pc}

08017886 <__swrite>:
 8017886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801788a:	461f      	mov	r7, r3
 801788c:	898b      	ldrh	r3, [r1, #12]
 801788e:	05db      	lsls	r3, r3, #23
 8017890:	4605      	mov	r5, r0
 8017892:	460c      	mov	r4, r1
 8017894:	4616      	mov	r6, r2
 8017896:	d505      	bpl.n	80178a4 <__swrite+0x1e>
 8017898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801789c:	2302      	movs	r3, #2
 801789e:	2200      	movs	r2, #0
 80178a0:	f000 f888 	bl	80179b4 <_lseek_r>
 80178a4:	89a3      	ldrh	r3, [r4, #12]
 80178a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80178ae:	81a3      	strh	r3, [r4, #12]
 80178b0:	4632      	mov	r2, r6
 80178b2:	463b      	mov	r3, r7
 80178b4:	4628      	mov	r0, r5
 80178b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178ba:	f000 b89f 	b.w	80179fc <_write_r>

080178be <__sseek>:
 80178be:	b510      	push	{r4, lr}
 80178c0:	460c      	mov	r4, r1
 80178c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178c6:	f000 f875 	bl	80179b4 <_lseek_r>
 80178ca:	1c43      	adds	r3, r0, #1
 80178cc:	89a3      	ldrh	r3, [r4, #12]
 80178ce:	bf15      	itete	ne
 80178d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80178d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80178d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80178da:	81a3      	strheq	r3, [r4, #12]
 80178dc:	bf18      	it	ne
 80178de:	81a3      	strhne	r3, [r4, #12]
 80178e0:	bd10      	pop	{r4, pc}

080178e2 <__sclose>:
 80178e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178e6:	f000 b855 	b.w	8017994 <_close_r>

080178ea <memcmp>:
 80178ea:	b510      	push	{r4, lr}
 80178ec:	3901      	subs	r1, #1
 80178ee:	4402      	add	r2, r0
 80178f0:	4290      	cmp	r0, r2
 80178f2:	d101      	bne.n	80178f8 <memcmp+0xe>
 80178f4:	2000      	movs	r0, #0
 80178f6:	e005      	b.n	8017904 <memcmp+0x1a>
 80178f8:	7803      	ldrb	r3, [r0, #0]
 80178fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80178fe:	42a3      	cmp	r3, r4
 8017900:	d001      	beq.n	8017906 <memcmp+0x1c>
 8017902:	1b18      	subs	r0, r3, r4
 8017904:	bd10      	pop	{r4, pc}
 8017906:	3001      	adds	r0, #1
 8017908:	e7f2      	b.n	80178f0 <memcmp+0x6>

0801790a <memmove>:
 801790a:	4288      	cmp	r0, r1
 801790c:	b510      	push	{r4, lr}
 801790e:	eb01 0402 	add.w	r4, r1, r2
 8017912:	d902      	bls.n	801791a <memmove+0x10>
 8017914:	4284      	cmp	r4, r0
 8017916:	4623      	mov	r3, r4
 8017918:	d807      	bhi.n	801792a <memmove+0x20>
 801791a:	1e43      	subs	r3, r0, #1
 801791c:	42a1      	cmp	r1, r4
 801791e:	d008      	beq.n	8017932 <memmove+0x28>
 8017920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017924:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017928:	e7f8      	b.n	801791c <memmove+0x12>
 801792a:	4402      	add	r2, r0
 801792c:	4601      	mov	r1, r0
 801792e:	428a      	cmp	r2, r1
 8017930:	d100      	bne.n	8017934 <memmove+0x2a>
 8017932:	bd10      	pop	{r4, pc}
 8017934:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017938:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801793c:	e7f7      	b.n	801792e <memmove+0x24>

0801793e <memset>:
 801793e:	4402      	add	r2, r0
 8017940:	4603      	mov	r3, r0
 8017942:	4293      	cmp	r3, r2
 8017944:	d100      	bne.n	8017948 <memset+0xa>
 8017946:	4770      	bx	lr
 8017948:	f803 1b01 	strb.w	r1, [r3], #1
 801794c:	e7f9      	b.n	8017942 <memset+0x4>

0801794e <strchr>:
 801794e:	b2c9      	uxtb	r1, r1
 8017950:	4603      	mov	r3, r0
 8017952:	4618      	mov	r0, r3
 8017954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017958:	b112      	cbz	r2, 8017960 <strchr+0x12>
 801795a:	428a      	cmp	r2, r1
 801795c:	d1f9      	bne.n	8017952 <strchr+0x4>
 801795e:	4770      	bx	lr
 8017960:	2900      	cmp	r1, #0
 8017962:	bf18      	it	ne
 8017964:	2000      	movne	r0, #0
 8017966:	4770      	bx	lr

08017968 <strncmp>:
 8017968:	b510      	push	{r4, lr}
 801796a:	b16a      	cbz	r2, 8017988 <strncmp+0x20>
 801796c:	3901      	subs	r1, #1
 801796e:	1884      	adds	r4, r0, r2
 8017970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017974:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017978:	429a      	cmp	r2, r3
 801797a:	d103      	bne.n	8017984 <strncmp+0x1c>
 801797c:	42a0      	cmp	r0, r4
 801797e:	d001      	beq.n	8017984 <strncmp+0x1c>
 8017980:	2a00      	cmp	r2, #0
 8017982:	d1f5      	bne.n	8017970 <strncmp+0x8>
 8017984:	1ad0      	subs	r0, r2, r3
 8017986:	bd10      	pop	{r4, pc}
 8017988:	4610      	mov	r0, r2
 801798a:	e7fc      	b.n	8017986 <strncmp+0x1e>

0801798c <_localeconv_r>:
 801798c:	4800      	ldr	r0, [pc, #0]	@ (8017990 <_localeconv_r+0x4>)
 801798e:	4770      	bx	lr
 8017990:	20000188 	.word	0x20000188

08017994 <_close_r>:
 8017994:	b538      	push	{r3, r4, r5, lr}
 8017996:	4d06      	ldr	r5, [pc, #24]	@ (80179b0 <_close_r+0x1c>)
 8017998:	2300      	movs	r3, #0
 801799a:	4604      	mov	r4, r0
 801799c:	4608      	mov	r0, r1
 801799e:	602b      	str	r3, [r5, #0]
 80179a0:	f7eb f838 	bl	8002a14 <_close>
 80179a4:	1c43      	adds	r3, r0, #1
 80179a6:	d102      	bne.n	80179ae <_close_r+0x1a>
 80179a8:	682b      	ldr	r3, [r5, #0]
 80179aa:	b103      	cbz	r3, 80179ae <_close_r+0x1a>
 80179ac:	6023      	str	r3, [r4, #0]
 80179ae:	bd38      	pop	{r3, r4, r5, pc}
 80179b0:	20009274 	.word	0x20009274

080179b4 <_lseek_r>:
 80179b4:	b538      	push	{r3, r4, r5, lr}
 80179b6:	4d07      	ldr	r5, [pc, #28]	@ (80179d4 <_lseek_r+0x20>)
 80179b8:	4604      	mov	r4, r0
 80179ba:	4608      	mov	r0, r1
 80179bc:	4611      	mov	r1, r2
 80179be:	2200      	movs	r2, #0
 80179c0:	602a      	str	r2, [r5, #0]
 80179c2:	461a      	mov	r2, r3
 80179c4:	f7eb f84d 	bl	8002a62 <_lseek>
 80179c8:	1c43      	adds	r3, r0, #1
 80179ca:	d102      	bne.n	80179d2 <_lseek_r+0x1e>
 80179cc:	682b      	ldr	r3, [r5, #0]
 80179ce:	b103      	cbz	r3, 80179d2 <_lseek_r+0x1e>
 80179d0:	6023      	str	r3, [r4, #0]
 80179d2:	bd38      	pop	{r3, r4, r5, pc}
 80179d4:	20009274 	.word	0x20009274

080179d8 <_read_r>:
 80179d8:	b538      	push	{r3, r4, r5, lr}
 80179da:	4d07      	ldr	r5, [pc, #28]	@ (80179f8 <_read_r+0x20>)
 80179dc:	4604      	mov	r4, r0
 80179de:	4608      	mov	r0, r1
 80179e0:	4611      	mov	r1, r2
 80179e2:	2200      	movs	r2, #0
 80179e4:	602a      	str	r2, [r5, #0]
 80179e6:	461a      	mov	r2, r3
 80179e8:	f7ea ffdb 	bl	80029a2 <_read>
 80179ec:	1c43      	adds	r3, r0, #1
 80179ee:	d102      	bne.n	80179f6 <_read_r+0x1e>
 80179f0:	682b      	ldr	r3, [r5, #0]
 80179f2:	b103      	cbz	r3, 80179f6 <_read_r+0x1e>
 80179f4:	6023      	str	r3, [r4, #0]
 80179f6:	bd38      	pop	{r3, r4, r5, pc}
 80179f8:	20009274 	.word	0x20009274

080179fc <_write_r>:
 80179fc:	b538      	push	{r3, r4, r5, lr}
 80179fe:	4d07      	ldr	r5, [pc, #28]	@ (8017a1c <_write_r+0x20>)
 8017a00:	4604      	mov	r4, r0
 8017a02:	4608      	mov	r0, r1
 8017a04:	4611      	mov	r1, r2
 8017a06:	2200      	movs	r2, #0
 8017a08:	602a      	str	r2, [r5, #0]
 8017a0a:	461a      	mov	r2, r3
 8017a0c:	f7ea ffe6 	bl	80029dc <_write>
 8017a10:	1c43      	adds	r3, r0, #1
 8017a12:	d102      	bne.n	8017a1a <_write_r+0x1e>
 8017a14:	682b      	ldr	r3, [r5, #0]
 8017a16:	b103      	cbz	r3, 8017a1a <_write_r+0x1e>
 8017a18:	6023      	str	r3, [r4, #0]
 8017a1a:	bd38      	pop	{r3, r4, r5, pc}
 8017a1c:	20009274 	.word	0x20009274

08017a20 <__libc_init_array>:
 8017a20:	b570      	push	{r4, r5, r6, lr}
 8017a22:	4d0d      	ldr	r5, [pc, #52]	@ (8017a58 <__libc_init_array+0x38>)
 8017a24:	4c0d      	ldr	r4, [pc, #52]	@ (8017a5c <__libc_init_array+0x3c>)
 8017a26:	1b64      	subs	r4, r4, r5
 8017a28:	10a4      	asrs	r4, r4, #2
 8017a2a:	2600      	movs	r6, #0
 8017a2c:	42a6      	cmp	r6, r4
 8017a2e:	d109      	bne.n	8017a44 <__libc_init_array+0x24>
 8017a30:	4d0b      	ldr	r5, [pc, #44]	@ (8017a60 <__libc_init_array+0x40>)
 8017a32:	4c0c      	ldr	r4, [pc, #48]	@ (8017a64 <__libc_init_array+0x44>)
 8017a34:	f002 f84a 	bl	8019acc <_init>
 8017a38:	1b64      	subs	r4, r4, r5
 8017a3a:	10a4      	asrs	r4, r4, #2
 8017a3c:	2600      	movs	r6, #0
 8017a3e:	42a6      	cmp	r6, r4
 8017a40:	d105      	bne.n	8017a4e <__libc_init_array+0x2e>
 8017a42:	bd70      	pop	{r4, r5, r6, pc}
 8017a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a48:	4798      	blx	r3
 8017a4a:	3601      	adds	r6, #1
 8017a4c:	e7ee      	b.n	8017a2c <__libc_init_array+0xc>
 8017a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a52:	4798      	blx	r3
 8017a54:	3601      	adds	r6, #1
 8017a56:	e7f2      	b.n	8017a3e <__libc_init_array+0x1e>
 8017a58:	08020864 	.word	0x08020864
 8017a5c:	08020864 	.word	0x08020864
 8017a60:	08020864 	.word	0x08020864
 8017a64:	08020868 	.word	0x08020868

08017a68 <__retarget_lock_init_recursive>:
 8017a68:	4770      	bx	lr

08017a6a <__retarget_lock_acquire_recursive>:
 8017a6a:	4770      	bx	lr

08017a6c <__retarget_lock_release_recursive>:
 8017a6c:	4770      	bx	lr

08017a6e <memcpy>:
 8017a6e:	440a      	add	r2, r1
 8017a70:	4291      	cmp	r1, r2
 8017a72:	f100 33ff 	add.w	r3, r0, #4294967295
 8017a76:	d100      	bne.n	8017a7a <memcpy+0xc>
 8017a78:	4770      	bx	lr
 8017a7a:	b510      	push	{r4, lr}
 8017a7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017a84:	4291      	cmp	r1, r2
 8017a86:	d1f9      	bne.n	8017a7c <memcpy+0xe>
 8017a88:	bd10      	pop	{r4, pc}
	...

08017a8c <__assert_func>:
 8017a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017a8e:	4614      	mov	r4, r2
 8017a90:	461a      	mov	r2, r3
 8017a92:	4b09      	ldr	r3, [pc, #36]	@ (8017ab8 <__assert_func+0x2c>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	4605      	mov	r5, r0
 8017a98:	68d8      	ldr	r0, [r3, #12]
 8017a9a:	b954      	cbnz	r4, 8017ab2 <__assert_func+0x26>
 8017a9c:	4b07      	ldr	r3, [pc, #28]	@ (8017abc <__assert_func+0x30>)
 8017a9e:	461c      	mov	r4, r3
 8017aa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017aa4:	9100      	str	r1, [sp, #0]
 8017aa6:	462b      	mov	r3, r5
 8017aa8:	4905      	ldr	r1, [pc, #20]	@ (8017ac0 <__assert_func+0x34>)
 8017aaa:	f001 fe21 	bl	80196f0 <fiprintf>
 8017aae:	f001 fed5 	bl	801985c <abort>
 8017ab2:	4b04      	ldr	r3, [pc, #16]	@ (8017ac4 <__assert_func+0x38>)
 8017ab4:	e7f4      	b.n	8017aa0 <__assert_func+0x14>
 8017ab6:	bf00      	nop
 8017ab8:	20000048 	.word	0x20000048
 8017abc:	08020671 	.word	0x08020671
 8017ac0:	08020643 	.word	0x08020643
 8017ac4:	08020636 	.word	0x08020636

08017ac8 <quorem>:
 8017ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017acc:	6903      	ldr	r3, [r0, #16]
 8017ace:	690c      	ldr	r4, [r1, #16]
 8017ad0:	42a3      	cmp	r3, r4
 8017ad2:	4607      	mov	r7, r0
 8017ad4:	db7e      	blt.n	8017bd4 <quorem+0x10c>
 8017ad6:	3c01      	subs	r4, #1
 8017ad8:	f101 0814 	add.w	r8, r1, #20
 8017adc:	00a3      	lsls	r3, r4, #2
 8017ade:	f100 0514 	add.w	r5, r0, #20
 8017ae2:	9300      	str	r3, [sp, #0]
 8017ae4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ae8:	9301      	str	r3, [sp, #4]
 8017aea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017af2:	3301      	adds	r3, #1
 8017af4:	429a      	cmp	r2, r3
 8017af6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017afa:	fbb2 f6f3 	udiv	r6, r2, r3
 8017afe:	d32e      	bcc.n	8017b5e <quorem+0x96>
 8017b00:	f04f 0a00 	mov.w	sl, #0
 8017b04:	46c4      	mov	ip, r8
 8017b06:	46ae      	mov	lr, r5
 8017b08:	46d3      	mov	fp, sl
 8017b0a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017b0e:	b298      	uxth	r0, r3
 8017b10:	fb06 a000 	mla	r0, r6, r0, sl
 8017b14:	0c02      	lsrs	r2, r0, #16
 8017b16:	0c1b      	lsrs	r3, r3, #16
 8017b18:	fb06 2303 	mla	r3, r6, r3, r2
 8017b1c:	f8de 2000 	ldr.w	r2, [lr]
 8017b20:	b280      	uxth	r0, r0
 8017b22:	b292      	uxth	r2, r2
 8017b24:	1a12      	subs	r2, r2, r0
 8017b26:	445a      	add	r2, fp
 8017b28:	f8de 0000 	ldr.w	r0, [lr]
 8017b2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017b36:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017b3a:	b292      	uxth	r2, r2
 8017b3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017b40:	45e1      	cmp	r9, ip
 8017b42:	f84e 2b04 	str.w	r2, [lr], #4
 8017b46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017b4a:	d2de      	bcs.n	8017b0a <quorem+0x42>
 8017b4c:	9b00      	ldr	r3, [sp, #0]
 8017b4e:	58eb      	ldr	r3, [r5, r3]
 8017b50:	b92b      	cbnz	r3, 8017b5e <quorem+0x96>
 8017b52:	9b01      	ldr	r3, [sp, #4]
 8017b54:	3b04      	subs	r3, #4
 8017b56:	429d      	cmp	r5, r3
 8017b58:	461a      	mov	r2, r3
 8017b5a:	d32f      	bcc.n	8017bbc <quorem+0xf4>
 8017b5c:	613c      	str	r4, [r7, #16]
 8017b5e:	4638      	mov	r0, r7
 8017b60:	f001 f978 	bl	8018e54 <__mcmp>
 8017b64:	2800      	cmp	r0, #0
 8017b66:	db25      	blt.n	8017bb4 <quorem+0xec>
 8017b68:	4629      	mov	r1, r5
 8017b6a:	2000      	movs	r0, #0
 8017b6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017b70:	f8d1 c000 	ldr.w	ip, [r1]
 8017b74:	fa1f fe82 	uxth.w	lr, r2
 8017b78:	fa1f f38c 	uxth.w	r3, ip
 8017b7c:	eba3 030e 	sub.w	r3, r3, lr
 8017b80:	4403      	add	r3, r0
 8017b82:	0c12      	lsrs	r2, r2, #16
 8017b84:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017b88:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b92:	45c1      	cmp	r9, r8
 8017b94:	f841 3b04 	str.w	r3, [r1], #4
 8017b98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017b9c:	d2e6      	bcs.n	8017b6c <quorem+0xa4>
 8017b9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ba6:	b922      	cbnz	r2, 8017bb2 <quorem+0xea>
 8017ba8:	3b04      	subs	r3, #4
 8017baa:	429d      	cmp	r5, r3
 8017bac:	461a      	mov	r2, r3
 8017bae:	d30b      	bcc.n	8017bc8 <quorem+0x100>
 8017bb0:	613c      	str	r4, [r7, #16]
 8017bb2:	3601      	adds	r6, #1
 8017bb4:	4630      	mov	r0, r6
 8017bb6:	b003      	add	sp, #12
 8017bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bbc:	6812      	ldr	r2, [r2, #0]
 8017bbe:	3b04      	subs	r3, #4
 8017bc0:	2a00      	cmp	r2, #0
 8017bc2:	d1cb      	bne.n	8017b5c <quorem+0x94>
 8017bc4:	3c01      	subs	r4, #1
 8017bc6:	e7c6      	b.n	8017b56 <quorem+0x8e>
 8017bc8:	6812      	ldr	r2, [r2, #0]
 8017bca:	3b04      	subs	r3, #4
 8017bcc:	2a00      	cmp	r2, #0
 8017bce:	d1ef      	bne.n	8017bb0 <quorem+0xe8>
 8017bd0:	3c01      	subs	r4, #1
 8017bd2:	e7ea      	b.n	8017baa <quorem+0xe2>
 8017bd4:	2000      	movs	r0, #0
 8017bd6:	e7ee      	b.n	8017bb6 <quorem+0xee>

08017bd8 <_dtoa_r>:
 8017bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bdc:	69c7      	ldr	r7, [r0, #28]
 8017bde:	b099      	sub	sp, #100	@ 0x64
 8017be0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017be4:	ec55 4b10 	vmov	r4, r5, d0
 8017be8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8017bea:	9109      	str	r1, [sp, #36]	@ 0x24
 8017bec:	4683      	mov	fp, r0
 8017bee:	920e      	str	r2, [sp, #56]	@ 0x38
 8017bf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017bf2:	b97f      	cbnz	r7, 8017c14 <_dtoa_r+0x3c>
 8017bf4:	2010      	movs	r0, #16
 8017bf6:	f000 fdfd 	bl	80187f4 <malloc>
 8017bfa:	4602      	mov	r2, r0
 8017bfc:	f8cb 001c 	str.w	r0, [fp, #28]
 8017c00:	b920      	cbnz	r0, 8017c0c <_dtoa_r+0x34>
 8017c02:	4ba7      	ldr	r3, [pc, #668]	@ (8017ea0 <_dtoa_r+0x2c8>)
 8017c04:	21ef      	movs	r1, #239	@ 0xef
 8017c06:	48a7      	ldr	r0, [pc, #668]	@ (8017ea4 <_dtoa_r+0x2cc>)
 8017c08:	f7ff ff40 	bl	8017a8c <__assert_func>
 8017c0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017c10:	6007      	str	r7, [r0, #0]
 8017c12:	60c7      	str	r7, [r0, #12]
 8017c14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017c18:	6819      	ldr	r1, [r3, #0]
 8017c1a:	b159      	cbz	r1, 8017c34 <_dtoa_r+0x5c>
 8017c1c:	685a      	ldr	r2, [r3, #4]
 8017c1e:	604a      	str	r2, [r1, #4]
 8017c20:	2301      	movs	r3, #1
 8017c22:	4093      	lsls	r3, r2
 8017c24:	608b      	str	r3, [r1, #8]
 8017c26:	4658      	mov	r0, fp
 8017c28:	f000 feda 	bl	80189e0 <_Bfree>
 8017c2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017c30:	2200      	movs	r2, #0
 8017c32:	601a      	str	r2, [r3, #0]
 8017c34:	1e2b      	subs	r3, r5, #0
 8017c36:	bfb9      	ittee	lt
 8017c38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8017c3c:	9303      	strlt	r3, [sp, #12]
 8017c3e:	2300      	movge	r3, #0
 8017c40:	6033      	strge	r3, [r6, #0]
 8017c42:	9f03      	ldr	r7, [sp, #12]
 8017c44:	4b98      	ldr	r3, [pc, #608]	@ (8017ea8 <_dtoa_r+0x2d0>)
 8017c46:	bfbc      	itt	lt
 8017c48:	2201      	movlt	r2, #1
 8017c4a:	6032      	strlt	r2, [r6, #0]
 8017c4c:	43bb      	bics	r3, r7
 8017c4e:	d112      	bne.n	8017c76 <_dtoa_r+0x9e>
 8017c50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017c52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8017c56:	6013      	str	r3, [r2, #0]
 8017c58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017c5c:	4323      	orrs	r3, r4
 8017c5e:	f000 854d 	beq.w	80186fc <_dtoa_r+0xb24>
 8017c62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017c64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8017ebc <_dtoa_r+0x2e4>
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	f000 854f 	beq.w	801870c <_dtoa_r+0xb34>
 8017c6e:	f10a 0303 	add.w	r3, sl, #3
 8017c72:	f000 bd49 	b.w	8018708 <_dtoa_r+0xb30>
 8017c76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	ec51 0b17 	vmov	r0, r1, d7
 8017c80:	2300      	movs	r3, #0
 8017c82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8017c86:	f7e8 ff4f 	bl	8000b28 <__aeabi_dcmpeq>
 8017c8a:	4680      	mov	r8, r0
 8017c8c:	b158      	cbz	r0, 8017ca6 <_dtoa_r+0xce>
 8017c8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017c90:	2301      	movs	r3, #1
 8017c92:	6013      	str	r3, [r2, #0]
 8017c94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017c96:	b113      	cbz	r3, 8017c9e <_dtoa_r+0xc6>
 8017c98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017c9a:	4b84      	ldr	r3, [pc, #528]	@ (8017eac <_dtoa_r+0x2d4>)
 8017c9c:	6013      	str	r3, [r2, #0]
 8017c9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8017ec0 <_dtoa_r+0x2e8>
 8017ca2:	f000 bd33 	b.w	801870c <_dtoa_r+0xb34>
 8017ca6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017caa:	aa16      	add	r2, sp, #88	@ 0x58
 8017cac:	a917      	add	r1, sp, #92	@ 0x5c
 8017cae:	4658      	mov	r0, fp
 8017cb0:	f001 f980 	bl	8018fb4 <__d2b>
 8017cb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8017cb8:	4681      	mov	r9, r0
 8017cba:	2e00      	cmp	r6, #0
 8017cbc:	d077      	beq.n	8017dae <_dtoa_r+0x1d6>
 8017cbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017cc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8017cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017ccc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8017cd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8017cd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8017cd8:	4619      	mov	r1, r3
 8017cda:	2200      	movs	r2, #0
 8017cdc:	4b74      	ldr	r3, [pc, #464]	@ (8017eb0 <_dtoa_r+0x2d8>)
 8017cde:	f7e8 fb03 	bl	80002e8 <__aeabi_dsub>
 8017ce2:	a369      	add	r3, pc, #420	@ (adr r3, 8017e88 <_dtoa_r+0x2b0>)
 8017ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce8:	f7e8 fcb6 	bl	8000658 <__aeabi_dmul>
 8017cec:	a368      	add	r3, pc, #416	@ (adr r3, 8017e90 <_dtoa_r+0x2b8>)
 8017cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cf2:	f7e8 fafb 	bl	80002ec <__adddf3>
 8017cf6:	4604      	mov	r4, r0
 8017cf8:	4630      	mov	r0, r6
 8017cfa:	460d      	mov	r5, r1
 8017cfc:	f7e8 fc42 	bl	8000584 <__aeabi_i2d>
 8017d00:	a365      	add	r3, pc, #404	@ (adr r3, 8017e98 <_dtoa_r+0x2c0>)
 8017d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d06:	f7e8 fca7 	bl	8000658 <__aeabi_dmul>
 8017d0a:	4602      	mov	r2, r0
 8017d0c:	460b      	mov	r3, r1
 8017d0e:	4620      	mov	r0, r4
 8017d10:	4629      	mov	r1, r5
 8017d12:	f7e8 faeb 	bl	80002ec <__adddf3>
 8017d16:	4604      	mov	r4, r0
 8017d18:	460d      	mov	r5, r1
 8017d1a:	f7e8 ff4d 	bl	8000bb8 <__aeabi_d2iz>
 8017d1e:	2200      	movs	r2, #0
 8017d20:	4607      	mov	r7, r0
 8017d22:	2300      	movs	r3, #0
 8017d24:	4620      	mov	r0, r4
 8017d26:	4629      	mov	r1, r5
 8017d28:	f7e8 ff08 	bl	8000b3c <__aeabi_dcmplt>
 8017d2c:	b140      	cbz	r0, 8017d40 <_dtoa_r+0x168>
 8017d2e:	4638      	mov	r0, r7
 8017d30:	f7e8 fc28 	bl	8000584 <__aeabi_i2d>
 8017d34:	4622      	mov	r2, r4
 8017d36:	462b      	mov	r3, r5
 8017d38:	f7e8 fef6 	bl	8000b28 <__aeabi_dcmpeq>
 8017d3c:	b900      	cbnz	r0, 8017d40 <_dtoa_r+0x168>
 8017d3e:	3f01      	subs	r7, #1
 8017d40:	2f16      	cmp	r7, #22
 8017d42:	d851      	bhi.n	8017de8 <_dtoa_r+0x210>
 8017d44:	4b5b      	ldr	r3, [pc, #364]	@ (8017eb4 <_dtoa_r+0x2dc>)
 8017d46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017d52:	f7e8 fef3 	bl	8000b3c <__aeabi_dcmplt>
 8017d56:	2800      	cmp	r0, #0
 8017d58:	d048      	beq.n	8017dec <_dtoa_r+0x214>
 8017d5a:	3f01      	subs	r7, #1
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017d60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017d62:	1b9b      	subs	r3, r3, r6
 8017d64:	1e5a      	subs	r2, r3, #1
 8017d66:	bf44      	itt	mi
 8017d68:	f1c3 0801 	rsbmi	r8, r3, #1
 8017d6c:	2300      	movmi	r3, #0
 8017d6e:	9208      	str	r2, [sp, #32]
 8017d70:	bf54      	ite	pl
 8017d72:	f04f 0800 	movpl.w	r8, #0
 8017d76:	9308      	strmi	r3, [sp, #32]
 8017d78:	2f00      	cmp	r7, #0
 8017d7a:	db39      	blt.n	8017df0 <_dtoa_r+0x218>
 8017d7c:	9b08      	ldr	r3, [sp, #32]
 8017d7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8017d80:	443b      	add	r3, r7
 8017d82:	9308      	str	r3, [sp, #32]
 8017d84:	2300      	movs	r3, #0
 8017d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d8a:	2b09      	cmp	r3, #9
 8017d8c:	d864      	bhi.n	8017e58 <_dtoa_r+0x280>
 8017d8e:	2b05      	cmp	r3, #5
 8017d90:	bfc4      	itt	gt
 8017d92:	3b04      	subgt	r3, #4
 8017d94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8017d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d98:	f1a3 0302 	sub.w	r3, r3, #2
 8017d9c:	bfcc      	ite	gt
 8017d9e:	2400      	movgt	r4, #0
 8017da0:	2401      	movle	r4, #1
 8017da2:	2b03      	cmp	r3, #3
 8017da4:	d863      	bhi.n	8017e6e <_dtoa_r+0x296>
 8017da6:	e8df f003 	tbb	[pc, r3]
 8017daa:	372a      	.short	0x372a
 8017dac:	5535      	.short	0x5535
 8017dae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8017db2:	441e      	add	r6, r3
 8017db4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8017db8:	2b20      	cmp	r3, #32
 8017dba:	bfc1      	itttt	gt
 8017dbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8017dc0:	409f      	lslgt	r7, r3
 8017dc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8017dc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8017dca:	bfd6      	itet	le
 8017dcc:	f1c3 0320 	rsble	r3, r3, #32
 8017dd0:	ea47 0003 	orrgt.w	r0, r7, r3
 8017dd4:	fa04 f003 	lslle.w	r0, r4, r3
 8017dd8:	f7e8 fbc4 	bl	8000564 <__aeabi_ui2d>
 8017ddc:	2201      	movs	r2, #1
 8017dde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8017de2:	3e01      	subs	r6, #1
 8017de4:	9214      	str	r2, [sp, #80]	@ 0x50
 8017de6:	e777      	b.n	8017cd8 <_dtoa_r+0x100>
 8017de8:	2301      	movs	r3, #1
 8017dea:	e7b8      	b.n	8017d5e <_dtoa_r+0x186>
 8017dec:	9012      	str	r0, [sp, #72]	@ 0x48
 8017dee:	e7b7      	b.n	8017d60 <_dtoa_r+0x188>
 8017df0:	427b      	negs	r3, r7
 8017df2:	930a      	str	r3, [sp, #40]	@ 0x28
 8017df4:	2300      	movs	r3, #0
 8017df6:	eba8 0807 	sub.w	r8, r8, r7
 8017dfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017dfc:	e7c4      	b.n	8017d88 <_dtoa_r+0x1b0>
 8017dfe:	2300      	movs	r3, #0
 8017e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017e02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	dc35      	bgt.n	8017e74 <_dtoa_r+0x29c>
 8017e08:	2301      	movs	r3, #1
 8017e0a:	9300      	str	r3, [sp, #0]
 8017e0c:	9307      	str	r3, [sp, #28]
 8017e0e:	461a      	mov	r2, r3
 8017e10:	920e      	str	r2, [sp, #56]	@ 0x38
 8017e12:	e00b      	b.n	8017e2c <_dtoa_r+0x254>
 8017e14:	2301      	movs	r3, #1
 8017e16:	e7f3      	b.n	8017e00 <_dtoa_r+0x228>
 8017e18:	2300      	movs	r3, #0
 8017e1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e1e:	18fb      	adds	r3, r7, r3
 8017e20:	9300      	str	r3, [sp, #0]
 8017e22:	3301      	adds	r3, #1
 8017e24:	2b01      	cmp	r3, #1
 8017e26:	9307      	str	r3, [sp, #28]
 8017e28:	bfb8      	it	lt
 8017e2a:	2301      	movlt	r3, #1
 8017e2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8017e30:	2100      	movs	r1, #0
 8017e32:	2204      	movs	r2, #4
 8017e34:	f102 0514 	add.w	r5, r2, #20
 8017e38:	429d      	cmp	r5, r3
 8017e3a:	d91f      	bls.n	8017e7c <_dtoa_r+0x2a4>
 8017e3c:	6041      	str	r1, [r0, #4]
 8017e3e:	4658      	mov	r0, fp
 8017e40:	f000 fd8e 	bl	8018960 <_Balloc>
 8017e44:	4682      	mov	sl, r0
 8017e46:	2800      	cmp	r0, #0
 8017e48:	d13c      	bne.n	8017ec4 <_dtoa_r+0x2ec>
 8017e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8017eb8 <_dtoa_r+0x2e0>)
 8017e4c:	4602      	mov	r2, r0
 8017e4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8017e52:	e6d8      	b.n	8017c06 <_dtoa_r+0x2e>
 8017e54:	2301      	movs	r3, #1
 8017e56:	e7e0      	b.n	8017e1a <_dtoa_r+0x242>
 8017e58:	2401      	movs	r4, #1
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017e60:	f04f 33ff 	mov.w	r3, #4294967295
 8017e64:	9300      	str	r3, [sp, #0]
 8017e66:	9307      	str	r3, [sp, #28]
 8017e68:	2200      	movs	r2, #0
 8017e6a:	2312      	movs	r3, #18
 8017e6c:	e7d0      	b.n	8017e10 <_dtoa_r+0x238>
 8017e6e:	2301      	movs	r3, #1
 8017e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017e72:	e7f5      	b.n	8017e60 <_dtoa_r+0x288>
 8017e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e76:	9300      	str	r3, [sp, #0]
 8017e78:	9307      	str	r3, [sp, #28]
 8017e7a:	e7d7      	b.n	8017e2c <_dtoa_r+0x254>
 8017e7c:	3101      	adds	r1, #1
 8017e7e:	0052      	lsls	r2, r2, #1
 8017e80:	e7d8      	b.n	8017e34 <_dtoa_r+0x25c>
 8017e82:	bf00      	nop
 8017e84:	f3af 8000 	nop.w
 8017e88:	636f4361 	.word	0x636f4361
 8017e8c:	3fd287a7 	.word	0x3fd287a7
 8017e90:	8b60c8b3 	.word	0x8b60c8b3
 8017e94:	3fc68a28 	.word	0x3fc68a28
 8017e98:	509f79fb 	.word	0x509f79fb
 8017e9c:	3fd34413 	.word	0x3fd34413
 8017ea0:	08020492 	.word	0x08020492
 8017ea4:	0802067f 	.word	0x0802067f
 8017ea8:	7ff00000 	.word	0x7ff00000
 8017eac:	08020613 	.word	0x08020613
 8017eb0:	3ff80000 	.word	0x3ff80000
 8017eb4:	08020778 	.word	0x08020778
 8017eb8:	080206d7 	.word	0x080206d7
 8017ebc:	0802067b 	.word	0x0802067b
 8017ec0:	08020612 	.word	0x08020612
 8017ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017ec8:	6018      	str	r0, [r3, #0]
 8017eca:	9b07      	ldr	r3, [sp, #28]
 8017ecc:	2b0e      	cmp	r3, #14
 8017ece:	f200 80a4 	bhi.w	801801a <_dtoa_r+0x442>
 8017ed2:	2c00      	cmp	r4, #0
 8017ed4:	f000 80a1 	beq.w	801801a <_dtoa_r+0x442>
 8017ed8:	2f00      	cmp	r7, #0
 8017eda:	dd33      	ble.n	8017f44 <_dtoa_r+0x36c>
 8017edc:	4bad      	ldr	r3, [pc, #692]	@ (8018194 <_dtoa_r+0x5bc>)
 8017ede:	f007 020f 	and.w	r2, r7, #15
 8017ee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017ee6:	ed93 7b00 	vldr	d7, [r3]
 8017eea:	05f8      	lsls	r0, r7, #23
 8017eec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017ef0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8017ef4:	d516      	bpl.n	8017f24 <_dtoa_r+0x34c>
 8017ef6:	4ba8      	ldr	r3, [pc, #672]	@ (8018198 <_dtoa_r+0x5c0>)
 8017ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017efc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017f00:	f7e8 fcd4 	bl	80008ac <__aeabi_ddiv>
 8017f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f08:	f004 040f 	and.w	r4, r4, #15
 8017f0c:	2603      	movs	r6, #3
 8017f0e:	4da2      	ldr	r5, [pc, #648]	@ (8018198 <_dtoa_r+0x5c0>)
 8017f10:	b954      	cbnz	r4, 8017f28 <_dtoa_r+0x350>
 8017f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f1a:	f7e8 fcc7 	bl	80008ac <__aeabi_ddiv>
 8017f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f22:	e028      	b.n	8017f76 <_dtoa_r+0x39e>
 8017f24:	2602      	movs	r6, #2
 8017f26:	e7f2      	b.n	8017f0e <_dtoa_r+0x336>
 8017f28:	07e1      	lsls	r1, r4, #31
 8017f2a:	d508      	bpl.n	8017f3e <_dtoa_r+0x366>
 8017f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017f30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017f34:	f7e8 fb90 	bl	8000658 <__aeabi_dmul>
 8017f38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017f3c:	3601      	adds	r6, #1
 8017f3e:	1064      	asrs	r4, r4, #1
 8017f40:	3508      	adds	r5, #8
 8017f42:	e7e5      	b.n	8017f10 <_dtoa_r+0x338>
 8017f44:	f000 80d2 	beq.w	80180ec <_dtoa_r+0x514>
 8017f48:	427c      	negs	r4, r7
 8017f4a:	4b92      	ldr	r3, [pc, #584]	@ (8018194 <_dtoa_r+0x5bc>)
 8017f4c:	4d92      	ldr	r5, [pc, #584]	@ (8018198 <_dtoa_r+0x5c0>)
 8017f4e:	f004 020f 	and.w	r2, r4, #15
 8017f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017f5e:	f7e8 fb7b 	bl	8000658 <__aeabi_dmul>
 8017f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f66:	1124      	asrs	r4, r4, #4
 8017f68:	2300      	movs	r3, #0
 8017f6a:	2602      	movs	r6, #2
 8017f6c:	2c00      	cmp	r4, #0
 8017f6e:	f040 80b2 	bne.w	80180d6 <_dtoa_r+0x4fe>
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d1d3      	bne.n	8017f1e <_dtoa_r+0x346>
 8017f76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017f78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	f000 80b7 	beq.w	80180f0 <_dtoa_r+0x518>
 8017f82:	4b86      	ldr	r3, [pc, #536]	@ (801819c <_dtoa_r+0x5c4>)
 8017f84:	2200      	movs	r2, #0
 8017f86:	4620      	mov	r0, r4
 8017f88:	4629      	mov	r1, r5
 8017f8a:	f7e8 fdd7 	bl	8000b3c <__aeabi_dcmplt>
 8017f8e:	2800      	cmp	r0, #0
 8017f90:	f000 80ae 	beq.w	80180f0 <_dtoa_r+0x518>
 8017f94:	9b07      	ldr	r3, [sp, #28]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	f000 80aa 	beq.w	80180f0 <_dtoa_r+0x518>
 8017f9c:	9b00      	ldr	r3, [sp, #0]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	dd37      	ble.n	8018012 <_dtoa_r+0x43a>
 8017fa2:	1e7b      	subs	r3, r7, #1
 8017fa4:	9304      	str	r3, [sp, #16]
 8017fa6:	4620      	mov	r0, r4
 8017fa8:	4b7d      	ldr	r3, [pc, #500]	@ (80181a0 <_dtoa_r+0x5c8>)
 8017faa:	2200      	movs	r2, #0
 8017fac:	4629      	mov	r1, r5
 8017fae:	f7e8 fb53 	bl	8000658 <__aeabi_dmul>
 8017fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fb6:	9c00      	ldr	r4, [sp, #0]
 8017fb8:	3601      	adds	r6, #1
 8017fba:	4630      	mov	r0, r6
 8017fbc:	f7e8 fae2 	bl	8000584 <__aeabi_i2d>
 8017fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017fc4:	f7e8 fb48 	bl	8000658 <__aeabi_dmul>
 8017fc8:	4b76      	ldr	r3, [pc, #472]	@ (80181a4 <_dtoa_r+0x5cc>)
 8017fca:	2200      	movs	r2, #0
 8017fcc:	f7e8 f98e 	bl	80002ec <__adddf3>
 8017fd0:	4605      	mov	r5, r0
 8017fd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8017fd6:	2c00      	cmp	r4, #0
 8017fd8:	f040 808d 	bne.w	80180f6 <_dtoa_r+0x51e>
 8017fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017fe0:	4b71      	ldr	r3, [pc, #452]	@ (80181a8 <_dtoa_r+0x5d0>)
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	f7e8 f980 	bl	80002e8 <__aeabi_dsub>
 8017fe8:	4602      	mov	r2, r0
 8017fea:	460b      	mov	r3, r1
 8017fec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017ff0:	462a      	mov	r2, r5
 8017ff2:	4633      	mov	r3, r6
 8017ff4:	f7e8 fdc0 	bl	8000b78 <__aeabi_dcmpgt>
 8017ff8:	2800      	cmp	r0, #0
 8017ffa:	f040 828b 	bne.w	8018514 <_dtoa_r+0x93c>
 8017ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018002:	462a      	mov	r2, r5
 8018004:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8018008:	f7e8 fd98 	bl	8000b3c <__aeabi_dcmplt>
 801800c:	2800      	cmp	r0, #0
 801800e:	f040 8128 	bne.w	8018262 <_dtoa_r+0x68a>
 8018012:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8018016:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801801a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801801c:	2b00      	cmp	r3, #0
 801801e:	f2c0 815a 	blt.w	80182d6 <_dtoa_r+0x6fe>
 8018022:	2f0e      	cmp	r7, #14
 8018024:	f300 8157 	bgt.w	80182d6 <_dtoa_r+0x6fe>
 8018028:	4b5a      	ldr	r3, [pc, #360]	@ (8018194 <_dtoa_r+0x5bc>)
 801802a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801802e:	ed93 7b00 	vldr	d7, [r3]
 8018032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018034:	2b00      	cmp	r3, #0
 8018036:	ed8d 7b00 	vstr	d7, [sp]
 801803a:	da03      	bge.n	8018044 <_dtoa_r+0x46c>
 801803c:	9b07      	ldr	r3, [sp, #28]
 801803e:	2b00      	cmp	r3, #0
 8018040:	f340 8101 	ble.w	8018246 <_dtoa_r+0x66e>
 8018044:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8018048:	4656      	mov	r6, sl
 801804a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801804e:	4620      	mov	r0, r4
 8018050:	4629      	mov	r1, r5
 8018052:	f7e8 fc2b 	bl	80008ac <__aeabi_ddiv>
 8018056:	f7e8 fdaf 	bl	8000bb8 <__aeabi_d2iz>
 801805a:	4680      	mov	r8, r0
 801805c:	f7e8 fa92 	bl	8000584 <__aeabi_i2d>
 8018060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018064:	f7e8 faf8 	bl	8000658 <__aeabi_dmul>
 8018068:	4602      	mov	r2, r0
 801806a:	460b      	mov	r3, r1
 801806c:	4620      	mov	r0, r4
 801806e:	4629      	mov	r1, r5
 8018070:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018074:	f7e8 f938 	bl	80002e8 <__aeabi_dsub>
 8018078:	f806 4b01 	strb.w	r4, [r6], #1
 801807c:	9d07      	ldr	r5, [sp, #28]
 801807e:	eba6 040a 	sub.w	r4, r6, sl
 8018082:	42a5      	cmp	r5, r4
 8018084:	4602      	mov	r2, r0
 8018086:	460b      	mov	r3, r1
 8018088:	f040 8117 	bne.w	80182ba <_dtoa_r+0x6e2>
 801808c:	f7e8 f92e 	bl	80002ec <__adddf3>
 8018090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018094:	4604      	mov	r4, r0
 8018096:	460d      	mov	r5, r1
 8018098:	f7e8 fd6e 	bl	8000b78 <__aeabi_dcmpgt>
 801809c:	2800      	cmp	r0, #0
 801809e:	f040 80f9 	bne.w	8018294 <_dtoa_r+0x6bc>
 80180a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80180a6:	4620      	mov	r0, r4
 80180a8:	4629      	mov	r1, r5
 80180aa:	f7e8 fd3d 	bl	8000b28 <__aeabi_dcmpeq>
 80180ae:	b118      	cbz	r0, 80180b8 <_dtoa_r+0x4e0>
 80180b0:	f018 0f01 	tst.w	r8, #1
 80180b4:	f040 80ee 	bne.w	8018294 <_dtoa_r+0x6bc>
 80180b8:	4649      	mov	r1, r9
 80180ba:	4658      	mov	r0, fp
 80180bc:	f000 fc90 	bl	80189e0 <_Bfree>
 80180c0:	2300      	movs	r3, #0
 80180c2:	7033      	strb	r3, [r6, #0]
 80180c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80180c6:	3701      	adds	r7, #1
 80180c8:	601f      	str	r7, [r3, #0]
 80180ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	f000 831d 	beq.w	801870c <_dtoa_r+0xb34>
 80180d2:	601e      	str	r6, [r3, #0]
 80180d4:	e31a      	b.n	801870c <_dtoa_r+0xb34>
 80180d6:	07e2      	lsls	r2, r4, #31
 80180d8:	d505      	bpl.n	80180e6 <_dtoa_r+0x50e>
 80180da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80180de:	f7e8 fabb 	bl	8000658 <__aeabi_dmul>
 80180e2:	3601      	adds	r6, #1
 80180e4:	2301      	movs	r3, #1
 80180e6:	1064      	asrs	r4, r4, #1
 80180e8:	3508      	adds	r5, #8
 80180ea:	e73f      	b.n	8017f6c <_dtoa_r+0x394>
 80180ec:	2602      	movs	r6, #2
 80180ee:	e742      	b.n	8017f76 <_dtoa_r+0x39e>
 80180f0:	9c07      	ldr	r4, [sp, #28]
 80180f2:	9704      	str	r7, [sp, #16]
 80180f4:	e761      	b.n	8017fba <_dtoa_r+0x3e2>
 80180f6:	4b27      	ldr	r3, [pc, #156]	@ (8018194 <_dtoa_r+0x5bc>)
 80180f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80180fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80180fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018102:	4454      	add	r4, sl
 8018104:	2900      	cmp	r1, #0
 8018106:	d053      	beq.n	80181b0 <_dtoa_r+0x5d8>
 8018108:	4928      	ldr	r1, [pc, #160]	@ (80181ac <_dtoa_r+0x5d4>)
 801810a:	2000      	movs	r0, #0
 801810c:	f7e8 fbce 	bl	80008ac <__aeabi_ddiv>
 8018110:	4633      	mov	r3, r6
 8018112:	462a      	mov	r2, r5
 8018114:	f7e8 f8e8 	bl	80002e8 <__aeabi_dsub>
 8018118:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801811c:	4656      	mov	r6, sl
 801811e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018122:	f7e8 fd49 	bl	8000bb8 <__aeabi_d2iz>
 8018126:	4605      	mov	r5, r0
 8018128:	f7e8 fa2c 	bl	8000584 <__aeabi_i2d>
 801812c:	4602      	mov	r2, r0
 801812e:	460b      	mov	r3, r1
 8018130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018134:	f7e8 f8d8 	bl	80002e8 <__aeabi_dsub>
 8018138:	3530      	adds	r5, #48	@ 0x30
 801813a:	4602      	mov	r2, r0
 801813c:	460b      	mov	r3, r1
 801813e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018142:	f806 5b01 	strb.w	r5, [r6], #1
 8018146:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801814a:	f7e8 fcf7 	bl	8000b3c <__aeabi_dcmplt>
 801814e:	2800      	cmp	r0, #0
 8018150:	d171      	bne.n	8018236 <_dtoa_r+0x65e>
 8018152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018156:	4911      	ldr	r1, [pc, #68]	@ (801819c <_dtoa_r+0x5c4>)
 8018158:	2000      	movs	r0, #0
 801815a:	f7e8 f8c5 	bl	80002e8 <__aeabi_dsub>
 801815e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8018162:	f7e8 fceb 	bl	8000b3c <__aeabi_dcmplt>
 8018166:	2800      	cmp	r0, #0
 8018168:	f040 8095 	bne.w	8018296 <_dtoa_r+0x6be>
 801816c:	42a6      	cmp	r6, r4
 801816e:	f43f af50 	beq.w	8018012 <_dtoa_r+0x43a>
 8018172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8018176:	4b0a      	ldr	r3, [pc, #40]	@ (80181a0 <_dtoa_r+0x5c8>)
 8018178:	2200      	movs	r2, #0
 801817a:	f7e8 fa6d 	bl	8000658 <__aeabi_dmul>
 801817e:	4b08      	ldr	r3, [pc, #32]	@ (80181a0 <_dtoa_r+0x5c8>)
 8018180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8018184:	2200      	movs	r2, #0
 8018186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801818a:	f7e8 fa65 	bl	8000658 <__aeabi_dmul>
 801818e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018192:	e7c4      	b.n	801811e <_dtoa_r+0x546>
 8018194:	08020778 	.word	0x08020778
 8018198:	08020750 	.word	0x08020750
 801819c:	3ff00000 	.word	0x3ff00000
 80181a0:	40240000 	.word	0x40240000
 80181a4:	401c0000 	.word	0x401c0000
 80181a8:	40140000 	.word	0x40140000
 80181ac:	3fe00000 	.word	0x3fe00000
 80181b0:	4631      	mov	r1, r6
 80181b2:	4628      	mov	r0, r5
 80181b4:	f7e8 fa50 	bl	8000658 <__aeabi_dmul>
 80181b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80181bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80181be:	4656      	mov	r6, sl
 80181c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80181c4:	f7e8 fcf8 	bl	8000bb8 <__aeabi_d2iz>
 80181c8:	4605      	mov	r5, r0
 80181ca:	f7e8 f9db 	bl	8000584 <__aeabi_i2d>
 80181ce:	4602      	mov	r2, r0
 80181d0:	460b      	mov	r3, r1
 80181d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80181d6:	f7e8 f887 	bl	80002e8 <__aeabi_dsub>
 80181da:	3530      	adds	r5, #48	@ 0x30
 80181dc:	f806 5b01 	strb.w	r5, [r6], #1
 80181e0:	4602      	mov	r2, r0
 80181e2:	460b      	mov	r3, r1
 80181e4:	42a6      	cmp	r6, r4
 80181e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80181ea:	f04f 0200 	mov.w	r2, #0
 80181ee:	d124      	bne.n	801823a <_dtoa_r+0x662>
 80181f0:	4bac      	ldr	r3, [pc, #688]	@ (80184a4 <_dtoa_r+0x8cc>)
 80181f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80181f6:	f7e8 f879 	bl	80002ec <__adddf3>
 80181fa:	4602      	mov	r2, r0
 80181fc:	460b      	mov	r3, r1
 80181fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018202:	f7e8 fcb9 	bl	8000b78 <__aeabi_dcmpgt>
 8018206:	2800      	cmp	r0, #0
 8018208:	d145      	bne.n	8018296 <_dtoa_r+0x6be>
 801820a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801820e:	49a5      	ldr	r1, [pc, #660]	@ (80184a4 <_dtoa_r+0x8cc>)
 8018210:	2000      	movs	r0, #0
 8018212:	f7e8 f869 	bl	80002e8 <__aeabi_dsub>
 8018216:	4602      	mov	r2, r0
 8018218:	460b      	mov	r3, r1
 801821a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801821e:	f7e8 fc8d 	bl	8000b3c <__aeabi_dcmplt>
 8018222:	2800      	cmp	r0, #0
 8018224:	f43f aef5 	beq.w	8018012 <_dtoa_r+0x43a>
 8018228:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801822a:	1e73      	subs	r3, r6, #1
 801822c:	9315      	str	r3, [sp, #84]	@ 0x54
 801822e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018232:	2b30      	cmp	r3, #48	@ 0x30
 8018234:	d0f8      	beq.n	8018228 <_dtoa_r+0x650>
 8018236:	9f04      	ldr	r7, [sp, #16]
 8018238:	e73e      	b.n	80180b8 <_dtoa_r+0x4e0>
 801823a:	4b9b      	ldr	r3, [pc, #620]	@ (80184a8 <_dtoa_r+0x8d0>)
 801823c:	f7e8 fa0c 	bl	8000658 <__aeabi_dmul>
 8018240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018244:	e7bc      	b.n	80181c0 <_dtoa_r+0x5e8>
 8018246:	d10c      	bne.n	8018262 <_dtoa_r+0x68a>
 8018248:	4b98      	ldr	r3, [pc, #608]	@ (80184ac <_dtoa_r+0x8d4>)
 801824a:	2200      	movs	r2, #0
 801824c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018250:	f7e8 fa02 	bl	8000658 <__aeabi_dmul>
 8018254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018258:	f7e8 fc84 	bl	8000b64 <__aeabi_dcmpge>
 801825c:	2800      	cmp	r0, #0
 801825e:	f000 8157 	beq.w	8018510 <_dtoa_r+0x938>
 8018262:	2400      	movs	r4, #0
 8018264:	4625      	mov	r5, r4
 8018266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018268:	43db      	mvns	r3, r3
 801826a:	9304      	str	r3, [sp, #16]
 801826c:	4656      	mov	r6, sl
 801826e:	2700      	movs	r7, #0
 8018270:	4621      	mov	r1, r4
 8018272:	4658      	mov	r0, fp
 8018274:	f000 fbb4 	bl	80189e0 <_Bfree>
 8018278:	2d00      	cmp	r5, #0
 801827a:	d0dc      	beq.n	8018236 <_dtoa_r+0x65e>
 801827c:	b12f      	cbz	r7, 801828a <_dtoa_r+0x6b2>
 801827e:	42af      	cmp	r7, r5
 8018280:	d003      	beq.n	801828a <_dtoa_r+0x6b2>
 8018282:	4639      	mov	r1, r7
 8018284:	4658      	mov	r0, fp
 8018286:	f000 fbab 	bl	80189e0 <_Bfree>
 801828a:	4629      	mov	r1, r5
 801828c:	4658      	mov	r0, fp
 801828e:	f000 fba7 	bl	80189e0 <_Bfree>
 8018292:	e7d0      	b.n	8018236 <_dtoa_r+0x65e>
 8018294:	9704      	str	r7, [sp, #16]
 8018296:	4633      	mov	r3, r6
 8018298:	461e      	mov	r6, r3
 801829a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801829e:	2a39      	cmp	r2, #57	@ 0x39
 80182a0:	d107      	bne.n	80182b2 <_dtoa_r+0x6da>
 80182a2:	459a      	cmp	sl, r3
 80182a4:	d1f8      	bne.n	8018298 <_dtoa_r+0x6c0>
 80182a6:	9a04      	ldr	r2, [sp, #16]
 80182a8:	3201      	adds	r2, #1
 80182aa:	9204      	str	r2, [sp, #16]
 80182ac:	2230      	movs	r2, #48	@ 0x30
 80182ae:	f88a 2000 	strb.w	r2, [sl]
 80182b2:	781a      	ldrb	r2, [r3, #0]
 80182b4:	3201      	adds	r2, #1
 80182b6:	701a      	strb	r2, [r3, #0]
 80182b8:	e7bd      	b.n	8018236 <_dtoa_r+0x65e>
 80182ba:	4b7b      	ldr	r3, [pc, #492]	@ (80184a8 <_dtoa_r+0x8d0>)
 80182bc:	2200      	movs	r2, #0
 80182be:	f7e8 f9cb 	bl	8000658 <__aeabi_dmul>
 80182c2:	2200      	movs	r2, #0
 80182c4:	2300      	movs	r3, #0
 80182c6:	4604      	mov	r4, r0
 80182c8:	460d      	mov	r5, r1
 80182ca:	f7e8 fc2d 	bl	8000b28 <__aeabi_dcmpeq>
 80182ce:	2800      	cmp	r0, #0
 80182d0:	f43f aebb 	beq.w	801804a <_dtoa_r+0x472>
 80182d4:	e6f0      	b.n	80180b8 <_dtoa_r+0x4e0>
 80182d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80182d8:	2a00      	cmp	r2, #0
 80182da:	f000 80db 	beq.w	8018494 <_dtoa_r+0x8bc>
 80182de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80182e0:	2a01      	cmp	r2, #1
 80182e2:	f300 80bf 	bgt.w	8018464 <_dtoa_r+0x88c>
 80182e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80182e8:	2a00      	cmp	r2, #0
 80182ea:	f000 80b7 	beq.w	801845c <_dtoa_r+0x884>
 80182ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80182f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80182f4:	4646      	mov	r6, r8
 80182f6:	9a08      	ldr	r2, [sp, #32]
 80182f8:	2101      	movs	r1, #1
 80182fa:	441a      	add	r2, r3
 80182fc:	4658      	mov	r0, fp
 80182fe:	4498      	add	r8, r3
 8018300:	9208      	str	r2, [sp, #32]
 8018302:	f000 fc21 	bl	8018b48 <__i2b>
 8018306:	4605      	mov	r5, r0
 8018308:	b15e      	cbz	r6, 8018322 <_dtoa_r+0x74a>
 801830a:	9b08      	ldr	r3, [sp, #32]
 801830c:	2b00      	cmp	r3, #0
 801830e:	dd08      	ble.n	8018322 <_dtoa_r+0x74a>
 8018310:	42b3      	cmp	r3, r6
 8018312:	9a08      	ldr	r2, [sp, #32]
 8018314:	bfa8      	it	ge
 8018316:	4633      	movge	r3, r6
 8018318:	eba8 0803 	sub.w	r8, r8, r3
 801831c:	1af6      	subs	r6, r6, r3
 801831e:	1ad3      	subs	r3, r2, r3
 8018320:	9308      	str	r3, [sp, #32]
 8018322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018324:	b1f3      	cbz	r3, 8018364 <_dtoa_r+0x78c>
 8018326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018328:	2b00      	cmp	r3, #0
 801832a:	f000 80b7 	beq.w	801849c <_dtoa_r+0x8c4>
 801832e:	b18c      	cbz	r4, 8018354 <_dtoa_r+0x77c>
 8018330:	4629      	mov	r1, r5
 8018332:	4622      	mov	r2, r4
 8018334:	4658      	mov	r0, fp
 8018336:	f000 fcc7 	bl	8018cc8 <__pow5mult>
 801833a:	464a      	mov	r2, r9
 801833c:	4601      	mov	r1, r0
 801833e:	4605      	mov	r5, r0
 8018340:	4658      	mov	r0, fp
 8018342:	f000 fc17 	bl	8018b74 <__multiply>
 8018346:	4649      	mov	r1, r9
 8018348:	9004      	str	r0, [sp, #16]
 801834a:	4658      	mov	r0, fp
 801834c:	f000 fb48 	bl	80189e0 <_Bfree>
 8018350:	9b04      	ldr	r3, [sp, #16]
 8018352:	4699      	mov	r9, r3
 8018354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018356:	1b1a      	subs	r2, r3, r4
 8018358:	d004      	beq.n	8018364 <_dtoa_r+0x78c>
 801835a:	4649      	mov	r1, r9
 801835c:	4658      	mov	r0, fp
 801835e:	f000 fcb3 	bl	8018cc8 <__pow5mult>
 8018362:	4681      	mov	r9, r0
 8018364:	2101      	movs	r1, #1
 8018366:	4658      	mov	r0, fp
 8018368:	f000 fbee 	bl	8018b48 <__i2b>
 801836c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801836e:	4604      	mov	r4, r0
 8018370:	2b00      	cmp	r3, #0
 8018372:	f000 81cf 	beq.w	8018714 <_dtoa_r+0xb3c>
 8018376:	461a      	mov	r2, r3
 8018378:	4601      	mov	r1, r0
 801837a:	4658      	mov	r0, fp
 801837c:	f000 fca4 	bl	8018cc8 <__pow5mult>
 8018380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018382:	2b01      	cmp	r3, #1
 8018384:	4604      	mov	r4, r0
 8018386:	f300 8095 	bgt.w	80184b4 <_dtoa_r+0x8dc>
 801838a:	9b02      	ldr	r3, [sp, #8]
 801838c:	2b00      	cmp	r3, #0
 801838e:	f040 8087 	bne.w	80184a0 <_dtoa_r+0x8c8>
 8018392:	9b03      	ldr	r3, [sp, #12]
 8018394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018398:	2b00      	cmp	r3, #0
 801839a:	f040 8089 	bne.w	80184b0 <_dtoa_r+0x8d8>
 801839e:	9b03      	ldr	r3, [sp, #12]
 80183a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80183a4:	0d1b      	lsrs	r3, r3, #20
 80183a6:	051b      	lsls	r3, r3, #20
 80183a8:	b12b      	cbz	r3, 80183b6 <_dtoa_r+0x7de>
 80183aa:	9b08      	ldr	r3, [sp, #32]
 80183ac:	3301      	adds	r3, #1
 80183ae:	9308      	str	r3, [sp, #32]
 80183b0:	f108 0801 	add.w	r8, r8, #1
 80183b4:	2301      	movs	r3, #1
 80183b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80183b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	f000 81b0 	beq.w	8018720 <_dtoa_r+0xb48>
 80183c0:	6923      	ldr	r3, [r4, #16]
 80183c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80183c6:	6918      	ldr	r0, [r3, #16]
 80183c8:	f000 fb72 	bl	8018ab0 <__hi0bits>
 80183cc:	f1c0 0020 	rsb	r0, r0, #32
 80183d0:	9b08      	ldr	r3, [sp, #32]
 80183d2:	4418      	add	r0, r3
 80183d4:	f010 001f 	ands.w	r0, r0, #31
 80183d8:	d077      	beq.n	80184ca <_dtoa_r+0x8f2>
 80183da:	f1c0 0320 	rsb	r3, r0, #32
 80183de:	2b04      	cmp	r3, #4
 80183e0:	dd6b      	ble.n	80184ba <_dtoa_r+0x8e2>
 80183e2:	9b08      	ldr	r3, [sp, #32]
 80183e4:	f1c0 001c 	rsb	r0, r0, #28
 80183e8:	4403      	add	r3, r0
 80183ea:	4480      	add	r8, r0
 80183ec:	4406      	add	r6, r0
 80183ee:	9308      	str	r3, [sp, #32]
 80183f0:	f1b8 0f00 	cmp.w	r8, #0
 80183f4:	dd05      	ble.n	8018402 <_dtoa_r+0x82a>
 80183f6:	4649      	mov	r1, r9
 80183f8:	4642      	mov	r2, r8
 80183fa:	4658      	mov	r0, fp
 80183fc:	f000 fcbe 	bl	8018d7c <__lshift>
 8018400:	4681      	mov	r9, r0
 8018402:	9b08      	ldr	r3, [sp, #32]
 8018404:	2b00      	cmp	r3, #0
 8018406:	dd05      	ble.n	8018414 <_dtoa_r+0x83c>
 8018408:	4621      	mov	r1, r4
 801840a:	461a      	mov	r2, r3
 801840c:	4658      	mov	r0, fp
 801840e:	f000 fcb5 	bl	8018d7c <__lshift>
 8018412:	4604      	mov	r4, r0
 8018414:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018416:	2b00      	cmp	r3, #0
 8018418:	d059      	beq.n	80184ce <_dtoa_r+0x8f6>
 801841a:	4621      	mov	r1, r4
 801841c:	4648      	mov	r0, r9
 801841e:	f000 fd19 	bl	8018e54 <__mcmp>
 8018422:	2800      	cmp	r0, #0
 8018424:	da53      	bge.n	80184ce <_dtoa_r+0x8f6>
 8018426:	1e7b      	subs	r3, r7, #1
 8018428:	9304      	str	r3, [sp, #16]
 801842a:	4649      	mov	r1, r9
 801842c:	2300      	movs	r3, #0
 801842e:	220a      	movs	r2, #10
 8018430:	4658      	mov	r0, fp
 8018432:	f000 faf7 	bl	8018a24 <__multadd>
 8018436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018438:	4681      	mov	r9, r0
 801843a:	2b00      	cmp	r3, #0
 801843c:	f000 8172 	beq.w	8018724 <_dtoa_r+0xb4c>
 8018440:	2300      	movs	r3, #0
 8018442:	4629      	mov	r1, r5
 8018444:	220a      	movs	r2, #10
 8018446:	4658      	mov	r0, fp
 8018448:	f000 faec 	bl	8018a24 <__multadd>
 801844c:	9b00      	ldr	r3, [sp, #0]
 801844e:	2b00      	cmp	r3, #0
 8018450:	4605      	mov	r5, r0
 8018452:	dc67      	bgt.n	8018524 <_dtoa_r+0x94c>
 8018454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018456:	2b02      	cmp	r3, #2
 8018458:	dc41      	bgt.n	80184de <_dtoa_r+0x906>
 801845a:	e063      	b.n	8018524 <_dtoa_r+0x94c>
 801845c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801845e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8018462:	e746      	b.n	80182f2 <_dtoa_r+0x71a>
 8018464:	9b07      	ldr	r3, [sp, #28]
 8018466:	1e5c      	subs	r4, r3, #1
 8018468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801846a:	42a3      	cmp	r3, r4
 801846c:	bfbf      	itttt	lt
 801846e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8018470:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8018472:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8018474:	1ae3      	sublt	r3, r4, r3
 8018476:	bfb4      	ite	lt
 8018478:	18d2      	addlt	r2, r2, r3
 801847a:	1b1c      	subge	r4, r3, r4
 801847c:	9b07      	ldr	r3, [sp, #28]
 801847e:	bfbc      	itt	lt
 8018480:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8018482:	2400      	movlt	r4, #0
 8018484:	2b00      	cmp	r3, #0
 8018486:	bfb5      	itete	lt
 8018488:	eba8 0603 	sublt.w	r6, r8, r3
 801848c:	9b07      	ldrge	r3, [sp, #28]
 801848e:	2300      	movlt	r3, #0
 8018490:	4646      	movge	r6, r8
 8018492:	e730      	b.n	80182f6 <_dtoa_r+0x71e>
 8018494:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018496:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018498:	4646      	mov	r6, r8
 801849a:	e735      	b.n	8018308 <_dtoa_r+0x730>
 801849c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801849e:	e75c      	b.n	801835a <_dtoa_r+0x782>
 80184a0:	2300      	movs	r3, #0
 80184a2:	e788      	b.n	80183b6 <_dtoa_r+0x7de>
 80184a4:	3fe00000 	.word	0x3fe00000
 80184a8:	40240000 	.word	0x40240000
 80184ac:	40140000 	.word	0x40140000
 80184b0:	9b02      	ldr	r3, [sp, #8]
 80184b2:	e780      	b.n	80183b6 <_dtoa_r+0x7de>
 80184b4:	2300      	movs	r3, #0
 80184b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80184b8:	e782      	b.n	80183c0 <_dtoa_r+0x7e8>
 80184ba:	d099      	beq.n	80183f0 <_dtoa_r+0x818>
 80184bc:	9a08      	ldr	r2, [sp, #32]
 80184be:	331c      	adds	r3, #28
 80184c0:	441a      	add	r2, r3
 80184c2:	4498      	add	r8, r3
 80184c4:	441e      	add	r6, r3
 80184c6:	9208      	str	r2, [sp, #32]
 80184c8:	e792      	b.n	80183f0 <_dtoa_r+0x818>
 80184ca:	4603      	mov	r3, r0
 80184cc:	e7f6      	b.n	80184bc <_dtoa_r+0x8e4>
 80184ce:	9b07      	ldr	r3, [sp, #28]
 80184d0:	9704      	str	r7, [sp, #16]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	dc20      	bgt.n	8018518 <_dtoa_r+0x940>
 80184d6:	9300      	str	r3, [sp, #0]
 80184d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80184da:	2b02      	cmp	r3, #2
 80184dc:	dd1e      	ble.n	801851c <_dtoa_r+0x944>
 80184de:	9b00      	ldr	r3, [sp, #0]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	f47f aec0 	bne.w	8018266 <_dtoa_r+0x68e>
 80184e6:	4621      	mov	r1, r4
 80184e8:	2205      	movs	r2, #5
 80184ea:	4658      	mov	r0, fp
 80184ec:	f000 fa9a 	bl	8018a24 <__multadd>
 80184f0:	4601      	mov	r1, r0
 80184f2:	4604      	mov	r4, r0
 80184f4:	4648      	mov	r0, r9
 80184f6:	f000 fcad 	bl	8018e54 <__mcmp>
 80184fa:	2800      	cmp	r0, #0
 80184fc:	f77f aeb3 	ble.w	8018266 <_dtoa_r+0x68e>
 8018500:	4656      	mov	r6, sl
 8018502:	2331      	movs	r3, #49	@ 0x31
 8018504:	f806 3b01 	strb.w	r3, [r6], #1
 8018508:	9b04      	ldr	r3, [sp, #16]
 801850a:	3301      	adds	r3, #1
 801850c:	9304      	str	r3, [sp, #16]
 801850e:	e6ae      	b.n	801826e <_dtoa_r+0x696>
 8018510:	9c07      	ldr	r4, [sp, #28]
 8018512:	9704      	str	r7, [sp, #16]
 8018514:	4625      	mov	r5, r4
 8018516:	e7f3      	b.n	8018500 <_dtoa_r+0x928>
 8018518:	9b07      	ldr	r3, [sp, #28]
 801851a:	9300      	str	r3, [sp, #0]
 801851c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801851e:	2b00      	cmp	r3, #0
 8018520:	f000 8104 	beq.w	801872c <_dtoa_r+0xb54>
 8018524:	2e00      	cmp	r6, #0
 8018526:	dd05      	ble.n	8018534 <_dtoa_r+0x95c>
 8018528:	4629      	mov	r1, r5
 801852a:	4632      	mov	r2, r6
 801852c:	4658      	mov	r0, fp
 801852e:	f000 fc25 	bl	8018d7c <__lshift>
 8018532:	4605      	mov	r5, r0
 8018534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018536:	2b00      	cmp	r3, #0
 8018538:	d05a      	beq.n	80185f0 <_dtoa_r+0xa18>
 801853a:	6869      	ldr	r1, [r5, #4]
 801853c:	4658      	mov	r0, fp
 801853e:	f000 fa0f 	bl	8018960 <_Balloc>
 8018542:	4606      	mov	r6, r0
 8018544:	b928      	cbnz	r0, 8018552 <_dtoa_r+0x97a>
 8018546:	4b84      	ldr	r3, [pc, #528]	@ (8018758 <_dtoa_r+0xb80>)
 8018548:	4602      	mov	r2, r0
 801854a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801854e:	f7ff bb5a 	b.w	8017c06 <_dtoa_r+0x2e>
 8018552:	692a      	ldr	r2, [r5, #16]
 8018554:	3202      	adds	r2, #2
 8018556:	0092      	lsls	r2, r2, #2
 8018558:	f105 010c 	add.w	r1, r5, #12
 801855c:	300c      	adds	r0, #12
 801855e:	f7ff fa86 	bl	8017a6e <memcpy>
 8018562:	2201      	movs	r2, #1
 8018564:	4631      	mov	r1, r6
 8018566:	4658      	mov	r0, fp
 8018568:	f000 fc08 	bl	8018d7c <__lshift>
 801856c:	f10a 0301 	add.w	r3, sl, #1
 8018570:	9307      	str	r3, [sp, #28]
 8018572:	9b00      	ldr	r3, [sp, #0]
 8018574:	4453      	add	r3, sl
 8018576:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018578:	9b02      	ldr	r3, [sp, #8]
 801857a:	f003 0301 	and.w	r3, r3, #1
 801857e:	462f      	mov	r7, r5
 8018580:	930a      	str	r3, [sp, #40]	@ 0x28
 8018582:	4605      	mov	r5, r0
 8018584:	9b07      	ldr	r3, [sp, #28]
 8018586:	4621      	mov	r1, r4
 8018588:	3b01      	subs	r3, #1
 801858a:	4648      	mov	r0, r9
 801858c:	9300      	str	r3, [sp, #0]
 801858e:	f7ff fa9b 	bl	8017ac8 <quorem>
 8018592:	4639      	mov	r1, r7
 8018594:	9002      	str	r0, [sp, #8]
 8018596:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801859a:	4648      	mov	r0, r9
 801859c:	f000 fc5a 	bl	8018e54 <__mcmp>
 80185a0:	462a      	mov	r2, r5
 80185a2:	9008      	str	r0, [sp, #32]
 80185a4:	4621      	mov	r1, r4
 80185a6:	4658      	mov	r0, fp
 80185a8:	f000 fc70 	bl	8018e8c <__mdiff>
 80185ac:	68c2      	ldr	r2, [r0, #12]
 80185ae:	4606      	mov	r6, r0
 80185b0:	bb02      	cbnz	r2, 80185f4 <_dtoa_r+0xa1c>
 80185b2:	4601      	mov	r1, r0
 80185b4:	4648      	mov	r0, r9
 80185b6:	f000 fc4d 	bl	8018e54 <__mcmp>
 80185ba:	4602      	mov	r2, r0
 80185bc:	4631      	mov	r1, r6
 80185be:	4658      	mov	r0, fp
 80185c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80185c2:	f000 fa0d 	bl	80189e0 <_Bfree>
 80185c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80185ca:	9e07      	ldr	r6, [sp, #28]
 80185cc:	ea43 0102 	orr.w	r1, r3, r2
 80185d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80185d2:	4319      	orrs	r1, r3
 80185d4:	d110      	bne.n	80185f8 <_dtoa_r+0xa20>
 80185d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80185da:	d029      	beq.n	8018630 <_dtoa_r+0xa58>
 80185dc:	9b08      	ldr	r3, [sp, #32]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	dd02      	ble.n	80185e8 <_dtoa_r+0xa10>
 80185e2:	9b02      	ldr	r3, [sp, #8]
 80185e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80185e8:	9b00      	ldr	r3, [sp, #0]
 80185ea:	f883 8000 	strb.w	r8, [r3]
 80185ee:	e63f      	b.n	8018270 <_dtoa_r+0x698>
 80185f0:	4628      	mov	r0, r5
 80185f2:	e7bb      	b.n	801856c <_dtoa_r+0x994>
 80185f4:	2201      	movs	r2, #1
 80185f6:	e7e1      	b.n	80185bc <_dtoa_r+0x9e4>
 80185f8:	9b08      	ldr	r3, [sp, #32]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	db04      	blt.n	8018608 <_dtoa_r+0xa30>
 80185fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018600:	430b      	orrs	r3, r1
 8018602:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018604:	430b      	orrs	r3, r1
 8018606:	d120      	bne.n	801864a <_dtoa_r+0xa72>
 8018608:	2a00      	cmp	r2, #0
 801860a:	dded      	ble.n	80185e8 <_dtoa_r+0xa10>
 801860c:	4649      	mov	r1, r9
 801860e:	2201      	movs	r2, #1
 8018610:	4658      	mov	r0, fp
 8018612:	f000 fbb3 	bl	8018d7c <__lshift>
 8018616:	4621      	mov	r1, r4
 8018618:	4681      	mov	r9, r0
 801861a:	f000 fc1b 	bl	8018e54 <__mcmp>
 801861e:	2800      	cmp	r0, #0
 8018620:	dc03      	bgt.n	801862a <_dtoa_r+0xa52>
 8018622:	d1e1      	bne.n	80185e8 <_dtoa_r+0xa10>
 8018624:	f018 0f01 	tst.w	r8, #1
 8018628:	d0de      	beq.n	80185e8 <_dtoa_r+0xa10>
 801862a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801862e:	d1d8      	bne.n	80185e2 <_dtoa_r+0xa0a>
 8018630:	9a00      	ldr	r2, [sp, #0]
 8018632:	2339      	movs	r3, #57	@ 0x39
 8018634:	7013      	strb	r3, [r2, #0]
 8018636:	4633      	mov	r3, r6
 8018638:	461e      	mov	r6, r3
 801863a:	3b01      	subs	r3, #1
 801863c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018640:	2a39      	cmp	r2, #57	@ 0x39
 8018642:	d052      	beq.n	80186ea <_dtoa_r+0xb12>
 8018644:	3201      	adds	r2, #1
 8018646:	701a      	strb	r2, [r3, #0]
 8018648:	e612      	b.n	8018270 <_dtoa_r+0x698>
 801864a:	2a00      	cmp	r2, #0
 801864c:	dd07      	ble.n	801865e <_dtoa_r+0xa86>
 801864e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018652:	d0ed      	beq.n	8018630 <_dtoa_r+0xa58>
 8018654:	9a00      	ldr	r2, [sp, #0]
 8018656:	f108 0301 	add.w	r3, r8, #1
 801865a:	7013      	strb	r3, [r2, #0]
 801865c:	e608      	b.n	8018270 <_dtoa_r+0x698>
 801865e:	9b07      	ldr	r3, [sp, #28]
 8018660:	9a07      	ldr	r2, [sp, #28]
 8018662:	f803 8c01 	strb.w	r8, [r3, #-1]
 8018666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018668:	4293      	cmp	r3, r2
 801866a:	d028      	beq.n	80186be <_dtoa_r+0xae6>
 801866c:	4649      	mov	r1, r9
 801866e:	2300      	movs	r3, #0
 8018670:	220a      	movs	r2, #10
 8018672:	4658      	mov	r0, fp
 8018674:	f000 f9d6 	bl	8018a24 <__multadd>
 8018678:	42af      	cmp	r7, r5
 801867a:	4681      	mov	r9, r0
 801867c:	f04f 0300 	mov.w	r3, #0
 8018680:	f04f 020a 	mov.w	r2, #10
 8018684:	4639      	mov	r1, r7
 8018686:	4658      	mov	r0, fp
 8018688:	d107      	bne.n	801869a <_dtoa_r+0xac2>
 801868a:	f000 f9cb 	bl	8018a24 <__multadd>
 801868e:	4607      	mov	r7, r0
 8018690:	4605      	mov	r5, r0
 8018692:	9b07      	ldr	r3, [sp, #28]
 8018694:	3301      	adds	r3, #1
 8018696:	9307      	str	r3, [sp, #28]
 8018698:	e774      	b.n	8018584 <_dtoa_r+0x9ac>
 801869a:	f000 f9c3 	bl	8018a24 <__multadd>
 801869e:	4629      	mov	r1, r5
 80186a0:	4607      	mov	r7, r0
 80186a2:	2300      	movs	r3, #0
 80186a4:	220a      	movs	r2, #10
 80186a6:	4658      	mov	r0, fp
 80186a8:	f000 f9bc 	bl	8018a24 <__multadd>
 80186ac:	4605      	mov	r5, r0
 80186ae:	e7f0      	b.n	8018692 <_dtoa_r+0xaba>
 80186b0:	9b00      	ldr	r3, [sp, #0]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	bfcc      	ite	gt
 80186b6:	461e      	movgt	r6, r3
 80186b8:	2601      	movle	r6, #1
 80186ba:	4456      	add	r6, sl
 80186bc:	2700      	movs	r7, #0
 80186be:	4649      	mov	r1, r9
 80186c0:	2201      	movs	r2, #1
 80186c2:	4658      	mov	r0, fp
 80186c4:	f000 fb5a 	bl	8018d7c <__lshift>
 80186c8:	4621      	mov	r1, r4
 80186ca:	4681      	mov	r9, r0
 80186cc:	f000 fbc2 	bl	8018e54 <__mcmp>
 80186d0:	2800      	cmp	r0, #0
 80186d2:	dcb0      	bgt.n	8018636 <_dtoa_r+0xa5e>
 80186d4:	d102      	bne.n	80186dc <_dtoa_r+0xb04>
 80186d6:	f018 0f01 	tst.w	r8, #1
 80186da:	d1ac      	bne.n	8018636 <_dtoa_r+0xa5e>
 80186dc:	4633      	mov	r3, r6
 80186de:	461e      	mov	r6, r3
 80186e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80186e4:	2a30      	cmp	r2, #48	@ 0x30
 80186e6:	d0fa      	beq.n	80186de <_dtoa_r+0xb06>
 80186e8:	e5c2      	b.n	8018270 <_dtoa_r+0x698>
 80186ea:	459a      	cmp	sl, r3
 80186ec:	d1a4      	bne.n	8018638 <_dtoa_r+0xa60>
 80186ee:	9b04      	ldr	r3, [sp, #16]
 80186f0:	3301      	adds	r3, #1
 80186f2:	9304      	str	r3, [sp, #16]
 80186f4:	2331      	movs	r3, #49	@ 0x31
 80186f6:	f88a 3000 	strb.w	r3, [sl]
 80186fa:	e5b9      	b.n	8018270 <_dtoa_r+0x698>
 80186fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80186fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801875c <_dtoa_r+0xb84>
 8018702:	b11b      	cbz	r3, 801870c <_dtoa_r+0xb34>
 8018704:	f10a 0308 	add.w	r3, sl, #8
 8018708:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801870a:	6013      	str	r3, [r2, #0]
 801870c:	4650      	mov	r0, sl
 801870e:	b019      	add	sp, #100	@ 0x64
 8018710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018716:	2b01      	cmp	r3, #1
 8018718:	f77f ae37 	ble.w	801838a <_dtoa_r+0x7b2>
 801871c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801871e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018720:	2001      	movs	r0, #1
 8018722:	e655      	b.n	80183d0 <_dtoa_r+0x7f8>
 8018724:	9b00      	ldr	r3, [sp, #0]
 8018726:	2b00      	cmp	r3, #0
 8018728:	f77f aed6 	ble.w	80184d8 <_dtoa_r+0x900>
 801872c:	4656      	mov	r6, sl
 801872e:	4621      	mov	r1, r4
 8018730:	4648      	mov	r0, r9
 8018732:	f7ff f9c9 	bl	8017ac8 <quorem>
 8018736:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801873a:	f806 8b01 	strb.w	r8, [r6], #1
 801873e:	9b00      	ldr	r3, [sp, #0]
 8018740:	eba6 020a 	sub.w	r2, r6, sl
 8018744:	4293      	cmp	r3, r2
 8018746:	ddb3      	ble.n	80186b0 <_dtoa_r+0xad8>
 8018748:	4649      	mov	r1, r9
 801874a:	2300      	movs	r3, #0
 801874c:	220a      	movs	r2, #10
 801874e:	4658      	mov	r0, fp
 8018750:	f000 f968 	bl	8018a24 <__multadd>
 8018754:	4681      	mov	r9, r0
 8018756:	e7ea      	b.n	801872e <_dtoa_r+0xb56>
 8018758:	080206d7 	.word	0x080206d7
 801875c:	08020672 	.word	0x08020672

08018760 <_free_r>:
 8018760:	b538      	push	{r3, r4, r5, lr}
 8018762:	4605      	mov	r5, r0
 8018764:	2900      	cmp	r1, #0
 8018766:	d041      	beq.n	80187ec <_free_r+0x8c>
 8018768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801876c:	1f0c      	subs	r4, r1, #4
 801876e:	2b00      	cmp	r3, #0
 8018770:	bfb8      	it	lt
 8018772:	18e4      	addlt	r4, r4, r3
 8018774:	f000 f8e8 	bl	8018948 <__malloc_lock>
 8018778:	4a1d      	ldr	r2, [pc, #116]	@ (80187f0 <_free_r+0x90>)
 801877a:	6813      	ldr	r3, [r2, #0]
 801877c:	b933      	cbnz	r3, 801878c <_free_r+0x2c>
 801877e:	6063      	str	r3, [r4, #4]
 8018780:	6014      	str	r4, [r2, #0]
 8018782:	4628      	mov	r0, r5
 8018784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018788:	f000 b8e4 	b.w	8018954 <__malloc_unlock>
 801878c:	42a3      	cmp	r3, r4
 801878e:	d908      	bls.n	80187a2 <_free_r+0x42>
 8018790:	6820      	ldr	r0, [r4, #0]
 8018792:	1821      	adds	r1, r4, r0
 8018794:	428b      	cmp	r3, r1
 8018796:	bf01      	itttt	eq
 8018798:	6819      	ldreq	r1, [r3, #0]
 801879a:	685b      	ldreq	r3, [r3, #4]
 801879c:	1809      	addeq	r1, r1, r0
 801879e:	6021      	streq	r1, [r4, #0]
 80187a0:	e7ed      	b.n	801877e <_free_r+0x1e>
 80187a2:	461a      	mov	r2, r3
 80187a4:	685b      	ldr	r3, [r3, #4]
 80187a6:	b10b      	cbz	r3, 80187ac <_free_r+0x4c>
 80187a8:	42a3      	cmp	r3, r4
 80187aa:	d9fa      	bls.n	80187a2 <_free_r+0x42>
 80187ac:	6811      	ldr	r1, [r2, #0]
 80187ae:	1850      	adds	r0, r2, r1
 80187b0:	42a0      	cmp	r0, r4
 80187b2:	d10b      	bne.n	80187cc <_free_r+0x6c>
 80187b4:	6820      	ldr	r0, [r4, #0]
 80187b6:	4401      	add	r1, r0
 80187b8:	1850      	adds	r0, r2, r1
 80187ba:	4283      	cmp	r3, r0
 80187bc:	6011      	str	r1, [r2, #0]
 80187be:	d1e0      	bne.n	8018782 <_free_r+0x22>
 80187c0:	6818      	ldr	r0, [r3, #0]
 80187c2:	685b      	ldr	r3, [r3, #4]
 80187c4:	6053      	str	r3, [r2, #4]
 80187c6:	4408      	add	r0, r1
 80187c8:	6010      	str	r0, [r2, #0]
 80187ca:	e7da      	b.n	8018782 <_free_r+0x22>
 80187cc:	d902      	bls.n	80187d4 <_free_r+0x74>
 80187ce:	230c      	movs	r3, #12
 80187d0:	602b      	str	r3, [r5, #0]
 80187d2:	e7d6      	b.n	8018782 <_free_r+0x22>
 80187d4:	6820      	ldr	r0, [r4, #0]
 80187d6:	1821      	adds	r1, r4, r0
 80187d8:	428b      	cmp	r3, r1
 80187da:	bf04      	itt	eq
 80187dc:	6819      	ldreq	r1, [r3, #0]
 80187de:	685b      	ldreq	r3, [r3, #4]
 80187e0:	6063      	str	r3, [r4, #4]
 80187e2:	bf04      	itt	eq
 80187e4:	1809      	addeq	r1, r1, r0
 80187e6:	6021      	streq	r1, [r4, #0]
 80187e8:	6054      	str	r4, [r2, #4]
 80187ea:	e7ca      	b.n	8018782 <_free_r+0x22>
 80187ec:	bd38      	pop	{r3, r4, r5, pc}
 80187ee:	bf00      	nop
 80187f0:	20009280 	.word	0x20009280

080187f4 <malloc>:
 80187f4:	4b02      	ldr	r3, [pc, #8]	@ (8018800 <malloc+0xc>)
 80187f6:	4601      	mov	r1, r0
 80187f8:	6818      	ldr	r0, [r3, #0]
 80187fa:	f000 b825 	b.w	8018848 <_malloc_r>
 80187fe:	bf00      	nop
 8018800:	20000048 	.word	0x20000048

08018804 <sbrk_aligned>:
 8018804:	b570      	push	{r4, r5, r6, lr}
 8018806:	4e0f      	ldr	r6, [pc, #60]	@ (8018844 <sbrk_aligned+0x40>)
 8018808:	460c      	mov	r4, r1
 801880a:	6831      	ldr	r1, [r6, #0]
 801880c:	4605      	mov	r5, r0
 801880e:	b911      	cbnz	r1, 8018816 <sbrk_aligned+0x12>
 8018810:	f001 f814 	bl	801983c <_sbrk_r>
 8018814:	6030      	str	r0, [r6, #0]
 8018816:	4621      	mov	r1, r4
 8018818:	4628      	mov	r0, r5
 801881a:	f001 f80f 	bl	801983c <_sbrk_r>
 801881e:	1c43      	adds	r3, r0, #1
 8018820:	d103      	bne.n	801882a <sbrk_aligned+0x26>
 8018822:	f04f 34ff 	mov.w	r4, #4294967295
 8018826:	4620      	mov	r0, r4
 8018828:	bd70      	pop	{r4, r5, r6, pc}
 801882a:	1cc4      	adds	r4, r0, #3
 801882c:	f024 0403 	bic.w	r4, r4, #3
 8018830:	42a0      	cmp	r0, r4
 8018832:	d0f8      	beq.n	8018826 <sbrk_aligned+0x22>
 8018834:	1a21      	subs	r1, r4, r0
 8018836:	4628      	mov	r0, r5
 8018838:	f001 f800 	bl	801983c <_sbrk_r>
 801883c:	3001      	adds	r0, #1
 801883e:	d1f2      	bne.n	8018826 <sbrk_aligned+0x22>
 8018840:	e7ef      	b.n	8018822 <sbrk_aligned+0x1e>
 8018842:	bf00      	nop
 8018844:	2000927c 	.word	0x2000927c

08018848 <_malloc_r>:
 8018848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801884c:	1ccd      	adds	r5, r1, #3
 801884e:	f025 0503 	bic.w	r5, r5, #3
 8018852:	3508      	adds	r5, #8
 8018854:	2d0c      	cmp	r5, #12
 8018856:	bf38      	it	cc
 8018858:	250c      	movcc	r5, #12
 801885a:	2d00      	cmp	r5, #0
 801885c:	4606      	mov	r6, r0
 801885e:	db01      	blt.n	8018864 <_malloc_r+0x1c>
 8018860:	42a9      	cmp	r1, r5
 8018862:	d904      	bls.n	801886e <_malloc_r+0x26>
 8018864:	230c      	movs	r3, #12
 8018866:	6033      	str	r3, [r6, #0]
 8018868:	2000      	movs	r0, #0
 801886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801886e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018944 <_malloc_r+0xfc>
 8018872:	f000 f869 	bl	8018948 <__malloc_lock>
 8018876:	f8d8 3000 	ldr.w	r3, [r8]
 801887a:	461c      	mov	r4, r3
 801887c:	bb44      	cbnz	r4, 80188d0 <_malloc_r+0x88>
 801887e:	4629      	mov	r1, r5
 8018880:	4630      	mov	r0, r6
 8018882:	f7ff ffbf 	bl	8018804 <sbrk_aligned>
 8018886:	1c43      	adds	r3, r0, #1
 8018888:	4604      	mov	r4, r0
 801888a:	d158      	bne.n	801893e <_malloc_r+0xf6>
 801888c:	f8d8 4000 	ldr.w	r4, [r8]
 8018890:	4627      	mov	r7, r4
 8018892:	2f00      	cmp	r7, #0
 8018894:	d143      	bne.n	801891e <_malloc_r+0xd6>
 8018896:	2c00      	cmp	r4, #0
 8018898:	d04b      	beq.n	8018932 <_malloc_r+0xea>
 801889a:	6823      	ldr	r3, [r4, #0]
 801889c:	4639      	mov	r1, r7
 801889e:	4630      	mov	r0, r6
 80188a0:	eb04 0903 	add.w	r9, r4, r3
 80188a4:	f000 ffca 	bl	801983c <_sbrk_r>
 80188a8:	4581      	cmp	r9, r0
 80188aa:	d142      	bne.n	8018932 <_malloc_r+0xea>
 80188ac:	6821      	ldr	r1, [r4, #0]
 80188ae:	1a6d      	subs	r5, r5, r1
 80188b0:	4629      	mov	r1, r5
 80188b2:	4630      	mov	r0, r6
 80188b4:	f7ff ffa6 	bl	8018804 <sbrk_aligned>
 80188b8:	3001      	adds	r0, #1
 80188ba:	d03a      	beq.n	8018932 <_malloc_r+0xea>
 80188bc:	6823      	ldr	r3, [r4, #0]
 80188be:	442b      	add	r3, r5
 80188c0:	6023      	str	r3, [r4, #0]
 80188c2:	f8d8 3000 	ldr.w	r3, [r8]
 80188c6:	685a      	ldr	r2, [r3, #4]
 80188c8:	bb62      	cbnz	r2, 8018924 <_malloc_r+0xdc>
 80188ca:	f8c8 7000 	str.w	r7, [r8]
 80188ce:	e00f      	b.n	80188f0 <_malloc_r+0xa8>
 80188d0:	6822      	ldr	r2, [r4, #0]
 80188d2:	1b52      	subs	r2, r2, r5
 80188d4:	d420      	bmi.n	8018918 <_malloc_r+0xd0>
 80188d6:	2a0b      	cmp	r2, #11
 80188d8:	d917      	bls.n	801890a <_malloc_r+0xc2>
 80188da:	1961      	adds	r1, r4, r5
 80188dc:	42a3      	cmp	r3, r4
 80188de:	6025      	str	r5, [r4, #0]
 80188e0:	bf18      	it	ne
 80188e2:	6059      	strne	r1, [r3, #4]
 80188e4:	6863      	ldr	r3, [r4, #4]
 80188e6:	bf08      	it	eq
 80188e8:	f8c8 1000 	streq.w	r1, [r8]
 80188ec:	5162      	str	r2, [r4, r5]
 80188ee:	604b      	str	r3, [r1, #4]
 80188f0:	4630      	mov	r0, r6
 80188f2:	f000 f82f 	bl	8018954 <__malloc_unlock>
 80188f6:	f104 000b 	add.w	r0, r4, #11
 80188fa:	1d23      	adds	r3, r4, #4
 80188fc:	f020 0007 	bic.w	r0, r0, #7
 8018900:	1ac2      	subs	r2, r0, r3
 8018902:	bf1c      	itt	ne
 8018904:	1a1b      	subne	r3, r3, r0
 8018906:	50a3      	strne	r3, [r4, r2]
 8018908:	e7af      	b.n	801886a <_malloc_r+0x22>
 801890a:	6862      	ldr	r2, [r4, #4]
 801890c:	42a3      	cmp	r3, r4
 801890e:	bf0c      	ite	eq
 8018910:	f8c8 2000 	streq.w	r2, [r8]
 8018914:	605a      	strne	r2, [r3, #4]
 8018916:	e7eb      	b.n	80188f0 <_malloc_r+0xa8>
 8018918:	4623      	mov	r3, r4
 801891a:	6864      	ldr	r4, [r4, #4]
 801891c:	e7ae      	b.n	801887c <_malloc_r+0x34>
 801891e:	463c      	mov	r4, r7
 8018920:	687f      	ldr	r7, [r7, #4]
 8018922:	e7b6      	b.n	8018892 <_malloc_r+0x4a>
 8018924:	461a      	mov	r2, r3
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	42a3      	cmp	r3, r4
 801892a:	d1fb      	bne.n	8018924 <_malloc_r+0xdc>
 801892c:	2300      	movs	r3, #0
 801892e:	6053      	str	r3, [r2, #4]
 8018930:	e7de      	b.n	80188f0 <_malloc_r+0xa8>
 8018932:	230c      	movs	r3, #12
 8018934:	6033      	str	r3, [r6, #0]
 8018936:	4630      	mov	r0, r6
 8018938:	f000 f80c 	bl	8018954 <__malloc_unlock>
 801893c:	e794      	b.n	8018868 <_malloc_r+0x20>
 801893e:	6005      	str	r5, [r0, #0]
 8018940:	e7d6      	b.n	80188f0 <_malloc_r+0xa8>
 8018942:	bf00      	nop
 8018944:	20009280 	.word	0x20009280

08018948 <__malloc_lock>:
 8018948:	4801      	ldr	r0, [pc, #4]	@ (8018950 <__malloc_lock+0x8>)
 801894a:	f7ff b88e 	b.w	8017a6a <__retarget_lock_acquire_recursive>
 801894e:	bf00      	nop
 8018950:	20009278 	.word	0x20009278

08018954 <__malloc_unlock>:
 8018954:	4801      	ldr	r0, [pc, #4]	@ (801895c <__malloc_unlock+0x8>)
 8018956:	f7ff b889 	b.w	8017a6c <__retarget_lock_release_recursive>
 801895a:	bf00      	nop
 801895c:	20009278 	.word	0x20009278

08018960 <_Balloc>:
 8018960:	b570      	push	{r4, r5, r6, lr}
 8018962:	69c6      	ldr	r6, [r0, #28]
 8018964:	4604      	mov	r4, r0
 8018966:	460d      	mov	r5, r1
 8018968:	b976      	cbnz	r6, 8018988 <_Balloc+0x28>
 801896a:	2010      	movs	r0, #16
 801896c:	f7ff ff42 	bl	80187f4 <malloc>
 8018970:	4602      	mov	r2, r0
 8018972:	61e0      	str	r0, [r4, #28]
 8018974:	b920      	cbnz	r0, 8018980 <_Balloc+0x20>
 8018976:	4b18      	ldr	r3, [pc, #96]	@ (80189d8 <_Balloc+0x78>)
 8018978:	4818      	ldr	r0, [pc, #96]	@ (80189dc <_Balloc+0x7c>)
 801897a:	216b      	movs	r1, #107	@ 0x6b
 801897c:	f7ff f886 	bl	8017a8c <__assert_func>
 8018980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018984:	6006      	str	r6, [r0, #0]
 8018986:	60c6      	str	r6, [r0, #12]
 8018988:	69e6      	ldr	r6, [r4, #28]
 801898a:	68f3      	ldr	r3, [r6, #12]
 801898c:	b183      	cbz	r3, 80189b0 <_Balloc+0x50>
 801898e:	69e3      	ldr	r3, [r4, #28]
 8018990:	68db      	ldr	r3, [r3, #12]
 8018992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018996:	b9b8      	cbnz	r0, 80189c8 <_Balloc+0x68>
 8018998:	2101      	movs	r1, #1
 801899a:	fa01 f605 	lsl.w	r6, r1, r5
 801899e:	1d72      	adds	r2, r6, #5
 80189a0:	0092      	lsls	r2, r2, #2
 80189a2:	4620      	mov	r0, r4
 80189a4:	f000 ff61 	bl	801986a <_calloc_r>
 80189a8:	b160      	cbz	r0, 80189c4 <_Balloc+0x64>
 80189aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80189ae:	e00e      	b.n	80189ce <_Balloc+0x6e>
 80189b0:	2221      	movs	r2, #33	@ 0x21
 80189b2:	2104      	movs	r1, #4
 80189b4:	4620      	mov	r0, r4
 80189b6:	f000 ff58 	bl	801986a <_calloc_r>
 80189ba:	69e3      	ldr	r3, [r4, #28]
 80189bc:	60f0      	str	r0, [r6, #12]
 80189be:	68db      	ldr	r3, [r3, #12]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d1e4      	bne.n	801898e <_Balloc+0x2e>
 80189c4:	2000      	movs	r0, #0
 80189c6:	bd70      	pop	{r4, r5, r6, pc}
 80189c8:	6802      	ldr	r2, [r0, #0]
 80189ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80189ce:	2300      	movs	r3, #0
 80189d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80189d4:	e7f7      	b.n	80189c6 <_Balloc+0x66>
 80189d6:	bf00      	nop
 80189d8:	08020492 	.word	0x08020492
 80189dc:	080206e8 	.word	0x080206e8

080189e0 <_Bfree>:
 80189e0:	b570      	push	{r4, r5, r6, lr}
 80189e2:	69c6      	ldr	r6, [r0, #28]
 80189e4:	4605      	mov	r5, r0
 80189e6:	460c      	mov	r4, r1
 80189e8:	b976      	cbnz	r6, 8018a08 <_Bfree+0x28>
 80189ea:	2010      	movs	r0, #16
 80189ec:	f7ff ff02 	bl	80187f4 <malloc>
 80189f0:	4602      	mov	r2, r0
 80189f2:	61e8      	str	r0, [r5, #28]
 80189f4:	b920      	cbnz	r0, 8018a00 <_Bfree+0x20>
 80189f6:	4b09      	ldr	r3, [pc, #36]	@ (8018a1c <_Bfree+0x3c>)
 80189f8:	4809      	ldr	r0, [pc, #36]	@ (8018a20 <_Bfree+0x40>)
 80189fa:	218f      	movs	r1, #143	@ 0x8f
 80189fc:	f7ff f846 	bl	8017a8c <__assert_func>
 8018a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018a04:	6006      	str	r6, [r0, #0]
 8018a06:	60c6      	str	r6, [r0, #12]
 8018a08:	b13c      	cbz	r4, 8018a1a <_Bfree+0x3a>
 8018a0a:	69eb      	ldr	r3, [r5, #28]
 8018a0c:	6862      	ldr	r2, [r4, #4]
 8018a0e:	68db      	ldr	r3, [r3, #12]
 8018a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018a14:	6021      	str	r1, [r4, #0]
 8018a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018a1a:	bd70      	pop	{r4, r5, r6, pc}
 8018a1c:	08020492 	.word	0x08020492
 8018a20:	080206e8 	.word	0x080206e8

08018a24 <__multadd>:
 8018a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a28:	690d      	ldr	r5, [r1, #16]
 8018a2a:	4607      	mov	r7, r0
 8018a2c:	460c      	mov	r4, r1
 8018a2e:	461e      	mov	r6, r3
 8018a30:	f101 0c14 	add.w	ip, r1, #20
 8018a34:	2000      	movs	r0, #0
 8018a36:	f8dc 3000 	ldr.w	r3, [ip]
 8018a3a:	b299      	uxth	r1, r3
 8018a3c:	fb02 6101 	mla	r1, r2, r1, r6
 8018a40:	0c1e      	lsrs	r6, r3, #16
 8018a42:	0c0b      	lsrs	r3, r1, #16
 8018a44:	fb02 3306 	mla	r3, r2, r6, r3
 8018a48:	b289      	uxth	r1, r1
 8018a4a:	3001      	adds	r0, #1
 8018a4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018a50:	4285      	cmp	r5, r0
 8018a52:	f84c 1b04 	str.w	r1, [ip], #4
 8018a56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018a5a:	dcec      	bgt.n	8018a36 <__multadd+0x12>
 8018a5c:	b30e      	cbz	r6, 8018aa2 <__multadd+0x7e>
 8018a5e:	68a3      	ldr	r3, [r4, #8]
 8018a60:	42ab      	cmp	r3, r5
 8018a62:	dc19      	bgt.n	8018a98 <__multadd+0x74>
 8018a64:	6861      	ldr	r1, [r4, #4]
 8018a66:	4638      	mov	r0, r7
 8018a68:	3101      	adds	r1, #1
 8018a6a:	f7ff ff79 	bl	8018960 <_Balloc>
 8018a6e:	4680      	mov	r8, r0
 8018a70:	b928      	cbnz	r0, 8018a7e <__multadd+0x5a>
 8018a72:	4602      	mov	r2, r0
 8018a74:	4b0c      	ldr	r3, [pc, #48]	@ (8018aa8 <__multadd+0x84>)
 8018a76:	480d      	ldr	r0, [pc, #52]	@ (8018aac <__multadd+0x88>)
 8018a78:	21ba      	movs	r1, #186	@ 0xba
 8018a7a:	f7ff f807 	bl	8017a8c <__assert_func>
 8018a7e:	6922      	ldr	r2, [r4, #16]
 8018a80:	3202      	adds	r2, #2
 8018a82:	f104 010c 	add.w	r1, r4, #12
 8018a86:	0092      	lsls	r2, r2, #2
 8018a88:	300c      	adds	r0, #12
 8018a8a:	f7fe fff0 	bl	8017a6e <memcpy>
 8018a8e:	4621      	mov	r1, r4
 8018a90:	4638      	mov	r0, r7
 8018a92:	f7ff ffa5 	bl	80189e0 <_Bfree>
 8018a96:	4644      	mov	r4, r8
 8018a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018a9c:	3501      	adds	r5, #1
 8018a9e:	615e      	str	r6, [r3, #20]
 8018aa0:	6125      	str	r5, [r4, #16]
 8018aa2:	4620      	mov	r0, r4
 8018aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aa8:	080206d7 	.word	0x080206d7
 8018aac:	080206e8 	.word	0x080206e8

08018ab0 <__hi0bits>:
 8018ab0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	bf36      	itet	cc
 8018ab8:	0403      	lslcc	r3, r0, #16
 8018aba:	2000      	movcs	r0, #0
 8018abc:	2010      	movcc	r0, #16
 8018abe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018ac2:	bf3c      	itt	cc
 8018ac4:	021b      	lslcc	r3, r3, #8
 8018ac6:	3008      	addcc	r0, #8
 8018ac8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018acc:	bf3c      	itt	cc
 8018ace:	011b      	lslcc	r3, r3, #4
 8018ad0:	3004      	addcc	r0, #4
 8018ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018ad6:	bf3c      	itt	cc
 8018ad8:	009b      	lslcc	r3, r3, #2
 8018ada:	3002      	addcc	r0, #2
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	db05      	blt.n	8018aec <__hi0bits+0x3c>
 8018ae0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018ae4:	f100 0001 	add.w	r0, r0, #1
 8018ae8:	bf08      	it	eq
 8018aea:	2020      	moveq	r0, #32
 8018aec:	4770      	bx	lr

08018aee <__lo0bits>:
 8018aee:	6803      	ldr	r3, [r0, #0]
 8018af0:	4602      	mov	r2, r0
 8018af2:	f013 0007 	ands.w	r0, r3, #7
 8018af6:	d00b      	beq.n	8018b10 <__lo0bits+0x22>
 8018af8:	07d9      	lsls	r1, r3, #31
 8018afa:	d421      	bmi.n	8018b40 <__lo0bits+0x52>
 8018afc:	0798      	lsls	r0, r3, #30
 8018afe:	bf49      	itett	mi
 8018b00:	085b      	lsrmi	r3, r3, #1
 8018b02:	089b      	lsrpl	r3, r3, #2
 8018b04:	2001      	movmi	r0, #1
 8018b06:	6013      	strmi	r3, [r2, #0]
 8018b08:	bf5c      	itt	pl
 8018b0a:	6013      	strpl	r3, [r2, #0]
 8018b0c:	2002      	movpl	r0, #2
 8018b0e:	4770      	bx	lr
 8018b10:	b299      	uxth	r1, r3
 8018b12:	b909      	cbnz	r1, 8018b18 <__lo0bits+0x2a>
 8018b14:	0c1b      	lsrs	r3, r3, #16
 8018b16:	2010      	movs	r0, #16
 8018b18:	b2d9      	uxtb	r1, r3
 8018b1a:	b909      	cbnz	r1, 8018b20 <__lo0bits+0x32>
 8018b1c:	3008      	adds	r0, #8
 8018b1e:	0a1b      	lsrs	r3, r3, #8
 8018b20:	0719      	lsls	r1, r3, #28
 8018b22:	bf04      	itt	eq
 8018b24:	091b      	lsreq	r3, r3, #4
 8018b26:	3004      	addeq	r0, #4
 8018b28:	0799      	lsls	r1, r3, #30
 8018b2a:	bf04      	itt	eq
 8018b2c:	089b      	lsreq	r3, r3, #2
 8018b2e:	3002      	addeq	r0, #2
 8018b30:	07d9      	lsls	r1, r3, #31
 8018b32:	d403      	bmi.n	8018b3c <__lo0bits+0x4e>
 8018b34:	085b      	lsrs	r3, r3, #1
 8018b36:	f100 0001 	add.w	r0, r0, #1
 8018b3a:	d003      	beq.n	8018b44 <__lo0bits+0x56>
 8018b3c:	6013      	str	r3, [r2, #0]
 8018b3e:	4770      	bx	lr
 8018b40:	2000      	movs	r0, #0
 8018b42:	4770      	bx	lr
 8018b44:	2020      	movs	r0, #32
 8018b46:	4770      	bx	lr

08018b48 <__i2b>:
 8018b48:	b510      	push	{r4, lr}
 8018b4a:	460c      	mov	r4, r1
 8018b4c:	2101      	movs	r1, #1
 8018b4e:	f7ff ff07 	bl	8018960 <_Balloc>
 8018b52:	4602      	mov	r2, r0
 8018b54:	b928      	cbnz	r0, 8018b62 <__i2b+0x1a>
 8018b56:	4b05      	ldr	r3, [pc, #20]	@ (8018b6c <__i2b+0x24>)
 8018b58:	4805      	ldr	r0, [pc, #20]	@ (8018b70 <__i2b+0x28>)
 8018b5a:	f240 1145 	movw	r1, #325	@ 0x145
 8018b5e:	f7fe ff95 	bl	8017a8c <__assert_func>
 8018b62:	2301      	movs	r3, #1
 8018b64:	6144      	str	r4, [r0, #20]
 8018b66:	6103      	str	r3, [r0, #16]
 8018b68:	bd10      	pop	{r4, pc}
 8018b6a:	bf00      	nop
 8018b6c:	080206d7 	.word	0x080206d7
 8018b70:	080206e8 	.word	0x080206e8

08018b74 <__multiply>:
 8018b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b78:	4614      	mov	r4, r2
 8018b7a:	690a      	ldr	r2, [r1, #16]
 8018b7c:	6923      	ldr	r3, [r4, #16]
 8018b7e:	429a      	cmp	r2, r3
 8018b80:	bfa8      	it	ge
 8018b82:	4623      	movge	r3, r4
 8018b84:	460f      	mov	r7, r1
 8018b86:	bfa4      	itt	ge
 8018b88:	460c      	movge	r4, r1
 8018b8a:	461f      	movge	r7, r3
 8018b8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018b90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018b94:	68a3      	ldr	r3, [r4, #8]
 8018b96:	6861      	ldr	r1, [r4, #4]
 8018b98:	eb0a 0609 	add.w	r6, sl, r9
 8018b9c:	42b3      	cmp	r3, r6
 8018b9e:	b085      	sub	sp, #20
 8018ba0:	bfb8      	it	lt
 8018ba2:	3101      	addlt	r1, #1
 8018ba4:	f7ff fedc 	bl	8018960 <_Balloc>
 8018ba8:	b930      	cbnz	r0, 8018bb8 <__multiply+0x44>
 8018baa:	4602      	mov	r2, r0
 8018bac:	4b44      	ldr	r3, [pc, #272]	@ (8018cc0 <__multiply+0x14c>)
 8018bae:	4845      	ldr	r0, [pc, #276]	@ (8018cc4 <__multiply+0x150>)
 8018bb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018bb4:	f7fe ff6a 	bl	8017a8c <__assert_func>
 8018bb8:	f100 0514 	add.w	r5, r0, #20
 8018bbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018bc0:	462b      	mov	r3, r5
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	4543      	cmp	r3, r8
 8018bc6:	d321      	bcc.n	8018c0c <__multiply+0x98>
 8018bc8:	f107 0114 	add.w	r1, r7, #20
 8018bcc:	f104 0214 	add.w	r2, r4, #20
 8018bd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018bd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018bd8:	9302      	str	r3, [sp, #8]
 8018bda:	1b13      	subs	r3, r2, r4
 8018bdc:	3b15      	subs	r3, #21
 8018bde:	f023 0303 	bic.w	r3, r3, #3
 8018be2:	3304      	adds	r3, #4
 8018be4:	f104 0715 	add.w	r7, r4, #21
 8018be8:	42ba      	cmp	r2, r7
 8018bea:	bf38      	it	cc
 8018bec:	2304      	movcc	r3, #4
 8018bee:	9301      	str	r3, [sp, #4]
 8018bf0:	9b02      	ldr	r3, [sp, #8]
 8018bf2:	9103      	str	r1, [sp, #12]
 8018bf4:	428b      	cmp	r3, r1
 8018bf6:	d80c      	bhi.n	8018c12 <__multiply+0x9e>
 8018bf8:	2e00      	cmp	r6, #0
 8018bfa:	dd03      	ble.n	8018c04 <__multiply+0x90>
 8018bfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d05b      	beq.n	8018cbc <__multiply+0x148>
 8018c04:	6106      	str	r6, [r0, #16]
 8018c06:	b005      	add	sp, #20
 8018c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c0c:	f843 2b04 	str.w	r2, [r3], #4
 8018c10:	e7d8      	b.n	8018bc4 <__multiply+0x50>
 8018c12:	f8b1 a000 	ldrh.w	sl, [r1]
 8018c16:	f1ba 0f00 	cmp.w	sl, #0
 8018c1a:	d024      	beq.n	8018c66 <__multiply+0xf2>
 8018c1c:	f104 0e14 	add.w	lr, r4, #20
 8018c20:	46a9      	mov	r9, r5
 8018c22:	f04f 0c00 	mov.w	ip, #0
 8018c26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018c2a:	f8d9 3000 	ldr.w	r3, [r9]
 8018c2e:	fa1f fb87 	uxth.w	fp, r7
 8018c32:	b29b      	uxth	r3, r3
 8018c34:	fb0a 330b 	mla	r3, sl, fp, r3
 8018c38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018c3c:	f8d9 7000 	ldr.w	r7, [r9]
 8018c40:	4463      	add	r3, ip
 8018c42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018c46:	fb0a c70b 	mla	r7, sl, fp, ip
 8018c4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018c4e:	b29b      	uxth	r3, r3
 8018c50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018c54:	4572      	cmp	r2, lr
 8018c56:	f849 3b04 	str.w	r3, [r9], #4
 8018c5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018c5e:	d8e2      	bhi.n	8018c26 <__multiply+0xb2>
 8018c60:	9b01      	ldr	r3, [sp, #4]
 8018c62:	f845 c003 	str.w	ip, [r5, r3]
 8018c66:	9b03      	ldr	r3, [sp, #12]
 8018c68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018c6c:	3104      	adds	r1, #4
 8018c6e:	f1b9 0f00 	cmp.w	r9, #0
 8018c72:	d021      	beq.n	8018cb8 <__multiply+0x144>
 8018c74:	682b      	ldr	r3, [r5, #0]
 8018c76:	f104 0c14 	add.w	ip, r4, #20
 8018c7a:	46ae      	mov	lr, r5
 8018c7c:	f04f 0a00 	mov.w	sl, #0
 8018c80:	f8bc b000 	ldrh.w	fp, [ip]
 8018c84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018c88:	fb09 770b 	mla	r7, r9, fp, r7
 8018c8c:	4457      	add	r7, sl
 8018c8e:	b29b      	uxth	r3, r3
 8018c90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018c94:	f84e 3b04 	str.w	r3, [lr], #4
 8018c98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018c9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018ca0:	f8be 3000 	ldrh.w	r3, [lr]
 8018ca4:	fb09 330a 	mla	r3, r9, sl, r3
 8018ca8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018cac:	4562      	cmp	r2, ip
 8018cae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018cb2:	d8e5      	bhi.n	8018c80 <__multiply+0x10c>
 8018cb4:	9f01      	ldr	r7, [sp, #4]
 8018cb6:	51eb      	str	r3, [r5, r7]
 8018cb8:	3504      	adds	r5, #4
 8018cba:	e799      	b.n	8018bf0 <__multiply+0x7c>
 8018cbc:	3e01      	subs	r6, #1
 8018cbe:	e79b      	b.n	8018bf8 <__multiply+0x84>
 8018cc0:	080206d7 	.word	0x080206d7
 8018cc4:	080206e8 	.word	0x080206e8

08018cc8 <__pow5mult>:
 8018cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ccc:	4615      	mov	r5, r2
 8018cce:	f012 0203 	ands.w	r2, r2, #3
 8018cd2:	4607      	mov	r7, r0
 8018cd4:	460e      	mov	r6, r1
 8018cd6:	d007      	beq.n	8018ce8 <__pow5mult+0x20>
 8018cd8:	4c25      	ldr	r4, [pc, #148]	@ (8018d70 <__pow5mult+0xa8>)
 8018cda:	3a01      	subs	r2, #1
 8018cdc:	2300      	movs	r3, #0
 8018cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018ce2:	f7ff fe9f 	bl	8018a24 <__multadd>
 8018ce6:	4606      	mov	r6, r0
 8018ce8:	10ad      	asrs	r5, r5, #2
 8018cea:	d03d      	beq.n	8018d68 <__pow5mult+0xa0>
 8018cec:	69fc      	ldr	r4, [r7, #28]
 8018cee:	b97c      	cbnz	r4, 8018d10 <__pow5mult+0x48>
 8018cf0:	2010      	movs	r0, #16
 8018cf2:	f7ff fd7f 	bl	80187f4 <malloc>
 8018cf6:	4602      	mov	r2, r0
 8018cf8:	61f8      	str	r0, [r7, #28]
 8018cfa:	b928      	cbnz	r0, 8018d08 <__pow5mult+0x40>
 8018cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8018d74 <__pow5mult+0xac>)
 8018cfe:	481e      	ldr	r0, [pc, #120]	@ (8018d78 <__pow5mult+0xb0>)
 8018d00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018d04:	f7fe fec2 	bl	8017a8c <__assert_func>
 8018d08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018d0c:	6004      	str	r4, [r0, #0]
 8018d0e:	60c4      	str	r4, [r0, #12]
 8018d10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018d14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018d18:	b94c      	cbnz	r4, 8018d2e <__pow5mult+0x66>
 8018d1a:	f240 2171 	movw	r1, #625	@ 0x271
 8018d1e:	4638      	mov	r0, r7
 8018d20:	f7ff ff12 	bl	8018b48 <__i2b>
 8018d24:	2300      	movs	r3, #0
 8018d26:	f8c8 0008 	str.w	r0, [r8, #8]
 8018d2a:	4604      	mov	r4, r0
 8018d2c:	6003      	str	r3, [r0, #0]
 8018d2e:	f04f 0900 	mov.w	r9, #0
 8018d32:	07eb      	lsls	r3, r5, #31
 8018d34:	d50a      	bpl.n	8018d4c <__pow5mult+0x84>
 8018d36:	4631      	mov	r1, r6
 8018d38:	4622      	mov	r2, r4
 8018d3a:	4638      	mov	r0, r7
 8018d3c:	f7ff ff1a 	bl	8018b74 <__multiply>
 8018d40:	4631      	mov	r1, r6
 8018d42:	4680      	mov	r8, r0
 8018d44:	4638      	mov	r0, r7
 8018d46:	f7ff fe4b 	bl	80189e0 <_Bfree>
 8018d4a:	4646      	mov	r6, r8
 8018d4c:	106d      	asrs	r5, r5, #1
 8018d4e:	d00b      	beq.n	8018d68 <__pow5mult+0xa0>
 8018d50:	6820      	ldr	r0, [r4, #0]
 8018d52:	b938      	cbnz	r0, 8018d64 <__pow5mult+0x9c>
 8018d54:	4622      	mov	r2, r4
 8018d56:	4621      	mov	r1, r4
 8018d58:	4638      	mov	r0, r7
 8018d5a:	f7ff ff0b 	bl	8018b74 <__multiply>
 8018d5e:	6020      	str	r0, [r4, #0]
 8018d60:	f8c0 9000 	str.w	r9, [r0]
 8018d64:	4604      	mov	r4, r0
 8018d66:	e7e4      	b.n	8018d32 <__pow5mult+0x6a>
 8018d68:	4630      	mov	r0, r6
 8018d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d6e:	bf00      	nop
 8018d70:	08020744 	.word	0x08020744
 8018d74:	08020492 	.word	0x08020492
 8018d78:	080206e8 	.word	0x080206e8

08018d7c <__lshift>:
 8018d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d80:	460c      	mov	r4, r1
 8018d82:	6849      	ldr	r1, [r1, #4]
 8018d84:	6923      	ldr	r3, [r4, #16]
 8018d86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018d8a:	68a3      	ldr	r3, [r4, #8]
 8018d8c:	4607      	mov	r7, r0
 8018d8e:	4691      	mov	r9, r2
 8018d90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018d94:	f108 0601 	add.w	r6, r8, #1
 8018d98:	42b3      	cmp	r3, r6
 8018d9a:	db0b      	blt.n	8018db4 <__lshift+0x38>
 8018d9c:	4638      	mov	r0, r7
 8018d9e:	f7ff fddf 	bl	8018960 <_Balloc>
 8018da2:	4605      	mov	r5, r0
 8018da4:	b948      	cbnz	r0, 8018dba <__lshift+0x3e>
 8018da6:	4602      	mov	r2, r0
 8018da8:	4b28      	ldr	r3, [pc, #160]	@ (8018e4c <__lshift+0xd0>)
 8018daa:	4829      	ldr	r0, [pc, #164]	@ (8018e50 <__lshift+0xd4>)
 8018dac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018db0:	f7fe fe6c 	bl	8017a8c <__assert_func>
 8018db4:	3101      	adds	r1, #1
 8018db6:	005b      	lsls	r3, r3, #1
 8018db8:	e7ee      	b.n	8018d98 <__lshift+0x1c>
 8018dba:	2300      	movs	r3, #0
 8018dbc:	f100 0114 	add.w	r1, r0, #20
 8018dc0:	f100 0210 	add.w	r2, r0, #16
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	4553      	cmp	r3, sl
 8018dc8:	db33      	blt.n	8018e32 <__lshift+0xb6>
 8018dca:	6920      	ldr	r0, [r4, #16]
 8018dcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018dd0:	f104 0314 	add.w	r3, r4, #20
 8018dd4:	f019 091f 	ands.w	r9, r9, #31
 8018dd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ddc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018de0:	d02b      	beq.n	8018e3a <__lshift+0xbe>
 8018de2:	f1c9 0e20 	rsb	lr, r9, #32
 8018de6:	468a      	mov	sl, r1
 8018de8:	2200      	movs	r2, #0
 8018dea:	6818      	ldr	r0, [r3, #0]
 8018dec:	fa00 f009 	lsl.w	r0, r0, r9
 8018df0:	4310      	orrs	r0, r2
 8018df2:	f84a 0b04 	str.w	r0, [sl], #4
 8018df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dfa:	459c      	cmp	ip, r3
 8018dfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8018e00:	d8f3      	bhi.n	8018dea <__lshift+0x6e>
 8018e02:	ebac 0304 	sub.w	r3, ip, r4
 8018e06:	3b15      	subs	r3, #21
 8018e08:	f023 0303 	bic.w	r3, r3, #3
 8018e0c:	3304      	adds	r3, #4
 8018e0e:	f104 0015 	add.w	r0, r4, #21
 8018e12:	4584      	cmp	ip, r0
 8018e14:	bf38      	it	cc
 8018e16:	2304      	movcc	r3, #4
 8018e18:	50ca      	str	r2, [r1, r3]
 8018e1a:	b10a      	cbz	r2, 8018e20 <__lshift+0xa4>
 8018e1c:	f108 0602 	add.w	r6, r8, #2
 8018e20:	3e01      	subs	r6, #1
 8018e22:	4638      	mov	r0, r7
 8018e24:	612e      	str	r6, [r5, #16]
 8018e26:	4621      	mov	r1, r4
 8018e28:	f7ff fdda 	bl	80189e0 <_Bfree>
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e32:	f842 0f04 	str.w	r0, [r2, #4]!
 8018e36:	3301      	adds	r3, #1
 8018e38:	e7c5      	b.n	8018dc6 <__lshift+0x4a>
 8018e3a:	3904      	subs	r1, #4
 8018e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e40:	f841 2f04 	str.w	r2, [r1, #4]!
 8018e44:	459c      	cmp	ip, r3
 8018e46:	d8f9      	bhi.n	8018e3c <__lshift+0xc0>
 8018e48:	e7ea      	b.n	8018e20 <__lshift+0xa4>
 8018e4a:	bf00      	nop
 8018e4c:	080206d7 	.word	0x080206d7
 8018e50:	080206e8 	.word	0x080206e8

08018e54 <__mcmp>:
 8018e54:	690a      	ldr	r2, [r1, #16]
 8018e56:	4603      	mov	r3, r0
 8018e58:	6900      	ldr	r0, [r0, #16]
 8018e5a:	1a80      	subs	r0, r0, r2
 8018e5c:	b530      	push	{r4, r5, lr}
 8018e5e:	d10e      	bne.n	8018e7e <__mcmp+0x2a>
 8018e60:	3314      	adds	r3, #20
 8018e62:	3114      	adds	r1, #20
 8018e64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018e68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018e6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018e70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018e74:	4295      	cmp	r5, r2
 8018e76:	d003      	beq.n	8018e80 <__mcmp+0x2c>
 8018e78:	d205      	bcs.n	8018e86 <__mcmp+0x32>
 8018e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8018e7e:	bd30      	pop	{r4, r5, pc}
 8018e80:	42a3      	cmp	r3, r4
 8018e82:	d3f3      	bcc.n	8018e6c <__mcmp+0x18>
 8018e84:	e7fb      	b.n	8018e7e <__mcmp+0x2a>
 8018e86:	2001      	movs	r0, #1
 8018e88:	e7f9      	b.n	8018e7e <__mcmp+0x2a>
	...

08018e8c <__mdiff>:
 8018e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e90:	4689      	mov	r9, r1
 8018e92:	4606      	mov	r6, r0
 8018e94:	4611      	mov	r1, r2
 8018e96:	4648      	mov	r0, r9
 8018e98:	4614      	mov	r4, r2
 8018e9a:	f7ff ffdb 	bl	8018e54 <__mcmp>
 8018e9e:	1e05      	subs	r5, r0, #0
 8018ea0:	d112      	bne.n	8018ec8 <__mdiff+0x3c>
 8018ea2:	4629      	mov	r1, r5
 8018ea4:	4630      	mov	r0, r6
 8018ea6:	f7ff fd5b 	bl	8018960 <_Balloc>
 8018eaa:	4602      	mov	r2, r0
 8018eac:	b928      	cbnz	r0, 8018eba <__mdiff+0x2e>
 8018eae:	4b3f      	ldr	r3, [pc, #252]	@ (8018fac <__mdiff+0x120>)
 8018eb0:	f240 2137 	movw	r1, #567	@ 0x237
 8018eb4:	483e      	ldr	r0, [pc, #248]	@ (8018fb0 <__mdiff+0x124>)
 8018eb6:	f7fe fde9 	bl	8017a8c <__assert_func>
 8018eba:	2301      	movs	r3, #1
 8018ebc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018ec0:	4610      	mov	r0, r2
 8018ec2:	b003      	add	sp, #12
 8018ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec8:	bfbc      	itt	lt
 8018eca:	464b      	movlt	r3, r9
 8018ecc:	46a1      	movlt	r9, r4
 8018ece:	4630      	mov	r0, r6
 8018ed0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018ed4:	bfba      	itte	lt
 8018ed6:	461c      	movlt	r4, r3
 8018ed8:	2501      	movlt	r5, #1
 8018eda:	2500      	movge	r5, #0
 8018edc:	f7ff fd40 	bl	8018960 <_Balloc>
 8018ee0:	4602      	mov	r2, r0
 8018ee2:	b918      	cbnz	r0, 8018eec <__mdiff+0x60>
 8018ee4:	4b31      	ldr	r3, [pc, #196]	@ (8018fac <__mdiff+0x120>)
 8018ee6:	f240 2145 	movw	r1, #581	@ 0x245
 8018eea:	e7e3      	b.n	8018eb4 <__mdiff+0x28>
 8018eec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018ef0:	6926      	ldr	r6, [r4, #16]
 8018ef2:	60c5      	str	r5, [r0, #12]
 8018ef4:	f109 0310 	add.w	r3, r9, #16
 8018ef8:	f109 0514 	add.w	r5, r9, #20
 8018efc:	f104 0e14 	add.w	lr, r4, #20
 8018f00:	f100 0b14 	add.w	fp, r0, #20
 8018f04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018f08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018f0c:	9301      	str	r3, [sp, #4]
 8018f0e:	46d9      	mov	r9, fp
 8018f10:	f04f 0c00 	mov.w	ip, #0
 8018f14:	9b01      	ldr	r3, [sp, #4]
 8018f16:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018f1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018f1e:	9301      	str	r3, [sp, #4]
 8018f20:	fa1f f38a 	uxth.w	r3, sl
 8018f24:	4619      	mov	r1, r3
 8018f26:	b283      	uxth	r3, r0
 8018f28:	1acb      	subs	r3, r1, r3
 8018f2a:	0c00      	lsrs	r0, r0, #16
 8018f2c:	4463      	add	r3, ip
 8018f2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018f32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018f36:	b29b      	uxth	r3, r3
 8018f38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018f3c:	4576      	cmp	r6, lr
 8018f3e:	f849 3b04 	str.w	r3, [r9], #4
 8018f42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018f46:	d8e5      	bhi.n	8018f14 <__mdiff+0x88>
 8018f48:	1b33      	subs	r3, r6, r4
 8018f4a:	3b15      	subs	r3, #21
 8018f4c:	f023 0303 	bic.w	r3, r3, #3
 8018f50:	3415      	adds	r4, #21
 8018f52:	3304      	adds	r3, #4
 8018f54:	42a6      	cmp	r6, r4
 8018f56:	bf38      	it	cc
 8018f58:	2304      	movcc	r3, #4
 8018f5a:	441d      	add	r5, r3
 8018f5c:	445b      	add	r3, fp
 8018f5e:	461e      	mov	r6, r3
 8018f60:	462c      	mov	r4, r5
 8018f62:	4544      	cmp	r4, r8
 8018f64:	d30e      	bcc.n	8018f84 <__mdiff+0xf8>
 8018f66:	f108 0103 	add.w	r1, r8, #3
 8018f6a:	1b49      	subs	r1, r1, r5
 8018f6c:	f021 0103 	bic.w	r1, r1, #3
 8018f70:	3d03      	subs	r5, #3
 8018f72:	45a8      	cmp	r8, r5
 8018f74:	bf38      	it	cc
 8018f76:	2100      	movcc	r1, #0
 8018f78:	440b      	add	r3, r1
 8018f7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f7e:	b191      	cbz	r1, 8018fa6 <__mdiff+0x11a>
 8018f80:	6117      	str	r7, [r2, #16]
 8018f82:	e79d      	b.n	8018ec0 <__mdiff+0x34>
 8018f84:	f854 1b04 	ldr.w	r1, [r4], #4
 8018f88:	46e6      	mov	lr, ip
 8018f8a:	0c08      	lsrs	r0, r1, #16
 8018f8c:	fa1c fc81 	uxtah	ip, ip, r1
 8018f90:	4471      	add	r1, lr
 8018f92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018f96:	b289      	uxth	r1, r1
 8018f98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018f9c:	f846 1b04 	str.w	r1, [r6], #4
 8018fa0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018fa4:	e7dd      	b.n	8018f62 <__mdiff+0xd6>
 8018fa6:	3f01      	subs	r7, #1
 8018fa8:	e7e7      	b.n	8018f7a <__mdiff+0xee>
 8018faa:	bf00      	nop
 8018fac:	080206d7 	.word	0x080206d7
 8018fb0:	080206e8 	.word	0x080206e8

08018fb4 <__d2b>:
 8018fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018fb8:	460f      	mov	r7, r1
 8018fba:	2101      	movs	r1, #1
 8018fbc:	ec59 8b10 	vmov	r8, r9, d0
 8018fc0:	4616      	mov	r6, r2
 8018fc2:	f7ff fccd 	bl	8018960 <_Balloc>
 8018fc6:	4604      	mov	r4, r0
 8018fc8:	b930      	cbnz	r0, 8018fd8 <__d2b+0x24>
 8018fca:	4602      	mov	r2, r0
 8018fcc:	4b23      	ldr	r3, [pc, #140]	@ (801905c <__d2b+0xa8>)
 8018fce:	4824      	ldr	r0, [pc, #144]	@ (8019060 <__d2b+0xac>)
 8018fd0:	f240 310f 	movw	r1, #783	@ 0x30f
 8018fd4:	f7fe fd5a 	bl	8017a8c <__assert_func>
 8018fd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018fdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018fe0:	b10d      	cbz	r5, 8018fe6 <__d2b+0x32>
 8018fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018fe6:	9301      	str	r3, [sp, #4]
 8018fe8:	f1b8 0300 	subs.w	r3, r8, #0
 8018fec:	d023      	beq.n	8019036 <__d2b+0x82>
 8018fee:	4668      	mov	r0, sp
 8018ff0:	9300      	str	r3, [sp, #0]
 8018ff2:	f7ff fd7c 	bl	8018aee <__lo0bits>
 8018ff6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018ffa:	b1d0      	cbz	r0, 8019032 <__d2b+0x7e>
 8018ffc:	f1c0 0320 	rsb	r3, r0, #32
 8019000:	fa02 f303 	lsl.w	r3, r2, r3
 8019004:	430b      	orrs	r3, r1
 8019006:	40c2      	lsrs	r2, r0
 8019008:	6163      	str	r3, [r4, #20]
 801900a:	9201      	str	r2, [sp, #4]
 801900c:	9b01      	ldr	r3, [sp, #4]
 801900e:	61a3      	str	r3, [r4, #24]
 8019010:	2b00      	cmp	r3, #0
 8019012:	bf0c      	ite	eq
 8019014:	2201      	moveq	r2, #1
 8019016:	2202      	movne	r2, #2
 8019018:	6122      	str	r2, [r4, #16]
 801901a:	b1a5      	cbz	r5, 8019046 <__d2b+0x92>
 801901c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019020:	4405      	add	r5, r0
 8019022:	603d      	str	r5, [r7, #0]
 8019024:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019028:	6030      	str	r0, [r6, #0]
 801902a:	4620      	mov	r0, r4
 801902c:	b003      	add	sp, #12
 801902e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019032:	6161      	str	r1, [r4, #20]
 8019034:	e7ea      	b.n	801900c <__d2b+0x58>
 8019036:	a801      	add	r0, sp, #4
 8019038:	f7ff fd59 	bl	8018aee <__lo0bits>
 801903c:	9b01      	ldr	r3, [sp, #4]
 801903e:	6163      	str	r3, [r4, #20]
 8019040:	3020      	adds	r0, #32
 8019042:	2201      	movs	r2, #1
 8019044:	e7e8      	b.n	8019018 <__d2b+0x64>
 8019046:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801904a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801904e:	6038      	str	r0, [r7, #0]
 8019050:	6918      	ldr	r0, [r3, #16]
 8019052:	f7ff fd2d 	bl	8018ab0 <__hi0bits>
 8019056:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801905a:	e7e5      	b.n	8019028 <__d2b+0x74>
 801905c:	080206d7 	.word	0x080206d7
 8019060:	080206e8 	.word	0x080206e8

08019064 <__ssputs_r>:
 8019064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019068:	688e      	ldr	r6, [r1, #8]
 801906a:	461f      	mov	r7, r3
 801906c:	42be      	cmp	r6, r7
 801906e:	680b      	ldr	r3, [r1, #0]
 8019070:	4682      	mov	sl, r0
 8019072:	460c      	mov	r4, r1
 8019074:	4690      	mov	r8, r2
 8019076:	d82d      	bhi.n	80190d4 <__ssputs_r+0x70>
 8019078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801907c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019080:	d026      	beq.n	80190d0 <__ssputs_r+0x6c>
 8019082:	6965      	ldr	r5, [r4, #20]
 8019084:	6909      	ldr	r1, [r1, #16]
 8019086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801908a:	eba3 0901 	sub.w	r9, r3, r1
 801908e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019092:	1c7b      	adds	r3, r7, #1
 8019094:	444b      	add	r3, r9
 8019096:	106d      	asrs	r5, r5, #1
 8019098:	429d      	cmp	r5, r3
 801909a:	bf38      	it	cc
 801909c:	461d      	movcc	r5, r3
 801909e:	0553      	lsls	r3, r2, #21
 80190a0:	d527      	bpl.n	80190f2 <__ssputs_r+0x8e>
 80190a2:	4629      	mov	r1, r5
 80190a4:	f7ff fbd0 	bl	8018848 <_malloc_r>
 80190a8:	4606      	mov	r6, r0
 80190aa:	b360      	cbz	r0, 8019106 <__ssputs_r+0xa2>
 80190ac:	6921      	ldr	r1, [r4, #16]
 80190ae:	464a      	mov	r2, r9
 80190b0:	f7fe fcdd 	bl	8017a6e <memcpy>
 80190b4:	89a3      	ldrh	r3, [r4, #12]
 80190b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80190ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80190be:	81a3      	strh	r3, [r4, #12]
 80190c0:	6126      	str	r6, [r4, #16]
 80190c2:	6165      	str	r5, [r4, #20]
 80190c4:	444e      	add	r6, r9
 80190c6:	eba5 0509 	sub.w	r5, r5, r9
 80190ca:	6026      	str	r6, [r4, #0]
 80190cc:	60a5      	str	r5, [r4, #8]
 80190ce:	463e      	mov	r6, r7
 80190d0:	42be      	cmp	r6, r7
 80190d2:	d900      	bls.n	80190d6 <__ssputs_r+0x72>
 80190d4:	463e      	mov	r6, r7
 80190d6:	6820      	ldr	r0, [r4, #0]
 80190d8:	4632      	mov	r2, r6
 80190da:	4641      	mov	r1, r8
 80190dc:	f7fe fc15 	bl	801790a <memmove>
 80190e0:	68a3      	ldr	r3, [r4, #8]
 80190e2:	1b9b      	subs	r3, r3, r6
 80190e4:	60a3      	str	r3, [r4, #8]
 80190e6:	6823      	ldr	r3, [r4, #0]
 80190e8:	4433      	add	r3, r6
 80190ea:	6023      	str	r3, [r4, #0]
 80190ec:	2000      	movs	r0, #0
 80190ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190f2:	462a      	mov	r2, r5
 80190f4:	f000 fbdf 	bl	80198b6 <_realloc_r>
 80190f8:	4606      	mov	r6, r0
 80190fa:	2800      	cmp	r0, #0
 80190fc:	d1e0      	bne.n	80190c0 <__ssputs_r+0x5c>
 80190fe:	6921      	ldr	r1, [r4, #16]
 8019100:	4650      	mov	r0, sl
 8019102:	f7ff fb2d 	bl	8018760 <_free_r>
 8019106:	230c      	movs	r3, #12
 8019108:	f8ca 3000 	str.w	r3, [sl]
 801910c:	89a3      	ldrh	r3, [r4, #12]
 801910e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019112:	81a3      	strh	r3, [r4, #12]
 8019114:	f04f 30ff 	mov.w	r0, #4294967295
 8019118:	e7e9      	b.n	80190ee <__ssputs_r+0x8a>
	...

0801911c <_svfiprintf_r>:
 801911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019120:	4698      	mov	r8, r3
 8019122:	898b      	ldrh	r3, [r1, #12]
 8019124:	061b      	lsls	r3, r3, #24
 8019126:	b09d      	sub	sp, #116	@ 0x74
 8019128:	4607      	mov	r7, r0
 801912a:	460d      	mov	r5, r1
 801912c:	4614      	mov	r4, r2
 801912e:	d510      	bpl.n	8019152 <_svfiprintf_r+0x36>
 8019130:	690b      	ldr	r3, [r1, #16]
 8019132:	b973      	cbnz	r3, 8019152 <_svfiprintf_r+0x36>
 8019134:	2140      	movs	r1, #64	@ 0x40
 8019136:	f7ff fb87 	bl	8018848 <_malloc_r>
 801913a:	6028      	str	r0, [r5, #0]
 801913c:	6128      	str	r0, [r5, #16]
 801913e:	b930      	cbnz	r0, 801914e <_svfiprintf_r+0x32>
 8019140:	230c      	movs	r3, #12
 8019142:	603b      	str	r3, [r7, #0]
 8019144:	f04f 30ff 	mov.w	r0, #4294967295
 8019148:	b01d      	add	sp, #116	@ 0x74
 801914a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801914e:	2340      	movs	r3, #64	@ 0x40
 8019150:	616b      	str	r3, [r5, #20]
 8019152:	2300      	movs	r3, #0
 8019154:	9309      	str	r3, [sp, #36]	@ 0x24
 8019156:	2320      	movs	r3, #32
 8019158:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801915c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019160:	2330      	movs	r3, #48	@ 0x30
 8019162:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019300 <_svfiprintf_r+0x1e4>
 8019166:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801916a:	f04f 0901 	mov.w	r9, #1
 801916e:	4623      	mov	r3, r4
 8019170:	469a      	mov	sl, r3
 8019172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019176:	b10a      	cbz	r2, 801917c <_svfiprintf_r+0x60>
 8019178:	2a25      	cmp	r2, #37	@ 0x25
 801917a:	d1f9      	bne.n	8019170 <_svfiprintf_r+0x54>
 801917c:	ebba 0b04 	subs.w	fp, sl, r4
 8019180:	d00b      	beq.n	801919a <_svfiprintf_r+0x7e>
 8019182:	465b      	mov	r3, fp
 8019184:	4622      	mov	r2, r4
 8019186:	4629      	mov	r1, r5
 8019188:	4638      	mov	r0, r7
 801918a:	f7ff ff6b 	bl	8019064 <__ssputs_r>
 801918e:	3001      	adds	r0, #1
 8019190:	f000 80a7 	beq.w	80192e2 <_svfiprintf_r+0x1c6>
 8019194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019196:	445a      	add	r2, fp
 8019198:	9209      	str	r2, [sp, #36]	@ 0x24
 801919a:	f89a 3000 	ldrb.w	r3, [sl]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	f000 809f 	beq.w	80192e2 <_svfiprintf_r+0x1c6>
 80191a4:	2300      	movs	r3, #0
 80191a6:	f04f 32ff 	mov.w	r2, #4294967295
 80191aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191ae:	f10a 0a01 	add.w	sl, sl, #1
 80191b2:	9304      	str	r3, [sp, #16]
 80191b4:	9307      	str	r3, [sp, #28]
 80191b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80191ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80191bc:	4654      	mov	r4, sl
 80191be:	2205      	movs	r2, #5
 80191c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191c4:	484e      	ldr	r0, [pc, #312]	@ (8019300 <_svfiprintf_r+0x1e4>)
 80191c6:	f7e7 f833 	bl	8000230 <memchr>
 80191ca:	9a04      	ldr	r2, [sp, #16]
 80191cc:	b9d8      	cbnz	r0, 8019206 <_svfiprintf_r+0xea>
 80191ce:	06d0      	lsls	r0, r2, #27
 80191d0:	bf44      	itt	mi
 80191d2:	2320      	movmi	r3, #32
 80191d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80191d8:	0711      	lsls	r1, r2, #28
 80191da:	bf44      	itt	mi
 80191dc:	232b      	movmi	r3, #43	@ 0x2b
 80191de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80191e2:	f89a 3000 	ldrb.w	r3, [sl]
 80191e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80191e8:	d015      	beq.n	8019216 <_svfiprintf_r+0xfa>
 80191ea:	9a07      	ldr	r2, [sp, #28]
 80191ec:	4654      	mov	r4, sl
 80191ee:	2000      	movs	r0, #0
 80191f0:	f04f 0c0a 	mov.w	ip, #10
 80191f4:	4621      	mov	r1, r4
 80191f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191fa:	3b30      	subs	r3, #48	@ 0x30
 80191fc:	2b09      	cmp	r3, #9
 80191fe:	d94b      	bls.n	8019298 <_svfiprintf_r+0x17c>
 8019200:	b1b0      	cbz	r0, 8019230 <_svfiprintf_r+0x114>
 8019202:	9207      	str	r2, [sp, #28]
 8019204:	e014      	b.n	8019230 <_svfiprintf_r+0x114>
 8019206:	eba0 0308 	sub.w	r3, r0, r8
 801920a:	fa09 f303 	lsl.w	r3, r9, r3
 801920e:	4313      	orrs	r3, r2
 8019210:	9304      	str	r3, [sp, #16]
 8019212:	46a2      	mov	sl, r4
 8019214:	e7d2      	b.n	80191bc <_svfiprintf_r+0xa0>
 8019216:	9b03      	ldr	r3, [sp, #12]
 8019218:	1d19      	adds	r1, r3, #4
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	9103      	str	r1, [sp, #12]
 801921e:	2b00      	cmp	r3, #0
 8019220:	bfbb      	ittet	lt
 8019222:	425b      	neglt	r3, r3
 8019224:	f042 0202 	orrlt.w	r2, r2, #2
 8019228:	9307      	strge	r3, [sp, #28]
 801922a:	9307      	strlt	r3, [sp, #28]
 801922c:	bfb8      	it	lt
 801922e:	9204      	strlt	r2, [sp, #16]
 8019230:	7823      	ldrb	r3, [r4, #0]
 8019232:	2b2e      	cmp	r3, #46	@ 0x2e
 8019234:	d10a      	bne.n	801924c <_svfiprintf_r+0x130>
 8019236:	7863      	ldrb	r3, [r4, #1]
 8019238:	2b2a      	cmp	r3, #42	@ 0x2a
 801923a:	d132      	bne.n	80192a2 <_svfiprintf_r+0x186>
 801923c:	9b03      	ldr	r3, [sp, #12]
 801923e:	1d1a      	adds	r2, r3, #4
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	9203      	str	r2, [sp, #12]
 8019244:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019248:	3402      	adds	r4, #2
 801924a:	9305      	str	r3, [sp, #20]
 801924c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019310 <_svfiprintf_r+0x1f4>
 8019250:	7821      	ldrb	r1, [r4, #0]
 8019252:	2203      	movs	r2, #3
 8019254:	4650      	mov	r0, sl
 8019256:	f7e6 ffeb 	bl	8000230 <memchr>
 801925a:	b138      	cbz	r0, 801926c <_svfiprintf_r+0x150>
 801925c:	9b04      	ldr	r3, [sp, #16]
 801925e:	eba0 000a 	sub.w	r0, r0, sl
 8019262:	2240      	movs	r2, #64	@ 0x40
 8019264:	4082      	lsls	r2, r0
 8019266:	4313      	orrs	r3, r2
 8019268:	3401      	adds	r4, #1
 801926a:	9304      	str	r3, [sp, #16]
 801926c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019270:	4824      	ldr	r0, [pc, #144]	@ (8019304 <_svfiprintf_r+0x1e8>)
 8019272:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019276:	2206      	movs	r2, #6
 8019278:	f7e6 ffda 	bl	8000230 <memchr>
 801927c:	2800      	cmp	r0, #0
 801927e:	d036      	beq.n	80192ee <_svfiprintf_r+0x1d2>
 8019280:	4b21      	ldr	r3, [pc, #132]	@ (8019308 <_svfiprintf_r+0x1ec>)
 8019282:	bb1b      	cbnz	r3, 80192cc <_svfiprintf_r+0x1b0>
 8019284:	9b03      	ldr	r3, [sp, #12]
 8019286:	3307      	adds	r3, #7
 8019288:	f023 0307 	bic.w	r3, r3, #7
 801928c:	3308      	adds	r3, #8
 801928e:	9303      	str	r3, [sp, #12]
 8019290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019292:	4433      	add	r3, r6
 8019294:	9309      	str	r3, [sp, #36]	@ 0x24
 8019296:	e76a      	b.n	801916e <_svfiprintf_r+0x52>
 8019298:	fb0c 3202 	mla	r2, ip, r2, r3
 801929c:	460c      	mov	r4, r1
 801929e:	2001      	movs	r0, #1
 80192a0:	e7a8      	b.n	80191f4 <_svfiprintf_r+0xd8>
 80192a2:	2300      	movs	r3, #0
 80192a4:	3401      	adds	r4, #1
 80192a6:	9305      	str	r3, [sp, #20]
 80192a8:	4619      	mov	r1, r3
 80192aa:	f04f 0c0a 	mov.w	ip, #10
 80192ae:	4620      	mov	r0, r4
 80192b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192b4:	3a30      	subs	r2, #48	@ 0x30
 80192b6:	2a09      	cmp	r2, #9
 80192b8:	d903      	bls.n	80192c2 <_svfiprintf_r+0x1a6>
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d0c6      	beq.n	801924c <_svfiprintf_r+0x130>
 80192be:	9105      	str	r1, [sp, #20]
 80192c0:	e7c4      	b.n	801924c <_svfiprintf_r+0x130>
 80192c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80192c6:	4604      	mov	r4, r0
 80192c8:	2301      	movs	r3, #1
 80192ca:	e7f0      	b.n	80192ae <_svfiprintf_r+0x192>
 80192cc:	ab03      	add	r3, sp, #12
 80192ce:	9300      	str	r3, [sp, #0]
 80192d0:	462a      	mov	r2, r5
 80192d2:	4b0e      	ldr	r3, [pc, #56]	@ (801930c <_svfiprintf_r+0x1f0>)
 80192d4:	a904      	add	r1, sp, #16
 80192d6:	4638      	mov	r0, r7
 80192d8:	f7fd fe18 	bl	8016f0c <_printf_float>
 80192dc:	1c42      	adds	r2, r0, #1
 80192de:	4606      	mov	r6, r0
 80192e0:	d1d6      	bne.n	8019290 <_svfiprintf_r+0x174>
 80192e2:	89ab      	ldrh	r3, [r5, #12]
 80192e4:	065b      	lsls	r3, r3, #25
 80192e6:	f53f af2d 	bmi.w	8019144 <_svfiprintf_r+0x28>
 80192ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80192ec:	e72c      	b.n	8019148 <_svfiprintf_r+0x2c>
 80192ee:	ab03      	add	r3, sp, #12
 80192f0:	9300      	str	r3, [sp, #0]
 80192f2:	462a      	mov	r2, r5
 80192f4:	4b05      	ldr	r3, [pc, #20]	@ (801930c <_svfiprintf_r+0x1f0>)
 80192f6:	a904      	add	r1, sp, #16
 80192f8:	4638      	mov	r0, r7
 80192fa:	f7fe f89f 	bl	801743c <_printf_i>
 80192fe:	e7ed      	b.n	80192dc <_svfiprintf_r+0x1c0>
 8019300:	08020840 	.word	0x08020840
 8019304:	0802084a 	.word	0x0802084a
 8019308:	08016f0d 	.word	0x08016f0d
 801930c:	08019065 	.word	0x08019065
 8019310:	08020846 	.word	0x08020846

08019314 <__sfputc_r>:
 8019314:	6893      	ldr	r3, [r2, #8]
 8019316:	3b01      	subs	r3, #1
 8019318:	2b00      	cmp	r3, #0
 801931a:	b410      	push	{r4}
 801931c:	6093      	str	r3, [r2, #8]
 801931e:	da08      	bge.n	8019332 <__sfputc_r+0x1e>
 8019320:	6994      	ldr	r4, [r2, #24]
 8019322:	42a3      	cmp	r3, r4
 8019324:	db01      	blt.n	801932a <__sfputc_r+0x16>
 8019326:	290a      	cmp	r1, #10
 8019328:	d103      	bne.n	8019332 <__sfputc_r+0x1e>
 801932a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801932e:	f000 b9f1 	b.w	8019714 <__swbuf_r>
 8019332:	6813      	ldr	r3, [r2, #0]
 8019334:	1c58      	adds	r0, r3, #1
 8019336:	6010      	str	r0, [r2, #0]
 8019338:	7019      	strb	r1, [r3, #0]
 801933a:	4608      	mov	r0, r1
 801933c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019340:	4770      	bx	lr

08019342 <__sfputs_r>:
 8019342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019344:	4606      	mov	r6, r0
 8019346:	460f      	mov	r7, r1
 8019348:	4614      	mov	r4, r2
 801934a:	18d5      	adds	r5, r2, r3
 801934c:	42ac      	cmp	r4, r5
 801934e:	d101      	bne.n	8019354 <__sfputs_r+0x12>
 8019350:	2000      	movs	r0, #0
 8019352:	e007      	b.n	8019364 <__sfputs_r+0x22>
 8019354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019358:	463a      	mov	r2, r7
 801935a:	4630      	mov	r0, r6
 801935c:	f7ff ffda 	bl	8019314 <__sfputc_r>
 8019360:	1c43      	adds	r3, r0, #1
 8019362:	d1f3      	bne.n	801934c <__sfputs_r+0xa>
 8019364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019368 <_vfiprintf_r>:
 8019368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801936c:	460d      	mov	r5, r1
 801936e:	b09d      	sub	sp, #116	@ 0x74
 8019370:	4614      	mov	r4, r2
 8019372:	4698      	mov	r8, r3
 8019374:	4606      	mov	r6, r0
 8019376:	b118      	cbz	r0, 8019380 <_vfiprintf_r+0x18>
 8019378:	6a03      	ldr	r3, [r0, #32]
 801937a:	b90b      	cbnz	r3, 8019380 <_vfiprintf_r+0x18>
 801937c:	f7fe fa0a 	bl	8017794 <__sinit>
 8019380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019382:	07d9      	lsls	r1, r3, #31
 8019384:	d405      	bmi.n	8019392 <_vfiprintf_r+0x2a>
 8019386:	89ab      	ldrh	r3, [r5, #12]
 8019388:	059a      	lsls	r2, r3, #22
 801938a:	d402      	bmi.n	8019392 <_vfiprintf_r+0x2a>
 801938c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801938e:	f7fe fb6c 	bl	8017a6a <__retarget_lock_acquire_recursive>
 8019392:	89ab      	ldrh	r3, [r5, #12]
 8019394:	071b      	lsls	r3, r3, #28
 8019396:	d501      	bpl.n	801939c <_vfiprintf_r+0x34>
 8019398:	692b      	ldr	r3, [r5, #16]
 801939a:	b99b      	cbnz	r3, 80193c4 <_vfiprintf_r+0x5c>
 801939c:	4629      	mov	r1, r5
 801939e:	4630      	mov	r0, r6
 80193a0:	f000 f9f6 	bl	8019790 <__swsetup_r>
 80193a4:	b170      	cbz	r0, 80193c4 <_vfiprintf_r+0x5c>
 80193a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80193a8:	07dc      	lsls	r4, r3, #31
 80193aa:	d504      	bpl.n	80193b6 <_vfiprintf_r+0x4e>
 80193ac:	f04f 30ff 	mov.w	r0, #4294967295
 80193b0:	b01d      	add	sp, #116	@ 0x74
 80193b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b6:	89ab      	ldrh	r3, [r5, #12]
 80193b8:	0598      	lsls	r0, r3, #22
 80193ba:	d4f7      	bmi.n	80193ac <_vfiprintf_r+0x44>
 80193bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80193be:	f7fe fb55 	bl	8017a6c <__retarget_lock_release_recursive>
 80193c2:	e7f3      	b.n	80193ac <_vfiprintf_r+0x44>
 80193c4:	2300      	movs	r3, #0
 80193c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80193c8:	2320      	movs	r3, #32
 80193ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80193ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80193d2:	2330      	movs	r3, #48	@ 0x30
 80193d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019584 <_vfiprintf_r+0x21c>
 80193d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80193dc:	f04f 0901 	mov.w	r9, #1
 80193e0:	4623      	mov	r3, r4
 80193e2:	469a      	mov	sl, r3
 80193e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193e8:	b10a      	cbz	r2, 80193ee <_vfiprintf_r+0x86>
 80193ea:	2a25      	cmp	r2, #37	@ 0x25
 80193ec:	d1f9      	bne.n	80193e2 <_vfiprintf_r+0x7a>
 80193ee:	ebba 0b04 	subs.w	fp, sl, r4
 80193f2:	d00b      	beq.n	801940c <_vfiprintf_r+0xa4>
 80193f4:	465b      	mov	r3, fp
 80193f6:	4622      	mov	r2, r4
 80193f8:	4629      	mov	r1, r5
 80193fa:	4630      	mov	r0, r6
 80193fc:	f7ff ffa1 	bl	8019342 <__sfputs_r>
 8019400:	3001      	adds	r0, #1
 8019402:	f000 80a7 	beq.w	8019554 <_vfiprintf_r+0x1ec>
 8019406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019408:	445a      	add	r2, fp
 801940a:	9209      	str	r2, [sp, #36]	@ 0x24
 801940c:	f89a 3000 	ldrb.w	r3, [sl]
 8019410:	2b00      	cmp	r3, #0
 8019412:	f000 809f 	beq.w	8019554 <_vfiprintf_r+0x1ec>
 8019416:	2300      	movs	r3, #0
 8019418:	f04f 32ff 	mov.w	r2, #4294967295
 801941c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019420:	f10a 0a01 	add.w	sl, sl, #1
 8019424:	9304      	str	r3, [sp, #16]
 8019426:	9307      	str	r3, [sp, #28]
 8019428:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801942c:	931a      	str	r3, [sp, #104]	@ 0x68
 801942e:	4654      	mov	r4, sl
 8019430:	2205      	movs	r2, #5
 8019432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019436:	4853      	ldr	r0, [pc, #332]	@ (8019584 <_vfiprintf_r+0x21c>)
 8019438:	f7e6 fefa 	bl	8000230 <memchr>
 801943c:	9a04      	ldr	r2, [sp, #16]
 801943e:	b9d8      	cbnz	r0, 8019478 <_vfiprintf_r+0x110>
 8019440:	06d1      	lsls	r1, r2, #27
 8019442:	bf44      	itt	mi
 8019444:	2320      	movmi	r3, #32
 8019446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801944a:	0713      	lsls	r3, r2, #28
 801944c:	bf44      	itt	mi
 801944e:	232b      	movmi	r3, #43	@ 0x2b
 8019450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019454:	f89a 3000 	ldrb.w	r3, [sl]
 8019458:	2b2a      	cmp	r3, #42	@ 0x2a
 801945a:	d015      	beq.n	8019488 <_vfiprintf_r+0x120>
 801945c:	9a07      	ldr	r2, [sp, #28]
 801945e:	4654      	mov	r4, sl
 8019460:	2000      	movs	r0, #0
 8019462:	f04f 0c0a 	mov.w	ip, #10
 8019466:	4621      	mov	r1, r4
 8019468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801946c:	3b30      	subs	r3, #48	@ 0x30
 801946e:	2b09      	cmp	r3, #9
 8019470:	d94b      	bls.n	801950a <_vfiprintf_r+0x1a2>
 8019472:	b1b0      	cbz	r0, 80194a2 <_vfiprintf_r+0x13a>
 8019474:	9207      	str	r2, [sp, #28]
 8019476:	e014      	b.n	80194a2 <_vfiprintf_r+0x13a>
 8019478:	eba0 0308 	sub.w	r3, r0, r8
 801947c:	fa09 f303 	lsl.w	r3, r9, r3
 8019480:	4313      	orrs	r3, r2
 8019482:	9304      	str	r3, [sp, #16]
 8019484:	46a2      	mov	sl, r4
 8019486:	e7d2      	b.n	801942e <_vfiprintf_r+0xc6>
 8019488:	9b03      	ldr	r3, [sp, #12]
 801948a:	1d19      	adds	r1, r3, #4
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	9103      	str	r1, [sp, #12]
 8019490:	2b00      	cmp	r3, #0
 8019492:	bfbb      	ittet	lt
 8019494:	425b      	neglt	r3, r3
 8019496:	f042 0202 	orrlt.w	r2, r2, #2
 801949a:	9307      	strge	r3, [sp, #28]
 801949c:	9307      	strlt	r3, [sp, #28]
 801949e:	bfb8      	it	lt
 80194a0:	9204      	strlt	r2, [sp, #16]
 80194a2:	7823      	ldrb	r3, [r4, #0]
 80194a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80194a6:	d10a      	bne.n	80194be <_vfiprintf_r+0x156>
 80194a8:	7863      	ldrb	r3, [r4, #1]
 80194aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80194ac:	d132      	bne.n	8019514 <_vfiprintf_r+0x1ac>
 80194ae:	9b03      	ldr	r3, [sp, #12]
 80194b0:	1d1a      	adds	r2, r3, #4
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	9203      	str	r2, [sp, #12]
 80194b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80194ba:	3402      	adds	r4, #2
 80194bc:	9305      	str	r3, [sp, #20]
 80194be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019594 <_vfiprintf_r+0x22c>
 80194c2:	7821      	ldrb	r1, [r4, #0]
 80194c4:	2203      	movs	r2, #3
 80194c6:	4650      	mov	r0, sl
 80194c8:	f7e6 feb2 	bl	8000230 <memchr>
 80194cc:	b138      	cbz	r0, 80194de <_vfiprintf_r+0x176>
 80194ce:	9b04      	ldr	r3, [sp, #16]
 80194d0:	eba0 000a 	sub.w	r0, r0, sl
 80194d4:	2240      	movs	r2, #64	@ 0x40
 80194d6:	4082      	lsls	r2, r0
 80194d8:	4313      	orrs	r3, r2
 80194da:	3401      	adds	r4, #1
 80194dc:	9304      	str	r3, [sp, #16]
 80194de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194e2:	4829      	ldr	r0, [pc, #164]	@ (8019588 <_vfiprintf_r+0x220>)
 80194e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80194e8:	2206      	movs	r2, #6
 80194ea:	f7e6 fea1 	bl	8000230 <memchr>
 80194ee:	2800      	cmp	r0, #0
 80194f0:	d03f      	beq.n	8019572 <_vfiprintf_r+0x20a>
 80194f2:	4b26      	ldr	r3, [pc, #152]	@ (801958c <_vfiprintf_r+0x224>)
 80194f4:	bb1b      	cbnz	r3, 801953e <_vfiprintf_r+0x1d6>
 80194f6:	9b03      	ldr	r3, [sp, #12]
 80194f8:	3307      	adds	r3, #7
 80194fa:	f023 0307 	bic.w	r3, r3, #7
 80194fe:	3308      	adds	r3, #8
 8019500:	9303      	str	r3, [sp, #12]
 8019502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019504:	443b      	add	r3, r7
 8019506:	9309      	str	r3, [sp, #36]	@ 0x24
 8019508:	e76a      	b.n	80193e0 <_vfiprintf_r+0x78>
 801950a:	fb0c 3202 	mla	r2, ip, r2, r3
 801950e:	460c      	mov	r4, r1
 8019510:	2001      	movs	r0, #1
 8019512:	e7a8      	b.n	8019466 <_vfiprintf_r+0xfe>
 8019514:	2300      	movs	r3, #0
 8019516:	3401      	adds	r4, #1
 8019518:	9305      	str	r3, [sp, #20]
 801951a:	4619      	mov	r1, r3
 801951c:	f04f 0c0a 	mov.w	ip, #10
 8019520:	4620      	mov	r0, r4
 8019522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019526:	3a30      	subs	r2, #48	@ 0x30
 8019528:	2a09      	cmp	r2, #9
 801952a:	d903      	bls.n	8019534 <_vfiprintf_r+0x1cc>
 801952c:	2b00      	cmp	r3, #0
 801952e:	d0c6      	beq.n	80194be <_vfiprintf_r+0x156>
 8019530:	9105      	str	r1, [sp, #20]
 8019532:	e7c4      	b.n	80194be <_vfiprintf_r+0x156>
 8019534:	fb0c 2101 	mla	r1, ip, r1, r2
 8019538:	4604      	mov	r4, r0
 801953a:	2301      	movs	r3, #1
 801953c:	e7f0      	b.n	8019520 <_vfiprintf_r+0x1b8>
 801953e:	ab03      	add	r3, sp, #12
 8019540:	9300      	str	r3, [sp, #0]
 8019542:	462a      	mov	r2, r5
 8019544:	4b12      	ldr	r3, [pc, #72]	@ (8019590 <_vfiprintf_r+0x228>)
 8019546:	a904      	add	r1, sp, #16
 8019548:	4630      	mov	r0, r6
 801954a:	f7fd fcdf 	bl	8016f0c <_printf_float>
 801954e:	4607      	mov	r7, r0
 8019550:	1c78      	adds	r0, r7, #1
 8019552:	d1d6      	bne.n	8019502 <_vfiprintf_r+0x19a>
 8019554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019556:	07d9      	lsls	r1, r3, #31
 8019558:	d405      	bmi.n	8019566 <_vfiprintf_r+0x1fe>
 801955a:	89ab      	ldrh	r3, [r5, #12]
 801955c:	059a      	lsls	r2, r3, #22
 801955e:	d402      	bmi.n	8019566 <_vfiprintf_r+0x1fe>
 8019560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019562:	f7fe fa83 	bl	8017a6c <__retarget_lock_release_recursive>
 8019566:	89ab      	ldrh	r3, [r5, #12]
 8019568:	065b      	lsls	r3, r3, #25
 801956a:	f53f af1f 	bmi.w	80193ac <_vfiprintf_r+0x44>
 801956e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019570:	e71e      	b.n	80193b0 <_vfiprintf_r+0x48>
 8019572:	ab03      	add	r3, sp, #12
 8019574:	9300      	str	r3, [sp, #0]
 8019576:	462a      	mov	r2, r5
 8019578:	4b05      	ldr	r3, [pc, #20]	@ (8019590 <_vfiprintf_r+0x228>)
 801957a:	a904      	add	r1, sp, #16
 801957c:	4630      	mov	r0, r6
 801957e:	f7fd ff5d 	bl	801743c <_printf_i>
 8019582:	e7e4      	b.n	801954e <_vfiprintf_r+0x1e6>
 8019584:	08020840 	.word	0x08020840
 8019588:	0802084a 	.word	0x0802084a
 801958c:	08016f0d 	.word	0x08016f0d
 8019590:	08019343 	.word	0x08019343
 8019594:	08020846 	.word	0x08020846

08019598 <__sflush_r>:
 8019598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195a0:	0716      	lsls	r6, r2, #28
 80195a2:	4605      	mov	r5, r0
 80195a4:	460c      	mov	r4, r1
 80195a6:	d454      	bmi.n	8019652 <__sflush_r+0xba>
 80195a8:	684b      	ldr	r3, [r1, #4]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	dc02      	bgt.n	80195b4 <__sflush_r+0x1c>
 80195ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	dd48      	ble.n	8019646 <__sflush_r+0xae>
 80195b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80195b6:	2e00      	cmp	r6, #0
 80195b8:	d045      	beq.n	8019646 <__sflush_r+0xae>
 80195ba:	2300      	movs	r3, #0
 80195bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80195c0:	682f      	ldr	r7, [r5, #0]
 80195c2:	6a21      	ldr	r1, [r4, #32]
 80195c4:	602b      	str	r3, [r5, #0]
 80195c6:	d030      	beq.n	801962a <__sflush_r+0x92>
 80195c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80195ca:	89a3      	ldrh	r3, [r4, #12]
 80195cc:	0759      	lsls	r1, r3, #29
 80195ce:	d505      	bpl.n	80195dc <__sflush_r+0x44>
 80195d0:	6863      	ldr	r3, [r4, #4]
 80195d2:	1ad2      	subs	r2, r2, r3
 80195d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80195d6:	b10b      	cbz	r3, 80195dc <__sflush_r+0x44>
 80195d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80195da:	1ad2      	subs	r2, r2, r3
 80195dc:	2300      	movs	r3, #0
 80195de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80195e0:	6a21      	ldr	r1, [r4, #32]
 80195e2:	4628      	mov	r0, r5
 80195e4:	47b0      	blx	r6
 80195e6:	1c43      	adds	r3, r0, #1
 80195e8:	89a3      	ldrh	r3, [r4, #12]
 80195ea:	d106      	bne.n	80195fa <__sflush_r+0x62>
 80195ec:	6829      	ldr	r1, [r5, #0]
 80195ee:	291d      	cmp	r1, #29
 80195f0:	d82b      	bhi.n	801964a <__sflush_r+0xb2>
 80195f2:	4a2a      	ldr	r2, [pc, #168]	@ (801969c <__sflush_r+0x104>)
 80195f4:	410a      	asrs	r2, r1
 80195f6:	07d6      	lsls	r6, r2, #31
 80195f8:	d427      	bmi.n	801964a <__sflush_r+0xb2>
 80195fa:	2200      	movs	r2, #0
 80195fc:	6062      	str	r2, [r4, #4]
 80195fe:	04d9      	lsls	r1, r3, #19
 8019600:	6922      	ldr	r2, [r4, #16]
 8019602:	6022      	str	r2, [r4, #0]
 8019604:	d504      	bpl.n	8019610 <__sflush_r+0x78>
 8019606:	1c42      	adds	r2, r0, #1
 8019608:	d101      	bne.n	801960e <__sflush_r+0x76>
 801960a:	682b      	ldr	r3, [r5, #0]
 801960c:	b903      	cbnz	r3, 8019610 <__sflush_r+0x78>
 801960e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019612:	602f      	str	r7, [r5, #0]
 8019614:	b1b9      	cbz	r1, 8019646 <__sflush_r+0xae>
 8019616:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801961a:	4299      	cmp	r1, r3
 801961c:	d002      	beq.n	8019624 <__sflush_r+0x8c>
 801961e:	4628      	mov	r0, r5
 8019620:	f7ff f89e 	bl	8018760 <_free_r>
 8019624:	2300      	movs	r3, #0
 8019626:	6363      	str	r3, [r4, #52]	@ 0x34
 8019628:	e00d      	b.n	8019646 <__sflush_r+0xae>
 801962a:	2301      	movs	r3, #1
 801962c:	4628      	mov	r0, r5
 801962e:	47b0      	blx	r6
 8019630:	4602      	mov	r2, r0
 8019632:	1c50      	adds	r0, r2, #1
 8019634:	d1c9      	bne.n	80195ca <__sflush_r+0x32>
 8019636:	682b      	ldr	r3, [r5, #0]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d0c6      	beq.n	80195ca <__sflush_r+0x32>
 801963c:	2b1d      	cmp	r3, #29
 801963e:	d001      	beq.n	8019644 <__sflush_r+0xac>
 8019640:	2b16      	cmp	r3, #22
 8019642:	d11e      	bne.n	8019682 <__sflush_r+0xea>
 8019644:	602f      	str	r7, [r5, #0]
 8019646:	2000      	movs	r0, #0
 8019648:	e022      	b.n	8019690 <__sflush_r+0xf8>
 801964a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801964e:	b21b      	sxth	r3, r3
 8019650:	e01b      	b.n	801968a <__sflush_r+0xf2>
 8019652:	690f      	ldr	r7, [r1, #16]
 8019654:	2f00      	cmp	r7, #0
 8019656:	d0f6      	beq.n	8019646 <__sflush_r+0xae>
 8019658:	0793      	lsls	r3, r2, #30
 801965a:	680e      	ldr	r6, [r1, #0]
 801965c:	bf08      	it	eq
 801965e:	694b      	ldreq	r3, [r1, #20]
 8019660:	600f      	str	r7, [r1, #0]
 8019662:	bf18      	it	ne
 8019664:	2300      	movne	r3, #0
 8019666:	eba6 0807 	sub.w	r8, r6, r7
 801966a:	608b      	str	r3, [r1, #8]
 801966c:	f1b8 0f00 	cmp.w	r8, #0
 8019670:	dde9      	ble.n	8019646 <__sflush_r+0xae>
 8019672:	6a21      	ldr	r1, [r4, #32]
 8019674:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019676:	4643      	mov	r3, r8
 8019678:	463a      	mov	r2, r7
 801967a:	4628      	mov	r0, r5
 801967c:	47b0      	blx	r6
 801967e:	2800      	cmp	r0, #0
 8019680:	dc08      	bgt.n	8019694 <__sflush_r+0xfc>
 8019682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801968a:	81a3      	strh	r3, [r4, #12]
 801968c:	f04f 30ff 	mov.w	r0, #4294967295
 8019690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019694:	4407      	add	r7, r0
 8019696:	eba8 0800 	sub.w	r8, r8, r0
 801969a:	e7e7      	b.n	801966c <__sflush_r+0xd4>
 801969c:	dfbffffe 	.word	0xdfbffffe

080196a0 <_fflush_r>:
 80196a0:	b538      	push	{r3, r4, r5, lr}
 80196a2:	690b      	ldr	r3, [r1, #16]
 80196a4:	4605      	mov	r5, r0
 80196a6:	460c      	mov	r4, r1
 80196a8:	b913      	cbnz	r3, 80196b0 <_fflush_r+0x10>
 80196aa:	2500      	movs	r5, #0
 80196ac:	4628      	mov	r0, r5
 80196ae:	bd38      	pop	{r3, r4, r5, pc}
 80196b0:	b118      	cbz	r0, 80196ba <_fflush_r+0x1a>
 80196b2:	6a03      	ldr	r3, [r0, #32]
 80196b4:	b90b      	cbnz	r3, 80196ba <_fflush_r+0x1a>
 80196b6:	f7fe f86d 	bl	8017794 <__sinit>
 80196ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d0f3      	beq.n	80196aa <_fflush_r+0xa>
 80196c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80196c4:	07d0      	lsls	r0, r2, #31
 80196c6:	d404      	bmi.n	80196d2 <_fflush_r+0x32>
 80196c8:	0599      	lsls	r1, r3, #22
 80196ca:	d402      	bmi.n	80196d2 <_fflush_r+0x32>
 80196cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196ce:	f7fe f9cc 	bl	8017a6a <__retarget_lock_acquire_recursive>
 80196d2:	4628      	mov	r0, r5
 80196d4:	4621      	mov	r1, r4
 80196d6:	f7ff ff5f 	bl	8019598 <__sflush_r>
 80196da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196dc:	07da      	lsls	r2, r3, #31
 80196de:	4605      	mov	r5, r0
 80196e0:	d4e4      	bmi.n	80196ac <_fflush_r+0xc>
 80196e2:	89a3      	ldrh	r3, [r4, #12]
 80196e4:	059b      	lsls	r3, r3, #22
 80196e6:	d4e1      	bmi.n	80196ac <_fflush_r+0xc>
 80196e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196ea:	f7fe f9bf 	bl	8017a6c <__retarget_lock_release_recursive>
 80196ee:	e7dd      	b.n	80196ac <_fflush_r+0xc>

080196f0 <fiprintf>:
 80196f0:	b40e      	push	{r1, r2, r3}
 80196f2:	b503      	push	{r0, r1, lr}
 80196f4:	4601      	mov	r1, r0
 80196f6:	ab03      	add	r3, sp, #12
 80196f8:	4805      	ldr	r0, [pc, #20]	@ (8019710 <fiprintf+0x20>)
 80196fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80196fe:	6800      	ldr	r0, [r0, #0]
 8019700:	9301      	str	r3, [sp, #4]
 8019702:	f7ff fe31 	bl	8019368 <_vfiprintf_r>
 8019706:	b002      	add	sp, #8
 8019708:	f85d eb04 	ldr.w	lr, [sp], #4
 801970c:	b003      	add	sp, #12
 801970e:	4770      	bx	lr
 8019710:	20000048 	.word	0x20000048

08019714 <__swbuf_r>:
 8019714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019716:	460e      	mov	r6, r1
 8019718:	4614      	mov	r4, r2
 801971a:	4605      	mov	r5, r0
 801971c:	b118      	cbz	r0, 8019726 <__swbuf_r+0x12>
 801971e:	6a03      	ldr	r3, [r0, #32]
 8019720:	b90b      	cbnz	r3, 8019726 <__swbuf_r+0x12>
 8019722:	f7fe f837 	bl	8017794 <__sinit>
 8019726:	69a3      	ldr	r3, [r4, #24]
 8019728:	60a3      	str	r3, [r4, #8]
 801972a:	89a3      	ldrh	r3, [r4, #12]
 801972c:	071a      	lsls	r2, r3, #28
 801972e:	d501      	bpl.n	8019734 <__swbuf_r+0x20>
 8019730:	6923      	ldr	r3, [r4, #16]
 8019732:	b943      	cbnz	r3, 8019746 <__swbuf_r+0x32>
 8019734:	4621      	mov	r1, r4
 8019736:	4628      	mov	r0, r5
 8019738:	f000 f82a 	bl	8019790 <__swsetup_r>
 801973c:	b118      	cbz	r0, 8019746 <__swbuf_r+0x32>
 801973e:	f04f 37ff 	mov.w	r7, #4294967295
 8019742:	4638      	mov	r0, r7
 8019744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019746:	6823      	ldr	r3, [r4, #0]
 8019748:	6922      	ldr	r2, [r4, #16]
 801974a:	1a98      	subs	r0, r3, r2
 801974c:	6963      	ldr	r3, [r4, #20]
 801974e:	b2f6      	uxtb	r6, r6
 8019750:	4283      	cmp	r3, r0
 8019752:	4637      	mov	r7, r6
 8019754:	dc05      	bgt.n	8019762 <__swbuf_r+0x4e>
 8019756:	4621      	mov	r1, r4
 8019758:	4628      	mov	r0, r5
 801975a:	f7ff ffa1 	bl	80196a0 <_fflush_r>
 801975e:	2800      	cmp	r0, #0
 8019760:	d1ed      	bne.n	801973e <__swbuf_r+0x2a>
 8019762:	68a3      	ldr	r3, [r4, #8]
 8019764:	3b01      	subs	r3, #1
 8019766:	60a3      	str	r3, [r4, #8]
 8019768:	6823      	ldr	r3, [r4, #0]
 801976a:	1c5a      	adds	r2, r3, #1
 801976c:	6022      	str	r2, [r4, #0]
 801976e:	701e      	strb	r6, [r3, #0]
 8019770:	6962      	ldr	r2, [r4, #20]
 8019772:	1c43      	adds	r3, r0, #1
 8019774:	429a      	cmp	r2, r3
 8019776:	d004      	beq.n	8019782 <__swbuf_r+0x6e>
 8019778:	89a3      	ldrh	r3, [r4, #12]
 801977a:	07db      	lsls	r3, r3, #31
 801977c:	d5e1      	bpl.n	8019742 <__swbuf_r+0x2e>
 801977e:	2e0a      	cmp	r6, #10
 8019780:	d1df      	bne.n	8019742 <__swbuf_r+0x2e>
 8019782:	4621      	mov	r1, r4
 8019784:	4628      	mov	r0, r5
 8019786:	f7ff ff8b 	bl	80196a0 <_fflush_r>
 801978a:	2800      	cmp	r0, #0
 801978c:	d0d9      	beq.n	8019742 <__swbuf_r+0x2e>
 801978e:	e7d6      	b.n	801973e <__swbuf_r+0x2a>

08019790 <__swsetup_r>:
 8019790:	b538      	push	{r3, r4, r5, lr}
 8019792:	4b29      	ldr	r3, [pc, #164]	@ (8019838 <__swsetup_r+0xa8>)
 8019794:	4605      	mov	r5, r0
 8019796:	6818      	ldr	r0, [r3, #0]
 8019798:	460c      	mov	r4, r1
 801979a:	b118      	cbz	r0, 80197a4 <__swsetup_r+0x14>
 801979c:	6a03      	ldr	r3, [r0, #32]
 801979e:	b90b      	cbnz	r3, 80197a4 <__swsetup_r+0x14>
 80197a0:	f7fd fff8 	bl	8017794 <__sinit>
 80197a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197a8:	0719      	lsls	r1, r3, #28
 80197aa:	d422      	bmi.n	80197f2 <__swsetup_r+0x62>
 80197ac:	06da      	lsls	r2, r3, #27
 80197ae:	d407      	bmi.n	80197c0 <__swsetup_r+0x30>
 80197b0:	2209      	movs	r2, #9
 80197b2:	602a      	str	r2, [r5, #0]
 80197b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80197b8:	81a3      	strh	r3, [r4, #12]
 80197ba:	f04f 30ff 	mov.w	r0, #4294967295
 80197be:	e033      	b.n	8019828 <__swsetup_r+0x98>
 80197c0:	0758      	lsls	r0, r3, #29
 80197c2:	d512      	bpl.n	80197ea <__swsetup_r+0x5a>
 80197c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80197c6:	b141      	cbz	r1, 80197da <__swsetup_r+0x4a>
 80197c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80197cc:	4299      	cmp	r1, r3
 80197ce:	d002      	beq.n	80197d6 <__swsetup_r+0x46>
 80197d0:	4628      	mov	r0, r5
 80197d2:	f7fe ffc5 	bl	8018760 <_free_r>
 80197d6:	2300      	movs	r3, #0
 80197d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80197da:	89a3      	ldrh	r3, [r4, #12]
 80197dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80197e0:	81a3      	strh	r3, [r4, #12]
 80197e2:	2300      	movs	r3, #0
 80197e4:	6063      	str	r3, [r4, #4]
 80197e6:	6923      	ldr	r3, [r4, #16]
 80197e8:	6023      	str	r3, [r4, #0]
 80197ea:	89a3      	ldrh	r3, [r4, #12]
 80197ec:	f043 0308 	orr.w	r3, r3, #8
 80197f0:	81a3      	strh	r3, [r4, #12]
 80197f2:	6923      	ldr	r3, [r4, #16]
 80197f4:	b94b      	cbnz	r3, 801980a <__swsetup_r+0x7a>
 80197f6:	89a3      	ldrh	r3, [r4, #12]
 80197f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80197fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019800:	d003      	beq.n	801980a <__swsetup_r+0x7a>
 8019802:	4621      	mov	r1, r4
 8019804:	4628      	mov	r0, r5
 8019806:	f000 f8b7 	bl	8019978 <__smakebuf_r>
 801980a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801980e:	f013 0201 	ands.w	r2, r3, #1
 8019812:	d00a      	beq.n	801982a <__swsetup_r+0x9a>
 8019814:	2200      	movs	r2, #0
 8019816:	60a2      	str	r2, [r4, #8]
 8019818:	6962      	ldr	r2, [r4, #20]
 801981a:	4252      	negs	r2, r2
 801981c:	61a2      	str	r2, [r4, #24]
 801981e:	6922      	ldr	r2, [r4, #16]
 8019820:	b942      	cbnz	r2, 8019834 <__swsetup_r+0xa4>
 8019822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019826:	d1c5      	bne.n	80197b4 <__swsetup_r+0x24>
 8019828:	bd38      	pop	{r3, r4, r5, pc}
 801982a:	0799      	lsls	r1, r3, #30
 801982c:	bf58      	it	pl
 801982e:	6962      	ldrpl	r2, [r4, #20]
 8019830:	60a2      	str	r2, [r4, #8]
 8019832:	e7f4      	b.n	801981e <__swsetup_r+0x8e>
 8019834:	2000      	movs	r0, #0
 8019836:	e7f7      	b.n	8019828 <__swsetup_r+0x98>
 8019838:	20000048 	.word	0x20000048

0801983c <_sbrk_r>:
 801983c:	b538      	push	{r3, r4, r5, lr}
 801983e:	4d06      	ldr	r5, [pc, #24]	@ (8019858 <_sbrk_r+0x1c>)
 8019840:	2300      	movs	r3, #0
 8019842:	4604      	mov	r4, r0
 8019844:	4608      	mov	r0, r1
 8019846:	602b      	str	r3, [r5, #0]
 8019848:	f7e9 f918 	bl	8002a7c <_sbrk>
 801984c:	1c43      	adds	r3, r0, #1
 801984e:	d102      	bne.n	8019856 <_sbrk_r+0x1a>
 8019850:	682b      	ldr	r3, [r5, #0]
 8019852:	b103      	cbz	r3, 8019856 <_sbrk_r+0x1a>
 8019854:	6023      	str	r3, [r4, #0]
 8019856:	bd38      	pop	{r3, r4, r5, pc}
 8019858:	20009274 	.word	0x20009274

0801985c <abort>:
 801985c:	b508      	push	{r3, lr}
 801985e:	2006      	movs	r0, #6
 8019860:	f000 f8ee 	bl	8019a40 <raise>
 8019864:	2001      	movs	r0, #1
 8019866:	f7e9 f891 	bl	800298c <_exit>

0801986a <_calloc_r>:
 801986a:	b570      	push	{r4, r5, r6, lr}
 801986c:	fba1 5402 	umull	r5, r4, r1, r2
 8019870:	b93c      	cbnz	r4, 8019882 <_calloc_r+0x18>
 8019872:	4629      	mov	r1, r5
 8019874:	f7fe ffe8 	bl	8018848 <_malloc_r>
 8019878:	4606      	mov	r6, r0
 801987a:	b928      	cbnz	r0, 8019888 <_calloc_r+0x1e>
 801987c:	2600      	movs	r6, #0
 801987e:	4630      	mov	r0, r6
 8019880:	bd70      	pop	{r4, r5, r6, pc}
 8019882:	220c      	movs	r2, #12
 8019884:	6002      	str	r2, [r0, #0]
 8019886:	e7f9      	b.n	801987c <_calloc_r+0x12>
 8019888:	462a      	mov	r2, r5
 801988a:	4621      	mov	r1, r4
 801988c:	f7fe f857 	bl	801793e <memset>
 8019890:	e7f5      	b.n	801987e <_calloc_r+0x14>

08019892 <__ascii_mbtowc>:
 8019892:	b082      	sub	sp, #8
 8019894:	b901      	cbnz	r1, 8019898 <__ascii_mbtowc+0x6>
 8019896:	a901      	add	r1, sp, #4
 8019898:	b142      	cbz	r2, 80198ac <__ascii_mbtowc+0x1a>
 801989a:	b14b      	cbz	r3, 80198b0 <__ascii_mbtowc+0x1e>
 801989c:	7813      	ldrb	r3, [r2, #0]
 801989e:	600b      	str	r3, [r1, #0]
 80198a0:	7812      	ldrb	r2, [r2, #0]
 80198a2:	1e10      	subs	r0, r2, #0
 80198a4:	bf18      	it	ne
 80198a6:	2001      	movne	r0, #1
 80198a8:	b002      	add	sp, #8
 80198aa:	4770      	bx	lr
 80198ac:	4610      	mov	r0, r2
 80198ae:	e7fb      	b.n	80198a8 <__ascii_mbtowc+0x16>
 80198b0:	f06f 0001 	mvn.w	r0, #1
 80198b4:	e7f8      	b.n	80198a8 <__ascii_mbtowc+0x16>

080198b6 <_realloc_r>:
 80198b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198ba:	4680      	mov	r8, r0
 80198bc:	4615      	mov	r5, r2
 80198be:	460c      	mov	r4, r1
 80198c0:	b921      	cbnz	r1, 80198cc <_realloc_r+0x16>
 80198c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198c6:	4611      	mov	r1, r2
 80198c8:	f7fe bfbe 	b.w	8018848 <_malloc_r>
 80198cc:	b92a      	cbnz	r2, 80198da <_realloc_r+0x24>
 80198ce:	f7fe ff47 	bl	8018760 <_free_r>
 80198d2:	2400      	movs	r4, #0
 80198d4:	4620      	mov	r0, r4
 80198d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198da:	f000 f8ef 	bl	8019abc <_malloc_usable_size_r>
 80198de:	4285      	cmp	r5, r0
 80198e0:	4606      	mov	r6, r0
 80198e2:	d802      	bhi.n	80198ea <_realloc_r+0x34>
 80198e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80198e8:	d8f4      	bhi.n	80198d4 <_realloc_r+0x1e>
 80198ea:	4629      	mov	r1, r5
 80198ec:	4640      	mov	r0, r8
 80198ee:	f7fe ffab 	bl	8018848 <_malloc_r>
 80198f2:	4607      	mov	r7, r0
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d0ec      	beq.n	80198d2 <_realloc_r+0x1c>
 80198f8:	42b5      	cmp	r5, r6
 80198fa:	462a      	mov	r2, r5
 80198fc:	4621      	mov	r1, r4
 80198fe:	bf28      	it	cs
 8019900:	4632      	movcs	r2, r6
 8019902:	f7fe f8b4 	bl	8017a6e <memcpy>
 8019906:	4621      	mov	r1, r4
 8019908:	4640      	mov	r0, r8
 801990a:	f7fe ff29 	bl	8018760 <_free_r>
 801990e:	463c      	mov	r4, r7
 8019910:	e7e0      	b.n	80198d4 <_realloc_r+0x1e>

08019912 <__ascii_wctomb>:
 8019912:	4603      	mov	r3, r0
 8019914:	4608      	mov	r0, r1
 8019916:	b141      	cbz	r1, 801992a <__ascii_wctomb+0x18>
 8019918:	2aff      	cmp	r2, #255	@ 0xff
 801991a:	d904      	bls.n	8019926 <__ascii_wctomb+0x14>
 801991c:	228a      	movs	r2, #138	@ 0x8a
 801991e:	601a      	str	r2, [r3, #0]
 8019920:	f04f 30ff 	mov.w	r0, #4294967295
 8019924:	4770      	bx	lr
 8019926:	700a      	strb	r2, [r1, #0]
 8019928:	2001      	movs	r0, #1
 801992a:	4770      	bx	lr

0801992c <__swhatbuf_r>:
 801992c:	b570      	push	{r4, r5, r6, lr}
 801992e:	460c      	mov	r4, r1
 8019930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019934:	2900      	cmp	r1, #0
 8019936:	b096      	sub	sp, #88	@ 0x58
 8019938:	4615      	mov	r5, r2
 801993a:	461e      	mov	r6, r3
 801993c:	da0d      	bge.n	801995a <__swhatbuf_r+0x2e>
 801993e:	89a3      	ldrh	r3, [r4, #12]
 8019940:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019944:	f04f 0100 	mov.w	r1, #0
 8019948:	bf14      	ite	ne
 801994a:	2340      	movne	r3, #64	@ 0x40
 801994c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019950:	2000      	movs	r0, #0
 8019952:	6031      	str	r1, [r6, #0]
 8019954:	602b      	str	r3, [r5, #0]
 8019956:	b016      	add	sp, #88	@ 0x58
 8019958:	bd70      	pop	{r4, r5, r6, pc}
 801995a:	466a      	mov	r2, sp
 801995c:	f000 f878 	bl	8019a50 <_fstat_r>
 8019960:	2800      	cmp	r0, #0
 8019962:	dbec      	blt.n	801993e <__swhatbuf_r+0x12>
 8019964:	9901      	ldr	r1, [sp, #4]
 8019966:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801996a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801996e:	4259      	negs	r1, r3
 8019970:	4159      	adcs	r1, r3
 8019972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019976:	e7eb      	b.n	8019950 <__swhatbuf_r+0x24>

08019978 <__smakebuf_r>:
 8019978:	898b      	ldrh	r3, [r1, #12]
 801997a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801997c:	079d      	lsls	r5, r3, #30
 801997e:	4606      	mov	r6, r0
 8019980:	460c      	mov	r4, r1
 8019982:	d507      	bpl.n	8019994 <__smakebuf_r+0x1c>
 8019984:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019988:	6023      	str	r3, [r4, #0]
 801998a:	6123      	str	r3, [r4, #16]
 801998c:	2301      	movs	r3, #1
 801998e:	6163      	str	r3, [r4, #20]
 8019990:	b003      	add	sp, #12
 8019992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019994:	ab01      	add	r3, sp, #4
 8019996:	466a      	mov	r2, sp
 8019998:	f7ff ffc8 	bl	801992c <__swhatbuf_r>
 801999c:	9f00      	ldr	r7, [sp, #0]
 801999e:	4605      	mov	r5, r0
 80199a0:	4639      	mov	r1, r7
 80199a2:	4630      	mov	r0, r6
 80199a4:	f7fe ff50 	bl	8018848 <_malloc_r>
 80199a8:	b948      	cbnz	r0, 80199be <__smakebuf_r+0x46>
 80199aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199ae:	059a      	lsls	r2, r3, #22
 80199b0:	d4ee      	bmi.n	8019990 <__smakebuf_r+0x18>
 80199b2:	f023 0303 	bic.w	r3, r3, #3
 80199b6:	f043 0302 	orr.w	r3, r3, #2
 80199ba:	81a3      	strh	r3, [r4, #12]
 80199bc:	e7e2      	b.n	8019984 <__smakebuf_r+0xc>
 80199be:	89a3      	ldrh	r3, [r4, #12]
 80199c0:	6020      	str	r0, [r4, #0]
 80199c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80199c6:	81a3      	strh	r3, [r4, #12]
 80199c8:	9b01      	ldr	r3, [sp, #4]
 80199ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80199ce:	b15b      	cbz	r3, 80199e8 <__smakebuf_r+0x70>
 80199d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199d4:	4630      	mov	r0, r6
 80199d6:	f000 f84d 	bl	8019a74 <_isatty_r>
 80199da:	b128      	cbz	r0, 80199e8 <__smakebuf_r+0x70>
 80199dc:	89a3      	ldrh	r3, [r4, #12]
 80199de:	f023 0303 	bic.w	r3, r3, #3
 80199e2:	f043 0301 	orr.w	r3, r3, #1
 80199e6:	81a3      	strh	r3, [r4, #12]
 80199e8:	89a3      	ldrh	r3, [r4, #12]
 80199ea:	431d      	orrs	r5, r3
 80199ec:	81a5      	strh	r5, [r4, #12]
 80199ee:	e7cf      	b.n	8019990 <__smakebuf_r+0x18>

080199f0 <_raise_r>:
 80199f0:	291f      	cmp	r1, #31
 80199f2:	b538      	push	{r3, r4, r5, lr}
 80199f4:	4605      	mov	r5, r0
 80199f6:	460c      	mov	r4, r1
 80199f8:	d904      	bls.n	8019a04 <_raise_r+0x14>
 80199fa:	2316      	movs	r3, #22
 80199fc:	6003      	str	r3, [r0, #0]
 80199fe:	f04f 30ff 	mov.w	r0, #4294967295
 8019a02:	bd38      	pop	{r3, r4, r5, pc}
 8019a04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019a06:	b112      	cbz	r2, 8019a0e <_raise_r+0x1e>
 8019a08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019a0c:	b94b      	cbnz	r3, 8019a22 <_raise_r+0x32>
 8019a0e:	4628      	mov	r0, r5
 8019a10:	f000 f852 	bl	8019ab8 <_getpid_r>
 8019a14:	4622      	mov	r2, r4
 8019a16:	4601      	mov	r1, r0
 8019a18:	4628      	mov	r0, r5
 8019a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a1e:	f000 b839 	b.w	8019a94 <_kill_r>
 8019a22:	2b01      	cmp	r3, #1
 8019a24:	d00a      	beq.n	8019a3c <_raise_r+0x4c>
 8019a26:	1c59      	adds	r1, r3, #1
 8019a28:	d103      	bne.n	8019a32 <_raise_r+0x42>
 8019a2a:	2316      	movs	r3, #22
 8019a2c:	6003      	str	r3, [r0, #0]
 8019a2e:	2001      	movs	r0, #1
 8019a30:	e7e7      	b.n	8019a02 <_raise_r+0x12>
 8019a32:	2100      	movs	r1, #0
 8019a34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019a38:	4620      	mov	r0, r4
 8019a3a:	4798      	blx	r3
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	e7e0      	b.n	8019a02 <_raise_r+0x12>

08019a40 <raise>:
 8019a40:	4b02      	ldr	r3, [pc, #8]	@ (8019a4c <raise+0xc>)
 8019a42:	4601      	mov	r1, r0
 8019a44:	6818      	ldr	r0, [r3, #0]
 8019a46:	f7ff bfd3 	b.w	80199f0 <_raise_r>
 8019a4a:	bf00      	nop
 8019a4c:	20000048 	.word	0x20000048

08019a50 <_fstat_r>:
 8019a50:	b538      	push	{r3, r4, r5, lr}
 8019a52:	4d07      	ldr	r5, [pc, #28]	@ (8019a70 <_fstat_r+0x20>)
 8019a54:	2300      	movs	r3, #0
 8019a56:	4604      	mov	r4, r0
 8019a58:	4608      	mov	r0, r1
 8019a5a:	4611      	mov	r1, r2
 8019a5c:	602b      	str	r3, [r5, #0]
 8019a5e:	f7e8 ffe5 	bl	8002a2c <_fstat>
 8019a62:	1c43      	adds	r3, r0, #1
 8019a64:	d102      	bne.n	8019a6c <_fstat_r+0x1c>
 8019a66:	682b      	ldr	r3, [r5, #0]
 8019a68:	b103      	cbz	r3, 8019a6c <_fstat_r+0x1c>
 8019a6a:	6023      	str	r3, [r4, #0]
 8019a6c:	bd38      	pop	{r3, r4, r5, pc}
 8019a6e:	bf00      	nop
 8019a70:	20009274 	.word	0x20009274

08019a74 <_isatty_r>:
 8019a74:	b538      	push	{r3, r4, r5, lr}
 8019a76:	4d06      	ldr	r5, [pc, #24]	@ (8019a90 <_isatty_r+0x1c>)
 8019a78:	2300      	movs	r3, #0
 8019a7a:	4604      	mov	r4, r0
 8019a7c:	4608      	mov	r0, r1
 8019a7e:	602b      	str	r3, [r5, #0]
 8019a80:	f7e8 ffe4 	bl	8002a4c <_isatty>
 8019a84:	1c43      	adds	r3, r0, #1
 8019a86:	d102      	bne.n	8019a8e <_isatty_r+0x1a>
 8019a88:	682b      	ldr	r3, [r5, #0]
 8019a8a:	b103      	cbz	r3, 8019a8e <_isatty_r+0x1a>
 8019a8c:	6023      	str	r3, [r4, #0]
 8019a8e:	bd38      	pop	{r3, r4, r5, pc}
 8019a90:	20009274 	.word	0x20009274

08019a94 <_kill_r>:
 8019a94:	b538      	push	{r3, r4, r5, lr}
 8019a96:	4d07      	ldr	r5, [pc, #28]	@ (8019ab4 <_kill_r+0x20>)
 8019a98:	2300      	movs	r3, #0
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	4608      	mov	r0, r1
 8019a9e:	4611      	mov	r1, r2
 8019aa0:	602b      	str	r3, [r5, #0]
 8019aa2:	f7e8 ff61 	bl	8002968 <_kill>
 8019aa6:	1c43      	adds	r3, r0, #1
 8019aa8:	d102      	bne.n	8019ab0 <_kill_r+0x1c>
 8019aaa:	682b      	ldr	r3, [r5, #0]
 8019aac:	b103      	cbz	r3, 8019ab0 <_kill_r+0x1c>
 8019aae:	6023      	str	r3, [r4, #0]
 8019ab0:	bd38      	pop	{r3, r4, r5, pc}
 8019ab2:	bf00      	nop
 8019ab4:	20009274 	.word	0x20009274

08019ab8 <_getpid_r>:
 8019ab8:	f7e8 bf4e 	b.w	8002958 <_getpid>

08019abc <_malloc_usable_size_r>:
 8019abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ac0:	1f18      	subs	r0, r3, #4
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	bfbc      	itt	lt
 8019ac6:	580b      	ldrlt	r3, [r1, r0]
 8019ac8:	18c0      	addlt	r0, r0, r3
 8019aca:	4770      	bx	lr

08019acc <_init>:
 8019acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ace:	bf00      	nop
 8019ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ad2:	bc08      	pop	{r3}
 8019ad4:	469e      	mov	lr, r3
 8019ad6:	4770      	bx	lr

08019ad8 <_fini>:
 8019ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ada:	bf00      	nop
 8019adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ade:	bc08      	pop	{r3}
 8019ae0:	469e      	mov	lr, r3
 8019ae2:	4770      	bx	lr
